Disassembly Listing for sampler_0.49.2
Generated From:
C:/Users/ryan/Documents/seniorproject/ps-040/dist/default/production/ps-040.production.elf
Feb 12, 2018 7:41:48 PM

---  C:/Users/ryan/Documents/seniorproject/ps-040/utilitites.c  -----------------------------------------
1:                 /*
2:                  General utilities, button and pot scanning
3:                  */
4:                 #include <xc.h>
5:                 #include <p33EP512GM310.h>
6:                 #include <dsp.h>
7:                 #include "common.h"
8:                 #include "sounds.h"
9:                 #include "flash.h"
10:                #include "screens.h"
11:                #include "utilities.h"
12:                
13:                extern enum fxStruct fxUnits[NUMFXUNITS];
14:                extern enum screenStruc state;
15:                extern struct ctrlsrfc ctrl;
16:                extern struct sflags stat;
17:                extern struct clip_psv sine, kick, snare;
18:                
19:                void scanButtons(void){
20:                    
21:                    static unsigned char pad_last[BUTTONS]={1};
22:                    int portrdG, portrdD, portrdF;
23:                
24:                    portrdG = PORTG;
007E6A  807313     MOV PORTG, W3
25:                    portrdD = PORTD;
007E6C  807191     MOV PORTD, W1
26:                    portrdF = PORTF;
007E6E  807292     MOV PORTF, W2
27:                    
28:                    ctrl.pad[34]=(portrdF>>7)&1;     // Special function button
007E70  DE9247     ASR W2, #7, W4
007E72  624261     AND.B W4, #0x1, W4
007E74  216585     MOV #0x1658, W5
007E76  784A84     MOV.B W4, [W5]
29:                    
30:                    if(ctrl.pad[34]){
007E78  320033     BRA Z, 0x7EE0
31:                        ctrl.pad[6]=(portrdF>>6)&1;
007E7A  DE92C6     ASR W2, #6, W5
007E7C  2163C4     MOV #0x163C, W4
007E7E  62CA61     AND.B W5, #0x1, [W4]
32:                        ctrl.pad[5]=(portrdF>>5)&1;
007E80  DE92C5     ASR W2, #5, W5
007E82  E90204     DEC W4, W4
007E84  62CA61     AND.B W5, #0x1, [W4]
33:                        ctrl.pad[4]=(portrdF>>4)&1;
007E86  DE9144     ASR W2, #4, W2
007E88  E90204     DEC W4, W4
007E8A  614A61     AND.B W2, #0x1, [W4]
34:                        ctrl.pad[0]=(portrdG)&1;
007E8C  520164     SUB W4, #0x4, W2
007E8E  61C961     AND.B W3, #0x1, [W2]
35:                        ctrl.pad[1]=(portrdG>>1)&1;
007E90  D18203     ASR W3, W4
007E92  E80102     INC W2, W2
007E94  624961     AND.B W4, #0x1, [W2]
36:                        ctrl.pad[2]=(portrdG>>2)&1;
007E96  DE9A42     ASR W3, #2, W4
007E98  E80102     INC W2, W2
007E9A  624961     AND.B W4, #0x1, [W2]
37:                        ctrl.pad[3]=(portrdG>>3)&1;
007E9C  DE9A43     ASR W3, #3, W4
007E9E  E80102     INC W2, W2
007EA0  624961     AND.B W4, #0x1, [W2]
38:                        ctrl.pad[16]=(portrdG>>10)&1;    // Encoder button
007EA2  DE9A4A     ASR W3, #10, W4
007EA4  41016D     ADD W2, #0xD, W2
007EA6  624961     AND.B W4, #0x1, [W2]
39:                        ctrl.pad[11]=(portrdG>>11)&1;
007EA8  DE9A4B     ASR W3, #11, W4
007EAA  510165     SUB W2, #0x5, W2
007EAC  624961     AND.B W4, #0x1, [W2]
40:                        ctrl.pad[12]=(portrdG>>12)&1;
007EAE  DE9A4C     ASR W3, #12, W4
007EB0  E80102     INC W2, W2
007EB2  624961     AND.B W4, #0x1, [W2]
41:                        ctrl.pad[13]=(portrdG>>13)&1;
007EB4  DE9A4D     ASR W3, #13, W4
007EB6  E80102     INC W2, W2
007EB8  624961     AND.B W4, #0x1, [W2]
42:                        ctrl.pad[14]=(portrdG>>14)&1;
007EBA  DE984E     ASR W3, #14, W0
007EBC  E80102     INC W2, W2
007EBE  604961     AND.B W0, #0x1, [W2]
43:                        ctrl.pad[15]=(portrdG>>15)&1;
007EC0  DE19CF     LSR W3, #15, W3
007EC2  E80002     INC W2, W0
007EC4  784803     MOV.B W3, [W0]
44:                        ctrl.pad[7]=(portrdD>>1)&1;
007EC6  D18101     ASR W1, W2
007EC8  500068     SUB W0, #0x8, W0
007ECA  614861     AND.B W2, #0x1, [W0]
45:                        ctrl.pad[8]=(portrdD>>2)&1;
007ECC  DE8942     ASR W1, #2, W2
007ECE  E80000     INC W0, W0
007ED0  614861     AND.B W2, #0x1, [W0]
46:                        ctrl.pad[9]=(portrdD>>3)&1;
007ED2  DE8943     ASR W1, #3, W2
007ED4  E80000     INC W0, W0
007ED6  614861     AND.B W2, #0x1, [W0]
47:                        ctrl.pad[10]=(portrdD>>4)&1;
007ED8  DE88C4     ASR W1, #4, W1
007EDA  E80000     INC W0, W0
007EDC  60C861     AND.B W1, #0x1, [W0]
007EDE  370032     BRA 0x7F44
48:                    } else {
49:                        ctrl.pad[23]=(portrdF>>6)&1;
007EE0  DE92C6     ASR W2, #6, W5
007EE2  2164D4     MOV #0x164D, W4
007EE4  62CA61     AND.B W5, #0x1, [W4]
50:                        ctrl.pad[22]=(portrdF>>5)&1;
007EE6  DE92C5     ASR W2, #5, W5
007EE8  E90204     DEC W4, W4
007EEA  62CA61     AND.B W5, #0x1, [W4]
51:                        ctrl.pad[21]=(portrdF>>4)&1;
007EEC  DE9144     ASR W2, #4, W2
007EEE  E90204     DEC W4, W4
007EF0  614A61     AND.B W2, #0x1, [W4]
52:                        ctrl.pad[17]=(portrdG)&1;
007EF2  520164     SUB W4, #0x4, W2
007EF4  61C961     AND.B W3, #0x1, [W2]
53:                        ctrl.pad[18]=(portrdG>>1)&1;
007EF6  D18203     ASR W3, W4
007EF8  E80102     INC W2, W2
007EFA  624961     AND.B W4, #0x1, [W2]
54:                        ctrl.pad[19]=(portrdG>>2)&1;
007EFC  DE9A42     ASR W3, #2, W4
007EFE  E80102     INC W2, W2
007F00  624961     AND.B W4, #0x1, [W2]
55:                        ctrl.pad[20]=(portrdG>>3)&1;
007F02  DE9A43     ASR W3, #3, W4
007F04  E80102     INC W2, W2
007F06  624961     AND.B W4, #0x1, [W2]
56:                        ctrl.pad[33]=(portrdG>>10)&1;    // Encoder button
007F08  DE9A4A     ASR W3, #10, W4
007F0A  41016D     ADD W2, #0xD, W2
007F0C  624961     AND.B W4, #0x1, [W2]
57:                        ctrl.pad[28]=(portrdG>>11)&1;
007F0E  DE9A4B     ASR W3, #11, W4
007F10  510165     SUB W2, #0x5, W2
007F12  624961     AND.B W4, #0x1, [W2]
58:                        ctrl.pad[29]=(portrdG>>12)&1;
007F14  DE9A4C     ASR W3, #12, W4
007F16  E80102     INC W2, W2
007F18  624961     AND.B W4, #0x1, [W2]
59:                        ctrl.pad[30]=(portrdG>>13)&1;
007F1A  DE9A4D     ASR W3, #13, W4
007F1C  E80102     INC W2, W2
007F1E  624961     AND.B W4, #0x1, [W2]
60:                        ctrl.pad[31]=(portrdG>>14)&1;
007F20  DE984E     ASR W3, #14, W0
007F22  E80102     INC W2, W2
007F24  604961     AND.B W0, #0x1, [W2]
61:                        ctrl.pad[32]=(portrdG>>15)&1;
007F26  DE19CF     LSR W3, #15, W3
007F28  E80002     INC W2, W0
007F2A  784803     MOV.B W3, [W0]
62:                        ctrl.pad[24]=(portrdD>>1)&1;
007F2C  D18101     ASR W1, W2
007F2E  500068     SUB W0, #0x8, W0
007F30  614861     AND.B W2, #0x1, [W0]
63:                        ctrl.pad[25]=(portrdD>>2)&1;
007F32  DE8942     ASR W1, #2, W2
007F34  E80000     INC W0, W0
007F36  614861     AND.B W2, #0x1, [W0]
64:                        ctrl.pad[26]=(portrdD>>3)&1;
007F38  DE8943     ASR W1, #3, W2
007F3A  E80000     INC W0, W0
007F3C  614861     AND.B W2, #0x1, [W0]
65:                        ctrl.pad[27]=(portrdD>>4)&1;
007F3E  DE88C4     ASR W1, #4, W1
007F40  E80000     INC W0, W0
007F42  60C861     AND.B W1, #0x1, [W0]
66:                    }
67:                    
68:                    // SAMPLE TRIGGERS 
69:                    if(ctrl.pad[0]==0){                                         //kick
70:                        //kick.playing=TRUE;
71:                    }
72:                    /*
73:                    if(controls.pad[2]==0&&hat_playing==FALSE){                                          //hat
74:                        hat_playing=TRUE;
75:                    }
76:                    */
77:                    if(ctrl.pad[1]==0&&snare.playing==FALSE){                                        //snare
78:                        //snare.playing=TRUE;
79:                    }
80:                }
007F44  060000     RETURN
81:                
82:                void readPots(void){
007F46  4787F2     ADD W15, #0x12, W15
007F48  BE9F88     MOV.D W8, [W15++]
007F4A  BE9F8A     MOV.D W10, [W15++]
007F4C  BE9F8C     MOV.D W12, [W15++]
007F4E  781F8E     MOV W14, [W15++]
007F50  F80022     PUSH ACCA
007F52  F80024     PUSH ACCAH
007F54  F80026     PUSH ACCAU
83:                    volatile register int result asm("A");
84:                    fractional pots_buf[POTS/2]; 
85:                    fractional pots_last[POTS/2];
86:                    static fractional pots_smoothed[POTS/2];
87:                    const fractional pot_alpha = 0x0F80;    //larger = rougher, lower = more latency
88:                    const fractional pot_alpha_inv = 32767-pot_alpha;
89:                    const unsigned int shift = 0xFE00;
90:                    int i;
91:                    _AD1IF = 0; // Clear conversion done status bit
007F56  A9A801     BCLR 0x801, #5
92:                    if(ctrl.pad[34])i=0;
007F5A  216580     MOV #0x1658, W0
007F5C  E00410     CP0.B [W0]
007F5E  320001     BRA Z, 0x7F62
007F60  EB0080     CLR W1
93:                    else i=POTS/2;
007F58  200061     MOV #0x6, W1
94:                    pots_buf[0]=(ADC1BUF5>>1)|0x7;
007F62  D5030A     LSR ADC1BUF5, WREG
007F64  780680     MOV W0, W13
007F66  B3007D     IOR #0x7, W13
95:                    pots_buf[1]=(ADC1BUF2>>1)|0x7;
007F68  D50304     LSR ADC1BUF2, WREG
007F6A  780600     MOV W0, W12
007F6C  B3007C     IOR #0x7, W12
96:                    pots_buf[2]=(ADC1BUF4>>1)|0x7;
007F6E  D50308     LSR ADC1BUF4, WREG
007F70  780580     MOV W0, W11
007F72  B3007B     IOR #0x7, W11
97:                    pots_buf[3]=(ADC1BUF1>>1)|0x7;
007F74  D50302     LSR ADC1BUF1, WREG
007F76  780200     MOV W0, W4
007F78  B30074     IOR #0x7, W4
007F7A  9FB7D4     MOV W4, [W15-22]
98:                    pots_buf[4]=(ADC1BUF3>>1)|0x7;
007F7C  D50306     LSR ADC1BUF3, WREG
007F7E  780280     MOV W0, W5
007F80  B30075     IOR #0x7, W5
007F82  9FB7C5     MOV W5, [W15-24]
99:                    pots_buf[5]=(ADC1BUF0>>1)|0x7;
007F84  D50300     LSR ADC1BUF0, WREG
007F86  780500     MOV W0, W10
007F88  B3007A     IOR #0x7, W10
100:                   
101:                   pots_last[0]=(pots_smoothed[0]&shift);
007F8A  224522     MOV #0x2452, W2
007F8C  2FE000     MOV #0xFE00, W0
007F8E  600312     AND W0, [W2], W6
007F90  9FB7B6     MOV W6, [W15-26]
102:                   pots_last[1]=(pots_smoothed[1]&shift);
007F92  E88482     INC2 W2, W9
007F94  600199     AND W0, [W9], W3
007F96  9FB7A3     MOV W3, [W15-28]
103:                   pots_last[2]=(pots_smoothed[2]&shift);
007F98  410464     ADD W2, #0x4, W8
007F9A  600218     AND W0, [W8], W4
007F9C  9FB794     MOV W4, [W15-30]
104:                   pots_last[3]=(pots_smoothed[3]&shift);
007F9E  4103E6     ADD W2, #0x6, W7
007FA0  600297     AND W0, [W7], W5
007FA2  9FB785     MOV W5, [W15-32]
105:                   pots_last[4]=(pots_smoothed[4]&shift);
007FA4  410368     ADD W2, #0x8, W6
007FA6  600316     AND W0, [W6], W6
007FA8  9FAFF6     MOV W6, [W15-34]
106:                   pots_last[5]=(pots_smoothed[5]&shift);
007FAA  4101EA     ADD W2, #0xA, W3
007FAC  600213     AND W0, [W3], W4
007FAE  9FAFE4     MOV W4, [W15-36]
107:                   
108:                   result =__builtin_mpy(pots_buf[0],pot_alpha, NULL, NULL, 0, NULL, NULL, 0);
007FB0  20F805     MOV #0xF80, W5
007FB2  78030D     MOV W13, W6
007FB4  C40113     MPY W5*W6, A
109:                   result =__builtin_mac(result, pots_smoothed[0], pot_alpha_inv, NULL, NULL, 0, NULL, NULL, 0, 0, result);
007FB6  780712     MOV [W2], W14
007FB8  2707F4     MOV #0x707F, W4
007FBA  78030E     MOV W14, W6
007FBC  C10112     MAC W4*W6, A
110:                   pots_smoothed[0]=__builtin_sac(result, 0);
007FBE  CC0012     SAC A, [W2]
111:                   result =__builtin_mpy(pots_buf[1],pot_alpha, NULL, NULL, 0, NULL, NULL, 0);
007FC0  78030C     MOV W12, W6
007FC2  C40113     MPY W5*W6, A
112:                   result =__builtin_mac(result, pots_smoothed[1], pot_alpha_inv, NULL, NULL, 0, NULL, NULL, 0, 0, result);
007FC4  780319     MOV [W9], W6
007FC6  C10112     MAC W4*W6, A
113:                   pots_smoothed[1]=__builtin_sac(result, 0);
007FC8  CC0019     SAC A, [W9]
114:                   result =__builtin_mpy(pots_buf[2],pot_alpha, NULL, NULL, 0, NULL, NULL, 0);
007FCA  78030B     MOV W11, W6
007FCC  C40113     MPY W5*W6, A
115:                   result =__builtin_mac(result, pots_smoothed[2], pot_alpha_inv, NULL, NULL, 0, NULL, NULL, 0, 0, result);
007FCE  780318     MOV [W8], W6
007FD0  C10112     MAC W4*W6, A
116:                   pots_smoothed[2]=__builtin_sac(result, 0);
007FD2  CC0018     SAC A, [W8]
117:                   result =__builtin_mpy(pots_buf[3],pot_alpha, NULL, NULL, 0, NULL, NULL, 0);
007FD4  97B35F     MOV [W15-22], W6
007FD6  C40113     MPY W5*W6, A
118:                   result =__builtin_mac(result, pots_smoothed[3], pot_alpha_inv, NULL, NULL, 0, NULL, NULL, 0, 0, result);
007FD8  780317     MOV [W7], W6
007FDA  C10112     MAC W4*W6, A
119:                   pots_smoothed[3]=__builtin_sac(result, 0);
007FDC  CC0017     SAC A, [W7]
120:                   result =__builtin_mpy(pots_buf[4],pot_alpha, NULL, NULL, 0, NULL, NULL, 0);
007FDE  97B34F     MOV [W15-24], W6
007FE0  C40113     MPY W5*W6, A
121:                   result =__builtin_mac(result, pots_smoothed[4], pot_alpha_inv, NULL, NULL, 0, NULL, NULL, 0, 0, result);
007FE2  410368     ADD W2, #0x8, W6
007FE4  780396     MOV [W6], W7
007FE6  C20112     MAC W4*W7, A
122:                   pots_smoothed[4]=__builtin_sac(result, 0);
007FE8  CC0016     SAC A, [W6]
123:                   result =__builtin_mpy(pots_buf[5],pot_alpha, NULL, NULL, 0, NULL, NULL, 0);
007FEA  78030A     MOV W10, W6
007FEC  C40113     MPY W5*W6, A
124:                   result =__builtin_mac(result, pots_smoothed[5], pot_alpha_inv, NULL, NULL, 0, NULL, NULL, 0, 0, result);
007FEE  780293     MOV [W3], W5
007FF0  C00112     MAC W4*W5, A
125:                   pots_smoothed[5]=__builtin_sac(result, 0);
007FF2  CC0004     SAC A, W4
007FF4  780984     MOV W4, [W3]
126:                   
127:                   if((pots_smoothed[0]&shift)!=pots_last[0]) 
007FF6  600012     AND W0, [W2], W0
007FF8  97B13F     MOV [W15-26], W2
007FFA  500F82     SUB W0, W2, [W15]
007FFC  320008     BRA Z, 0x800E
128:                       ctrl.pots[i]=pots_buf[0];
007FFE  B90961     MUL.SU W1, #1, W2
008000  410172     ADD W2, #0x12, W2
008002  4981E0     ADDC W3, #0x0, W3
008004  410102     ADD W2, W2, W2
008006  498183     ADDC W3, W3, W3
008008  216360     MOV #0x1636, W0
00800A  400102     ADD W0, W2, W2
00800C  78090D     MOV W13, [W2]
129:                   if((pots_smoothed[1]&shift)!=pots_last[1]) 
00800E  2FE000     MOV #0xFE00, W0
008010  224542     MOV #0x2454, W2
008012  600012     AND W0, [W2], W0
008014  97B1AF     MOV [W15-28], W3
008016  500F83     SUB W0, W3, [W15]
008018  320009     BRA Z, 0x802C
130:                       ctrl.pots[i+1]=pots_buf[1];
00801A  E80101     INC W1, W2
00801C  DE91CF     ASR W2, #15, W3
00801E  410172     ADD W2, #0x12, W2
008020  4981E0     ADDC W3, #0x0, W3
008022  410102     ADD W2, W2, W2
008024  498183     ADDC W3, W3, W3
008026  216360     MOV #0x1636, W0
008028  400002     ADD W0, W2, W0
00802A  78080C     MOV W12, [W0]
131:                   if((pots_smoothed[2]&shift)!=pots_last[2]) 
00802C  2FE000     MOV #0xFE00, W0
00802E  224562     MOV #0x2456, W2
008030  600012     AND W0, [W2], W0
008032  97B29F     MOV [W15-30], W5
008034  500F85     SUB W0, W5, [W15]
008036  320009     BRA Z, 0x804A
132:                       ctrl.pots[i+2]=pots_buf[2];
008038  E88101     INC2 W1, W2
00803A  DE91CF     ASR W2, #15, W3
00803C  410172     ADD W2, #0x12, W2
00803E  4981E0     ADDC W3, #0x0, W3
008040  410102     ADD W2, W2, W2
008042  498183     ADDC W3, W3, W3
008044  216360     MOV #0x1636, W0
008046  400002     ADD W0, W2, W0
008048  78080B     MOV W11, [W0]
133:                   if((pots_smoothed[3]&shift)!=pots_last[3]) 
00804A  2FE000     MOV #0xFE00, W0
00804C  224582     MOV #0x2458, W2
00804E  600012     AND W0, [W2], W0
008050  97B30F     MOV [W15-32], W6
008052  500F86     SUB W0, W6, [W15]
008054  32000A     BRA Z, 0x806A
134:                       ctrl.pots[i+3]=pots_buf[3];
008056  408163     ADD W1, #0x3, W2
008058  DE91CF     ASR W2, #15, W3
00805A  410172     ADD W2, #0x12, W2
00805C  4981E0     ADDC W3, #0x0, W3
00805E  410102     ADD W2, W2, W2
008060  498183     ADDC W3, W3, W3
008062  216360     MOV #0x1636, W0
008064  400002     ADD W0, W2, W0
008066  97B2DF     MOV [W15-22], W5
008068  780805     MOV W5, [W0]
135:                   if((pots_smoothed[4]&shift)!=pots_last[4]) 
00806A  2FE000     MOV #0xFE00, W0
00806C  2245A2     MOV #0x245A, W2
00806E  600012     AND W0, [W2], W0
008070  97AB7F     MOV [W15-34], W6
008072  500F86     SUB W0, W6, [W15]
008074  32000A     BRA Z, 0x808A
136:                       ctrl.pots[i+4]=pots_buf[4];
008076  408164     ADD W1, #0x4, W2
008078  DE91CF     ASR W2, #15, W3
00807A  410172     ADD W2, #0x12, W2
00807C  4981E0     ADDC W3, #0x0, W3
00807E  410102     ADD W2, W2, W2
008080  498183     ADDC W3, W3, W3
008082  216360     MOV #0x1636, W0
008084  400002     ADD W0, W2, W0
008086  97B2CF     MOV [W15-24], W5
008088  780805     MOV W5, [W0]
137:                   if((pots_smoothed[5]&shift)!=pots_last[5]) 
00808A  2FE000     MOV #0xFE00, W0
00808C  620200     AND W4, W0, W4
00808E  97AB6F     MOV [W15-36], W6
008090  520F86     SUB W4, W6, [W15]
008092  320009     BRA Z, 0x80A6
138:                       ctrl.pots[i+5]=pots_buf[5];     
008094  408065     ADD W1, #0x5, W0
008096  DE80CF     ASR W0, #15, W1
008098  400072     ADD W0, #0x12, W0
00809A  4880E0     ADDC W1, #0x0, W1
00809C  400000     ADD W0, W0, W0
00809E  488081     ADDC W1, W1, W1
0080A0  216362     MOV #0x1636, W2
0080A2  410080     ADD W2, W0, W1
0080A4  78088A     MOV W10, [W1]
139:               }
0080A6  F90026     POP ACCAU
0080A8  F90024     POP ACCAH
0080AA  F90022     POP ACCA
0080AC  78074F     MOV [--W15], W14
0080AE  BE064F     MOV.D [--W15], W12
0080B0  BE054F     MOV.D [--W15], W10
0080B2  BE044F     MOV.D [--W15], W8
0080B4  B1012F     SUB #0x12, W15
0080B6  060000     RETURN
140:               
141:               void scalePots(void){
0080B8  F80022     PUSH ACCA
0080BA  F80024     PUSH ACCAH
0080BC  F80026     PUSH ACCAU
142:                   /* Potentiometer scaling for fx or lcd display */
143:                   volatile register int scaled asm("A");
144:                   
145:                   scaled=__builtin_mpy(ctrl.pots[0],POT_PERCENT, NULL, NULL, 0, NULL, NULL, 0);
0080BE  232644     MOV #0x3264, W4
0080C0  80B2D5     MOV 0x165A, W5
0080C2  C00113     MPY W4*W5, A
146:                   ctrl.pots_scaled[0]=__builtin_sac(scaled, 7);
0080C4  216720     MOV #0x1672, W0
0080C6  CC0390     SAC A, #7, [W0]
147:                   scaled=__builtin_mpy(ctrl.pots[1],POT_PERCENT, NULL, NULL, 0, NULL, NULL, 0);
0080C8  80B2E5     MOV 0x165C, W5
0080CA  C00113     MPY W4*W5, A
148:                   ctrl.pots_scaled[1]=__builtin_sac(scaled, 7);
0080CC  E88000     INC2 W0, W0
0080CE  CC0390     SAC A, #7, [W0]
149:                   scaled=__builtin_mpy(ctrl.pots[2],POT_PERCENT, NULL, NULL, 0, NULL, NULL, 0);
0080D0  80B2F5     MOV 0x165E, W5
0080D2  C00113     MPY W4*W5, A
150:                   ctrl.pots_scaled[2]=__builtin_sac(scaled, 7);
0080D4  E88000     INC2 W0, W0
0080D6  CC0390     SAC A, #7, [W0]
151:                   scaled=__builtin_mpy(ctrl.pots[3],POT_PERCENT, NULL, NULL, 0, NULL, NULL, 0);
0080D8  80B305     MOV 0x1660, W5
0080DA  C00113     MPY W4*W5, A
152:                   ctrl.pots_scaled[3]=__builtin_sac(scaled, 7);
0080DC  E88000     INC2 W0, W0
0080DE  CC0390     SAC A, #7, [W0]
153:                   scaled=__builtin_mpy(ctrl.pots[4],POT_PERCENT, NULL, NULL, 0, NULL, NULL, 0);
0080E0  80B315     MOV 0x1662, W5
0080E2  C00113     MPY W4*W5, A
154:                   ctrl.pots_scaled[4]=__builtin_sac(scaled, 7);
0080E4  E88000     INC2 W0, W0
0080E6  CC0390     SAC A, #7, [W0]
155:                   scaled=__builtin_mpy(ctrl.pots[5],POT_PERCENT, NULL, NULL, 0, NULL, NULL, 0);
0080E8  80B325     MOV 0x1664, W5
0080EA  C00113     MPY W4*W5, A
156:                   ctrl.pots_scaled[5]=__builtin_sac(scaled, 7);
0080EC  E88000     INC2 W0, W0
0080EE  CC0390     SAC A, #7, [W0]
157:                   
158:                   scaled=__builtin_mpy(ctrl.pots[POT_FX_SELECT1],FXSCALE, NULL, NULL, 0, NULL, NULL, 0);
0080F0  200055     MOV #0x5, W5
0080F2  80B376     MOV 0x166E, W6
0080F4  C40113     MPY W5*W6, A
159:                   ctrl.pots_scaled[POT_FX_SELECT1]=__builtin_sac(scaled, 0);
0080F6  40006A     ADD W0, #0xA, W0
0080F8  CC0010     SAC A, [W0]
160:                   scaled=__builtin_mpy(ctrl.pots[POT_FX_SELECT2],FXSCALE, NULL, NULL, 0, NULL, NULL, 0);
0080FA  80B386     MOV 0x1670, W6
0080FC  C40113     MPY W5*W6, A
161:                   ctrl.pots_scaled[POT_FX_SELECT2]=__builtin_sac(scaled, 0);
0080FE  E88000     INC2 W0, W0
008100  CC0010     SAC A, [W0]
162:                   
163:                   scaled=__builtin_mpy(ctrl.pots[POT_VOLUME],POT_PERCENT, NULL, NULL, 0, NULL, NULL, 0);
008102  80B345     MOV 0x1668, W5
008104  C00113     MPY W4*W5, A
164:                   ctrl.pots_scaled[POT_VOLUME]=__builtin_sac(scaled, 0);
008106  500068     SUB W0, #0x8, W0
008108  CC0010     SAC A, [W0]
165:               }
00810A  F90026     POP ACCAU
00810C  F90024     POP ACCAH
00810E  F90022     POP ACCA
008110  060000     RETURN
166:               
167:               fractional scalePotsCustom(unsigned int steps, fractional scaleme){
008112  781F88     MOV W8, [W15++]
008114  F80022     PUSH ACCA
008116  F80024     PUSH ACCAH
008118  F80026     PUSH ACCAU
00811A  780100     MOV W0, W2
00811C  780401     MOV W1, W8
168:                   volatile register int scaled asm("A");
169:                   fractional scale = Q15(steps*0.000030518509476);
00811E  B81061     MUL.UU W2, #1, W0
008120  07C255     RCALL ___floatunsisf
008122  201002     MOV #0x100, W2
008124  238003     MOV #0x3800, W3
008126  07C2A7     RCALL ___mulsf3
008128  2FE002     MOV #0xFE00, W2
00812A  246FF3     MOV #0x46FF, W3
00812C  07C2A4     RCALL ___mulsf3
00812E  200002     MOV #0x0, W2
008130  23F003     MOV #0x3F00, W3
008132  07C1CE     RCALL ___addsf3
008134  07C22A     RCALL ___fixsfsi
170:                   
171:                   scaled=__builtin_mpy(scaleme,scale, NULL, NULL, 0, NULL, NULL, 0);
008136  780208     MOV W8, W4
008138  780280     MOV W0, W5
00813A  C00113     MPY W4*W5, A
172:                   return(__builtin_sac(scaled, 0));
00813C  CC0000     SAC A, W0
173:               }
00813E  F90026     POP ACCAU
008140  F90024     POP ACCAH
008142  F90022     POP ACCA
008144  78044F     MOV [--W15], W8
008146  060000     RETURN
174:               
175:               void changeFX(void){
176:                   fxUnits[0]=ctrl.pots_scaled[POT_FX_SELECT1];
008148  80B430     MOV 0x1686, W0
00814A  88B060     MOV W0, fxUnits
177:                   fxUnits[1]=ctrl.pots_scaled[POT_FX_SELECT2];
00814C  80B440     MOV 0x1688, W0
00814E  88B070     MOV W0, 0x160E
178:               }
008150  060000     RETURN
179:               
180:               void checkFunctions(){
181:                   //if
182:               }
008152  060000     RETURN
183:               
184:               void display(void){
185:                   scalePots();
008154  07FFB1     RCALL scalePots
186:                   changeFX();
008156  07FFF8     RCALL changeFX
187:                   // Update ui state logic here
188:                   state = (ENCODERCNTL/4)+1;
008158  800E30     MOV POS1CNTL, W0
00815A  DE0042     LSR W0, #2, W0
00815C  E80000     INC W0, W0
00815E  88B170     MOV W0, 0x162E
189:                   if(!ctrl.pad[BTN_ENC]) state = scrnSHIFT;
008160  216461     MOV #0x1646, W1
008162  E00411     CP0.B [W1]
008164  3A0003     BRA NZ, 0x816C
008166  200020     MOV #0x2, W0
008168  88B170     MOV W0, 0x162E
00816A  37001B     BRA 0x81A2
190:                   
191:                   if(state==debugscrnFLASH){
00816C  500FE4     SUB W0, #0x4, [W15]
00816E  3A0019     BRA NZ, 0x81A2
192:                       if(!ctrl.pad[33]) flashBulkErase();
008170  216570     MOV #0x1657, W0
008172  E00410     CP0.B [W0]
008174  3A0001     BRA NZ, 0x8178
008176  07FDB0     RCALL flashBulkErase
193:                       if(!ctrl.pad[3])flashWritePage(NULL, 0);
008178  216390     MOV #0x1639, W0
00817A  E00410     CP0.B [W0]
00817C  3A0003     BRA NZ, 0x8184
00817E  B81160     MUL.UU W2, #0, W2
008180  EB0000     CLR W0
008182  07FCC1     RCALL flashWritePage
194:                       if(!ctrl.pad[4])flashStartRead((long)(0));     // READBACK
008184  2163A0     MOV #0x163A, W0
008186  E00410     CP0.B [W0]
008188  3A0002     BRA NZ, 0x818E
00818A  B80060     MUL.UU W0, #0, W0
00818C  07FD0F     RCALL flashStartRead
195:                       if(!ctrl.pad[5])flashEraseSector((long)(0));
00818E  2163B0     MOV #0x163B, W0
008190  E00410     CP0.B [W0]
008192  3A0002     BRA NZ, 0x8198
008194  B80060     MUL.UU W0, #0, W0
008196  07FD68     RCALL flashEraseSector
196:                       if(!ctrl.pad[6])flashWriteReg(FLASH_WREN);
008198  2163C0     MOV #0x163C, W0
00819A  E00410     CP0.B [W0]
00819C  3A0002     BRA NZ, 0x81A2
00819E  B3C060     MOV.B #0x6, W0
0081A0  07FC6F     RCALL flashWriteReg
197:                   }
198:                   // Update screen here
199:                   checkFunctions();
200:                   screenUpdate();
0081A2  07FBEB     RCALL screenUpdate
201:                  
202:                  if(stat.UART_ON==TRUE){
0081A4  216300     MOV #0x1630, W0
0081A6  EBC080     SETM.B W1
0081A8  10CF90     SUBR.B W1, [W0], [W15]
0081AA  3A0002     BRA NZ, 0x81B0
203:                       U1TXREG = 0x61;
0081AC  200610     MOV #0x61, W0
0081AE  881120     MOV W0, U1TXREG
204:                   }
205:                  
206:                  SLED=~SLED;
0081B0  8072A0     MOV LATF, W0
0081B2  EA8000     COM W0, W0
0081B4  600061     AND W0, #0x1, W0
0081B6  8072A1     MOV LATF, W1
0081B8  A10001     BCLR W1, #0
0081BA  700081     IOR W0, W1, W1
0081BC  8872A1     MOV W1, LATF
207:               }
0081BE  060000     RETURN
208:               
209:               void processRxData(fractional *sourceBuffer, fractional *targetBuffer){
210:                   /* This procedure loops back the received data to the*/
211:                   /* the codec output. The user application could process*/
212:                   /* this data as per application requirements.*/
213:                   int index;
214:                   for(index = 0;index < STREAMBUF;index ++)
0081C0  EB0100     CLR W2
0081C2  201006     MOV #0x100, W6
0081D0  E80102     INC W2, W2
0081D2  510F86     SUB W2, W6, [W15]
0081D4  3AFFF7     BRA NZ, 0x81C4
215:                   {
216:                       targetBuffer[index] = sourceBuffer[index];
0081C4  B91261     MUL.SU W2, #1, W4
0081C6  420204     ADD W4, W4, W4
0081C8  4A8285     ADDC W5, W5, W5
0081CA  408184     ADD W1, W4, W3
0081CC  400204     ADD W0, W4, W4
0081CE  780994     MOV [W4], [W3]
217:                   }
218:               }
0081D6  060000     RETURN
219:               
220:               void ClipCopy_psv(int numElems, fractional * dstV, __psv__ fractional * srcV){
0081D8  781F88     MOV W8, [W15++]
0081DA  BE9F8A     MOV.D W10, [W15++]
0081DC  BE0202     MOV.D W2, W4
0081E4  B80D61     MUL.UU W1, #1, W10
0081E6  D00103     SL W3, W2
221:                   int i;
222:                   
223:                   for(i=0; i<numElems; i++){
0081DE  E00000     CP0 W0
0081E0  340013     BRA LE, 0x8208
0081E2  EB0180     CLR W3
008202  E80183     INC W3, W3
008204  518F80     SUB W3, W0, [W15]
008206  3AFFEF     BRA NZ, 0x81E6
224:                       *dstV++=*srcV++;
0081E8  41010A     ADD W2, W10, W2
0081EA  800198     MOV DSRPAG, W8
0081EC  780304     MOV W4, W6
0081EE  A4F006     BTSTS.C W6, #15
0081F0  D28385     RLC W5, W7
0081F2  880197     MOV W7, DSRPAG
0081F4  000000     NOP
0081F6  780316     MOV [W6], W6
0081F8  880198     MOV W8, DSRPAG
0081FA  000000     NOP
0081FC  780906     MOV W6, [W2]
0081FE  420262     ADD W4, #0x2, W4
008200  4A82E0     ADDC W5, #0x0, W5
225:                   }
226:               }
008208  BE054F     MOV.D [--W15], W10
00820A  78044F     MOV [--W15], W8
00820C  060000     RETURN
227:               
228:               void ClipCopy_eds(int numElems, fractional * dstV, __eds__ fractional * srcV){
00820E  BE9F88     MOV.D W8, [W15++]
008216  B80C61     MUL.UU W1, #1, W8
008218  D00304     SL W4, W6
229:                   int i;
230:                   
231:                   for(i=0; i<numElems; i++){
008210  E00000     CP0 W0
008212  340014     BRA LE, 0x823C
008214  EB0200     CLR W4
008236  E80204     INC W4, W4
008238  520F80     SUB W4, W0, [W15]
00823A  3AFFEE     BRA NZ, 0x8218
232:                       *dstV++=*srcV++;
00821A  430308     ADD W6, W8, W6
00821C  800195     MOV DSRPAG, W5
00821E  880193     MOV W3, DSRPAG
008220  000000     NOP
008222  780B12     MOV [W2], [W6]
008224  880195     MOV W5, DSRPAG
008226  000000     NOP
008228  780082     MOV W2, W1
00822A  B00022     ADD #0x2, W2
00822C  688082     XOR W1, W2, W1
00822E  AF6042     BTSC SR, #3
008230  A0F002     BSET W2, #15
008232  D28081     RLC W1, W1
008234  B08003     ADDC #0x0, W3
233:                   } 
234:               }
00823C  BE044F     MOV.D [--W15], W8
00823E  060000     RETURN
235:               
236:               void ClipCopy_toeds(int numElems, __eds__ fractional * dstV, fractional * srcV){
008240  BE9F88     MOV.D W8, [W15++]
008248  B80C61     MUL.UU W1, #1, W8
00824A  D00384     SL W4, W7
237:                   int i;
238:                   
239:                   for(i=0; i<numElems; i++){
008242  E00000     CP0 W0
008244  340012     BRA LE, 0x826A
008246  EB0200     CLR W4
008264  E80204     INC W4, W4
008266  520F80     SUB W4, W0, [W15]
008268  3AFFF0     BRA NZ, 0x824A
240:                       *dstV++=*srcV++;
00824C  438388     ADD W7, W8, W7
00824E  8001A5     MOV DSWPAG, W5
008250  8801A3     MOV W3, DSWPAG
008252  780917     MOV [W7], [W2]
008254  8801A5     MOV W5, DSWPAG
008256  780082     MOV W2, W1
008258  B00022     ADD #0x2, W2
00825A  688082     XOR W1, W2, W1
00825C  AF6042     BTSC SR, #3
00825E  A0F002     BSET W2, #15
008260  D28081     RLC W1, W1
008262  B08003     ADDC #0x0, W3
241:                   } 
242:               }
00826A  BE044F     MOV.D [--W15], W8
00826C  060000     RETURN
243:               
244:               //A blocking delay function. Not very accurate but good enough.
245:               void Delay_us(unsigned int delay)
246:               {
247:                   int i;
248:                   for (i = 0; i < delay; i++)
00826E  E00000     CP0 W0
008270  320006     BRA Z, 0x827E
008272  EB0080     CLR W1
008278  E80081     INC W1, W1
00827A  500F81     SUB W0, W1, [W15]
00827C  3EFFFB     BRA GTU, 0x8274
249:                   {
250:                       __asm__ volatile ("repeat #50");
008274  090032     REPEAT #0x32
251:                       __asm__ volatile ("nop");
008276  000000     NOP
252:                   }
253:               }
00827E  060000     RETURN
---  C:/Users/ryan/Documents/seniorproject/ps-040/sounds.c  ---------------------------------------------
1:                 /*
2:                  * File:   sounds.c
3:                  * Author: ThinkPad-OwnerX220
4:                  *
5:                  * Created on February 16, 2017, 2:48 PM
6:                  */
7:                 #include "xc.h"
8:                 #include "common.h"
9:                 #include "sounds.h"
10:                #include "dsp.h"
11:                
12:                fractional __attribute__((space(psv))) sintab[SINRES] = {
13:                     0,     201,     402,     603,     804,    1005,    1206,    1406,
14:                  1607,    1808,    2009,    2209,    2410,    2610,    2811,    3011,
15:                  3211,    3411,    3611,    3811,    4011,    4210,    4409,    4608,
16:                  4807,    5006,    5205,    5403,    5601,    5799,    5997,    6195,
17:                  6392,    6589,    6786,    6982,    7179,    7375,    7571,    7766,
18:                  7961,    8156,    8351,    8545,    8739,    8932,    9126,    9319,
19:                  9511,    9703,    9895,   10087,   10278,   10469,   10659,   10849,
20:                 11038,   11227,   11416,   11604,   11792,   11980,   12166,   12353,
21:                 12539,   12724,   12909,   13094,   13278,   13462,   13645,   13827,
22:                 14009,   14191,   14372,   14552,   14732,   14911,   15090,   15268,
23:                 15446,   15623,   15799,   15975,   16150,   16325,   16499,   16672,
24:                 16845,   17017,   17189,   17360,   17530,   17699,   17868,   18036,
25:                 18204,   18371,   18537,   18702,   18867,   19031,   19194,   19357,
26:                 19519,   19680,   19840,   20000,   20159,   20317,   20474,   20631,
27:                 20787,   20942,   21096,   21249,   21402,   21554,   21705,   21855,
28:                 22004,   22153,   22301,   22448,   22594,   22739,   22883,   23027,
29:                 23169,   23311,   23452,   23592,   23731,   23869,   24006,   24143,
30:                 24278,   24413,   24546,   24679,   24811,   24942,   25072,   25201,
31:                 25329,   25456,   25582,   25707,   25831,   25954,   26077,   26198,
32:                 26318,   26437,   26556,   26673,   26789,   26905,   27019,   27132,
33:                 27244,   27355,   27466,   27575,   27683,   27790,   27896,   28001,
34:                 28105,   28208,   28309,   28410,   28510,   28608,   28706,   28802,
35:                 28897,   28992,   29085,   29177,   29268,   29358,   29446,   29534,
36:                 29621,   29706,   29790,   29873,   29955,   30036,   30116,   30195,
37:                 30272,   30349,   30424,   30498,   30571,   30643,   30713,   30783,
38:                 30851,   30918,   30984,   31049,   31113,   31175,   31236,   31297,
39:                 31356,   31413,   31470,   31525,   31580,   31633,   31684,   31735,
40:                 31785,   31833,   31880,   31926,   31970,   32014,   32056,   32097,
41:                 32137,   32176,   32213,   32249,   32284,   32318,   32350,   32382,
42:                 32412,   32441,   32468,   32495,   32520,   32544,   32567,   32588,
43:                 32609,   32628,   32646,   32662,   32678,   32692,   32705,   32717,
44:                 32727,   32736,   32744,   32751,   32757,   32761,   32764,   32766,
45:                 32767,   32766,   32764,   32761,   32757,   32751,   32744,   32736,
46:                 32727,   32717,   32705,   32692,   32678,   32662,   32646,   32628,
47:                 32609,   32588,   32567,   32544,   32520,   32495,   32468,   32441,
48:                 32412,   32382,   32350,   32318,   32284,   32249,   32213,   32176,
49:                 32137,   32097,   32056,   32014,   31970,   31926,   31880,   31833,
50:                 31785,   31735,   31684,   31633,   31580,   31525,   31470,   31413,
51:                 31356,   31297,   31236,   31175,   31113,   31049,   30984,   30918,
52:                 30851,   30783,   30713,   30643,   30571,   30498,   30424,   30349,
53:                 30272,   30195,   30116,   30036,   29955,   29873,   29790,   29706,
54:                 29621,   29534,   29446,   29358,   29268,   29177,   29085,   28992,
55:                 28897,   28802,   28706,   28608,   28510,   28410,   28309,   28208,
56:                 28105,   28001,   27896,   27790,   27683,   27575,   27466,   27355,
57:                 27244,   27132,   27019,   26905,   26789,   26673,   26556,   26437,
58:                 26318,   26198,   26077,   25954,   25831,   25707,   25582,   25456,
59:                 25329,   25201,   25072,   24942,   24811,   24679,   24546,   24413,
60:                 24278,   24143,   24006,   23869,   23731,   23592,   23452,   23311,
61:                 23169,   23027,   22883,   22739,   22594,   22448,   22301,   22153,
62:                 22004,   21855,   21705,   21554,   21402,   21249,   21096,   20942,
63:                 20787,   20631,   20474,   20317,   20159,   20000,   19840,   19680,
64:                 19519,   19357,   19194,   19031,   18867,   18702,   18537,   18371,
65:                 18204,   18036,   17868,   17699,   17530,   17360,   17189,   17017,
66:                 16845,   16672,   16499,   16325,   16150,   15975,   15799,   15623,
67:                 15446,   15268,   15090,   14911,   14732,   14552,   14372,   14191,
68:                 14009,   13827,   13645,   13462,   13278,   13094,   12909,   12724,
69:                 12539,   12353,   12166,   11980,   11792,   11604,   11416,   11227,
70:                 11038,   10849,   10659,   10469,   10278,   10087,    9895,    9703,
71:                  9511,    9319,    9126,    8932,    8739,    8545,    8351,    8156,
72:                  7961,    7766,    7571,    7375,    7179,    6982,    6786,    6589,
73:                  6392,    6195,    5997,    5799,    5601,    5403,    5205,    5006,
74:                  4807,    4608,    4409,    4210,    4011,    3811,    3611,    3411,
75:                  3211,    3011,    2811,    2610,    2410,    2209,    2009,    1808,
76:                  1607,    1406,    1206,    1005,     804,     603,     402,     201,
77:                     0,    -201,    -402,    -603,    -804,   -1005,   -1206,   -1406,
78:                 -1607,   -1808,   -2009,   -2209,   -2410,   -2610,   -2811,   -3011,
79:                 -3211,   -3411,   -3611,   -3811,   -4011,   -4210,   -4409,   -4608,
80:                 -4807,   -5006,   -5205,   -5403,   -5601,   -5799,   -5997,   -6195,
81:                 -6392,   -6589,   -6786,   -6982,   -7179,   -7375,   -7571,   -7766,
82:                 -7961,   -8156,   -8351,   -8545,   -8739,   -8932,   -9126,   -9319,
83:                 -9511,   -9703,   -9895,  -10087,  -10278,  -10469,  -10659,  -10849,
84:                -11038,  -11227,  -11416,  -11604,  -11792,  -11980,  -12166,  -12353,
85:                -12539,  -12724,  -12909,  -13094,  -13278,  -13462,  -13645,  -13827,
86:                -14009,  -14191,  -14372,  -14552,  -14732,  -14911,  -15090,  -15268,
87:                -15446,  -15623,  -15799,  -15975,  -16150,  -16325,  -16499,  -16672,
88:                -16845,  -17017,  -17189,  -17360,  -17530,  -17699,  -17868,  -18036,
89:                -18204,  -18371,  -18537,  -18702,  -18867,  -19031,  -19194,  -19357,
90:                -19519,  -19680,  -19840,  -20000,  -20159,  -20317,  -20474,  -20631,
91:                -20787,  -20942,  -21096,  -21249,  -21402,  -21554,  -21705,  -21855,
92:                -22004,  -22153,  -22301,  -22448,  -22594,  -22739,  -22883,  -23027,
93:                -23169,  -23311,  -23452,  -23592,  -23731,  -23869,  -24006,  -24143,
94:                -24278,  -24413,  -24546,  -24679,  -24811,  -24942,  -25072,  -25201,
95:                -25329,  -25456,  -25582,  -25707,  -25831,  -25954,  -26077,  -26198,
96:                -26318,  -26437,  -26556,  -26673,  -26789,  -26905,  -27019,  -27132,
97:                -27244,  -27355,  -27466,  -27575,  -27683,  -27790,  -27896,  -28001,
98:                -28105,  -28208,  -28309,  -28410,  -28510,  -28608,  -28706,  -28802,
99:                -28897,  -28992,  -29085,  -29177,  -29268,  -29358,  -29446,  -29534,
100:               -29621,  -29706,  -29790,  -29873,  -29955,  -30036,  -30116,  -30195,
101:               -30272,  -30349,  -30424,  -30498,  -30571,  -30643,  -30713,  -30783,
102:               -30851,  -30918,  -30984,  -31049,  -31113,  -31175,  -31236,  -31297,
103:               -31356,  -31413,  -31470,  -31525,  -31580,  -31633,  -31684,  -31735,
104:               -31785,  -31833,  -31880,  -31926,  -31970,  -32014,  -32056,  -32097,
105:               -32137,  -32176,  -32213,  -32249,  -32284,  -32318,  -32350,  -32382,
106:               -32412,  -32441,  -32468,  -32495,  -32520,  -32544,  -32567,  -32588,
107:               -32609,  -32628,  -32646,  -32662,  -32678,  -32692,  -32705,  -32717,
108:               -32727,  -32736,  -32744,  -32751,  -32757,  -32761,  -32764,  -32766,
109:               -32767,  -32766,  -32764,  -32761,  -32757,  -32751,  -32744,  -32736,
110:               -32727,  -32717,  -32705,  -32692,  -32678,  -32662,  -32646,  -32628,
111:               -32609,  -32588,  -32567,  -32544,  -32520,  -32495,  -32468,  -32441,
112:               -32412,  -32382,  -32350,  -32318,  -32284,  -32249,  -32213,  -32176,
113:               -32137,  -32097,  -32056,  -32014,  -31970,  -31926,  -31880,  -31833,
114:               -31785,  -31735,  -31684,  -31633,  -31580,  -31525,  -31470,  -31413,
115:               -31356,  -31297,  -31236,  -31175,  -31113,  -31049,  -30984,  -30918,
116:               -30851,  -30783,  -30713,  -30643,  -30571,  -30498,  -30424,  -30349,
117:               -30272,  -30195,  -30116,  -30036,  -29955,  -29873,  -29790,  -29706,
118:               -29621,  -29534,  -29446,  -29358,  -29268,  -29177,  -29085,  -28992,
119:               -28897,  -28802,  -28706,  -28608,  -28510,  -28410,  -28309,  -28208,
120:               -28105,  -28001,  -27896,  -27790,  -27683,  -27575,  -27466,  -27355,
121:               -27244,  -27132,  -27019,  -26905,  -26789,  -26673,  -26556,  -26437,
122:               -26318,  -26198,  -26077,  -25954,  -25831,  -25707,  -25582,  -25456,
123:               -25329,  -25201,  -25072,  -24942,  -24811,  -24679,  -24546,  -24413,
124:               -24278,  -24143,  -24006,  -23869,  -23731,  -23592,  -23452,  -23311,
125:               -23169,  -23027,  -22883,  -22739,  -22594,  -22448,  -22301,  -22153,
126:               -22004,  -21855,  -21705,  -21554,  -21402,  -21249,  -21096,  -20942,
127:               -20787,  -20631,  -20474,  -20317,  -20159,  -20000,  -19840,  -19680,
128:               -19519,  -19357,  -19194,  -19031,  -18867,  -18702,  -18537,  -18371,
129:               -18204,  -18036,  -17868,  -17699,  -17530,  -17360,  -17189,  -17017,
130:               -16845,  -16672,  -16499,  -16325,  -16150,  -15975,  -15799,  -15623,
131:               -15446,  -15268,  -15090,  -14911,  -14732,  -14552,  -14372,  -14191,
132:               -14009,  -13827,  -13645,  -13462,  -13278,  -13094,  -12909,  -12724,
133:               -12539,  -12353,  -12166,  -11980,  -11792,  -11604,  -11416,  -11227,
134:               -11038,  -10849,  -10659,  -10469,  -10278,  -10087,   -9895,   -9703,
135:                -9511,   -9319,   -9126,   -8932,   -8739,   -8545,   -8351,   -8156,
136:                -7961,   -7766,   -7571,   -7375,   -7179,   -6982,   -6786,   -6589,
137:                -6392,   -6195,   -5997,   -5799,   -5601,   -5403,   -5205,   -5006,
138:                -4807,   -4608,   -4409,   -4210,   -4011,   -3811,   -3611,   -3411,
139:                -3211,   -3011,   -2811,   -2610,   -2410,   -2209,   -2009,   -1808,
140:                -1607,   -1406,   -1206,   -1005,    -804,    -603,    -402,    -201
141:               };
142:               
143:               
144:               void genSine(unsigned int size){
145:                   /*
146:                   long int counter=0;
147:                   for(; counter<size; counter++)
148:                       sintab[counter]=Q15(0.5);
149:                   */
150:                   
151:               }
008A5C  060000     RETURN
152:               
153:               fractional __attribute__((space(psv))) kicksamp[5552] = {-1, 3, -5, 6, -6, 5, -4, 3, -2, 2, -3, 3, -3, 3, -2, 1, -1, 1, -1, 1, -1, 1, 0, -1, 1, -1, 1, -1, 1, -1, 1, -1, -12, -49, -72, -26, 132, 337, 578, 813, 1029, 1202, 1334, 1425, 1472, 1501, 1469, 1438, 1379, 1328, 1269, 1219, 1160, 1107, 1062, 1037, 1044, 1066, 1113, 1167, 1197, 1225, 1192, 1142, 1026, 882, 702, 498, 284, 66, -161, -419, -722, -1087, -1515, -1991, -2511, -3042, -3581, -4092, -4567, -4994, -5360, -5668, -5909, -6102, -6234, -6326, -6368, -6385, -6362, -6325, -6260, -6176, -6079, -5957, -5825, -5677, -5504, -5322, -5107, -4882, -4635, -4390, -4128, -3866, -3580, -3281, -2946, -2589, -2195, -1767, -1312, -808, -293, 274, 825, 1423, 1995, 2597, 3189, 3791, 4385, 4987, 5577, 6174, 6749, 7328, 7886, 8429, 8966, 9467, 9965, 10417, 10859, 11272, 11669, 12031, 12370, 12672, 12946, 13178, 13386, 13547, 13684, 13787, 13846, 13892, 13887, 13868, 13812, 13731, 13620, 13485, 13324, 13140, 12928, 12687, 12415, 12115, 11780, 11428, 11054, 10668, 10272, 9871, 9460, 9060, 8646, 8243, 7834, 7425, 7019, 6605, 6195, 5779, 5356, 4936, 4500, 4075, 3628, 3190, 2737, 2287, 1829, 1370, 904, 440, -31, -496, -969, -1432, -1906, -2362, -2834, -3285, -3748, -4195, -4650, -5085, -5536, -5960, -6395, -6816, -7236, -7648, -8053, -8453, -8846, -9232, -9611, -9981, -10342, -10708, -11055, -11397, -11723, -12065, -12435, -12841, -13293, -13758, -14251, -14717, -15172, -15590, -15951, -16259, -16496, -16647, -16729, -16708, -16632, -16478, -16263, -15984, -15654, -15281, -14906, -14526, -14175, -13866, -13608, -13426, -13311, -13290, -13337, -13474, -13681, -13954, -14281, -14663, -15072, -15516, -15971, -16435, -16903, -17356, -17799, -18230, -18625, -19012, -19354, -19677, -19968, -20221, -20452, -20645, -20808, -20940, -21045, -21109, -21163, -21162, -21164, -21102, -21045, -20934, -20806, -20645, -20448, -20228, -19968, -19687, -19356, -19011, -18614, -18199, -17742, -17248, -16732, -16168, -15587, -14960, -14315, -13632, -12924, -12192, -11429, -10645, -9847, -9014, -8185, -7321, -6463, -5586, -4707, -3826, -2938, -2059, -1178, -299, 579, 1392, 2246, 3094, 3949, 4745, 5556, 6311, 7043, 7767, 8436, 9113, 9743, 10360, 10966, 11530, 12107, 12635, 13167, 13672, 14165, 14643, 15109, 15550, 15993, 16414, 16846, 17265, 17681, 18099, 18491, 18892, 19259, 19621, 19965, 20288, 20596, 20890, 21162, 21426, 21671, 21903, 22131, 22338, 22548, 22735, 22927, 23101, 23275, 23442, 23596, 23755, 23897, 24041, 24175, 24318, 24427, 24533, 24656, 24785, 24890, 25004, 25092, 25173, 25250, 25300, 25361, 25394, 25427, 25459, 25464, 25487, 25478, 25481, 25470, 25451, 25436, 25402, 25377, 25331, 25300, 25245, 25204, 25144, 25088, 25021, 24956, 24872, 24798, 24706, 24613, 24505, 24402, 24290, 24198, 24100, 24009, 23918, 23817, 23705, 23584, 23434, 23279, 23094, 22898, 22678, 22451, 22203, 21958, 21692, 21427, 21154, 20892, 20622, 20359, 20065, 19788, 19484, 19203, 18917, 18662, 18412, 18208, 18008, 17858, 17713, 17608, 17517, 17442, 17389, 17336, 17299, 17263, 17221, 17184, 17135, 17079, 17012, 16930, 16830, 16711, 16540, 16436, 16275, 16005, 15745, 15436, 15124, 14796, 14449, 14092, 13711, 13313, 12895, 12449, 11987, 11488, 10980, 10431, 9869, 9279, 8664, 8035, 7374, 6706, 6016, 5306, 4602, 3856, 3137, 2381, 1640, 891, 136, -609, -1351, -2096, -2818, -3543, -4252, -4941, -5637, -6289, -6959, -7580, -8215, -8807, -9405, -9967, -10531, -11061, -11590, -12094, -12590, -13068, -13533, -13986, -14428, -14853, -15281, -15681, -16091, -16480, -16866, -17251, -17611, -17985, -18332, -18683, -19025, -19353, -19683, -19999, -20306, -20614, -20897, -21194, -21471, -21753, -22028, -22298, -22557, -22814, -23048, -23282, -23500, -23693, -23896, -24057, -24231, -24375, -24514, -24640, -24754, -24862, -24951, -25048, -25109, -25198, -25239, -25313, -25342, -25396, -25420, -25450, -25467, -25481, -25480, -25488, -25461, -25465, -25418, -25406, -25354, -25314, -25265, -25198, -25142, -25067, -24993, -24914, -24824, -24737, -24641, -24535, -24449, -24340, -24226, -24082, -23986, -23911, -23814, -23727, -23611, -23493, -23367, -23221, -23082, -22929, -22775, -22623, -22463, -22305, -22156, -21989, -21847, -21683, -21538, -21386, -21234, -21097, -20944, -20808, -20666, -20527, -20392, -20255, -20122, -19989, -19859, -19727, -19601, -19466, -19344, -19209, -19084, -18954, -18820, -18691, -18560, -18419, -18296, -18125, -17998, -17899, -17743, -17552, -17343, -17140, -16942, -16753, -16565, -16389, -16198, -16026, -15822, -15637, -15416, -15203, -14959, -14711, -14439, -14146, -13840, -13502, -13156, -12776, -12382, -11952, -11515, -11045, -10568, -10065, -9543, -9005, -8433, -7854, -7229, -6604, -5932, -5263, -4554, -3846, -3110, -2377, -1620, -881, -116, 619, 1378, 2106, 2854, 3574, 4302, 5008, 5702, 6381, 7035, 7675, 8280, 8879, 9436, 9987, 10500, 11003, 11476, 11938, 12375, 12795, 13203, 13591, 13967, 14335, 14679, 15025, 15350, 15674, 15988, 16289, 16594, 16879, 17175, 17449, 17736, 18002, 18274, 18542, 18792, 19061, 19301, 19553, 19800, 20029, 20276, 20496, 20730, 20947, 21169, 21381, 21592, 21798, 21996, 22198, 22385, 22578, 22756, 22935, 23111, 23273, 23445, 23592, 23754, 23896, 24036, 24175, 24302, 24424, 24545, 24652, 24757, 24857, 24944, 25031, 25107, 25176, 25240, 25297, 25343, 25390, 25415, 25452, 25465, 25475, 25489, 25473, 25475, 25449, 25428, 25393, 25360, 25304, 25265, 25190, 25134, 25055, 24980, 24907, 24816, 24738, 24639, 24547, 24439, 24331, 24210, 24085, 23950, 23811, 23659, 23510, 23346, 23183, 23016, 22837, 22670, 22480, 22312, 22120, 21945, 21759, 21575, 21398, 21212, 21033, 20859, 20671, 20510, 20322, 20164, 19984, 19823, 19657, 19490, 19338, 19173, 19023, 18868, 18720, 18573, 18433, 18284, 18157, 18012, 17888, 17754, 17628, 17499, 17379, 17245, 17134, 16992, 16882, 16746, 16620, 16491, 16353, 16220, 16082, 15932, 15792, 15630, 15481, 15308, 15139, 14965, 14771, 14586, 14381, 14166, 13957, 13712, 13485, 13223, 12961, 12684, 12386, 12119, 11793, 11398, 11060, 10751, 10469, 10134, 9784, 9403, 8978, 8536, 8066, 7564, 7067, 6523, 5997, 5439, 4881, 4321, 3738, 3171, 2578, 2004, 1412, 829, 242, -338, -926, -1496, -2079, -2639, -3214, -3761, -4322, -4859, -5398, -5924, -6442, -6977, -7477, -7909, -8342, -8906, -9438, -9951, -10431, -10872, -11277, -11658, -12005, -12337, -12647, -12939, -13229, -13496, -13765, -14018, -14268, -14510, -14743, -14979, -15199, -15427, -15636, -15852, -16060, -16260, -16466, -16656, -16855, -17043, -17225, -17419, -17586, -17778, -17943, -18122, -18295, -18457, -18630, -18784, -18953, -19100, -19266, -19406, -19564, -19702, -19850, -19990, -20128, -20263, -20401, -20527, -20665, -20789, -20920, -21046, -21170, -21297, -21418, -21546, -21666, -21789, -21910, -22034, -22154, -22277, -22397, -22520, -22643, -22755, -22891, -22993, -23134, -23239, -23363, -23485, -23591, -23723, -23819, -23944, -24045, -24153, -24262, -24355, -24460, -24552, -24641, -24735, -24809, -24899, -24963, -25044, -25103, -25170, -25223, -25278, -25323, -25369, -25403, -25428, -25452, -25469, -25471, -25489, -25475, -25490, -25471, -25474, -25458, -25446, -25430, -25407, -25383, -25351, -25317, -25277, -25229, -25183, -25117, -25070, -24985, -24928, -24839, -24764, -24673, -24581, -24489, -24383, -24285, -24174, -24066, -23952, -23835, -23715, -23595, -23469, -23345, -23212, -23085, -22952, -22821, -22678, -22551, -22398, -22270, -22116, -21975, -21826, -21679, -21534, -21387, -21241, -21098, -20953, -20812, -20668, -20525, -20380, -20235, -20085, -19938, -19784, -19631, -19476, -19317, -19158, -18996, -18835, -18667, -18506, -18337, -18170, -18008, -17831, -17674, -17496, -17332, -17156, -16984, -16808, -16628, -16449, -16262, -16074, -15884, -15685, -15487, -15281, -15069, -14860, -14632, -14414, -14179, -13941, -13699, -13449, -13197, -12935, -12665, -12393, -12098, -11813, -11499, -11188, -10866, -10523, -10188, -9824, -9466, -9087, -8711, -8311, -7922, -7503, -7097, -6674, -6247, -5817, -5374, -4941, -4488, -4047, -3589, -3138, -2684, -2222, -1764, -1316, -864, -412, 125, 555, 944, 1339, 1745, 2163, 2604, 3043, 3510, 3963, 4437, 4900, 5363, 5832, 6277, 6736, 7170, 7612, 8036, 8452, 8867, 9263, 9655, 10041, 10405, 10775, 11120, 11467, 11795, 12119, 12428, 12733, 13023, 13306, 13577, 13840, 14096, 14338, 14578, 14798, 15024, 15229, 15431, 15629, 15802, 15993, 16146, 16323, 16452, 16666, 16753, 16804, 16991, 17158, 17332, 17479, 17598, 17712, 17777, 17860, 17899, 17951, 17987, 18015, 18051, 18073, 18102, 18133, 18158, 18195, 18217, 18263, 18291, 18334, 18383, 18416, 18482, 18523, 18586, 18645, 18702, 18772, 18839, 18910, 18990, 19066, 19148, 19242, 19320, 19430, 19506, 19619, 19708, 19812, 19913, 20010, 20116, 20211, 20316, 20411, 20511, 20608, 20701, 20798, 20891, 20978, 21076, 21154, 21250, 21328, 21419, 21496, 21582, 21657, 21742, 21814, 21896, 21971, 22046, 22125, 22197, 22273, 22349, 22423, 22497, 22575, 22647, 22724, 22798, 22878, 22947, 23034, 23103, 23185, 23266, 23337, 23427, 23496, 23585, 23662, 23741, 23829, 23898, 23992, 24059, 24147, 24222, 24296, 24379, 24446, 24526, 24593, 24663, 24732, 24798, 24858, 24925, 24972, 25041, 25081, 25140, 25182, 25227, 25267, 25305, 25336, 25371, 25391, 25422, 25435, 25456, 25467, 25474, 25484, 25480, 25482, 25477, 25464, 25456, 25435, 25417, 25394, 25362, 25339, 25295, 25266, 25217, 25177, 25127, 25077, 25020, 24963, 24906, 24833, 24780, 24694, 24634, 24555, 24474, 24404, 24305, 24238, 24135, 24061, 23957, 23873, 23774, 23678, 23584, 23479, 23376, 23275, 23159, 23060, 22948, 22838, 22744, 22619, 22541, 22411, 22331, 22217, 22119, 22025, 21918, 21818, 21723, 21609, 21523, 21401, 21311, 21197, 21096, 20990, 20883, 20777, 20669, 20565, 20452, 20350, 20235, 20134, 20017, 19916, 19796, 19697, 19573, 19474, 19350, 19244, 19124, 19013, 18895, 18782, 18662, 18546, 18422, 18303, 18178, 18049, 17926, 17785, 17655, 17513, 17363, 17225, 17063, 16908, 16752, 16568, 16415, 16216, 16041, 15847, 15646, 15446, 15231, 15013, 14788, 14550, 14312, 14062, 13802, 13542, 13267, 12984, 12700, 12401, 12099, 11791, 11466, 11145, 10808, 10466, 10122, 9763, 9401, 9040, 8656, 8286, 7895, 7503, 7115, 6702, 6310, 5890, 5488, 5072, 4656, 4242, 3820, 3396, 2976, 2537, 2113, 1678, 1238, 807, 362, -73, -508, -952, -1378, -1822, -2244, -2677, -3107, -3509, -3918, -4389, -4798, -5160, -5531, -5905, -6276, -6662, -7044, -7437, -7821, -8212, -8604, -8980, -9369, -9735, -10117, -10469, -10841, -11181, -11536, -11869, -12205, -12532, -12851, -13161, -13475, -13764, -14067, -14345, -14629, -14900, -15166, -15427, -15682, -15924, -16170, -16400, -16629, -16850, -17062, -17275, -17472, -17672, -17859, -18043, -18220, -18388, -18556, -18710, -18867, -19009, -19152, -19281, -19417, -19528, -19655, -19755, -19865, -19962, -20053, -20146, -20218, -20305, -20368, -20439, -20496, -20555, -20607, -20653, -20696, -20736, -20768, -20802, -20832, -20876, -20872, -20834, -20907, -20958, -21007, -21042, -21065, -21065, -21071, -21048, -21040, -21012, -20989, -20969, -20939, -20920, -20897, -20880, -20863, -20848, -20836, -20829, -20821, -20822, -20817, -20826, -20833, -20850, -20860, -20890, -20905, -20946, -20968, -21012, -21044, -21094, -21132, -21188, -21233, -21291, -21346, -21399, -21466, -21520, -21590, -21653, -21718, -21793, -21855, -21934, -22005, -22078, -22160, -22228, -22317, -22387, -22475, -22550, -22637, -22715, -22803, -22884, -22970, -23051, -23144, -23215, -23315, -23385, -23476, -23561, -23638, -23728, -23803, -23887, -23968, -24044, -24125, -24200, -24273, -24353, -24416, -24496, -24559, -24626, -24695, -24754, -24815, -24879, -24923, -24994, -25028, -25088, -25129, -25174, -25216, -25254, -25286, -25324, -25349, -25379, -25401, -25423, -25440, -25456, -25464, -25479, -25479, -25485, -25483, -25478, -25474, -25461, -25451, -25433, -25416, -25392, -25370, -25341, -25313, -25276, -25245, -25202, -25162, -25122, -25067, -25031, -24966, -24929, -24856, -24814, -24741, -24690, -24619, -24559, -24486, -24422, -24349, -24276, -24208, -24127, -24057, -23976, -23899, -23823, -23737, -23667, -23575, -23501, -23415, -23330, -23255, -23159, -23087, -22993, -22915, -22826, -22743, -22656, -22574, -22482, -22405, -22311, -22230, -22142, -22051, -21972, -21875, -21796, -21706, -21618, -21540, -21446, -21369, -21279, -21193, -21116, -21019, -20946, -20851, -20768, -20681, -20595, -20502, -20422, -20321, -20242, -20142, -20054, -19964, -19864, -19780, -19674, -19588, -19481, -19383, -19284, -19173, -19073, -18956, -18845, -18730, -18609, -18484, -18363, -18223, -18096, -17952, -17808, -17661, -17505, -17347, -17183, -17014, -16838, -16657, -16474, -16276, -16084, -15878, -15668, -15453, -15232, -15001, -14776, -14526, -14290, -14035, -13780, -13519, -13250, -12979, -12698, -12420, -12129, -11836, -11543, -11235, -10939, -10618, -10314, -9985, -9676, -9336, -9022, -8673, -8353, -8000, -7668, -7315, -6974, -6616, -6268, -5908, -5554, -5192, -4831, -4465, -4103, -3733, -3367, -2995, -2626, -2252, -1881, -1505, -1132, -756, -384, -4, 365, 747, 1110, 1495, 1855, 2241, 2598, 2981, 3335, 3715, 4067, 4440, 4795, 5156, 5513, 5866, 6221, 6571, 6915, 7264, 7602, 7947, 8278, 8618, 8943, 9275, 9593, 9914, 10251, 10578, 10874, 11164, 11456, 11745, 12046, 12340, 12641, 12943, 13240, 13533, 13838, 14117, 14417, 14694, 14980, 15255, 15532, 15795, 16066, 16321, 16579, 16831, 17072, 17322, 17547, 17789, 18010, 18236, 18450, 18664, 18869, 19075, 19271, 19464, 19654, 19834, 20020, 20186, 20365, 20519, 20690, 20831, 20993, 21123, 21275, 21399, 21538, 21660, 21789, 21908, 22030, 22143, 22261, 22365, 22479, 22574, 22677, 22772, 22866, 22951, 23043, 23116, 23205, 23275, 23350, 23422, 23487, 23555, 23616, 23679, 23732, 23796, 23841, 23903, 23945, 23999, 24044, 24089, 24139, 24175, 24226, 24262, 24304, 24345, 24378, 24420, 24453, 24490, 24529, 24553, 24596, 24618, 24656, 24680, 24715, 24730, 24773, 24777, 24823, 24828, 24859, 24876, 24890, 24910, 24928, 24936, 24959, 24957, 24982, 24977, 24994, 24992, 25001, 25002, 25004, 25002, 25026, 24981, 24958, 24984, 25008, 25018, 25024, 25025, 25007, 24995, 24967, 24941, 24913, 24876, 24849, 24810, 24783, 24745, 24719, 24685, 24655, 24631, 24599, 24579, 24554, 24530, 24517, 24494, 24485, 24468, 24460, 24449, 24446, 24442, 24439, 24442, 24439, 24448, 24449, 24457, 24469, 24472, 24498, 24499, 24529, 24538, 24564, 24591, 24605, 24646, 24657, 24697, 24722, 24748, 24788, 24807, 24849, 24872, 24905, 24937, 24968, 24995, 25030, 25053, 25091, 25112, 25144, 25172, 25195, 25225, 25248, 25269, 25301, 25311, 25346, 25352, 25381, 25395, 25407, 25429, 25433, 25455, 25455, 25472, 25471, 25481, 25482, 25481, 25486, 25476, 25480, 25463, 25464, 25451, 25435, 25430, 25403, 25395, 25368, 25348, 25326, 25295, 25274, 25237, 25212, 25173, 25140, 25102, 25064, 25020, 24984, 24931, 24894, 24842, 24794, 24747, 24690, 24643, 24587, 24527, 24479, 24411, 24360, 24295, 24239, 24170, 24116, 24041, 23989, 23916, 23854, 23786, 23722, 23652, 23587, 23514, 23450, 23378, 23308, 23242, 23166, 23100, 23024, 22955, 22882, 22808, 22733, 22659, 22578, 22506, 22417, 22345, 22250, 22179, 22077, 22000, 21900, 21810, 21714, 21613, 21509, 21411, 21292, 21193, 21064, 20961, 20830, 20712, 20581, 20448, 20318, 20177, 20037, 19893, 19744, 19594, 19440, 19282, 19122, 18957, 18788, 18615, 18445, 18259, 18094, 17900, 17731, 17541, 17357, 17180, 16980, 16807, 16606, 16422, 16227, 16034, 15835, 15641, 15435, 15242, 15029, 14833, 14616, 14415, 14202, 13988, 13779, 13560, 13343, 13128, 12901, 12684, 12458, 12230, 12006, 11776, 11538, 11314, 11068, 10841, 10591, 10359, 10108, 9866, 9616, 9365, 9113, 8861, 8599, 8349, 8079, 7824, 7554, 7289, 7019, 6750, 6478, 6204, 5925, 5650, 5365, 5090, 4805, 4520, 4237, 3946, 3659, 3374, 3074, 2791, 2495, 2200, 1910, 1609, 1319, 1022, 723, 432, 127, -160, -465, -757, -1052, -1353, -1642, -1943, -2234, -2528, -2823, -3112, -3404, -3694, -3983, -4271, -4557, -4843, -5128, -5407, -5696, -5964, -6259, -6518, -6810, -7073, -7351, -7618, -7889, -8153, -8424, -8679, -8951, -9199, -9471, -9714, -9980, -10223, -10479, -10727, -10969, -11219, -11458, -11696, -11942, -12168, -12412, -12635, -12870, -13097, -13319, -13550, -13763, -13984, -14205, -14409, -14636, -14829, -15049, -15248, -15452, -15656, -15848, -16049, -16239, -16435, -16619, -16812, -16993, -17177, -17356, -17537, -17708, -17891, -18052, -18228, -18395, -18554, -18727, -18877, -19044, -19195, -19351, -19504, -19652, -19797, -19946, -20081, -20228, -20360, -20490, -20635, -20746, -20888, -21003, -21125, -21247, -21356, -21475, -21582, -21690, -21795, -21898, -21995, -22092, -22187, -22273, -22368, -22444, -22530, -22612, -22683, -22765, -22828, -22905, -22970, -23034, -23099, -23162, -23210, -23285, -23314, -23387, -23440, -23497, -23538, -23563, -23613, -23636, -23689, -23723, -23771, -23815, -23862, -23904, -23956, -23990, -24044, -24080, -24123, -24170, -24201, -24250, -24283, -24319, -24363, -24388, -24429, -24460, -24491, -24523, -24555, -24578, -24616, -24632, -24668, -24686, -24714, -24736, -24756, -24781, -24796, -24823, -24833, -24857, -24868, -24888, -24899, -24916, -24927, -24942, -24954, -24966, -24978, -24989, -24997, -25012, -25018, -25029, -25040, -25046, -25060, -25064, -25076, -25077, -25094, -25094, -25110, -25108, -25123, -25124, -25137, -25141, -25145, -25161, -25155, -25176, -25170, -25183, -25193, -25190, -25213, -25204, -25222, -25225, -25232, -25242, -25249, -25256, -25265, -25269, -25278, -25292, -25289, -25311, -25308, -25322, -25332, -25332, -25350, -25350, -25365, -25365, -25378, -25387, -25390, -25404, -25401, -25417, -25419, -25429, -25429, -25443, -25438, -25455, -25450, -25461, -25460, -25467, -25466, -25474, -25472, -25475, -25478, -25477, -25477, -25479, -25473, -25477, -25471, -25471, -25464, -25483, -25465, -25418, -25427, -25456, -25462, -25482, -25475, -25477, -25456, -25446, -25416, -25402, -25364, -25349, -25313, -25288, -25265, -25228, -25213, -25178, -25156, -25133, -25106, -25084, -25066, -25039, -25022, -25005, -24982, -24974, -24950, -24938, -24928, -24908, -24904, -24885, -24877, -24870, -24852, -24854, -24831, -24833, -24817, -24810, -24801, -24792, -24778, -24777, -24753, -24757, -24729, -24729, -24702, -24700, -24672, -24666, -24637, -24628, -24593, -24587, -24546, -24535, -24499, -24473, -24439, -24414, -24372, -24344, -24302, -24263, -24226, -24175, -24140, -24079, -24045, -23984, -23935, -23878, -23820, -23760, -23699, -23629, -23568, -23492, -23426, -23346, -23270, -23185, -23107, -23015, -22929, -22835, -22741, -22641, -22540, -22431, -22331, -22210, -22107, -21975, -21864, -21733, -21605, -21479, -21338, -21205, -21060, -20920, -20773, -20620, -20474, -20311, -20161, -19997, -19833, -19671, -19502, -19333, -19163, -18989, -18813, -18639, -18457, -18281, -18096, -17918, -17727, -17551, -17352, -17179, -16977, -16795, -16604, -16405, -16225, -16018, -15832, -15633, -15435, -15241, -15041, -14837, -14646, -14431, -14243, -14025, -13829, -13618, -13408, -13203, -12986, -12780, -12560, -12353, -12125, -11921, -11686, -11475, -11247, -11021, -10804, -10562, -10347, -10103, -9877, -9645, -9399, -9175, -8923, -8687, -8446, -8193, -7959, -7700, -7459, -7204, -6950, -6700, -6444, -6184, -5929, -5665, -5410, -5140, -4884, -4615, -4353, -4082, -3815, -3548, -3278, -3009, -2738, -2464, -2195, -1920, -1650, -1374, -1102, -829, -551, -285, 0, 258, 548, 807, 1090, 1353, 1632, 1898, 2173, 2437, 2714, 2973, 3245, 3513, 3773, 4047, 4300, 4569, 4831, 5084, 5353, 5601, 5865, 6118, 6369, 6629, 6873, 7132, 7373, 7628, 7868, 8120, 8359, 8606, 8844, 9084, 9326, 9554, 9803, 10023, 10263, 10495, 10716, 10957, 11170, 11403, 11625, 11845, 12065, 12288, 12497, 12722, 12925, 13148, 13346, 13568, 13762, 13978, 14173, 14379, 14577, 14775, 14975, 15165, 15363, 15552, 15740, 15933, 16112, 16301, 16482, 16660, 16843, 17017, 17193, 17368, 17536, 17708, 17877, 18036, 18212, 18359, 18539, 18678, 18848, 18997, 19152, 19307, 19451, 19602, 19749, 19891, 20034, 20178, 20311, 20452, 20586, 20711, 20856, 20968, 21112, 21222, 21356, 21469, 21593, 21705, 21822, 21932, 22046, 22150, 22259, 22362, 22462, 22564, 22659, 22756, 22846, 22940, 23026, 23115, 23199, 23279, 23363, 23438, 23516, 23589, 23662, 23733, 23803, 23865, 23934, 23992, 24059, 24115, 24172, 24234, 24277, 24346, 24381, 24446, 24485, 24536, 24582, 24625, 24673, 24709, 24757, 24791, 24831, 24873, 24901, 24945, 24973, 25005, 25044, 25064, 25104, 25123, 25143, 25199, 25216, 25234, 25244, 25248, 25274, 25278, 25305, 25319, 25340, 25358, 25379, 25392, 25413, 25424, 25439, 25451, 25459, 25469, 25473, 25482, 25480, 25483, 25482, 25477, 25474, 25466, 25455, 25449, 25430, 25421, 25401, 25385, 25362, 25346, 25316, 25301, 25264, 25248, 25210, 25187, 25157, 25120, 25094, 25053, 25027, 24984, 24952, 24913, 24877, 24837, 24799, 24759, 24717, 24680, 24635, 24595, 24553, 24508, 24466, 24421, 24377, 24334, 24285, 24242, 24193, 24146, 24101, 24047, 24008, 23947, 23907, 23852, 23800, 23754, 23694, 23648, 23588, 23540, 23483, 23429, 23371, 23316, 23258, 23201, 23142, 23081, 23026, 22961, 22906, 22839, 22781, 22718, 22652, 22595, 22523, 22469, 22396, 22336, 22270, 22204, 22138, 22074, 22005, 21942, 21873, 21806, 21741, 21672, 21610, 21538, 21474, 21405, 21339, 21271, 21203, 21139, 21067, 21007, 20930, 20874, 20798, 20735, 20668, 20598, 20535, 20459, 20423, 20330, 20231, 20183, 20135, 20095, 20042, 19986, 19921, 19852, 19776, 19704, 19622, 19545, 19467, 19385, 19312, 19227, 19158, 19076, 19009, 18932, 18861, 18794, 18720, 18662, 18589, 18534, 18463, 18413, 18348, 18294, 18241, 18182, 18139, 18078, 18037, 17984, 17940, 17889, 17850, 17799, 17762, 17717, 17672, 17637, 17588, 17556, 17506, 17476, 17428, 17392, 17348, 17311, 17267, 17228, 17184, 17143, 17097, 17057, 17009, 16966, 16918, 16874, 16820, 16778, 16719, 16674, 16617, 16564, 16507, 16451, 16392, 16330, 16273, 16207, 16142, 16079, 16007, 15943, 15868, 15797, 15723, 15649, 15569, 15495, 15406, 15334, 15242, 15160, 15078, 14979, 14902, 14801, 14710, 14620, 14513, 14430, 14316, 14226, 14119, 14015, 13912, 13801, 13696, 13585, 13473, 13358, 13250, 13121, 13021, 12885, 12775, 12650, 12524, 12404, 12273, 12149, 12016, 11891, 11750, 11627, 11484, 11352, 11215, 11070, 10938, 10788, 10654, 10500, 10363, 10206, 10069, 9910, 9764, 9610, 9455, 9304, 9142, 8991, 8830, 8669, 8508, 8345, 8183, 8015, 7853, 7681, 7517, 7347, 7170, 7008, 6824, 6661, 6480, 6301, 6134, 5941, 5780, 5585, 5413, 5230, 5043, 4866, 4679, 4492, 4314, 4118, 3941, 3745, 3567, 3370, 3190, 2993, 2810, 2617, 2429, 2238, 2046, 1860, 1667, 1476, 1288, 1094, 906, 714, 526, 333, 146, -48, -233, -426, -612, -805, -992, -1179, -1372, -1552, -1749, -1930, -2120, -2306, -2494, -2672, -2869, -3042, -3234, -3416, -3598, -3781, -3967, -4140, -4333, -4503, -4690, -4868, -5045, -5225, -5405, -5575, -5766, -5921, -6117, -6274, -6459, -6628, -6796, -6973, -7142, -7310, -7482, -7648, -7817, -7984, -8148, -8315, -8478, -8642, -8806, -8965, -9126, -9290, -9441, -9610, -9755, -9924, -10068, -10232, -10378, -10538, -10683, -10837, -10986, -11130, -11286, -11423, -11576, -11720, -11856, -12011, -12139, -12291, -12426, -12563, -12702, -12839, -12972, -13111, -13241, -13375, -13505, -13635, -13767, -13888, -14023, -14142, -14272, -14392, -14518, -14633, -14763, -14873, -14996, -15111, -15229, -15345, -15455, -15570, -15682, -15792, -15899, -16011, -16115, -16221, -16332, -16424, -16543, -16627, -16741, -16837, -16928, -17042, -17117, -17230, -17315, -17407, -17505, -17588, -17684, -17770, -17856, -17942, -18031, -18108, -18200, -18273, -18359, -18434, -18513, -18590, -18665, -18737, -18811, -18882, -18951, -19025, -19088, -19161, -19225, -19288, -19356, -19416, -19478, -19539, -19599, -19656, -19718, -19768, -19828, -19881, -19935, -19984, -20043, -20082, -20145, -20181, -20233, -20281, -20318, -20375, -20402, -20460, -20485, -20536, -20570, -20608, -20646, -20682, -20715, -20749, -20784, -20809, -20852, -20865, -20911, -20924, -20960, -20984, -21003, -21037, -21050, -21078, -21097, -21112, -21141, -21146, -21178, -21180, -21205, -21212, -21230, -21238, -21254, -21257, -21275, -21276, -21289, -21290, -21301, -21301, -21308, -21311, -21308, -21317, -21309, -21312, -21302, -21309, -21324, -21297, -21292, -21272, -21256, -21252, -21236, -21233, -21221, -21220, -21202, -21207, -21187, -21184, -21170, -21156, -21147, -21127, -21118, -21094, -21084, -21057, -21040, -21014, -20997, -20962, -20947, -20908, -20886, -20851, -20823, -20785, -20758, -20714, -20684, -20642, -20603, -20567, -20519, -20483, -20433, -20397, -20340, -20306, -20248, -20206, -20159, -20101, -20061, -20004, -19955, -19900, -19852, -19789, -19745, -19685, -19629, -19582, -19512, -19470, -19401, -19352, -19291, -19234, -19176, -19117, -19059, -18995, -18929, -18868, -18796, -18739, -18665, -18608, -18532, -18477, -18401, -18342, -18271, -18208, -18136, -18078, -18004, -17941, -17878, -17803, -17749, -17671, -17613, -17543, -17476, -17414, -17341, -17284, -17211, -17151, -17080, -17017, -16955, -16882, -16824, -16751, -16692, -16621, -16561, -16493, -16427, -16369, -16293, -16242, -16166, -16111, -16042, -15980, -15917, -15848, -15795, -15721, -15666, -15601, -15537, -15479, -15412, -15352, -15294, -15224, -15176, -15101, -15054, -14984, -14930, -14869, -14807, -14750, -14688, -14657, -14572, -14481, -14439, -14415, -14372, -14339, -14289, -14230, -14180, -14106, -14048, -13976, -13908, -13843, -13771, -13707, -13641, -13572, -13514, -13444, -13389, -13326, -13265, -13214, -13153, -13099, -13051, -12992, -12951, -12899, -12854, -12809, -12762, -12723, -12682, -12639, -12605, -12558, -12532, -12487, -12458, -12421, -12385, -12355, -12317, -12289, -12255, -12220, -12193, -12153, -12126, -12095, -12053, -12037, -11983, -11968, -11920, -11890, -11860, -11812, -11790, -11736, -11715, -11663, -11631, -11587, -11544, -11503, -11460, -11411, -11371, -11316, -11277, -11217, -11177, -11115, -11070, -11013, -10955, -10905, -10838, -10787, -10723, -10659, -10602, -10532, -10467, -10406, -10329, -10266, -10197, -10116, -10060, -9968, -9906, -9822, -9744, -9671, -9584, -9507, -9422, -9340, -9252, -9173, -9074, -8998, -8898, -8809, -8707, -8608, -8510, -8409, -8305, -8207, -8098, -7997, -7892, -7781, -7683, -7566, -7463, -7353, -7239, -7135, -7013, -6910, -6787, -6682, -6560, -6447, -6331, -6213, -6095, -5982, -5852, -5747, -5615, -5502, -5378, -5260, -5134, -5018, -4889, -4773, -4643, -4523, -4400, -4270, -4156, -4019, -3907, -3774, -3653, -3526, -3403, -3275, -3154, -3022, -2903, -2774, -2651, -2524, -2399, -2277, -2148, -2029, -1897, -1778, -1652, -1528, -1403, -1280, -1155, -1036, -909, -788, -668, -542, -422, -303, -176, -65, 67, 178, 305, 415, 547, 650, 783, 888, 1015, 1124, 1247, 1357, 1476, 1592, 1702, 1820, 1931, 2043, 2159, 2266, 2380, 2490, 2600, 2707, 2822, 2921, 3039, 3138, 3249, 3354, 3458, 3564, 3669, 3768, 3881, 3971, 4083, 4175, 4280, 4377, 4481, 4571, 4676, 4767, 4865, 4965, 5049, 5154, 5240, 5332, 5432, 5511, 5612, 5694, 5787, 5872, 5963, 6044, 6136, 6215, 6306, 6381, 6472, 6547, 6631, 6712, 6789, 6872, 6946, 7025, 7098, 7179, 7250, 7325, 7400, 7466, 7545, 7611, 7681, 7753, 7816, 7889, 7950, 8021, 8079, 8148, 8200, 8272, 8315, 8391, 8433, 8502, 8547, 8609, 8657, 8715, 8762, 8818, 8864, 8918, 8960, 9015, 9055, 9107, 9148, 9193, 9238, 9276, 9325, 9358, 9404, 9442, 9475, 9520, 9550, 9589, 9625, 9657, 9690, 9726, 9752, 9787, 9816, 9843, 9876, 9897, 9928, 9953, 9977, 10005, 10024, 10050, 10072, 10092, 10114, 10133, 10153, 10170, 10189, 10205, 10221, 10236, 10249, 10265, 10279, 10289, 10304, 10310, 10325, 10331, 10340, 10352, 10352, 10369, 10365, 10376, 10379, 10384, 10385, 10391, 10389, 10393, 10392, 10394, 10390, 10392, 10386, 10388, 10381, 10379, 10374, 10368, 10365, 10355, 10350, 10343, 10332, 10321, 10320, 10313, 10300, 10276, 10263, 10245, 10229, 10220, 10201, 10197, 10176, 10168, 10154, 10138, 10131, 10106, 10103, 10073, 10069, 10043, 10028, 10012, 9984, 9971, 9946, 9921, 9905, 9871, 9855, 9824, 9800, 9771, 9745, 9714, 9687, 9656, 9624, 9596, 9561, 9532, 9495, 9464, 9427, 9396, 9359, 9323, 9290, 9248, 9221, 9172, 9144, 9101, 9068, 9025, 8990, 8950, 8910, 8876, 8828, 8800, 8748, 8720, 8672, 8635, 8600, 8550, 8521, 8471, 8441, 8392, 8362, 8313, 8282, 8237, 8200, 8159, 8121, 8079, 8047, 8004, 7972, 7930, 7899, 7855, 7828, 7781, 7755, 7710, 7680, 7643, 7605, 7576, 7533, 7506, 7466, 7433, 7400, 7363, 7332, 7297, 7262, 7231, 7197, 7163, 7132, 7099, 7062, 7037, 6999, 6972, 6938, 6904, 6880, 6840, 6818, 6781, 6753, 6724, 6689, 6665, 6632, 6605, 6573, 6548, 6514, 6493, 6457, 6435, 6403, 6377, 6351, 6326, 6310, 6253, 6225, 6222, 6202, 6189, 6169, 6142, 6121, 6087, 6066, 6028, 6005, 5968, 5945, 5913, 5885, 5856, 5828, 5804, 5777, 5751, 5729, 5703, 5684, 5658, 5640, 5620, 5600, 5582, 5565, 5545, 5534, 5513, 5504, 5484, 5473, 5459, 5446, 5434, 5420, 5409, 5399, 5386, 5374, 5364, 5353, 5340, 5333, 5316, 5312, 5294, 5288, 5273, 5263, 5252, 5239, 5227, 5214, 5200, 5189, 5170, 5163, 5140, 5133, 5112, 5098, 5082, 5062, 5049, 5028, 5008, 4994, 4966, 4954, 4929, 4906, 4890, 4859, 4845, 4814, 4795, 4769, 4740, 4722, 4685, 4670, 4631, 4613, 4577, 4554, 4521, 4491, 4463, 4427, 4401, 4365, 4333, 4301, 4267, 4234, 4199, 4163, 4130, 4092, 4059, 4019, 3986, 3946, 3911, 3869, 3835, 3793, 3756, 3717, 3675, 3638, 3595, 3556, 3515, 3474, 3431, 3390, 3349, 3305, 3264, 3220, 3176, 3138, 3088, 3048, 3003, 2959, 2917, 2869, 2829, 2779, 2740, 2689, 2648, 2603, 2554, 2514, 2462, 2427, 2381, 2343, 2297, 2261, 2210, 2178, 2126, 2089, 2045, 2001, 1961, 1914, 1875, 1827, 1788, 1741, 1700, 1656, 1612, 1569, 1523, 1484, 1435, 1397, 1347, 1309, 1261, 1219, 1179, 1131, 1091, 1044, 1003, 960, 917, 873, 828, 791, 740, 706, 656, 618, 575, 532, 491, 449, 407, 364, 326, 281, 243, 199, 160, 118, 79, 37, -2, -42, -83, -121, -163, -198, -241, -276, -317, -358, -389, -436, -466, -508, -544, -580, -618, -655, -689, -731, -760, -801, -835, -869, -906, -939, -975, -1007, -1044, -1074, -1113, -1140, -1179, -1205, -1245, -1270, -1307, -1337, -1367, -1401, -1431, -1459, -1494, -1519, -1554, -1579, -1612, -1639, -1669, -1695, -1727, -1750, -1783, -1806, -1835, -1863, -1887, -1914, -1940, -1964, -1994, -2014, -2043, -2064, -2091, -2112, -2139, -2159, -2185, -2205, -2228, -2254, -2269, -2299, -2311, -2339, -2356, -2380, -2397, -2420, -2436, -2458, -2477, -2494, -2516, -2528, -2554, -2564, -2585, -2603, -2615, -2638, -2648, -2669, -2681, -2699, -2713, -2726, -2745, -2755, -2773, -2783, -2799, -2809, -2826, -2835, -2849, -2861, -2873, -2885, -2895, -2907, -2916, -2929, -2939, -2948, -2959, -2967, -2979, -2985, -2995, -3003, -3010, -3022, -3024, -3039, -3038, -3052, -3055, -3061, -3071, -3072, -3083, -3084, -3092, -3096, -3101, -3105, -3111, -3113, -3120, -3120, -3128, -3127, -3134, -3134, -3138, -3140, -3143, -3145, -3145, -3148, -3149, -3150, -3153, -3151, -3155, -3152, -3154, -3154, -3153, -3156, -3149, -3154, -3149, -3151, -3148, -3147, -3144, -3145, -3139, -3141, -3137, -3132, -3134, -3125, -3127, -3122, -3118, -3117, -3109, -3109, -3103, -3098, -3096, -3088, -3087, -3078, -3078, -3074, -3066, -3059, -3051, -3047, -3038, -3032, -3029, -3016, -3021, -3004, -3009, -2993, -2996, -2983, -2982, -2973, -2966, -2961, -2951, -2947, -2938, -2931, -2922, -2914, -2907, -2897, -2890, -2879, -2871, -2862, -2851, -2842, -2833, -2820, -2814, -2801, -2791, -2782, -2768, -2759, -2747, -2737, -2723, -2716, -2699, -2693, -2677, -2669, -2652, -2648, -2631, -2630, -2614, -2610, -2599, -2590, -2580, -2572, -2561, -2554, -2543, -2536, -2525, -2514, -2510, -2494, -2491, -2478, -2470, -2461, -2450, -2442, -2433, -2423, -2415, -2404, -2395, -2388, -2377, -2370, -2360, -2349, -2343, -2332, -2325, -2314, -2307, -2296, -2290, -2279, -2272, -2261, -2257, -2243, -2241, -2225, -2224, -2210, -2205, -2198, -2185, -2184, -2168, -2167, -2156, -2149, -2139, -2134, -2124, -2119, -2109, -2102, -2095, -2087, -2081, -2072, -2066, -2058, -2050, -2044, -2036, -2029, -2024, -2012, -2012, -1996, -1999, -1985, -1983, -1974, -1967, -1961, -1955, -1947, -1941, -1933, -1929, -1922, -1915, -1914, -1902, -1887, -1891, -1885, -1887, -1880, -1876, -1870, -1862, -1858, -1847, -1841, -1832, -1826, -1816, -1811, -1799, -1799, -1784, -1786, -1768, -1773, -1758, -1759, -1748, -1747, -1739, -1737, -1730, -1729, -1722, -1721, -1715, -1714, -1708, -1709, -1703, -1703, -1701, -1696, -1697, -1691, -1694, -1688, -1690, -1687, -1684, -1685, -1680, -1683, -1678, -1678, -1675, -1675, -1671, -1672, -1667, -1668, -1664, -1664, -1659, -1658, -1657, -1652, -1650, -1648, -1643, -1642, -1636, -1635, -1630, -1628, -1621, -1620, -1610, -1612, -1601, -1602, -1592, -1591, -1581, -1579, -1570, -1566, -1559, -1553, -1546, -1539, -1533, -1525, -1518, -1510, -1502, -1494, -1486, -1477, -1469, -1460, -1451, -1442, -1432, -1426, -1413, -1405, -1396, -1381, -1379, -1360, -1357, -1341, -1334, -1319, -1312, -1299, -1288, -1276, -1265, -1253, -1242, -1229, -1217, -1207, -1191, -1182, -1166, -1157, -1143, -1130, -1117, -1105, -1090, -1081, -1064, -1052, -1039, -1022, -1013, -996, -984, -970, -957, -941, -929, -914, -899, -887, -870, -859, -842, -830, -813, -800, -787, -770, -758, -741, -729, -712, -701, -682, -670, -655, -641, -626, -612, -596, -583, -568, -555, -538, -526, -508, -499, -478, -469, -451, -441, -424, -408, -398, -379, -371, -352, -340, -326, -312, -299, -282, -274, -254, -246, -229, -217, -204, -189, -176, -165, -148, -140, -122, -113, -98, -85, -73, -60, -49, -35, -24, -9, -1, 16, 25, 38, 50, 60, 73, 86, 94, 109, 118, 130, 143, 150, 167, 171, 188, 192, 210, 213, 230, 234, 251, 256, 268, 278, 287, 298, 305, 318, 324, 336, 344, 351, 366, 368, 381, 388, 396, 407, 414, 422, 430, 437, 447, 454, 462, 468, 478, 483, 493, 497, 506, 515, 517, 531, 528, 543, 547, 552, 561, 563, 573, 575, 586, 586, 597, 598, 605, 612, 615, 622, 626, 629, 639, 639, 646, 650, 652, 661, 660, 669, 669, 675, 678, 683, 686, 688, 694, 695, 700, 702, 704, 709, 710, 715, 715, 720, 720, 726, 723, 732, 725, 737, 729, 741, 733, 742, 738, 745, 740, 748, 744, 747, 750, 746, 753, 748, 754, 750, 754, 753, 752, 755, 753, 753, 755, 753, 755, 754, 752, 753, 753, 751, 752, 750, 751, 748, 750, 747, 748, 746, 744, 745, 741, 742, 740, 736, 738, 732, 734, 728, 730, 729, 731, 731, 732, 733, 735, 734, 736, 734, 738, 736, 738, 736, 740, 736, 740, 737, 738, 738, 737, 737, 737, 737, 736, 735, 736, 731, 738, 729, 735, 730, 729, 732, 724, 730, 724, 726, 723, 722, 720, 720, 717, 717, 715, 713, 714, 708, 712, 704, 709, 702, 703, 700, 700, 696, 695, 695, 691, 692, 685, 688, 684, 683, 684, 674, 681, 673, 676, 672, 668, 670, 666, 664, 665, 657, 663, 654, 657, 653, 653, 649, 649, 647, 645, 644, 640, 641, 635, 641, 629, 639, 626, 633, 627, 625, 626, 622, 622, 620, 617, 617, 614, 614, 611, 611, 609, 606, 608, 601, 606, 599, 601, 598, 597, 595, 593, 593, 591, 589, 591, 583, 588, 582, 584, 581, 580, 578, 579, 574, 577, 572, 572, 570, 570, 571, 569, 571, 565, 569, 562, 566, 560, 561, 557, 558, 555, 552, 554, 548, 552, 545, 550, 545, 543, 544, 542, 543, 541, 540, 539, 541, 537, 539, 537, 539, 535, 539, 535, 538, 537, 537, 537, 537, 537, 537, 538, 535, 540, 533, 541, 535, 537, 538, 535, 539, 536, 538, 535, 539, 534, 537, 537, 534, 537, 533, 535, 534, 533, 533, 531, 532, 530, 529, 530, 525, 529, 523, 525, 523, 521, 521, 519, 516, 518, 511, 515, 508, 512, 505, 506, 503, 500, 501, 494, 496, 491, 488, 489, 482, 484, 477, 477, 474, 470, 470, 462, 466, 455, 459, 451, 451, 447, 442, 438, 439, 431, 431, 425, 422, 419, 415, 413, 406, 407, 397, 398, 391, 390, 383, 384, 373, 377, 365, 366, 361, 355, 353, 348, 343, 342, 333, 332, 326, 324, 317, 315, 310, 304, 302, 295, 293, 287, 283, 279, 273, 271, 265, 260, 256, 251, 246, 244, 235, 234, 228, 224, 219, 214, 212, 202, 204, 195, 191, 189, 181, 180, 171, 170, 164, 160, 156, 148, 150, 140, 140, 131, 131, 122, 122, 115, 111, 107, 103, 97, 96, 88, 86, 80, 78, 72, 70, 63, 61, 56, 51, 49, 44, 40, 36, 31, 30, 23, 20, 16, 13, 8, 5, 1, -3, -5, -11, -14, -17, -21, -24, -29, -32, -34, -41, -40, -48, -48, -51, -58, -57, -63, -67, -66, -76, -71, -81, -78, -88, -83, -93, -91, -96, -101, -100, -106, -108, -109, -114, -116, -118, -123, -122, -129, -127, -134, -132, -139, -137, -144, -142, -149, -146, -152, -153, -155, -160, -158, -163, -164, -165, -171, -165, -177, -171, -177, -178, -179, -183, -184, -186, -186, -189, -193, -189, -197, -193, -200, -196, -202, -201, -203, -207, -203, -210, -208, -210, -212, -212, -215, -214, -216, -219, -218, -220, -222, -220, -225, -224, -223, -228, -225, -229, -230, -227, -233, -229, -234, -230, -235, -234, -235, -235, -235, -238, -237, -238, -239, -238, -241, -238, -242, -240, -240, -245, -239, -244, -241, -245, -241, -246, -240, -247, -242, -246, -243, -243, -246, -241, -248, -243, -243, -248, -240, -250, -241, -246, -243, -245, -243, -245, -243, -245, -244, -241, -245, -242, -242, -243, -240, -244, -240, -241, -241, -240, -241, -238, -243, -233, -245, -233, -241, -234, -236, -236, -233, -237, -231, -235, -232, -233, -232, -230, -232, -229, -230, -229, -228, -227, -229, -223, -229, -223, -224, -225, -222, -223, -221, -218, -222, -216, -221, -215, -216, -217, -212, -214, -212, -209, -213, -207, -209, -207, -205, -206, -203, -204, -201, -203, -197, -202, -195, -200, -194, -196, -194, -191, -195, -187, -193, -184, -189, -185, -185, -185, -182, -182, -182, -178, -182, -174, -179, -174, -174, -175, -169, -174, -167, -171, -168, -166, -167, -165, -163, -164, -161, -162, -160, -158, -159, -156, -156, -156, -153, -151, -154, -147, -154, -147, -148, -148, -144, -147, -143, -144, -141, -141, -140, -139, -138, -138, -134, -137, -133, -133, -132, -131, -131, -128, -131, -126, -129, -125, -125, -124, -122, -123, -121, -121, -116, -123, -113, -122, -113, -116, -114, -112, -114, -109, -112, -108, -111, -107, -106, -109, -102, -107, -100, -104, -101, -102, -99, -100, -98, -98, -98, -94, -98, -91, -96, -90, -90, -93, -86, -91, -85, -85, -87, -83, -83, -84, -79, -85, -77, -80, -79, -76, -79, -75, -76, -74, -75, -72};
154:               
155:               fractional __attribute__((space(psv))) snaresamp[6252] = {-114, -124, -115, -131, -144, -136, -135, -170, -178, -207, -251, -275, -274, -301, -315, -333, -325, -312, -293, -279, -277, -286, -323, -338, -293, -297, -291, -259, -296, -338, -343, -340, -380, -402, -403, -417, -417, -398, -419, -423, -410, -422, -432, -407, -397, -438, -479, -457, -451, -525, -526, -498, -517, -502, -502, -542, -522, -518, -504, -452, -426, -443, -460, -502, -509, -537, -540, -553, -576, -547, -530, -536, -541, -544, -520, -473, -501, -502, -483, -507, -506, -522, -559, -517, -534, -524, -489, -512, -481, -462, -501, -497, -597, -645, -539, -533, -608, -700, -701, -735, -900, -778, -455, -301, -235, -530, -927, -965, -997, -1004, -849, -786, -729, -752, -825, -785, -905, -890, -682, -539, -240, 53, 247, 425, 468, 542, 524, 333, 458, 988, 1849, 2512, 2504, 2200, 1661, 602, -1048, -2812, -3350, -2694, -1975, -1151, -382, -244, -522, -821, -965, -919, -818, -749, -726, -689, -772, -966, -1177, -1518, -1733, -1665, -1668, -1762, -2098, -2425, -1951, -1017, -688, -961, -1454, -2310, -3287, -3560, -3208, -2774, -2421, -2080, -1729, -1369, -988, -695, -619, -593, -512, -286, 7, 46, -108, -393, -687, -737, -854, -916, -765, -843, -875, -823, -798, -660, -928, -1424, -2217, -3921, -4833, -4068, -2939, -1986, -1289, -624, -61, 241, 934, 1513, 1659, 1949, 2058, 2331, 2836, 2963, 3326, 3494, 3258, 3181, 2657, 2160, 2309, 2458, 2456, 1941, 926, -449, -2116, -2312, -1187, -545, -486, -980, -827, 876, 2041, 1930, 1475, 511, -319, -181, -236, -1682, -2420, -677, 934, 1090, 1453, 2095, 2638, 3199, 3207, 3069, 3283, 3282, 2869, 2347, 2096, 2229, 2232, 1629, 520, -1068, -2920, -3975, -3543, -2693, -2359, -2013, -1058, -113, 212, -63, -995, -2846, -5067, -5791, -4103, -2398, -1892, -1211, -614, -547, -376, -303, -169, 405, 863, 994, 746, -361, -2380, -4311, -4112, -1440, 1036, 1323, 687, 567, 560, 376, 265, 899, 2633, 4364, 5496, 6185, 6291, 6425, 6982, 8002, 9603, 11032, 11991, 12217, 11866, 11654, 10310, 7183, 1736, -5379, -6259, 832, 5958, 7075, 8767, 10689, 11559, 11277, 10996, 10946, 9658, 6927, 1473, -3510, -1412, 2852, 3443, 4466, 5623, 3785, 1304, -754, -3540, -6268, -7811, -8565, -8132, -5399, -2526, -1159, 754, 2625, 2703, 2337, 2394, 2277, 1247, -876, -3366, -6410, -9741, -11685, -12466, -12694, -11826, -10476, -9332, -8162, -7201, -7198, -8633, -10542, -11790, -12574, -12580, -11861, -11364, -10679, -9555, -8636, -7667, -6826, -6699, -6837, -6744, -6407, -6254, -6850, -8117, -9927, -11810, -13114, -13725, -13688, -13118, -12256, -11534, -11025, -9896, -8063, -6573, -5666, -5106, -4761, -5202, -6847, -8513, -9055, -7931, -5523, -3204, -1442, -1589, -3992, -4081, -178, 3656, 5352, 5616, 5588, 5173, 3754, 3567, 6177, 8196, 6054, 2440, 2727, 3912, 431, -2124, 1628, 6944, 10218, 12120, 12689, 11407, 8380, 4829, 1145, -1796, -1237, 1232, 2146, 2914, 4509, 6239, 9083, 12491, 14528, 14938, 14924, 15195, 14860, 13910, 13298, 12538, 11158, 9031, 6263, 4006, 2433, 1619, 2776, 4696, 5598, 6255, 7289, 8438, 9429, 10097, 10553, 10770, 11101, 11664, 11841, 11389, 10419, 9491, 9453, 9730, 9086, 7419, 5434, 4459, 5103, 5895, 5271, 3592, 1647, -857, -3244, -2870, 406, 3187, 4101, 4639, 5229, 5242, 4571, 4220, 5394, 7219, 7788, 6921, 5211, 2880, 920, 353, 738, 744, -90, -1414, -3304, -5997, -8704, -10287, -10212, -8891, -6879, -4646, -2632, -1169, -646, -1280, -2647, -4243, -6072, -7883, -9320, -10216, -10300, -9474, -8579, -8568, -9247, -10039, -10454, -9736, -8256, -7311, -6982, -6822, -6756, -6520, -6329, -6218, -5793, -5510, -6096, -7549, -9700, -12266, -14162, -14286, -13362, -12902, -12714, -12770, -13196, -12719, -10637, -7796, -5416, -4703, -5293, -6416, -8281, -10664, -13103, -14946, -15771, -16277, -16344, -15561, -14847, -14351, -13752, -13395, -13062, -12478, -11306, -9535, -8257, -8197, -9111, -10296, -10629, -10014, -9031, -8252, -8203, -8425, -8443, -8291, -7999, -8214, -9031, -9520, -9199, -8224, -6964, -4848, -1803, 208, 1262, 2124, 1322, 478, 1174, 565, -1605, -3489, -5557, -6417, -4819, -3300, -3159, -2404, -340, 1674, 3898, 6876, 8475, 7875, 6675, 5423, 4469, 4037, 2872, 1078, 172, 709, 1834, 2170, 2012, 2523, 3417, 4079, 4662, 5499, 7010, 9077, 10815, 12229, 13815, 14733, 14348, 13841, 13670, 13011, 12042, 11344, 10519, 8986, 7056, 6502, 8139, 10536, 12438, 13126, 12417, 11449, 10896, 11218, 12987, 14115, 13173, 12410, 12357, 11565, 11618, 13181, 13557, 12780, 13134, 13544, 12182, 10274, 9895, 10940, 11274, 9857, 7643, 5419, 4708, 6700, 8772, 9185, 9764, 10721, 10828, 10467, 9922, 9077, 8102, 7002, 6037, 5205, 4356, 3734, 3158, 2551, 2288, 1979, 1280, 648, 724, 1832, 3437, 4874, 5969, 6008, 4434, 1833, -1106, -3402, -4234, -4154, -4334, -5372, -6122, -4467, -1295, 412, 292, -462, -1841, -3316, -3268, -1895, -1655, -3981, -8525, -14173, -18241, -18180, -15249, -12289, -9981, -7801, -5884, -4097, -1868, -161, -271, -1542, -3267, -5583, -7363, -8182, -9619, -12595, -16200, -18918, -19937, -19202, -16747, -12858, -9362, -7787, -6367, -3922, -3296, -5358, -7249, -8561, -10179, -11782, -13638, -16010, -18424, -19792, -18992, -17132, -15510, -14019, -13211, -13026, -12731, -12735, -12897, -12759, -12408, -11990, -12124, -12771, -13185, -13479, -13481, -12728, -11544, -10495, -9940, -9521, -8897, -8700, -8978, -9396, -9870, -9976, -10002, -10469, -11163, -12223, -13283, -12849, -10963, -9382, -8479, -7313, -6362, -6240, -6258, -6266, -6689, -7219, -7690, -8041, -8123, -7893, -7353, -7075, -7132, -6506, -4861, -2913, -1586, -1075, -1259, -1923, -1847, -372, 1435, 2950, 3585, 3831, 4923, 5247, 3311, 827, -254, 943, 2917, 4160, 5803, 7762, 9683, 12250, 13887, 14192, 14349, 13898, 12863, 11345, 9565, 8320, 6365, 2821, -2237, -7384, -6821, -1209, 2012, 3671, 7395, 10986, 13493, 16020, 18422, 19766, 19573, 19043, 18458, 17603, 16863, 15410, 13071, 7944, -1278, -6705, -4582, -3206, -3263, 1197, 6793, 9696, 12473, 15852, 18244, 19730, 20551, 20429, 19490, 18279, 17578, 17242, 16582, 15876, 15337, 14658, 13921, 12514, 10264, 9036, 9082, 7151, 2755, 2146, 7777, 12277, 13025, 14174, 14474, 13443, 14439, 15992, 16511, 16617, 15123, 12447, 9174, 5220, 2257, 942, 1474, 3555, 4745, 4973, 5455, 5847, 6321, 6226, 5286, 4581, 3852, 3256, 3269, 3171, 3415, 4092, 4485, 4597, 3989, 3056, 2352, 1251, 39, -1207, -3045, -4999, -6390, -5687, -2516, 468, 2152, 3084, 2515, 733, -1340, -3708, -5624, -5854, -4667, -3807, -4180, -5134, -6081, -6506, -5963, -4894, -3744, -2695, -2029, -1838, -2260, -3246, -3965, -3832, -3721, -4585, -6327, -8247, -8428, -5688, -3294, -3936, -5689, -7645, -10070, -10318, -8077, -7492, -9315, -11188, -13383, -14560, -11505, -6913, -4835, -3929, -3250, -3596, -4173, -4410, -4495, -4727, -5662, -7163, -9288, -12312, -15008, -15672, -14602, -13955, -13454, -10544, -6450, -4113, -3292, -2804, -3022, -4558, -6559, -9095, -13033, -14843, -12976, -12261, -12993, -11858, -9322, -5333, -1166, 700, 2022, 3250, 2443, 548, -1091, -1951, -1983, -2274, -3002, -3700, -3575, -2267, -1351, -1480, -2493, -4830, -6546, -5922, -4304, -2506, -284, 2134, 4872, 7851, 10280, 11917, 13147, 14007, 14339, 14115, 13317, 12527, 11661, 9920, 7097, 3360, 1358, 3437, 5747, 5901, 6801, 8658, 10070, 10943, 10286, 7780, 4302, 3319, 7249, 11087, 11898, 12962, 13927, 13562, 13480, 13715, 13293, 11794, 9265, 5227, 206, -1308, 1247, 2972, 4262, 6654, 8282, 9885, 11647, 11460, 9472, 7139, 6357, 7397, 7527, 5590, 3265, 2699, 4639, 7439, 9383, 9580, 7534, 4422, 1841, 1078, 2489, 3651, 2666, 1179, -284, -3393, -5584, -2791, 1589, 3033, 3972, 5204, 4254, 2020, -274, -3535, -6735, -7142, -4022, -615, 696, 1618, 3229, 4806, 5768, 4847, 2282, -795, -4602, -7902, -8999, -8492, -7502, -6801, -6663, -5865, -3698, -1544, -868, -1516, -2483, -2346, -381, 1148, -148, -2840, -5197, -6840, -6192, -4271, -4368, -6084, -8094, -9971, -8947, -5205, -2758, -2003, -2513, -4844, -7511, -10836, -13793, -11597, -6583, -4442, -3224, -1662, -2429, -4272, -5124, -6209, -7949, -9430, -10719, -11782, -12158, -11405, -8325, -4012, -1998, -1644, -116, 549, -1483, -3666, -4389, -5103, -6710, -8007, -8731, -9898, -11153, -11900, -10789, -6633, -2127, 481, 2140, 3075, 3758, 4152, 2453, -166, -2115, -4716, -7965, -9888, -9825, -8963, -8356, -7796, -6970, -4711, -340, 4128, 7109, 8371, 8331, 7753, 4874, 28, -1743, -55, 1265, 1599, 1007, -951, -3590, -6535, -8252, -5814, -516, 2408, 2726, 3594, 3284, 1311, 1224, 2306, 2677, 2539, 1072, -1154, -3573, -6705, -7177, -2884, 2180, 5309, 7896, 10416, 11685, 12065, 12316, 11869, 10878, 9160, 6408, 3719, 683, -2905, -6629, -10471, -9442, -1810, 3516, 3883, 4785, 6222, 7342, 9615, 11698, 12193, 11312, 8989, 5553, 2907, 3220, 4640, 3794, 1613, -376, -2428, -3490, -2911, -2675, -4106, -4524, -692, 5117, 8357, 9455, 10422, 10378, 9508, 9491, 9087, 6571, 3346, 1452, 725, -488, -2857, -5435, -7118, -7131, -5663, -4260, -3223, -732, 3358, 6602, 7662, 7274, 5518, 2964, 1672, 1587, 704, -1484, -4454, -7892, -10425, -9710, -6824, -5395, -5388, -4323, -1942, 218, 312, -1967, -4864, -7927, -10480, -8784, -3597, -618, -518, -975, -1820, -1807, -196, 570, -947, -3400, -6244, -9979, -12965, -11985, -8100, -5250, -3288, -981, 165, -444, -2150, -3838, -4245, -4354, -5929, -8299, -10607, -12174, -10068, -5324, -2790, -1945, -1171, -1328, -1616, -2036, -3682, -6000, -8192, -10088, -11464, -11812, -11684, -12199, -11543, -7598, -2998, -562, 450, 439, -1084, -3384, -5220, -6758, -8729, -10707, -11946, -10334, -5997, -3475, -2906, -1499, -229, 500, 1127, 842, -884, -3493, -6017, -7921, -7895, -5751, -4148, -3805, -3110, -2153, -1462, -612, -24, -195, -609, -265, 1543, 3399, 3228, 1011, -2205, -5880, -9558, -11030, -9570, -8281, -8407, -7188, -3455, 150, 2002, 3144, 4250, 6279, 9173, 10382, 8968, 5728, 1036, -2666, -2059, 624, 517, -1577, -3504, -5744, -5921, -2629, 287, 1309, 2567, 3701, 4208, 4462, 3623, 2343, 2395, 3737, 4516, 3623, 2391, 1139, -199, 765, 3589, 5052, 4946, 4284, 4081, 5561, 7451, 7951, 6906, 5039, 3898, 3108, 1378, -439, -2117, -2669, 207, 4387, 6116, 6070, 5813, 5136, 5456, 7433, 8037, 6315, 3864, 941, 656, 5389, 9548, 9897, 9397, 7897, 5553, 4934, 5609, 5860, 5026, 3496, 1744, 217, 1200, 4860, 7763, 8717, 9055, 9627, 10837, 11851, 11169, 8425, 4633, 929, -2146, -2992, -727, 2109, 4564, 7053, 8699, 9475, 9129, 8616, 8852, 8023, 6550, 4780, 1863, -663, -2105, -2268, -701, 1245, 2760, 3654, 5170, 9069, 12619, 12926, 11338, 8621, 6549, 7832, 9972, 8956, 5395, 1425, -4860, -11226, -8456, -1032, 77, -886, 188, 1263, 4043, 7740, 9066, 8105, 6050, 3649, 2115, 2290, 3477, 4344, 4354, 3701, 1827, -1355, -5038, -9220, -13136, -14932, -14185, -12753, -11779, -9033, -4883, -2637, -2286, -2505, -2762, -2563, -1768, -813, -754, -1876, -3444, -4816, -5190, -3978, -3470, -5379, -7763, -10265, -10890, -6816, -2638, -1896, -2447, -3788, -5549, -5049, -2518, -2342, -4556, -6156, -7130, -6017, -2638, -972, -1790, -3493, -5012, -4666, -2094, 1126, 3176, 2900, 1452, 970, 1614, 1673, 45, -2202, -4329, -5392, -3668, -2186, -3572, -5486, -6990, -6432, -3014, -248, 568, 340, -367, -338, 804, 1804, 1444, 719, 763, 821, 649, 99, -1129, -2631, -3942, -4018, -2497, -1280, -1114, -786, 65, 1123, 1691, 1587, 1393, 1329, 1762, 2772, 3274, 2490, 522, -1967, -2825, -114, 3767, 5533, 5792, 5075, 3272, 1574, 122, -772, -260, 321, 45, -202, 92, 1046, 1994, 2412, 2784, 3131, 3671, 4502, 4711, 3862, 2335, 1766, 3298, 5230, 5723, 4956, 3791, 2982, 3474, 5150, 6665, 8173, 10720, 13522, 14011, 11772, 8533, 4503, 1649, 1893, 2039, 201, -1393, -1754, -1226, 118, 1414, 2601, 4722, 6743, 7418, 7119, 5945, 4461, 3406, 3300, 4232, 5394, 6795, 7912, 7745, 6435, 4846, 3350, 2387, 3053, 4075, 3622, 2183, 169, -2067, -3969, -5056, -5638, -5662, -3275, 528, 2840, 3893, 4761, 5453, 5631, 5135, 3757, 1782, 224, 568, 2845, 3507, 1185, -1775, -5198, -8957, -11011, -9163, -4408, -871, 902, 2555, 4496, 6777, 7924, 6388, 3014, -1040, -5872, -9626, -10019, -9285, -9381, -9177, -7713, -4688, -1123, 877, 813, -202, -1475, -2006, -1884, -3015, -5304, -7819, -8519, -5985, -4047, -4729, -6101, -6604, -4654, -1557, -279, -1294, -3467, -5822, -8111, -10056, -10728, -9311, -7181, -6264, -5450, -3912, -2608, -1806, -1989, -2643, -2353, -2085, -3517, -5975, -8435, -9545, -7362, -3751, -1958, -1942, -2857, -4624, -5814, -5061, -4020, -3934, -3902, -4208, -4508, -3910, -3280, -3225, -3521, -3824, -3875, -3792, -3862, -4355, -5058, -5860, -6403, -5874, -4332, -2805, -2599, -3867, -5682, -7264, -6110, -1737, 1262, 1301, 332, -1255, -2154, -2408, -4053, -6262, -7827, -8390, -6789, -4005, -2782, -3273, -2985, -888, 1456, 2546, 2076, 486, -1451, -3267, -4582, -4943, -4273, -3512, -2984, -1855, -341, 671, 1439, 2090, 2487, 3357, 4619, 5506, 5134, 3126, 851, -1384, -2686, -1284, 670, 1233, 1655, 2642, 3732, 4300, 4252, 3754, 3294, 3639, 4808, 5572, 4493, 2153, -382, -1711, 567, 4490, 6223, 6117, 5185, 3089, 574, -1010, -1272, 80, 2799, 5906, 8597, 9698, 8956, 7274, 5365, 3932, 2997, 2499, 1914, 734, -722, -1379, 470, 3460, 4880, 5327, 5747, 5818, 5240, 4618, 4594, 4482, 3707, 2055, -57, -1885, -2879, -2469, -1749, -1356, -443, 1768, 5399, 8555, 9508, 8264, 5615, 3096, 1503, 212, -1873, -4752, -7081, -7179, -4954, -2808, -1785, -1160, -975, -689, 25, 655, 701, 143, -872, -2421, -4050, -5004, -4140, -2065, -1412, -2324, -3801, -5630, -7143, -7592, -6833, -5942, -5242, -4008, -2934, -2747, -3382, -3954, -3676, -3097, -2869, -2998, -3026, -2485, -1324, -706, -1837, -3876, -6137, -7734, -7068, -5288, -4712, -5115, -5013, -3483, -808, 1064, 847, -785, -2987, -4021, -2804, -1921, -3215, -5243, -6649, -6505, -4365, -2245, -2218, -3306, -4516, -5653, -5590, -4602, -4301, -5005, -5294, -3866, -1974, -1132, -1028, -1407, -2251, -3260, -4253, -4969, -5302, -5776, -6709, -6692, -4308, -1438, -449, -931, -1869, -2053, -616, 926, 794, -714, -2495, -4122, -4617, -3040, -776, 178, -34, -142, 323, 1055, 1426, 826, -217, -837, -620, 219, 932, 1141, 836, 358, 724, 2123, 3427, 3761, 3272, 2325, 1357, 773, 246, -399, -1234, -1750, -729, 1193, 2676, 3451, 3790, 3961, 4264, 4934, 5156, 4293, 3006, 1774, 924, 357, -358, -946, -101, 2668, 5189, 6055, 6048, 5597, 4923, 4151, 3671, 4097, 4617, 4259, 3415, 2944, 3123, 3820, 4173, 3508, 2642, 2071, 2033, 2371, 2257, 1418, -47, -791, 111, 986, 488, -706, -1631, -1239, 1438, 4929, 6715, 6999, 6434, 5408, 4830, 4143, 2779, 1434, 935, 968, 463, -525, -1581, -2060, -1202, 703, 2621, 3609, 3724, 3115, 1643, 242, 179, 1372, 2263, 2259, 1981, 1370, 611, 798, 2162, 3662, 4592, 4973, 4405, 2731, 456, -1876, -3787, -4190, -2757, -1543, -1621, -1995, -2124, -703, 2428, 4165, 3142, 1017, -1259, -2732, -1763, 20, -4, -841, -1314, -1735, -1458, 22, 1735, 2022, 827, -1033, -3407, -5359, -5556, -4837, -4831, -5442, -5572, -4616, -3064, -2116, -2149, -1768, 333, 2725, 3001, 1419, -995, -4219, -7080, -8252, -8564, -8987, -8755, -7459, -5819, -4601, -4230, -4006, -2410, 63, 1202, 318, -1617, -4193, -6201, -5470, -3532, -3882, -5871, -7361, -7314, -5128, -2934, -2795, -3308, -3409, -3564, -3539, -3445, -3671, -3655, -3264, -2935, -2840, -3275, -3546, -2478, -572, 628, 100, -1958, -4284, -6160, -7182, -6211, -3641, -1833, -1613, -2467, -3732, -3121, 557, 3874, 4115, 3244, 2457, 990, 524, 2186, 3226, 2313, 612, -1520, -3170, -2593, -1153, -1480, -2939, -3315, -1606, 1136, 2217, 1179, -510, -1909, -1576, 622, 1855, 1436, 982, 696, 1383, 3467, 4414, 3385, 1513, -1241, -2921, -1164, 1909, 3222, 3052, 2325, 464, -2042, -2582, -772, 545, 255, -647, -1089, 289, 2630, 3227, 1985, -60, -1391, 161, 2828, 3106, 1884, 1359, 2006, 3491, 4067, 2851, 1223, 106, 319, 1961, 2870, 2193, 1487, 1246, 1301, 1722, 2050, 2309, 2906, 3471, 3588, 3380, 2948, 2526, 2556, 3103, 3307, 2476, 1142, 233, 537, 1968, 3095, 3399, 3423, 3264, 3446, 4570, 5253, 4342, 2636, 928, -10, 232, 541, -160, -1359, -1923, -718, 1835, 3898, 4881, 5234, 4785, 3635, 2385, 1261, 388, -75, -320, -872, -2018, -2328, -463, 1583, 1549, 561, -81, -226, 584, 1481, 777, -1018, -2833, -4291, -3870, -1285, 975, 1586, 1590, 1435, 837, 106, -312, -441, -662, -1331, -2460, -3485, -3398, -2094, -675, 444, 1728, 2821, 3209, 3115, 2568, 1455, 66, -899, -1033, -991, -1592, -2524, -3249, -3602, -3621, -3722, -3232, -956, 1776, 3117, 3534, 3397, 2681, 2379, 2369, 1373, -336, -1753, -2777, -3360, -3152, -2262, -1563, -1465, -999, 511, 2080, 2611, 2253, 1663, 999, 79, -770, -1174, -1457, -1957, -2593, -2970, -2277, -295, 1865, 3464, 4543, 4824, 3876, 2055, 654, 712, 1447, 1218, 32, -797, -432, 805, 1706, 1518, 839, 319, -49, -431, -870, -906, -121, 762, 953, 543, -154, -472, 491, 2220, 3434, 3921, 4180, 4254, 3874, 3002, 1797, 318, -1333, -2914, -4003, -3891, -2439, -673, 702, 2097, 3730, 5006, 5384, 4959, 3906, 2093, 251, -339, -64, -366, -1201, -1530, -751, 644, 1488, 1403, 1113, 1108, 1485, 2310, 3304, 4300, 5038, 5019, 4186, 2876, 1797, 1897, 2590, 2390, 1493, 282, -1510, -2424, -1055, 629, 630, 218, 1307, 3649, 5727, 6645, 6653, 6171, 5664, 5492, 5404, 4813, 3930, 3048, 2347, 2308, 2704, 2527, 1833, 1620, 2172, 3023, 3605, 3654, 3273, 2363, 1427, 1860, 3543, 4528, 4159, 3153, 1613, -4, -311, 683, 1183, 630, 651, 2268, 4340, 5634, 5975, 5484, 4104, 2289, 1112, 1207, 1485, 920, 288, 797, 2171, 3228, 3403, 3192, 3214, 3545, 3999, 3907, 2737, 871, -1480, -3794, -4036, -1922, 112, 1190, 2492, 3890, 4630, 4634, 3866, 2511, 1201, 332, 13, 128, 408, 466, 49, -190, 536, 1430, 1566, 1591, 2091, 2454, 2237, 1700, 1252, 955, 482, -387, -1453, -1946, -1162, 252, 842, 680, 661, 1157, 2172, 3244, 3756, 3803, 3523, 2818, 1816, 888, 445, 741, 1247, 1383, 1067, 397, -458, -1290, -1605, -975, 10, 478, 582, 742, 1106, 1652, 2044, 2057, 1812, 1333, 906, 805, 707, 231, -561, -1088, -827, -153, 381, 933, 1686, 2316, 2504, 2060, 1110, 108, -354, -134, -10, -412, -778, -929, -1208, -1813, -2476, -2196, -662, 729, 1258, 1728, 2479, 3099, 3279, 2855, 1864, 411, -964, -1404, -982, -816, -1543, -2591, -2447, -663, 1081, 1639, 1879, 2336, 2710, 3226, 3757, 3625, 2870, 1750, 338, -498, -272, 37, -609, -1992, -2869, -1939, 215, 1541, 2074, 2971, 3922, 4442, 4722, 4480, 3656, 2776, 2221, 2194, 2382, 2126, 1290, 412, 157, 798, 1779, 2553, 3263, 3834, 3992, 3644, 2858, 2137, 1929, 2049, 2298, 2856, 3443, 3656, 3531, 3217, 2659, 1901, 1201, 1074, 1658, 2401, 2599, 2295, 1979, 2017, 2705, 3718, 4292, 4354, 3986, 3078, 2261, 1997, 1590, 647, -570, -1281, -230, 2243, 4109, 4813, 5137, 5046, 4410, 3630, 2819, 1877, 1001, 379, -139, -571, -498, 185, 755, 673, 175, 212, 1471, 2968, 3444, 3141, 2719, 2496, 2944, 3538, 3187, 1981, 619, -289, -146, 513, 475, 239, 960, 2250, 3152, 3544, 3487, 2861, 2019, 1394, 859, 123, -505, -527, -135, 33, -99, 188, 1068, 1723, 1697, 1574, 1803, 2153, 2118, 1680, 1322, 1371, 1397, 1055, 569, 302, 221, 197, 78, -227, -754, -1384, -1953, -2085, -1419, -477, -269, -784, -1156, -1007, -586, -32, 593, 1165, 1597, 1825, 1721, 1316, 808, 350, 5, -258, -602, -907, -897, -649, -351, -52, 102, -60, -565, -1231, -1374, -695, 56, 177, -69, -281, -302, -156, -27, -165, -490, -620, -308, 91, 230, 122, -148, -220, 412, 1347, 1629, 993, -71, -895, -996, -454, 210, 517, 381, 49, -87, 152, 558, 852, 1094, 1356, 1367, 1019, 670, 877, 1615, 2255, 2362, 1980, 1418, 1223, 1567, 1850, 1660, 1281, 1248, 1714, 2298, 2288, 1482, 593, 608, 1643, 2787, 3425, 3681, 3497, 2730, 1799, 1380, 1395, 1148, 516, 136, 266, 445, 469, 691, 1421, 2371, 2940, 3213, 3723, 4345, 4490, 3895, 2682, 1165, -294, -1378, -1789, -1545, -1021, -436, 434, 1507, 2451, 3002, 3020, 2576, 1967, 1386, 1026, 930, 914, 762, 633, 902, 1771, 2762, 3268, 3177, 2636, 1874, 1296, 980, 540, -143, -524, 20, 1161, 1893, 1770, 1134, 691, 974, 1651, 1971, 1974, 2050, 2105, 2005, 2050, 2455, 2908, 2977, 2641, 2128, 1676, 1462, 1273, 734, -149, -998, -1444, -1300, -897, -510, 214, 1322, 2154, 2217, 1797, 1200, 777, 656, 506, 36, -545, -1057, -1250, -855, -557, -1076, -1922, -2143, -1477, -441, 152, 140, -151, -437, -521, -503, -684, -1015, -1363, -1845, -2305, -2470, -2505, -2756, -3087, -2824, -1702, -427, 396, 805, 914, 738, 427, 26, -558, -1476, -2545, -3462, -3885, -3423, -2238, -1218, -811, -844, -1295, -1818, -1582, -655, -70, -310, -1045, -1555, -1266, -565, -337, -760, -1392, -2017, -2344, -1872, -1247, -1551, -2087, -1615, -880, -757, -531, -7, 179, 232, 312, 47, -365, -463, -192, 329, 708, 550, -36, -725, -968, -579, -227, -454, -904, -961, -251, 956, 1860, 2067, 1702, 1145, 770, 641, 493, 347, 406, 490, 430, 399, 555, 687, 516, -6, -408, -33, 803, 1308, 1507, 1783, 2139, 2476, 2524, 2082, 1376, 755, 541, 804, 947, 511, -199, -624, -321, 557, 1245, 1435, 1332, 1254, 1724, 2576, 2911, 2446, 1446, 478, 330, 884, 986, 384, -295, -551, -176, 680, 1379, 1692, 1719, 1644, 1793, 2281, 2644, 2404, 1720, 729, -322, -1107, -1558, -1742, -1493, -848, -201, 298, 708, 1057, 1436, 1714, 1559, 979, 357, 168, 574, 1024, 969, 452, -315, -1119, -1572, -1492, -1074, -609, -244, -4, 123, 268, 550, 836, 879, 598, 67, -594, -1071, -1325, -1681, -2193, -2389, -2011, -1269, -624, -374, -486, -757, -934, -658, 9, 489, 438, 116, -71, 51, 295, 296, -108, -704, -1117, -1196, -1223, -1509, -1887, -2133, -2233, -2277, -2194, -1705, -800, 83, 536, 591, 538, 671, 874, 681, -18, -763, -1297, -1742, -2159, -2210, -1750, -1296, -1153, -1057, -986, -1284, -1866, -2301, -2093, -984, 481, 1481, 1853, 1809, 1493, 1246, 1080, 567, -364, -1401, -2171, -2377, -2127, -1891, -1824, -1730, -1330, -478, 440, 833, 684, 419, 401, 673, 1006, 1187, 1199, 1049, 782, 647, 785, 1006, 994, 634, 48, -467, -803, -1172, -1595, -1723, -1434, -932, -269, 450, 951, 1216, 1552, 2053, 2376, 2291, 1962, 1573, 1133, 627, 20, -490, -698, -720, -542, 40, 776, 1148, 1103, 860, 709, 830, 995, 1004, 954, 818, 633, 655, 820, 615, 28, -468, -612, -548, -549, -622, -473, 56, 762, 1287, 1679, 2020, 2019, 1412, 443, -388, -716, -603, -497, -566, -453, 118, 974, 1743, 2088, 2065, 1790, 1481, 1360, 1325, 1032, 568, 20, -600, -1311, -1916, -1932, -1067, -77, 299, 229, 163, 372, 825, 1155, 1314, 1465, 1532, 1351, 937, 388, -194, -795, -1290, -1461, -1352, -1141, -846, -403, 214, 981, 1552, 1660, 1343, 900, 591, 405, 14, -645, -1244, -1570, -1648, -1531, -1301, -1034, -787, -568, -395, -225, 30, 336, 474, 479, 457, 245, -309, -772, -635, -99, 144, -190, -884, -1685, -2209, -2086, -1585, -1145, -803, -522, -238, 162, 503, 448, -40, -728, -1089, -1081, -1121, -1403, -1698, -1938, -1907, -1296, -319, -52, -1030, -1970, -1727, -1203, -1113, -905, -704, -884, -928, -832, -1031, -1369, -1597, -1606, -1251, -836, -803, -1149, -1625, -1792, -1211, -54, 952, 1427, 1455, 1243, 895, 370, -471, -1504, -2255, -2484, -2305, -1923, -1421, -983, -832, -874, -601, 150, 762, 796, 327, -312, -580, -316, 36, 136, 105, -17, -185, -353, -502, -643, -685, -542, -316, -189, 42, 737, 1255, 905, 417, 510, 423, -189, -579, -627, -675, -505, -122, 167, 527, 1065, 1513, 1852, 2021, 1815, 1388, 1074, 913, 764, 433, -52, -474, -703, -527, -107, -45, -340, -391, -54, 259, 383, 540, 702, 701, 551, 364, 244, 324, 438, 314, 81, 70, 267, 464, 547, 561, 540, 438, 201, -49, -261, -419, -481, -481, -423, -241, -45, -125, -550, -959, -994, -820, -771, -746, -713, -579, -320, -197, -258, -245, -121, -42, -156, -394, -573, -636, -473, -205, -228, -587, -861, -803, -571, -501, -543, -535, -586, -542, -270, -24, -70, -345, -618, -751, -859, -1048, -1255, -1373, -1334, -1109, -742, -455, -440, -687, -995, -1118, -868, -403, -82, 52, -86, -521, -867, -852, -848, -1117, -1458, -1593, -1438, -1141, -850, -648, -629, -756, -840, -748, -628, -803, -1191, -1352, -1004, -365, 34, 2, -184, -529, -894, -872, -569, -508, -775, -1148, -1337, -1263, -1196, -1145, -943, -610, -327, -64, 73, 74, 160, 400, 673, 619, 192, -356, -921, -958, -146, 638, 435, -1328, -3113, -2058, -46, -323, -443, 836, 612, -532, -609, -679, -856, -414, -191, -506, -851, -1075, -830, -152, 207, 21, -284, -475, -438, -217, -100, -234, -376, -402, -570, -809, -852, -977, -1298, -1471, -1356, -1012, -721, -596, -391, -140, 7, 250, 499, 642, 731, 593, 271, -85, -416, -659, -823, -1032, -1291, -1385, -1119, -741, -460, -204, -21, 120, 381, 706, 937, 870, 389, -224, -604, -662, -564, -491, -548, -619, -588, -532, -344, 42, 386, 657, 865, 931, 860, 712, 544, 372, 121, -96, -286, -439, -384, -260, -202, -91, -64, -57, 1, 122, 320, 422, 356, 195, -107, -73, 347, 479, 269, 104, 109, 194, 176, 114, 58, -15, 188, 597, 891, 978, 848, 589, 425, 275, -36, -592, -1105, -1133, -781, -415, -253, -197, -37, 256, 504, 628, 570, 394, 243, 262, 402, 396, 111, -333, -642, -462, -11, 173, 34, -162, -205, -58, 135, 154, 125, 291, 579, 627, 316, -56, -262, -368, -417, -275, 84, 314, 186, 13, -209, -527, -317, 451, 827, 276, -709, -1070, -743, -692, -680, -172, 107, -51, -123, -207, -418, -492, -343, 28, 248, 28, -487, -916, -936, -491, -139, -166, -79, 288, 569, 588, 256, -19, 205, 275, -418, -1551, -2222, -1612, -820, -1106, -1092, -289, -181, -345, 148, 559, 575, 581, 375, -114, -434, -459, -549, -678, -634, -482, -278, -44, 98, -23, -356, -463, -107, 302, 571, 661, 428, -85, -597, -828, -768, -559, -384, -432, -634, -728, -486, -1, 383, 501, 412, 199, 126, 258, 370, 351, 243, 81, -98, -266, -274, -234, -333, -425, -448, -459, -361, -83, 266, 553, 566, 397, 244, 120, 104, 282, 482, 443, 176, -73, -182, -79, 129, 196, 40, -166, -338, -473, -487, -502, -548, -465, -235, -121, -89, 21, 7, -101, -70, 73, 118, 132, 197, 324, 463, 498, 295, -208, -879, -1371, -1399, -1208, -1161, -1189, -1045, -754, -567, -558, -503, -199, 178, 422, 467, 323, -69, -604, -757, -427, -157, -261, -566, -784, -783, -684, -615, -497, -340, -292, -338, -358, -262, -127, -34, 23, -109, -273, -367, -431, -334, -131, -65, -86, -139, -139, -11, 80, 83, 62, -184, -493, -598, -563, -466, -256, 40, 243, 81, -319, -475, -202, 174, 385, 457, 456, 336, 319, 379, 328, 178, 26, -140, -155, 56, 263, 341, 504, 692, 679, 632, 713, 767, 648, 283, -206, -404, -86, 413, 693, 789, 876, 998, 1006, 735, 422, 287, 192, 102, 158, 220, 137, 15, 38, 166, 324, 582, 847, 983, 1005, 882, 530, 110, -103, -5, 56, -22, -59, -113, -89, 63, 186, 336, 524, 636, 685, 704, 659, 544, 236, -57, -139, -74, 19, -32, -214, -177, 79, 245, 215, 143, 225, 404, 514, 529, 498, 465, 372, 156, 37, 82, 116, 186, 288, 180, -107, -331, -212, 191, 360, 225, -32, -322, -268, 165, 407, 493, 582, 555, 476, 331, 165, 118, 141, 138, 13, -190, -239, -205, -229, -322, -412, -455, -470, -389, -216, -12, 190, 320, 444, 519, 506, 491, 468, 452, 530, 529, 291, -12, -326, -361, -58, 165, 121, -23, -136, -139, 70, 322, 342, 193, -89, -404, -387, -168, 153, 847, 1477, 1045, -771, -1999, -685, 479, -686, -1072, -277, -589, -519, 472, 452, 15, 144, 263, 325, 440, 312, -37, -204, -185, -153, -66, 67, 72, -40, -233, -344, -185, 12, 22, -104, -143, -48, -3, -86, -185, -174, 45, 268, 295, 326, 325, 260, 139, -107, -435, -563, -490, -510, -741, -902, -813, -557, -228, 75, 210, 263, 379, 514, 541, 468, 341, 267, 157, -76, -296, -417, -546, -585, -455, -243, -77, -111, -169, -243, -333, -294, -69, 71, 81, 1, 17, 177, 342, 350, 122, -195, -346, -372, -373, -295, -209, -35, 174, 313, 351, 303, 201, 270, 406, 358, 97, -189, -378, -366, -169, 0, 16, -172, -297, 94, 806, 1026, 343, -305, -114, 43, -270, -129, 226, 34, -250, -339, -345, -16, 246, -92, -545, -367, 95, 190, 268, 471, 248, -183, -280, -234, -188, -74, -82, -220, -170, 58, 86, -47, -155, -199, -147, -53, -13, -38, -156, -331, -380, -315, -264, -218, -281, -543, -663, -405, -165, -136, 32, 135, -99, -431, -641, -725, -682, -566, -544, -712, -777, -660, -587, -543, -435, -380, -479, -673, -842, -906, -803, -457, -112, -131, -461, -748, -861, -834, -339, 560, 721, -577, -2086, -1575, 182, 536, 146, -503, -2468, -2674, -156, 11, -1443, -635, -109, -1079, -751, 14, -346, -482, -261, -572, -928, -898, -727, -555, -460, -596, -704, -723, -806, -843, -836, -867, -784, -537, -373, -411, -419, -314, -238, -217, -186, -169, -182, -296, -455, -527, -470, -354, -352, -495, -630, -748, -724, -509, -335, -234, -94, -61, -76, -35, 86, 197, 263, 185, -180, -563, -526, -190, -105, -240, -351, -459, -416, -233, -182, -264, -361, -490, -573, -523, -354, -248, -236, -176, -163, -266, -393, -353, -243, -252, -372, -477, -571, -588, -460, -326, -295, -299, -481, -763, -840, -699, -419, -272, -357, -430, -507, -584, -547, -581, -715, -748, -739, -859, -1100, -1209, -1118, -976, -853, -700, -657, -720, -722, -694, -672, -660, -745, -843, -866, -951, -1093, -1209, -1138, -855, -676, -748, -953, -1156, -1166, -1047, -920, -887, -840, -766, -754, -808, -885, -1075, -1375, -1555, -1479, -1346, -1194, -1043, -969, -949, -932, -900, -790, -636, -593, -650, -749, -966, -1179, -1252, -1232, -1135, -1025, -982, -905, -823, -789, -787, -863, -981, -1146, -1275, -1252, -1081, -860, -795, -790, -728, -734, -761, -638, -510, -487, -533, -642, -777, -849, -910, -1045, -1108, -1202, -1335, -1212, -845, -539, -456, -503, -679, -802, -683, -529, -457, -411, -455, -514, -464, -408, -483, -550, -490, -529, -629, -662, -680, -471, -53, 239, 1, -742, -1193, -849, -410, -451, -375, -38, -136, -384, -277, -210, -309, -255, -199, -267, -182, 21, 53, 28, -16, -149, -201, -136, -67, -87, -148, -163, -105, -27, 57, 144, 202, 133, -27, -136, -171, -115, 85, 296, 374, 270, 161, 137, 135, 81, 50, 204, 320, 316, 322, 282, 133, -44, -142, -178, -233, -373, -481, -539, -512, -383, -144, 70, 242, 351, 354, 362, 410, 439, 442, 380, 310, 220, 178, 137, -5, -152, -194, -145, -65, 72, 239, 327, 282, 190, 101, 68, 62, 54, 32, -19, -74, -41, 112, 212, 191, 214, 167, 5, -89, -86, -108, -154, -170, -194, -222, -247, -303, -329, -285, -212, -163, -90, 21, 158, 257, 227, 155, 84, 66, 153, 283, 270, 142, -51, -337, -461, -342, -223, -255, -336, -457, -522, -422, -274, -166, -111, -123, -169, -123, -26, 12, 43, 85, 83, 75, 41, -110, -299, -369, -328, -222, -156, -173, -291, -435, -490, -473, -470, -402, -305, -278, -266, -207, -137, -74, -76, -104, -46, 24, 10, -87, -242, -375, -456, -525, -560, -540, -450, -290, -147, -102, -76, -62, -67, -70, -122, -190, -243, -265, -220, -165, -149, -92, -48, 4, 94, 160, 173, 238, 312, 328, 217, 26, -63, -5, 71, 97, 67, -17, -90, -163, -183, -133, 20, 203, 238, 139, 88, 119, 210, 355, 414, 358, 265, 123, 13, 0, 21, -18, -54, -24, 36, 38, 73, 108, 39, -20, 29, 155, 261, 291, 186, 53, 87, 240, 354, 299, 124, -42, -184, -247, -221, -175, -210, -254, -181, -37, 176, 487, 711, 702, 574, 379, 206, 200, 278, 238, 58, -174, -340, -387, -385, -416, -428, -349, -148, 32, 118, 124, 66, 3, 4, 9, -44, -147, -251, -303, -295, -326, -315, -297, -397, -510, -535, -530, -561, -527, -458, -393, -315, -235, -292, -334, -320, -301, -311, -329, -299, -163, -63, -96, -168, -262, -341, -330, -337, -456, -485, -419, -396, -315, -241, -285, -285, -202, -171, -219, -375, -620, -739, -682, -578, -556, -582, -606, -568, -515, -466, -409, -340, -318, -311, -345, -400, -412, -380, -367, -427, -564, -697, -727, -653, -543, -497, -570, -675, -769, -733, -665, -579, -454, -332, -275, -274, -286, -328, -349, -287, -262, -319, -344, -335, -337, -289, -243, -318, -460, -536, -547, -564, -475, -313, -201, -209, -292, -420, -461, -288, -48, 80, 45, -108, -241, -281, -228, -210, -333, -498, -548, -485, -413, -384, -357, -318, -255, -195, -202, -263, -353, -382, -349, -316, -239, -196, -284, -421, -480, -408, -340, -284, -252, -275, -289, -242, -218, -198, -154, -198, -333, -442, -452, -421, -436, -532, -596, -610, -608, -622, -606, -601, -560, -499, -449, -456, -473, -461, -466, -424, -396, -442, -489, -484, -521, -609, -665, -679, -666, -672, -680, -578, -390, -243, -148, -57, -73, -164, -277, -347, -337, -229, -151, -223, -225, -169, -203, -239, -268, -355, -404, -383, -408, -505, -596, -594, -441, -304, -270, -179, -98, -56, 1, -34, -203, -378, -478, -546, -593, -606, -514, -316, -182, -213, -276, -353, -401, -403, -327, -319, -352, -375, -367, -381, -364, -357, -314, -262, -213, -135, -106, -157, -225, -357, -513, -638, -698, -680, -604, -472, -330, -258, -290, -337, -323, -282, -240, -254, -348, -462, -522, -531, -501, -476, -446, -450, -605, -750, -750, -668, -592, -531, -405, -281, -224, -181, -148, -203, -320, -400, -469, -522, -598, -687, -726, -711, -672, -560, -461, -387, -340, -341, -325, -292, -313, -314, -219, -150, -164, -188, -284, -372, -409, -471, -498, -472, -482, -537, -597, -572, -519, -461, -345, -270, -315, -389, -427, -360, -222, -94, -52, -134, -300, -420, -383, -347, -378, -427, -478, -537, -529, -412, -302, -262, -209, -69, -3, -23, -95, -160, -171, -125, -72, -108, -236, -292, -293, -363, -401, -324, -204, -162, -212, -369, -480, -519, -444, -268, -72, 52, 101, -7, -178, -349, -438, -502, -552, -455, -299, -241, -236, -249, -243, -209, -145, -101, -39, -23, -88, -134, -130, -143, -71, -2, 27, 38, 37, 35, 51, 69, 59, -49, -193, -278, -333, -315, -170, 17, 113, 136, 144, 130, 156, 248, 363, 408, 408, 339, 242, 239, 226, 131, 83, 76, 69, 97, 165, 263, 313, 312, 266, 199, 142, 165, 223, 307, 374, 321, 249, 229, 187, 143, 150, 171, 191, 209, 275, 351, 368, 295, 191, 68, -50, -62, -13, 31, 33, 67, 136, 207, 310, 412, 455, 425, 413, 410, 364, 226, 69, -55, -103, -58, 14, 75, 195, 292, 246, 198, 187, 168, 193, 248, 311, 303, 256, 180, 97, 69, 66, 76, 101, 100, 92, 118, 115, 86, 79, 160, 208, 189, 223, 242, 240, 268, 321, 374, 319, 255, 288, 263, 206, 191, 189, 172, 163, 145, 151, 123, 26, 28, 98, 166, 164, 127, 89, 111, 197, 299, 365, 394, 392, 427, 504, 451, 287, 168, 109, 36, 67, 170, 194, 185, 245, 329, 357, 308, 306, 323, 319, 295, 189, 78, 122, 256, 339, 350, 269, 151, 84, 79, 58, 51, 23, -5, 55, 153, 247, 325, 381, 382, 371, 338, 333, 320, 240, 146, 92, 86, 197, 262, 225, 189, 273, 384, 449, 492, 529, 555, 586, 613, 574, 512, 484, 480, 482, 461, 360, 297, 311, 300, 330, 381, 414, 423, 422, 411, 390, 421, 472, 558, 630, 654, 707, 751, 689, 608, 553, 439, 396, 460, 444, 352, 275, 303, 403, 487, 549, 633, 735, 768, 733, 720, 750, 757, 712, 626, 610, 629, 553, 438, 388, 350, 342, 329, 346, 354, 389, 426, 501, 539, 538, 532, 559, 581, 550, 517, 507, 520, 484, 437, 373, 279, 197, 209, 310, 403, 411, 421, 431, 384, 367, 444, 498, 471, 397, 306, 307, 380, 465, 548, 633, 632, 542, 562, 548, 417, 271, 195, 175, 217, 288, 365, 383, 380, 394, 430, 534, 610, 604, 573, 533, 517, 546, 599, 594, 548, 515, 546, 571, 570, 522, 451, 382, 349, 358, 391, 518, 637, 645, 578, 506, 457, 421, 410, 448, 517, 539, 534, 545, 568, 564, 603, 618, 599, 664, 746, 719, 653, 609, 630, 710, 791, 800, 766, 725, 686, 649, 588, 628, 757, 784, 668, 630, 676, 670, 678, 731, 789, 822, 842, 843, 832, 870, 909, 919, 877, 775, 723, 706, 619, 580, 610, 594, 598, 650, 706, 739, 777, 808, 804, 755, 758, 775, 821, 921, 1004, 1026, 989, 943, 932, 934, 905, 874, 826, 799, 834, 881, 875, 839, 843, 799, 732, 697, 716, 744, 748, 758, 826, 899, 962, 999, 1035, 1097, 1113, 1063, 960, 846, 739, 702, 716, 715, 720, 683, 638, 671, 780, 903, 949, 921, 821, 775, 819, 872, 892, 883, 862, 835, 792, 777, 792, 821, 805, 737, 615, 564, 563, 561, 569, 576, 551, 591, 660, 646, 671, 747, 799, 777, 706, 628, 570, 598, 683, 661, 517, 443, 494, 573, 639, 691, 717, 742, 732, 747, 769, 760, 767, 732, 683, 660, 648, 667, 645, 643, 687, 650, 595, 660, 730, 695, 638, 682, 788, 885, 966, 956, 860, 794, 818, 814, 741, 676, 643, 577, 522, 546, 586, 662, 815, 874, 861, 849, 794, 722, 702, 734, 746, 690, 665, 653, 591, 545, 556, 570, 643, 729, 700, 682, 705, 733, 767, 735, 624, 590, 654, 705, 658, 609, 623, 646, 649, 629, 580, 562, 546, 459, 364, 345, 386, 474, 544, 613, 683, 707, 704, 679, 572, 467, 490, 569, 570, 520, 493, 476, 439, 450, 499, 497, 508, 536, 535, 539, 572, 564, 583, 616, 595, 563, 554, 548, 520, 517, 543, 553, 567, 567, 532, 519, 489, 451, 449, 525, 552, 527, 511, 454, 429, 442, 421, 422, 426, 368, 310, 235, 256, 337, 355, 327, 265, 263, 303, 291, 260, 242, 196, 181, 188, 188, 242, 267, 189, 111, 69, 41, 51, 89, 127, 171, 217, 235, 195, 133, 164, 232, 217, 180, 151, 97, 63, 17, -84, -162, -119, -83, -130, -155, -171, -214, -229, -151, -37, -1, -27, -46, -110, -177, -198, -218, -244, -195, -162, -217, -217, -170, -168, -218, -255, -259, -293, -257, -219, -214, -258, -301, -345, -369, -392, -337, -351, -421, -433, -409, -405, -362, -334, -319, -262, -165, -65, -22, -92, -239, -427, -579, -583, -546, -513, -474, -442, -385, -310, -266, -241, -278, -369, -499, -611, -611, -511, -481, -456, -402, -375, -327, -312, -357, -380, -372, -351, -283, -238, -274, -404, -582, -608, -511, -482, -481, -412, -305, -247, -211, -191, -196, -213, -208, -181, -268, -339, -328, -337, -295, -217, -243, -296, -337, -329, -342, -324, -231, -258, -349, -282, -217, -229, -182, -82, -95, -160, -169, -192, -156, -74, -52, -92, -56, -17, -18, -24, -8, -25, -85, -81, -38, -21, 35, 104, 137, 99, 55, 79, 76, 103, 114, 57, 31, 33, 11, -37, -18, 14, 43, 40, 68, 97, 103, 37, 64, 137, 87, 8, 33, 118, 142, 69, 2, -47, -120, -124, -66, -69, -70, -36, -9, -7, -7, -9, -4, 26, -15, -87, -106, -120, -110, -61, -46, -51, -58, -89, -158};
156:               
157:               //fractional hat[6662] __attribute__((space(psv))) = {186, 238, 114, -17 -82, -173, -121, -48, -207, -1141, -2167, -3315, -3790, -2701, 213, 1875, 2372, 2238, 1599, 2599, 4745, 4546, 1617, -1717, -3467, -1918, 1438, 2260, 1559, 1261, 1213, 776, 6, -1236, -1427, -875, 422, 1186, 1208, 765, -37, 415, 1645, 2086, 877, -911, -2576, -2320, 623, 2781, 2350, 1596, 629, -216, -351, -457, -1639, -2609, -2842, -1228, 1591, 4815, 5987, 5493, 1623, -2849, -4961, -5170, -3798, -2830, -2289, -1407, -43, 449, 103, -854, -1778, -2454, -2251, -1419, -340, 543, 533, 240, 723, -428, -3227, -4912, -5025, -2784, 827, 2258, 2009, 723, -1883, -3699, -4072, -3097, -1237, 255, 2325, 3795, 3518, 2079, 379, -1351, -3091, -4068, -3733, -2217, 202, 2905, 4550, 4784, 2368, -1734, -4416, -4319, -2628, -1408, -180, 2398, 3397, 2781, 1125, -1638, -3019, -2705, -944, 1075, 2813, 4039, 4419, 3677, 1527, -931, -2467, -2293, -1040, 139, 697, 1325, 2081, 1965, 1736, 1335, 376, -683, -1207, -1455, -1126, 864, 2569, 2594, 1877, 703, 479, 1360, 1454, 487, -199, -994, -950, -383, 562, 1010, 485, -269, -498, 397, 1429, 2225, 2106, 1835, 1063, 923, 1226, 1593, 1201, -1162, -2916, -3327, -1591, 817, 2710, 4105, 4757, 4392, 2321, -984, -3725, -4181, -2906, -734, 651, 2966, 5013, 4484, 4165, 2160, -1216, -3899, -4987, -3839, -929, 1644, 2245, 2790, 2010, 180, -1236, -2485, -2167, -662, 864, 736, 89, -181, -346, -272, -566, -617, -874, -876, -523, -306, 154, 658, 1153, 58, -1442, -1719, -813, 95, 410, 905, 1108, 35, -1903, -2933, -2656, -555, 2215, 3069, 2772, 1611, 442, -288, -1735, -2769, -2600, -1462, 110, 1913, 2684, 1695, 377, -569, -934, -1202, -288, 1020, 1432, 1187, 441, 195, 1548, 1452, -960, -3081, -4089, -3448, 993, 3775, 3581, 2360, 595, -377, -1419, -3405, -4750, -4375, -2136, 2490, 4815, 5255, 2907, -399, -2444, -2071, -2012, -2666, -4074, -2246, 904, 2350, 2956, 1481, -1267, -3553, -4017, -2840, 761, 2995, 2498, 205, -3000, -3815, -2869, -3650, -3683, -2513, -101, 3013, 4471, 4333, 2072, -1770, -3428, -3162, -2805, -2269, -803, 684, 1120, 1296, 1707, 1476, -524, -2156, -3035, -2625, -615, 2333, 4066, 3946, 1062, -3203, -6151, -6440, -2439, 1592, 1949, 2048, 1170, 1386, 3088, 3920, 3256, 622, -3835, -6216, -5580, -1887, 2748, 4570, 4763, 2317, -968, -2185, -1940, -1050, 453, 2031, 3566, 3896, 3472, 1428, -602, -1102, -418, 151, 334, 1452, 2098, 1455, 1182, 546, 892, 1123, 1695, 1884, 677, -1259, -2426, -1517, 1706, 4632, 4330, 2753, -815, -3494, -3658, -990, -325, -2010, -2969, -1715, 1609, 2699, 2531, 2194, 912, -631, -2012, -1818, 328, 2124, 1988, 663, -1193, -3102, -4106, -2480, 674, 1217, 147, -174, 898, 2777, 3543, 1385, -2075, -4870, -3858, -1420, 188, 2092, 3632, 4555, 4157, 2182, -1798, -4135, -4248, -2175, -429, 814, 2350, 3737, 4706, 4809, 1947, -2715, -5635, -6362, -6101, -2825, 1687, 4302, 4962, 4408, 1678, -1885, -4340, -6235, -6043, -4410, -167, 2957, 4920, 6361, 6274, 3950, -17, -5823, -9922, -10645, -4474, 1957, 4850, 7729, 6955, 3312, -54, -3051, -4324, -3842, -2655, 906, 3863, 5867, 6151, 4350, -530, -4877, -7081, -8095, -4178, 2099, 4915, 6040, 5639, 4104, 1831, -1951, -5039, -6476, -6460, -1715, 1904, 4138, 5064, 4339, 1611, -2521, -4374, -4350, -643, 3540, 5289, 5219, 3250, 948, -2666, -4888, -5480, -4559, -2621, 911, 3568, 5116, 4468, 1095, -1859, -3103, -2600, -971, 834, 1714, 1274, -83, -628, 269, 401, -758, -1786, -2119, -1911, -1442, -534, 1034, 1474, 1212, 567, -962, -1905, -1839, -906, -362, -598, -1029, -245, 120, 9, -1038, -1220, -1612, -1689, -646, 1084, 2070, -152, -1499, -2385, -1544, -17, 209, 1137, 385, -1937, -3903, -5438, -3193, 731, 3347, 4858, 4969, 2866, -258, -3626, -3731, -1053, 1789, 2016, 417, -528, -2694, -3068, -1825, 1336, 4827, 4020, 2462, -1008, -1629, 523, 2349, 3843, 3799, 2037, -1618, -3925, -3160, 1147, 4755, 4956, 3300, -717, -3064, -2025, 839, 2424, 1756, -81, -1593, -857, 2129, 3023, 1119, -969, -2607, -913, 1262, 2584, 2289, 1228, -789, -1075, -575, 850, 1413, -232, -1648, -2419, -1311, 1835, 5004, 5529, 4619, 1505, -1900, -3617, -3968, -2668, -1425, -89, 1873, 3329, 3460, 2721, 1154, -1652, -2583, -2766, -764, 1927, 2603, 2824, 1145, -1058, -2124, -2426, -1788, -258, 2199, 3185, 2319, 1022, -133, 340, 1420, 1796, -199, -1910, -2352, -1431, -3, 889, 2226, 2458, 475, -1924, -2834, -332, 1309, 171, -747, -579, 739, 686, 392, 1490, 1761, 931, 60, -1080, -2091, -3727, -3709, -895, 2559, 3859, 3029, 140, -2867, -3281, -2214, -730, 161, 598, 74, 129, 616, 1336, 108, -2576, -4130, -5236, -3729, 144, 2987, 3319, 1286, -1037, -1627, -770, -994, -898, 130, 897, 1574, 1678, 2389, 2576, 2173, 720, -856, -1926, -2337, -937, 2138, 3841, 3063, 993, -884, -543, -154, -1758, -1913, -561, 1418, 2981, 3680, 2980, 830, -1667, -3422, -3238, -2091, -1412, -1041, 730, 2580, 1982, 497, -1271, -2088, -1755, -1547, -1669, -1119, -1134, -1409, 106, 1080, 2008, 1224, -1730, -4635, -6123, -4922, -1040, 2982, 4288, 3479, 743, -2139, -3198, -3124, -2782, -1857, -1149, -782, 616, 3090, 3931, 2436, 149, -900, -957, -1900, -2200, -1098, -455, -70, 148, 2072, 4058, 4448, 4730, 2951, -150, -3382, -5878, -3768, 529, 2520, 1951, 974, 271, -929, -1166, -794, 1908, 2048, -537, -2381, -2885, -654, 2854, 4455, 3834, 580, -2615, -4171, -2962, -622, -249, -782, 1840, 3742, 4414, 3902, -282, -3403, -3750, -2413, -950, 418, 1911, 3335, 1746, -126, -1977, -1749, 1350, 3278, 3149, 1447, -143, -224, 575, -736, -2373, -1855, -305, 1068, 1231, 2724, 3938, 3191, 918, -2187, -3752, -4381, -3655, -361, 3459, 4033, 2907, 1281, 997, 1259, -324, -2305, -3490, -2715, 845, 2883, 2885, 2433, 1768, 1291, 1737, 964, -1337, -2919, -3903, -2783, 480, 3834, 5169, 4842, 1552, -2219, -3983, -3549, -1040, 508, 1057, 1798, 1591, 2228, 2280, 241, -2187, -4057, -3716, -1547, 534, 611, 1111, 2834, 2698, 1062, -766, -1132, -954, -1920, -2907, -1749, -71, 352, 1033, 348, -1530, -3225, -3060, -1268, 1786, 3400, 3354, 2459, 721, -1030, -3099, -3564, -3942, -3258, 549, 3404, 4848, 4994, 3354, -1207, -4628, -5752, -3755, 781, 4295, 5662, 4925, 1255, -1550, -3263, -4711, -4054, -1585, 968, 1904, 3381, 4703, 4101, 1645, -1976, -5027, -5550, -3889, -2226, -1329, 593, 3200, 4604, 4697, 2711, 156, -2227, -3769, -3983, -3784, -2643, 248, 2616, 3956, 3411, 121, -2862, -3746, -3403, -1697, 1040, 2180, 1959, 589, -957, -2155, -3008, -2098, -270, 1687, 1116, -362, -1254, -638, 839, 541, -615, -1278, -2360, -3105, -3309, -1815, 1675, 3522, 2696, 561, -1635, -2789, -2661, -2161, -1629, -815, 1210, 2867, 2203, 70, -2046, -3332, -2399, 284, 1397, 1245, 1377, 1666, 1715, 1042, -1143, -2863, -3332, -2347, 14, 2172, 3012, 3117, 2185, 434, -637, -1147, -1268, -1195, -23, 1959, 2493, 2239, 1557, 615, -330, -51, 197, -534, -1904, -1913, 643, 3271, 4108, 2006, -979, -2646, -2774, -1756, 173, 1703, 1261, 337, 156, 1428, 1844, 134, -1547, -2455, -1323, 585, 1345, 563, 579, 351, 336, 526, 1294, 1526, 516, -374, -944, 199, 1372, 1692, 427, -272, -721, -1008, 28, 1352, 2533, 1447, 215, -769, -376, 814, 1747, 1936, 418, -750, -1843, -1313, 415, 1791, 1352, -21, -565, -813, -253, -128, 681, 1014, 0, -1015, -1473, 373, 2021, 1952, 65, -1877, -3120, -3182, -2102, -72, 1846, 2014, 1463, -23, -1559, -2009, -1178, -1296, -1827, -1815, -312, 1975, 2901, 2091, -490, -3053, -4400, -3907, -2075, -230, 715, 2045, 3033, 2274, 768, -733, -1510, -2418, -2940, -2158, -747, 1268, 2572, 3638, 2766, 543, -2116, -3936, -2881, -305, 272, -306, 65, 1024, 2614, 2730, 1771, 393, -1364, -2119, -2438, -1645, 288, 1838, 2817, 1677, 511, -647, -867, -674, 55, 585, -75, -315, -959, 492, 2076, 3114, 3260, 1348, -1391, -3680, -2836, 845, 2963, 2233, 504, -1148, -811, 329, -457, -1160, -749, 578, 935, -33, -467, -224, -262, -515, -3, 625, 560, 225, 740, 1566, 1796, 1205, 183, -711, -1241, -1283, -935, -620, -468, -362, -432, -1050, -1360, -881, -86, 648, 1526, 1999, 1771, 631, -456, -1612, -2425, -1870, -60, 468, -80, 173, 322, 478, 193, 429, -635, -1735, -2918, -3438, -1386, 999, 2707, 1361, -487, -1347, -1535, -409, 284, 1318, 601, -1048, -1881, -2624, -1478, 1264, 3047, 2045, 93, -1313, -1549, -635, 101, 521, 138, -1142, -1960, -1993, -567, 1258, 1607, 1536, 1614, 1157, 514, -353, -1205, -943, -439, 528, 2047, 3002, 2684, 1259, 80, -304, -514, -412, -158, 813, 1132, 889, 17, -110, 1021, 1678, 1193, -705, -1431, -1704, -1203, 576, 3146, 4302, 2477, -166, -2306, -2251, -1636, -1772, -1641, -946, -816, -745, 1353, 2875, 3304, 2688, 311, -1819, -3566, -3241, -360, 1978, 3319, 2514, 321, -1920, -3164, -1548, 717, 1680, 1517, 642, -413, -883, -528, 508, 673, -442, -1310, -1500, -735, 577, 1496, 1576, 1598, 1400, 340, -798, -1211, -789, 182, 951, 1262, 784, -511, -1513, -1414, -67, 1385, 1725, 1605, 906, -306, -1203, -1763, -1728, -1600, -1099, -130, 981, 1333, 1060, 565, 204, 4, -500, -862, -1478, -1750, -2079, -1154, 1112, 2685, 2453, 815, -708, -1700, -1517, -747, 102, 437, 435, 541, 646, 927, 1140, 717, -309, -1470, -2313, -2438, -1622, 243, 1561, 1720, 1527, 946, 240, -238, -732, -1254, -1664, -1575, -427, 1359, 2005, 1564, 891, 129, -232, -562, -1120, -1467, -1147, -153, 1095, 1634, 1550, 930, 433, 385, 839, 302, -778, -1404, -717, 1059, 2556, 2711, 1582, -248, -2173, -3099, -1994, 188, 676, 96, 123, 1346, 2719, 2253, 379, -1377, -2549, -2395, -1065, -335, -66, -38, 241, 919, 1312, 417, -1261, -2531, -2717, -1408, 524, 1238, 774, 320, -582, -1774, -2694, -2185, -596, 195, 200, 584, 906, 306, -629, -1933, -3121, -3402, -2520, -522, 1141, 2091, 2585, 2619, 1440, -655, -2595, -3550, -3093, -1636, 70, 1228, 2461, 2842, 1783, 128, -1436, -2238, -2249, -1761, -759, 1367, 2780, 2281, 1053, -392, -1292, -1608, -1583, -1042, -7, 1076, 1822, 1896, 1234, -57, -1534, -2350, -2085, -1053, -179, 444, 1814, 2570, 1130, -691, -1847, -1827, -532, 201, -106, -469, -595, -273, 600, 818, 169, -501, -580, -186, 111, 168, 51, 168, 51, -376, -463, -260, 13, 32, 341, 966, 1107, 406, -718, -1307, -1439, -1143, 46, 1425, 1572, 521, -584, -883, -636, -37, 724, 1047, 526, -350, -1097, -1451, -1049, 233, 1434, 1660, 1104, 239, -529, -992, -1042, -406, 413, 654, 425, 455, 776, 863, 247, -592, -944, -646, -23, 351, 644, 771, 682, 813, 973, 83, -1341, -2208, -2057, -372, 1597, 2148, 1814, 1293, 800, 406, -632, -1891, -2488, -2214, -990, 916, 2193, 2058, 1148, 148, -419, -597, -362, 62, 337, 277, 7, 514, 1475, 1760, 1100, 42, -642, -671, -629, -1164, -1321, -490, 1098, 2100, 2025, 1454, 665, -233, -954, -1016, -420, 86, 288, 466, 382, 47, -46, 34, -19, -62, -96, 56, 100, 39, 15, 194, 173, -414, -752, -648, -144, 474, 897, 815, 134, -645, -1169, -1239, -915, -499, -198, 122, 562, 888, 683, -86, -916, -1423, -1797, -1959, -1696, -749, 557, 1038, 541, -493, -1639, -2274, -2016, -1220, -729, -580, -214, 565, 1048, 521, -411, -1220, -1463, -1387, -1144, -1260, -1148, -564, 155, 780, 572, 304, -339, -1454, -2600, -2943, -1557, 457, 1605, 1169, 217, -912, -1731, -872, 951, 1411, 401, -590, -920, -426, 638, 730, 37, -419, -545, -21, 569, 758, 522, 84, -258, -162, 218, 596, 768, 534, 23, -389, -394, -203, -61, -77, 26, 15, -198, -133, 120, 710, 957, 617, -392, -1410, -1899, -1389, -411, 258, 355, 740, 1216, 1263, 984, -159, -1420, -2589, -2203, -447, 1616, 1770, 822, -101, -601, 300, 1773, 1374, -442, -1617, -1479, -313, 1079, 1483, 1367, 804, -327, -789, -322, 641, 851, 742, 1044, 1039, 847, 811, 769, 531, 143, -374, -646, -563, -66, 594, 760, 752, 1111, 1552, 1342, 474, -267, -561, -484, -245, 308, 800, 672, 179, -98, 378, 992, 820, 182, -137, -102, -196, -214, 14, 456, 444, 320, 599, 816, 551, 28, -232, -163, 67, 220, 145, 218, 329, 329, 197, 313, 768, 534, -171, -690, -579, -48, 59, -235, -264, -26, 134, 174, 169, 394, 560, 387, 156, -120, -147, 72, 558, 752, 350, -147, -265, 210, 576, 486, 118, -106, -221, -55, 715, 1605, 1550, 594, -600, -1537, -1769, -1006, 124, 495, 305, 283, 196, 129, 186, 104, -190, -463, -533, -474, -467, -363, -62, 76, -302, -797, -870, -516, -235, -251, -384, -303, -145, -118, -540, -953, -1030, -921, -484, -388, -374, -758, -967, -891, -297, 700, 1260, 1124, 116, -879, -1749, -1760, -860, 457, 476, -609, -1444, -1421, -38, 1852, 2271, 1254, 91, -1024, -1634, -1501, -831, -70, 219, 232, 425, 597, 450, 64, -212, -468, -752, -723, -175, 314, 188, 30, 26, 102, 53, -16, -120, -572, -1171, -1178, -230, 1166, 1335, 534, -43, -516, -764, -687, -629, -295, 355, 790, 721, 664, 677, 576, 312, -82, -223, -126, -81, -145, -193, -239, -269, 167, 1096, 1681, 1107, 173, -436, -882, -1133, -1127, -497, 448, 1023, 1169, 1128, 727, 85, -373, -641, -607, -354, -152, 5, 116, 407, 666, 800, 676, 174, -487, -892, -810, -470, 17, 461, 821, 696, 195, -430, -878, -971, -698, -9, 535, 695, 419, 160, 63, -264, -693, -1087, -1175, -632, 278, 380, -402, -903, -936, -477, 254, 739, 829, 516, -122, -686, -852, -583, -518, -827, -1071, -632, 378, 1178, 1074, 515, -315, -1019, -1218, -618, -2, 67, -3, 215, 943, 1362, 1039, 78, -679, -978, -710, 170, 1009, 1308, 722, -33, -422, -357, 223, 825, 1103, 545, -92, -355, 123, 1157, 1793, 1466, 549, -403, -982, -692, 465, 1248, 997, 487, -124, -503, -218, 716, 1115, 591, -100, -226, 441, 965, 368, -494, -889, -870, -327, 401, 647, 438, 103, 172, 534, 377, -308, -873, -790, -482, -173, 346, 931, 804, 103, -478, -680, -302, 174, 414, 463, 412, 142, -24, -70, 24, -84, -470, -614, -398, 74, 657, 1143, 1182, 589, -287, -997, -1051, -458, 85, 174, 421, 771, 751, 169, -592, -1095, -1163, -539, 510, 1112, 487, -607, -1336, -1381, -340, 947, 1120, 550, -211, -988, -1198, -788, -446, -737, -994, -890, -142, 1018, 1583, 1032, -107, -1074, -1503, -998, -200, -42, -124, -47, -127, -249, -340, -285, -155, -301, -499, -377, -5, 577, 1063, 1160, 850, 243, -420, -951, -1073, -399, 491, 604, 248, 67, 189, 465, 561, 427, 45, -473, -689, -481, -243, -93, 180, 642, 841, 491, -185, -688, -651, -4, 598, 526, 233, 11, 69, 116, -192, -533, -605, -370, 35, 438, 429, 92, -386, -542, -233, 162, 124, -244, -535, -503, 26, 548, 368, -207, -668, -911, -669, 68, 1007, 1356, 815, 248, -171, -562, -920, -1344, -876, 286, 1193, 848, 162, -462, -699, -329, 133, -17, -579, -883, -717, 325, 1519, 1689, 685, -381, -1139, -1121, -312, 402, 327, -27, -118, 47, 415, 877, 1212, 1092, 514, -159, -603, -647, -264, 384, 719, 489, -26, -240, 195, 693, 630, 172, 128, 412, 538, 409, 163, 198, 156, 146, 75, 29, -57, -212, -2, 330, 450, 295, 268, 471, 661, 574, 440, 360, -31, -497, -800, -646, -127, 398, 568, 580, 695, 688, 453, 56, -417, -743, -895, -663, -220, 228, 375, 293, 321, 431, 289, -316, -830, -952, -407, 319, 532, 372, 112, -85, -25, 292, 424, 177, -207, -542, -637, -434, -202, -159, -226, -84, 239, 506, 339, -50, -381, -428, -161, 376, 818, 787, 376, -19, -80, 136, 238, -13, -308, -495, -423, 188, 961, 1067, 572, 53, -361, -414, -175, 23, 47, 138, 418, 759, 901, 604, 183, -141, -361, -450, -428, -120, 428, 959, 1000, 582, -43, -596, -684, -402, -85, 131, 450, 743, 767, 556, 71, -480, -847, -873, -374, 329, 727, 700, 483, 194, -110, -301, -229, -52, -42, -135, -203, -28, 281, 288, -78, -460, -498, -91, 407, 538, 531, 577, 482, 178, -328, -685, -737, -649, -541, -458, -177, 258, 613, 602, 345, 14, -223, -300, -462, -563, -514, -377, -199, 92, 326, 340, 25, -442, -737, -780, -543, -371, -344, -248, -31, 135, 88, -150, -364, -602, -689, -553, -131, 231, 146, -158, -299, -222, -285, -512, -643, -502, -280, -260, -337, -315, -201, 6, 121, 8, -339, -647, -629, -324, -246, -438, -463, -237, 102, 367, 552, 388, -108, -620, -718, -464, -153, -180, -315, -385, -401, -226, -24, 11, -55, -138, -157, 55, 216, 192, -72, -353, -482, -533, -435, -376, -207, 42, 350, 540, 483, 165, -231, -583, -692, -583, -345, -67, 218, 442, 459, 266, 108, 17, -61, -50, -9, 101, 124, 157, 243, 239, 16, -344, -461, -240, 168, 435, 530, 643, 548, 270, -33, -247, -384, -497, -376, 96, 612, 720, 499, 168, -52, -192, -275, -270, 38, 486, 632, 434, 173, 81, 101, 24, -189, -388, -285, 122, 701, 1127, 1099, 597, 30, -383, -393, -243, -140, -107, -24, 89, 249, 494, 758, 678, 75, -631, -1042, -862, 32, 890, 1029, 598, 50, -181, 74, 544, 639, 382, 89, -144, -400, -476, -279, 34, 199, 133, 68, -70, -276, -439, -403, -132, 256, 529, 633, 334, -5, -127, -13, 34, -100, -196, -203, -30, 130, 154, -70, -373, -562, -443, -295, -332, -338, -183, 22, 22, -173, -453, -670, -717, -372, 167, 582, 542, 175, -120, -262, -307, -386, -456, -505, -501, -440, -132, 117, 58, -128, -213, -145, -251, -504, -545, -317, -34, 149, 223, 97, -231, -601, -760, -634, -81, 402, 451, 96, -279, -427, -480, -449, -477, -389, -299, -183, 39, 250, 234, -13, -242, -184, 32, 58, -142, -344, -374, -332, -170, 143, 394, 328, -74, -511, -802, -813, -589, -150, 372, 610, 457, 155, -145, -372, -345, -274, -207, -270, -359, -381, -299, -146, -132, -277, -293, -143, 136, 360, 389, 202, -126, -436, -682, -742, -594, -434, -236, -8, 85, 74, 2, -10, -14, -98, -310, -435, -483, -330, -61, 178, 207, 141, 71, -87, -317, -438, -361, -135, 59, 117, 154, 189, 200, 128, -46, -291, -459, -462, -175, 199, 394, 263, -30, -301, -453, -292, 22, 184, 104, 30, 177, 442, 639, 590, 264, -106, -406, -532, -539, -406, -110, 394, 746, 830, 605, 232, -120, -325, -299, -127, 95, 275, 457, 535, 452, 184, -74, -181, -231, -187, 44, 348, 510, 406, 174, 21, 24, 82, 45, -153, -340, -275, 87, 475, 547, 283, 6, -111, -41, 132, 209, 217, 209, 176, 170, 200, 238, 201, 63, -109, -176, -18, 295, 424, 252, -31, -123, 0, 190, 192, 23, -28, 125, 354, 405, 291, 157, 70, 132, 211, 158, 57, -1, 114, 182, 181, 74, -12, -104, -125, -6, 52, 71, 33, 100, 252, 477, 460, 270, -14, -214, -278, -359, -394, -333, -62, 232, 372, 279, 96, -66, -189, -210, -238, -258, -204, -49, 221, 293, 148, -146, -385, -462, -344, -135, 39, 179, 116, -21, -233, -355, -277, -50, 166, 168, 1, -119, -131, -71, 1, 17, 18, 50, 46, -12, -43, -54, 9, 95, 197, 215, 134, -18, -238, -375, -418, -262, -19, 66, -65, -240, -287, -75, 230, 359, 281, 94, -125, -248, -311, -260, -206, -204, -254, -241, -199, -153, -94, -196, -342, -368, -206, 101, 235, 138, -83, -161, -130, -29, -215, -397, -483, -364, -33, 167, 240, 59, -137, -250, -193, -88, 24, 53, -26, -200, -409, -429, -328, -230, -48, 184, 307, 273, 74, -190, -336, -332, -184, -51, -57, -152, -149, -13, 71, -38, -213, -280, -216, -88, -7, 19, 47, 118, 199, 251, 192, 4, -164, -278, -215, -68, 150, 344, 436, 284, -3, -277, -302, -137, 22, 3, 0, 32, 75, 109, 171, 158, 40, -23, 56, 206, 244, 161, -52, -243, -283, -167, 12, 107, 113, 72, 15, 27, 28, -32, -103, -45, 40, 165, 155, 74, 64, 118, 116, 107, 86, 112, 195, 314, 407, 278, 150, 60, 132, 214, 172, 37, -51, -3, 123, 235, 347, 455, 521, 470, 299, 76, -13, 45, 181, 246, 253, 273, 253, 286, 370, 384, 210, -10, -124, -115, 1, 263, 576, 699, 534, 286, 79, 75, 154, 190, 134, 86, 131, 246, 341, 338, 294, 279, 207, 146, 152, 207, 218, 132, 54, 133, 330, 584, 723, 667, 396, 5, -246, -209, 65, 335, 380, 336, 305, 341, 375, 438, 360, 205, 34, -49, 49, 188, 311, 331, 372, 438, 460, 372, 209, 56, -23, 131, 362, 515, 412, 131, -92, -186, -55, 112, 204, 152, 172, 140, 173, 223, 238, 173, 71, 3, 55, 138, 204, 145, 66, 30, 89, 158, 107, -16, -106, -72, 17, 96, 68, 3, -29, -17, -21, -23, -11, 36, 30, 32, 9, -52, -80, -66, -77, -150, -253, -320, -249, -136, -3, 35, -4, -153, -297, -301, -212, -41, 124, 140, 6, -161, -199, -209, -124, -40, -31, -12, -21, -18, 27, 54, 3, -114, -284, -454, -513, -382, -181, 25, 95, 84, 31, 112, 195, 163, 38, -122, -211, -240, -208, -136, -25, 34, 98, 163, 166, 46, -37, -70, -175, -253, -234, -67, 108, 141, 162, 161, 172, 95, -19, -96, -85, -26, 22, 47, 41, 32, 41, 137, 156, 51, -155, -268, -187, 14, 286, 478, 453, 194, -160, -366, -369, -177, -7, 142, 227, 190, 139, -21, -136, -203, -248, -230, -191, -121, 32, 114, 45, -57, -201, -154, 20, 191, 232, 148, -10, -113, -60, 42, 121, 115, 86, 44, 71, 48, -46, -98, -169, -174, -97, 54, 160, 196, 127, 70, 20, -31, 36, 123, 269, 270, 153, 18, 38, 95, 90, -61, -212, -255, -212, -96, 63, 229, 263, 153, -33, -169, -168, -30, 210, 351, 378, 254, 83, -46, -121, -115, -54, 9, 22, 11, 71, 155, 244, 271, 197, 61, -34, -8, 109, 259, 336, 201, 19, -150, -101, 77, 147, 169, 112, 42, 14, 77, 185, 282, 214, 120, 137, 133, 149, 111, 100, 168, 181, 141, 1, 2, 32, 81, 136, 80, 50, 25, 80, 91, 117, 81, 15, 7, 7, -5, -105, -117, 3, 199, 337, 366, 366, 318, 218, 47, -133, -132, -52, 90, 274, 335, 311, 202, 63, -78, -187, -181, -97, 69, 196, 282, 332, 227, 48, -175, -241, -71, 196, 325, 317, 163, -44, -141, -121, -70, -64, -84, -52, 33, 99, 84, -71, -230, -269, -191, 14, 200, 238, 138, -29, -129, -131, 25, 84, 24, -80, -144, -146, -22, 72, 12, -124, -237, -252, -204, -56, 56, 100, 99, 102, 106, 81, 46, -13, -43, -24, 14, 5, -69, -89, -96, -99, -63, 4, 51, 32, -18, -66, -29, -8, 24, 36, 99, 125, 106, 42, -81, -173, -184, -115, -7, 64, 141, 208, 161, 13, -110, -180, -163, -138, -121, -46, 33, 95, 42, -31, -105, -61, 3, -3, 0, 9, -6, -68, -118, -103, -45, -11, -76, -148, -190, -142, 12, 73, 50, -44, -110, -107, -43, 12, 7, -9, 1, 48, 89, 84, 70, 27, 29, 48, 26, -6, -49, -41, -49, -19, 36, 154, 256, 331, 322, 232, 126, 49, 81, 123, 230, 177, 180, 140, 91, 110, 132, 129, 142, 148, 224, 318, 322, 333, 258, 177, 123, 111, 167, 265, 309, 357, 342, 337, 303, 197, 226, 295, 316, 304, 208, 155, 202, 225, 248, 246, 244, 285, 306, 354, 418, 408, 364, 259, 203, 243, 283, 299, 276, 264, 246, 281, 319, 372, 363, 266, 192, 181, 177, 197, 215, 199, 196, 200, 229, 241, 223, 202, 169, 202, 197, 156, 161, 151, 172, 131, 103, 58, 21, 54, 118, 169, 178, 119, 93, 59, 21, 17, -23, -34, -7, 121, 221, 172, 69, -33, -70, -11, 61, 110, 97, 16, 2, -12, -25, -83, -138, -201, -124, -38, 37, 25, -3, -19, -1, 8, -1, -34, -81, -51, -23, 46, 103, 59, 3, -75, -164, -182, -116, -9, 96, 149, 131, 75, -9, -69, -109, -107, -63, 33, 107, 173, 182, 125, -4, -129, -165, -101, -16, 14, 35, 20, 44, 60, 101, 192, 231, 168, 74, 0, -1, -24, -29, -22, 25, 80, 135, 127, 74, 15, -1, 21, -17, -98, -125, -86, -13, 29, -46, -100, -158, -133, -8, 95, 127, 55, -78, -167, -258, -245, -220, -223, -228, -187, -104, 12, 62, 51, -79, -269, -391, -387, -206, -73, -32, -90, -118, -129, -113, -160, -247, -354, -453, -388, -287, -179, -129, -212, -342, -426, -464, -389, -281, -180, -78, -76, -129, -211, -284, -353, -362, -283, -232, -185, -154, -151, -192, -167, -243, -243, -253, -269, -193, -132, -13, 9, -11, -61, -136, -164, -183, -164, -73, -34, -9, 15, 0, -35, -31, 24, 46, 25, -30, -30, -49, -36, -27, -33, 1, 59, 139, 202, 184, 118, 37, 8, 39, 126, 174, 189, 171, 134, 49, 31, 14, 19, 38, 101, 172, 213, 170, 87, 42, 32, 72, 125, 195, 242, 242, 224, 138, 105, 74, 27, 47, 77, 127, 169, 200, 199, 212, 141, 105, 66, 46, 87, 113, 145, 187, 166, 98, 117, 129, 10, 9, 4, 41, 116, 132, 152, 115, 77, -14, -104, -71, -26, 68, 131, 114, 78, 25, -8, -37, 0, 35, 83, 111, 116, 120, 143, 116, 109, 70, 56, 2, 37, 138, 71, 49, -30, 0, -24, -5, 23, 30, 21, 31, 100, 178, 210, 187, 130, 100, 56, 118, 156, 144, 77, 9, -41, -14, 24, 31, 53, 31, 34, -4, 19, 22, 55, 88, 66, 69, 73, 57, 56, 49, 22, 1, 25, 51, 77, 70, -10, -72, -69, -19, 85, 124, 121, 60, -11, -81, -102, -45, 3, 69, 93, 99, 96, 34, -3, -65, -73, -82, 4, 58, 69, 54, -46, -93, -77, -89, -65, -81, -109, -79, -36, 13, 6, -47, -80, -120, -101, -89, -96, -138, -127, -122, -58, -83, -118, -150, -183, -100, -89, -70, -137, -138, -117, -73, -32, -62, -58, -100, -125, -155, -97, -69, 11, -64, -161, -120, -184, -128, -123, -43, -68, -82, -116, -73, -72, 19, 47, 22, -47, -143, -148, -79, -21, 7, 39, 53, 50, 36, -1, -11, -32, -42, -13, 39, 56, 63, 41, 87, 120, 121, 114, 104, 74, 77, 143, 205, 176, 87, 6, -39, -27, 37, 129, 139, 178, 131, 97, 41, -6, 21, 3, 35, 92, 113, 153, 142, 121, 89, 51, 54, 59, 85, 113, 131, 130, 110, 56, 97, 83, 90, 97, 89, 101, 97, 98, 108, 160, 179, 185, 148, 119, 61, 11, 12, 38, 113, 169, 177, 177, 138, 65, 23, -21, -26, -2, 46, 66, 57, 72, 81, 65, -6, -70, -44, 7, 106, 145, 145, 115, 45, 28, -40, -102, -134, -128, -131, -45, 45, 88, 89, 48, 31, -77, -57, -72, -64, -70, -26, 30, 56, 74, 45, 2, -64, -75, -81, -62, -46, 2, 16, 38, 9, 25, -7, -39, -42, -46, -47, -79, -109, -133, -127, -50, -35, -30, -20, 0, 8, -25, -33, -75, -39, -27, -52, -76, -127, -159, -143, -118, -71, -67, -89, -86, -116, -107, -89, -77, -62, -69, -54, -81, -107, -120, -124, -137, -181, -206, -232, -201, -123, -110, -89, -118, -156, -157, -186, -189, -213, -198, -212, -236, -246, -202, -185, -192, -154, -188, -192, -249, -226, -223, -219, -190, -191, -141, -179, -223, -229, -229, -168, -114, -107, -154, -213, -249, -249, -247, -195, -158, -174, -146, -179, -170, -199, -233, -283, -255, -271, -231, -221, -216, -214, -195, -192, -174, -185, -212, -265, -294, -317, -266, -206, -201, -167, -187, -215, -218, -229, -188, -179, -148, -185, -215, -218, -190, -169, -166, -173, -223, -248, -262, -246, -220, -195, -193, -216, -248, -251, -246, -263, -259, -236, -246, -250, -289, -273, -287, -263, -245, -240, -205, -230, -197, -195, -181, -142, -97, -152, -205, -276, -312, -284, -274, -246, -237, -234, -196, -157, -151, -123, -145, -160, -176, -247, -228, -230, -218, -153, -137, -140, -142, -201, -220, -209, -214, -180, -142, -140, -158, -165, -134, -97, -99, -107, -141, -187, -222, -175, -114, -44, -51, -48, -90, -131, -126, -110, -92, -70, -70, -44, -53, -33, -66, -73, -84, -100, -61, -33, -20, 7, -6, -40, -91, -129, -102, -51, -26, -8, 1, 15, -12, 13, 53, 20, -26, -60, -32, -34, -2, 14, 79, 106, 112, 83, 59, 1, -31, -16, 4, 41, 74, 60, 31, 34, 2, 12, 20, 30, 27, 20, 11, -4, 8, 25, 43, 64, 15, 22, -3, -21, -19, 28, 53, 57, -6, -57, -69, -50, -19, 29, 14, -12, -75, -72, -35, 18, 14, -18, -107, -158, -146, -133, -97, -39, -13, -60, -61, -81, -96, -125, -109, -142, -147, -135, -109, -51, -33, -71, -117, -150, -165, -163, -79, -48, -50, -110, -129, -178, -187, -212, -205, -173, -159, -124, -125, -76, -87, -75, -134, -207, -234, -238, -196, -163, -143, -113, -139, -162, -177, -183, -171, -185, -165, -165, -155, -138, -143, -178, -154, -176, -152, -178, -148, -152, -194, -223, -218, -197, -173, -160, -166, -177, -187, -162, -147, -106, -83, -98, -123, -198, -211, -193, -127, -79, -108, -108, -126, -73, -57, -51, -52, -103, -147, -156, -183, -193, -182, -159, -60, -75, -56, -52, -131, -140, -189, -191, -226, -173, -141, -133, -134, -156, -210, -249, -224, -210, -164, -145, -137, -154, -153, -160, -149, -161, -179, -186, -213, -202, -192, -184, -174, -158, -117, -117, -122, -123, -110, -138, -111, -129, -103, -117, -151, -143, -126, -112, -93, -64, -58, -67, -103, -135, -115, -86, -72, -75, -64, -36, -45, -41, -32, -33, 7, -28, -41, -57, -52, -35, -27, 6, -10, -41, -18, -73, -41, 3, 17, 6, 10, -13, -7, 9, -1, 4, -23, 3, 32, 36, 13, -29, -42, -18, -34, -15, -25, -17, 2, 22, -7, 31, 21, -3, -13, -52, -44, -52, -9, 4, 20, 12, 6, -51, -67, -109, -142, -98, -96, -64, -15, -7, -38, -49, -100, -137, -148, -123, -98, -105, -131, -120, -142, -128, -79, -116, -73, -112, -147, -158, -159, -151, -124, -126, -137, -129, -141, -145, -133, -130, -122, -111, -134, -110, -161, -153, -187, -179, -155, -151, -124, -136, -96, -89, -83, -144, -191, -201, -155, -121, -120, -100, -79, -101, -140, -157, -149, -144, -122, -91, -110, -98, -102, -109, -107, -115, -134, -134, -113, -81, -75, -67, -92, -98, -91, -78, -60, -68, -81, -90, -101, -67, -48, -37, -72, -28, -72, -48, -67, -94, -91, -132, -126, -106, -68, -66, -45, -70, -70, -74, -76, -63, -72, -52, -60, -73, -115, -155, -172, -139, -132, -128, -117, -118, -121, -117, -129, -146, -151, -176, -167, -169, -173, -138, -178, -152, -167, -153, -180, -199, -202, -205, -174, -147, -132, -148, -174, -180, -175, -178, -164, -194, -167, -164, -165, -226, -189, -216, -214, -221, -229, -201, -206, -201, -231, -219, -217, -207, -210, -210, -231, -233, -241, -221, -181, -175, -150, -149, -156, -180, -198, -182, -176, -185, -164, -139, -137, -117, -91, -122, -175, -195, -207, -184, -123, -123, -88, -128, -128, -156, -152, -161, -175, -141, -111, -74, -34, -30, -50, -42, -110, -116, -85, -75, -47, -56, -50, -37, -29, -38, -43, -72, -44, -14, -23, -17, -3, -10, 5, 5, -3, 19, 5, 12, -5, -35, -29, -37, 10, 39, 55, 55, 56, 29, 4, -26, -21, -15, -5, 34, 42, 42, 60, 57, 47, 32, 19, 40, 33, 56, 66, 30, 5, -17, -10, -1, 36, 25, -3, 8, 24, 32, 56, 38, -10, -30, -47, -24, -25, -26, 19, 27, 31, 23, -18, -2, -12, -19, -33, -26, 18, -7, 5, -4, -9, -16, -15, -23, -4, -10, 3, -11, 4, -8, -37, -39, -16, 3, 13, 4, -31, -6, 5, -12, -7, -17, -39, -65, -40, 3, -1, 27, 15, 52, -30, -31, -67, -69, -13, -17, -23, -25, -31, -8, -17, 9, 30, 1, -21, -55, -41, -54, -2, 1, 34, 28, -9, -7, -20, 28, -1, 26, -5, -9, -18, -48, -35, -21, -38, -36, -23, -42, -67, -54, -59, -38, -82, -91, -69, -54, -17, 3, -12, 1, -22, -50, -85, -77, -49, -37, -25, -27, -69, -66, -81, -22, 18, 22, 10, -19, -48, -69, -101, -88, -69, -53, -49, -41, -53, -66, -61, -46, -47, -71, -67, -87, -103, -83, -69, -62, -61, -70, -74, -64, -77, -91, -110, -113, -74, -92, -86, -106, -133, -115, -83, -102, -58, -50, -53, -37, -52, -81, -124, -134, -146, -106, -118, -86, -54, -52, -44, -56, -81, -99, -86, -103, -115, -108, -111, -93, -78, -71, -75, -75, -62, -66, -38, -8, -13, -47, -38, -65, -81, -47, -10, -60, -38, -34, -18, -39, -42, -27, -81, -87, -103, -76, -29, 1, -18, -38, -94, -112, -103, -81, -33, -13, -22, -5, -41, -59, -69, -72, -56, -68, -66, -68, -37, -70, -76, -72, -75, -59, -47, -40, -20, -53, -63, -104, -102, -77, -67, -48, -49, -53, -67, -75, -105, -93, -74, -66, -73, -75, -75, -110, -106, -142, -123, -122, -92, -78, -86, -51, -41, -57, -19, -68, -63, -61, -36, -17, -22, -20, -5, -36, -35, -33, -37, -29, -34, -28, -15, 20, -11, 10, -2, -15, -40, -54, -54, -52, -23, -23, -24, 18, 13, 25, 21, 8, 18, 16, 5, -23, -19, -15, 32, 2, -15, 1, -12, -26, 9, 36, 49, 42, 25, 24, 5, 53, 45, 67, 59, 59, 29, 56, 47, 100, 13, 142, -436, 219, 206, -21, 170, 21, 152, 44, 123, 53, 82, 25, 60, 40, 71, 41, 45, 51, 88, 93, 108, 106, 109, 81, 80, 78, 79, 104, 93, 131, 126, 99, 82, 74, 24, 47, 32, 46, 59, 57, 95, 69, 62, 14, 42, 56, 56, 35, 41, 76, 54, 20, 26, 16, 3, -25, -14, 23, 5, 22, 18, -2, 8, -20, -42, -71, -43, -38, 4, 40, -9, 5, -9, -17, -49, -54, -21, -21, -12, -15, -18, -19, -25, -67, -65, -77, -76, -45, -65, -30, -15, -14, -12, -27, -51, -49, -53, -69, -68, -44, -28, -52, -55, -24, -34, -32, -58, -30, -68, -44, -32, -32, -11, 4, -25, -20, 19, -7, 10, 4, 20, 23, 18, 16, 23, 28, 41, 47, 58, 56, 46, 61, 66, 49, 71, 52, 40, 69, 103, 127, 110, 107, 97, 87, 114, 147, 128, 136, 72, 74, 98, 96, 126, 130, 153, 175, 188, 175, 168, 147, 145, 131, 137, 140, 131, 129, 123, 161, 138, 169, 106, 115, 152, 142, 180, 167, 161, 134, 133, 133, 135, 122, 146, 146, 118, 127, 114, 109, 127, 127, 142, 134, 129, 141, 129, 113, 119, 126, 144, 194, 206, 207, 179, 154, 182, 156, 145, 136, 124, 141, 120, 146, 118, 147, 122, 131, 151, 146, 158, 142, 155, 117, 142, 124, 164, 152, 128, 108, 150, 146, 150, 146, 129, 120, 95, 109, 134, 140, 127, 108, 65, 118, 115, 102, 153, 135, 143, 161, 128, 131, 114, 116, 131, 120, 141, 118, 115, 114, 111, 156, 171, 184, 134, 141, 143, 148, 158, 154, 144, 130, 116, 78, 104, 158, 149, 133, 145, 118, 107, 85, 71, 65, 63, 67, 47, 35, 28, 84, 72, 79, 50, 48, 45, 52, 52, 74, 45, 10, 11, 9, 28, 20, 3, -9, 26, 45, 45, 19, 1, -32, -22, -38, -11, 11, 14, 28, 16, 9, -5, 11, -42, -19, -50, -4, -1, -4, -23, -43, -46, -57, -63, -28, -44, -39, -8, -17, 17, -13, -30, -47, -46, -27, -33, 1, -22, 5, 9, 7, -6, 13, -4, 0, -13, -42, -62, -76, -55, -60, -42, -32, -18, 5, 5, -27, -56, -48, -23, -21, -18, -34, -61, -80, -59, -56, -34, -27, -15, -34, 5, -7, -9, 4, -16, -51, -47, -44, -50, -57, -40, -21, -38, -40, -41, -24, -22, -8, -26, -23, -18, -16, 6, 30, 30, 25, -41, -43, -60, -21, -9, -6, 0, -6, -17, -26, -6, -15, -4, -14, -53, -29, -13, -17, -2, 8, 8, -31, -3, -38, -18, -12, -12, -39, -40, -32, -30, -27, -26, -40, -39, -65, -42, -43, -30, -22, 22, 14, -2, -14, -32, -47, -37, -29, -37, -31, -27, -27, 13, 3, -34, -64, -52, -9, 13, 48, 61, 29, 14, 68, 26, 10, 10, -9, -10, -4, 26, 13, 35, 29, 27, 19, 45, 49, 68, 42, 41, 46, 62, 62, 28, 47, 25, 56, 49, 47, 67, 84, 89, 125, 83, 82, 60, 76, 82, 109, 120, 122, 134, 128, 128, 134, 118, 112, 108, 105, 143, 128, 147, 160, 159, 155, 153, 143, 143, 138, 129, 152, 119, 195, 159, 159, 175, 183, 162, 156, 160, 159, 178, 168, 214, 229, 214, 174, 172, 187, 174, 198, 189, 151, 154, 200, 187, 185, 163, 154, 177, 148, 153, 177, 190, 186, 203, 193, 171, 171, 156, 151, 146, 129, 108, 129, 157, 155, 180, 151, 143, 130, 147, 133, 143, 155, 159, 155, 151, 163, 143, 140, 132, 125, 131, 135, 127, 159, 186, 183, 156, 129, 135, 124, 123, 128, 117, 111, 100, 76, 90, 77, 83, 96, 119, 104, 94, 83, 88, 55, 47, 62, 55, 56, 38, 57, 30, 34, 53, 61, 57, 41, 40, 42, 28, 47, 62, 26, 29, 20, 6, 56, 50, 47, 76, 84, 84, 76, 42, 52, 42, 35, 44, 60, 59, 71, 41, 70, 82, 68, 52, 71, 79, 83, 83, 64, 68, 68, 84, 68, 83, 82, 73, 102, 113, 95, 97, 94, 71, 87, 42, 115, 124, 114, 147, 102, 114, 102, 86, 101, 102, 102, 106, 133, 137, 129, 147, 133, 132, 147, 128, 125, 125, 104, 139, 137, 127, 142, 151, 149, 162, 164, 151, 137, 150, 174, 154, 169, 171, 159, 169, 182, 187, 167, 177, 136, 135, 132, 153, 179, 193, 192, 191, 184, 155, 139, 128, 168, 178, 170, 193, 190, 173, 188, 176, 152, 129, 131, 132, 155, 173, 160, 178, 176, 150, 130, 132, 127, 135, 156, 143, 136, 115, 102, 133, 123, 116, 120, 127, 146, 121, 106, 110, 71, 67, 62, 120, 122, 91, 95, 94, 85, 70, 67, 74, 67, 72, 70, 72, 73, 80, 86, 79, 100, 99, 100, 82, 68, 86, 60, 58, 79, 52, 38, 64, 53, 74, 70, 68, 82, 57, 68, 88, 72, 90, 61, 75, 79, 61, 28, 26, 51, 77, 80, 51, 84, 100, 82, 111, 121, 116, 98, 98, 79, 92, 85, 117, 136, 116, 98, 78, 63, 52, 83, 79, 107, 94, 76, 79, 88, 68, 30, 55, 84, 81, 89, 96, 67, 73, 82, 71, 71, 57, 48, 53, 57, 36, 52, 18, 41, 57, 25, 44, 39, 11, 35, 28, 44, -5, 14, 41, 13, -1, -31, -15, -13, -6, 24, -20, -4, -17, -29, -35, -48, -28, -30, -45, -34, 30, -72, -62, 16, -61, -16, -50, -47, -67, -60, -40, -32, -33, -23, -24, -27, -39, -34, -34, -44, -46, -11, 3, -19, -5, -42, -38, -43, -67, -41, -35, -15, -22, -6, 7, 6, -19, -17, -7, -22, -10, -15, -11, -11, -1, 16, 1, 4, 5, 11, 18, 28, 57, 37, 35, 13, 26, 34, 36, 49, 35, 54, 58, 41, 60, 53, 16, 39, 44, 88, 100, 99, 87, 116, 94, 94, 88, 50, 54, 42, 64, 56, 99, 87, 103, 104, 106, 120, 88, 98, 69, 87, 89, 94, 101, 88, 99, 107, 114, 115, 94, 83, 82, 86, 105, 108, 98, 104, 86, 83, 74, 84, 84, 103, 127, 125, 120, 122, 108, 111, 82, 113, 92, 105, 120, 117, 131, 127, 123, 101, 103, 127, 116, 106, 119, 161, 137, 143, 154, 143, 139, 137, 180, 151, 147, 165, 135, 136, 127, 112, 129, 151, 159, 159, 167, 162, 174, 169, 169, 179, 169, 151, 161, 157, 155, 147, 160, 176, 185, 195, 170, 162, 180, 159, 161, 173, 149, 178, 205, 208, 180, 157, 151, 151, 170, 162, 171, 182, 174, 170, 138, 154, 162, 166, 140, 140, 146, 119, 133, 160, 153, 160, 149, 153, 150, 107, 134, 68, 121, 116, 113, 137, 91, 117, 107, 120, 123, 124, 78, 107, 109, 121, 122, 114, 102, 63, 68, 80, 97, 95, 103, 109, 93, 90, 75, 29, 41, 19, 39, 57, 44, 101, 81, 99, 63, 52, 53, 46, 47, 51, 49, 28, 17, 13, 10, -3, 18, 34, 55, 60, 39, 33, 25, 1, -6, -36, -20, 3, -10, 13, 13, 16, 60, 52, 65, 63, 39, 23, 16, 27, 42, 49, 77, 104, 101, 128, 101, 102, 93, 117, 130, 91, 93, 88, 106, 138, 152, 134, 113, 100, 94, 90, 124, 141, 134, 155, 130, 149, 138, 153, 140, 120, 154, 133, 125, 129, 116, 139, 143, 121, 125, 120, 114, 133, 155, 151, 157, 143, 135, 128, 126, 111, 112, 123, 129, 139, 106, 136, 140, 141, 112, 129, 118, 127, 114, 72, 102, 84, 86, 94, 97, 59, 76, 87, 59, 80, 71, 85, 92, 92, 79, 83, 88, 67, 82, 51, 37, 29, 60, 73, 61, 74, 65, 78, 77, 81, 80, 68, 49, 30, 15, -7, 4, 57, 57, 39, 45, 51, 43, 51, 56, 75, 49, 47, 49, 39, 58, 62, 84, 59, 85, 100, 75, 84, 79, 70, 67, 55, 70, 103, 66, 49, 32, 26, 46, 41, 74, 74, 75, 78, 56, 49, 34, 33, 31, 44, 41, 58, 72, 47, 65, 67, 49, 44, 48, 46, 46, 47, 42, 52, 24, 41, 27, 59, 66, 38, 24, -7, 6, -10, 5, -17, -29, -26, 9, 5, 9, 21, 10, 5, 30, 0, -19, -17, -11, -21, -2, -20, 10, 14, -31, -7, -4, 1, 9, -8, 0, 3, 11, -2, -7, 0, 8, -28, -51, -46, -85, -64, -32, -74, -16, -43, -43, -48, -65, -67, -83, -74, -119, -93, -86, -68, -91, -74, -84, -71, -78, -77, -67, -76, -53, -70, -77, -98, -84, -82, -102, -84, -79, -78, -94, -68, -57, -68, -68, -53, -65, -68, -62, -78, -66, -63, -87, -48, -55, -43, -49, -52, -41, -35, -47, -43, -24, -14, -4, -2, -13, -14, -39, -12, 0, 2, 15, 9, 3, 7, 2, 10, 19, 11, 2, -15, 4, -22, -29, 2, 11, -5, 3, -3, -4, -12, -3, -5, 15, 1, 10, -18, -16, -14, -8, 7, 5, 11, 26, -1, 13, 18, 14, 37, 0, 5, -7, -19, -23, -3, 1, -6, 1, -23, -7, -4, 4, 3, 7, -7, -1, 4, 15, 38, 9, 13, 24, 6, 44, 60, 34, 76, 68, 46, 33, 45, 54, 70, 61, 50, 35, 57, 60, 60, 72, 57, 56, 42, 66, 53, 64, 75, 75, 69, 78, 68, 67, 60, 65, 64, 86, 98, 92, 100, 117, 98, 87, 110, 89, 102, 99, 119, 133, 116, 126, 141, 128, 104, 104, 111, 110, 133, 137, 117, 101, 110, 110, 129, 134, 162, 153, 140, 159, 156, 139, 143, 174, 157, 150, 166, 151, 152, 156, 138, 160, 160, 180, 168, 160, 127, 141, 155, 109, 136, 134, 136, 124, 137, 123, 90, 101, 108, 96, 72, 102, 80, 79, 84, 62, 102, 99, 104, 94, 76, 94, 91, 71, 74, 74, 76, 75, 89, 65, 61, 79, 86, 86, 85, 80, 74, 63, 38, 52, 64, 33, 48, 75, 67, 71, 66, 59, 50, 67, 78, 50, 57, 74, 54, 55, 39, 29, 31, 22, 38, 36, 33, 18, 36, 25, 15, -19, -13, 1, -2, -24, 0, -15, -17, -33, -30, -38, -33, -27, -32, -41, -1, -30, 2, -41, -38, -5, -44, -21, -42, -25, -19, -40, -43, -53, -34, -35, -19, -29, -50, -45, -15, -7, -24, -30, -27, -20, -35, -30, -61, -52, -70, -82, -80, -81, -78, -28, -40, -32, -45, -65, -71, -88, -95, -87, -58, -55, -64, -50, -44, -61, -72, -69, -76, -42, -79, -76, -82, -68, -61, -65, -93, -103, -122, -104, -98, -109, -112, -93, -96, -85, -92, -106, -109, -105, -44, -75, -63, -119, -74, -45, -82, -54, -53, -45, -78, -75, -87, -64, -71, -72, -71, -74, -108, -65, -73, -68, -40, -58, -63, -49, -89, -95, -110, -117, -81, -96, -96, -110, -88, -93, -69, -83, -96, -87, -74, -56, -32, -17, -41, -63, -39, -38, -72, -82, -77, -85, -73, -54, -44, -22, -47, -28, -39, -32, -30, -49, -55, -49};
158:               
159:               struct clip_psv sine = {.size = SINRES, .blocks=SINRES/STREAMBUF, .playing=FALSE, .flash=FALSE, .block_index=0, .start_ptr=sintab, .read_ptr=sintab};
160:               
161:               struct clip_psv kick = {.size = 5552, .blocks=5552/STREAMBUF, .playing=FALSE, .flash=FALSE, .block_index=0, .start_ptr=kicksamp, .read_ptr=kicksamp};
162:               struct clip_psv snare = {.size = 6252, .blocks=6252/STREAMBUF, .playing=FALSE, .flash=FALSE, .block_index=0, .start_ptr=snaresamp, .read_ptr=snaresamp};
---  C:/Users/ryan/Documents/seniorproject/ps-040/screens.c  --------------------------------------------
1:                 /*
2:                  * File:   screens.c
3:                  * Author: ryan
4:                  *
5:                  * Created on January 28, 2018, 11:17 PM
6:                  */
7:                 
8:                 
9:                 #include <xc.h>
10:                #include "screens.h"
11:                #include "common.h"
12:                #include "plcd.h"
13:                #include "dsp.h"
14:                #include "flash.h"
15:                
16:                #include "sounds.h"
17:                
18:                extern unsigned int process_time, flash_time;
19:                extern unsigned char btread;
20:                
21:                extern unsigned char    TxBufferA[FLASH_DMAXFER_BYTES]__attribute__((space(xmemory))), 
22:                                        RxBufferA[FLASH_DMAXFER_BYTES]__attribute__((space(xmemory)));
23:                extern fractional       RxBufferB[STREAMBUF] __attribute__((space(xmemory)));
24:                
25:                extern enum screenStruc state, laststate;
26:                extern enum fxStruct fxUnits[NUMFXUNITS];
27:                extern struct clip sine;
28:                extern struct ctrlsrfc ctrl;
29:                extern struct sflags stat;
30:                
31:                int fxLast=0, fxNow=0;
32:                
33:                void (*fxModPointers[NUMFX])(unsigned int, fractional, fractional, fractional) = {screenNoFXmod, screenLPFmod, screenTRMmod, screenLOPmod, screenBTCmod};
34:                
35:                void screenDebugAudio(){
36:                
37:                }
007558  060000     RETURN
38:                
39:                void screenDebugBuffers(){
40:                    if(state!=laststate){
00755A  80B050     MOV laststate, W0
00755C  E3162E     CP 0x162E
00755E  32001B     BRA Z, 0x7596
41:                        //setup here
42:                        lcdClearQ();
007560  07FB7E     RCALL lcdClearQ
43:                        lcdSetCursorQ(0,0);
007562  EB4080     CLR.B W1
007564  784001     MOV.B W1, W0
007566  07FB86     RCALL lcdSetCursorQ
44:                        lcdWriteStringQ("Buffer Debug");
007568  2EBAD0     MOV #0xEBAD, W0
00756A  07FB98     RCALL lcdWriteStringQ
45:                        lcdSetCursorQ(0,1);
00756C  B3C011     MOV.B #0x1, W1
00756E  EB4000     CLR.B W0
007570  07FB81     RCALL lcdSetCursorQ
46:                        lcdWriteStringQ("FX time:");
007572  2EBBA0     MOV #0xEBBA, W0
007574  07FB93     RCALL lcdWriteStringQ
47:                        lcdSetCursorQ(11,1);
007576  B3C011     MOV.B #0x1, W1
007578  B3C0B0     MOV.B #0xB, W0
00757A  07FB7C     RCALL lcdSetCursorQ
48:                        lcdWriteStringQ("/256");
00757C  2EBC30     MOV #0xEBC3, W0
00757E  07FB8E     RCALL lcdWriteStringQ
49:                        lcdSetCursorQ(0,2);
007580  B3C021     MOV.B #0x2, W1
007582  EB4000     CLR.B W0
007584  07FB77     RCALL lcdSetCursorQ
50:                        lcdWriteStringQ("Flash:");
007586  2EBC80     MOV #0xEBC8, W0
007588  07FB89     RCALL lcdWriteStringQ
51:                        lcdSetCursorQ(0,3);
00758A  B3C031     MOV.B #0x3, W1
00758C  EB4000     CLR.B W0
00758E  07FB72     RCALL lcdSetCursorQ
52:                        lcdWriteStringQ("btRd:");
007590  2EBCF0     MOV #0xEBCF, W0
007592  07FB84     RCALL lcdWriteStringQ
007594  370011     BRA 0x75B8
53:                    } else {
54:                        //update here
55:                        lcdSetCursorQ(8,1);
007596  B3C011     MOV.B #0x1, W1
007598  B3C080     MOV.B #0x8, W0
00759A  07FB6C     RCALL lcdSetCursorQ
56:                        lcdWriteDecimalQ(process_time,3);
00759C  200031     MOV #0x3, W1
00759E  BFD606     MOV.B process_time, WREG
0075A0  07FC97     RCALL lcdWriteDecimalQ
57:                        lcdSetCursorQ(6,2);
0075A2  B3C021     MOV.B #0x2, W1
0075A4  B3C060     MOV.B #0x6, W0
0075A6  07FB66     RCALL lcdSetCursorQ
58:                        lcdWriteDecimalQ(flash_time,3);
0075A8  200031     MOV #0x3, W1
0075AA  BFD608     MOV.B flash_time, WREG
0075AC  07FC91     RCALL lcdWriteDecimalQ
59:                        lcdSetCursorQ(6,3);
0075AE  B3C031     MOV.B #0x3, W1
0075B0  B3C060     MOV.B #0x6, W0
0075B2  07FB60     RCALL lcdSetCursorQ
60:                        lcdWriteByteQ(btread);
0075B4  BFD610     MOV.B btread, WREG
0075B6  07FC07     RCALL lcdWriteByteQ
61:                        //lcdWriteDecimalQ();
62:                        //lcdSetCursorQ(6,3);
63:                        //lcdWriteDecimalQ();
64:                        
65:                    }
66:                }
0075B8  060000     RETURN
67:                
68:                void screenDebugPots(void){
0075BA  BE9F88     MOV.D W8, [W15++]
0075BC  BE9F8A     MOV.D W10, [W15++]
69:                    int bank=0;
0075F8  EB0480     CLR W9
70:                    
71:                    if(state!=laststate){
0075BE  80B050     MOV laststate, W0
0075C0  E3162E     CP 0x162E
0075C2  320016     BRA Z, 0x75F0
72:                        // Setup here
73:                        lcdClearQ();
0075C4  07FB4C     RCALL lcdClearQ
74:                        lcdSetCursorQ(0,0);
0075C6  EB4080     CLR.B W1
0075C8  784001     MOV.B W1, W0
0075CA  07FB54     RCALL lcdSetCursorQ
75:                        lcdWriteStringQ("Potentiometer Debug");
0075CC  2EBD50     MOV #0xEBD5, W0
0075CE  07FB66     RCALL lcdWriteStringQ
76:                        lcdSetCursorQ(9,1);
0075D0  B3C011     MOV.B #0x1, W1
0075D2  B3C090     MOV.B #0x9, W0
0075D4  07FB4F     RCALL lcdSetCursorQ
77:                        lcdWriteStringQ("|");
0075D6  2EBE90     MOV #0xEBE9, W0
0075D8  07FB61     RCALL lcdWriteStringQ
78:                         lcdSetCursorQ(9,2);
0075DA  B3C021     MOV.B #0x2, W1
0075DC  B3C090     MOV.B #0x9, W0
0075DE  07FB4A     RCALL lcdSetCursorQ
79:                        lcdWriteStringQ("|");
0075E0  2EBE90     MOV #0xEBE9, W0
0075E2  07FB5C     RCALL lcdWriteStringQ
80:                         lcdSetCursorQ(9,3);
0075E4  B3C031     MOV.B #0x3, W1
0075E6  B3C090     MOV.B #0x9, W0
0075E8  07FB45     RCALL lcdSetCursorQ
81:                        lcdWriteStringQ("|");
0075EA  2EBE90     MOV #0xEBE9, W0
0075EC  07FB57     RCALL lcdWriteStringQ
0075EE  370089     BRA 0x7702
82:                    } else {
83:                        // Update here
84:                        if(!ctrl.pad[34])bank=POTS/2;
0075F0  200069     MOV #0x6, W9
0075F2  216580     MOV #0x1658, W0
0075F4  E00410     CP0.B [W0]
0075F6  320001     BRA Z, 0x75FA
85:                        lcdSetCursorQ(0,1);
0075FA  B3C011     MOV.B #0x1, W1
0075FC  EB4000     CLR.B W0
0075FE  07FB3A     RCALL lcdSetCursorQ
86:                        lcdWriteDecimalQ(ctrl.pots_scaled[bank], 3);
007600  B94D61     MUL.SU W9, #1, W10
007602  45007E     ADD W10, #0x1E, W0
007604  4D80E0     ADDC W11, #0x0, W1
007606  400000     ADD W0, W0, W0
007608  488081     ADDC W1, W1, W1
00760A  216368     MOV #0x1636, W8
00760C  440000     ADD W8, W0, W0
00760E  780010     MOV [W0], W0
007610  200031     MOV #0x3, W1
007612  07FC5E     RCALL lcdWriteDecimalQ
87:                        lcdWriteQ(',');
007614  B3C2C0     MOV.B #0x2C, W0
007616  07FB0E     RCALL lcdWriteQ
88:                        lcdWriteWordUnsignedQ(ctrl.pots[bank++]);
007618  E80489     INC W9, W9
00761A  450572     ADD W10, #0x12, W10
00761C  4D85E0     ADDC W11, #0x0, W11
00761E  45050A     ADD W10, W10, W10
007620  4D858B     ADDC W11, W11, W11
007622  44050A     ADD W8, W10, W10
007624  78001A     MOV [W10], W0
007626  07FBFA     RCALL lcdWriteWordUnsignedQ
89:                        lcdSetCursorQ(11,1);
007628  B3C011     MOV.B #0x1, W1
00762A  B3C0B0     MOV.B #0xB, W0
00762C  07FB23     RCALL lcdSetCursorQ
90:                        lcdWriteDecimalQ(ctrl.pots_scaled[bank], 3);
00762E  B94D61     MUL.SU W9, #1, W10
007630  45007E     ADD W10, #0x1E, W0
007632  4D80E0     ADDC W11, #0x0, W1
007634  400000     ADD W0, W0, W0
007636  488081     ADDC W1, W1, W1
007638  440000     ADD W8, W0, W0
00763A  780010     MOV [W0], W0
00763C  200031     MOV #0x3, W1
00763E  07FC48     RCALL lcdWriteDecimalQ
91:                        lcdWriteQ(',');
007640  B3C2C0     MOV.B #0x2C, W0
007642  07FAF8     RCALL lcdWriteQ
92:                        lcdWriteWordUnsignedQ(ctrl.pots[bank++]);
007644  E80489     INC W9, W9
007646  450572     ADD W10, #0x12, W10
007648  4D85E0     ADDC W11, #0x0, W11
00764A  45050A     ADD W10, W10, W10
00764C  4D858B     ADDC W11, W11, W11
00764E  44050A     ADD W8, W10, W10
007650  78001A     MOV [W10], W0
007652  07FBE4     RCALL lcdWriteWordUnsignedQ
93:                        lcdSetCursorQ(0,2);
007654  B3C021     MOV.B #0x2, W1
007656  EB4000     CLR.B W0
007658  07FB0D     RCALL lcdSetCursorQ
94:                        lcdWriteDecimalQ(ctrl.pots_scaled[bank], 3);
00765A  B94D61     MUL.SU W9, #1, W10
00765C  45007E     ADD W10, #0x1E, W0
00765E  4D80E0     ADDC W11, #0x0, W1
007660  400000     ADD W0, W0, W0
007662  488081     ADDC W1, W1, W1
007664  440000     ADD W8, W0, W0
007666  780010     MOV [W0], W0
007668  200031     MOV #0x3, W1
00766A  07FC32     RCALL lcdWriteDecimalQ
95:                        lcdWriteQ(',');
00766C  B3C2C0     MOV.B #0x2C, W0
00766E  07FAE2     RCALL lcdWriteQ
96:                        lcdWriteWordUnsignedQ(ctrl.pots[bank++]);
007670  E80489     INC W9, W9
007672  450572     ADD W10, #0x12, W10
007674  4D85E0     ADDC W11, #0x0, W11
007676  45050A     ADD W10, W10, W10
007678  4D858B     ADDC W11, W11, W11
00767A  44050A     ADD W8, W10, W10
00767C  78001A     MOV [W10], W0
00767E  07FBCE     RCALL lcdWriteWordUnsignedQ
97:                        lcdSetCursorQ(11,2);
007680  B3C021     MOV.B #0x2, W1
007682  B3C0B0     MOV.B #0xB, W0
007684  07FAF7     RCALL lcdSetCursorQ
98:                        lcdWriteDecimalQ(ctrl.pots_scaled[bank], 3);
007686  B94D61     MUL.SU W9, #1, W10
007688  45007E     ADD W10, #0x1E, W0
00768A  4D80E0     ADDC W11, #0x0, W1
00768C  400000     ADD W0, W0, W0
00768E  488081     ADDC W1, W1, W1
007690  440000     ADD W8, W0, W0
007692  780010     MOV [W0], W0
007694  200031     MOV #0x3, W1
007696  07FC1C     RCALL lcdWriteDecimalQ
99:                        lcdWriteQ(',');
007698  B3C2C0     MOV.B #0x2C, W0
00769A  07FACC     RCALL lcdWriteQ
100:                       lcdWriteWordUnsignedQ(ctrl.pots[bank++]);
00769C  E80489     INC W9, W9
00769E  450572     ADD W10, #0x12, W10
0076A0  4D85E0     ADDC W11, #0x0, W11
0076A2  45050A     ADD W10, W10, W10
0076A4  4D858B     ADDC W11, W11, W11
0076A6  44050A     ADD W8, W10, W10
0076A8  78001A     MOV [W10], W0
0076AA  07FBB8     RCALL lcdWriteWordUnsignedQ
101:                       lcdSetCursorQ(0,3);
0076AC  B3C031     MOV.B #0x3, W1
0076AE  EB4000     CLR.B W0
0076B0  07FAE1     RCALL lcdSetCursorQ
102:                       lcdWriteDecimalQ(ctrl.pots_scaled[bank], 3);
0076B2  B94D61     MUL.SU W9, #1, W10
0076B4  45007E     ADD W10, #0x1E, W0
0076B6  4D80E0     ADDC W11, #0x0, W1
0076B8  400000     ADD W0, W0, W0
0076BA  488081     ADDC W1, W1, W1
0076BC  440000     ADD W8, W0, W0
0076BE  780010     MOV [W0], W0
0076C0  200031     MOV #0x3, W1
0076C2  07FC06     RCALL lcdWriteDecimalQ
103:                       lcdWriteQ(',');
0076C4  B3C2C0     MOV.B #0x2C, W0
0076C6  07FAB6     RCALL lcdWriteQ
104:                       lcdWriteWordUnsignedQ(ctrl.pots[bank++]);
0076C8  E80489     INC W9, W9
0076CA  450572     ADD W10, #0x12, W10
0076CC  4D85E0     ADDC W11, #0x0, W11
0076CE  45050A     ADD W10, W10, W10
0076D0  4D858B     ADDC W11, W11, W11
0076D2  44050A     ADD W8, W10, W10
0076D4  78001A     MOV [W10], W0
0076D6  07FBA2     RCALL lcdWriteWordUnsignedQ
105:                       lcdSetCursorQ(11,3);
0076D8  B3C031     MOV.B #0x3, W1
0076DA  B3C0B0     MOV.B #0xB, W0
0076DC  07FACB     RCALL lcdSetCursorQ
106:                       lcdWriteDecimalQ(ctrl.pots_scaled[bank], 3);
0076DE  B94D61     MUL.SU W9, #1, W10
0076E0  45007E     ADD W10, #0x1E, W0
0076E2  4D80E0     ADDC W11, #0x0, W1
0076E4  400000     ADD W0, W0, W0
0076E6  488081     ADDC W1, W1, W1
0076E8  440000     ADD W8, W0, W0
0076EA  780010     MOV [W0], W0
0076EC  200031     MOV #0x3, W1
0076EE  07FBF0     RCALL lcdWriteDecimalQ
107:                       lcdWriteQ(',');
0076F0  B3C2C0     MOV.B #0x2C, W0
0076F2  07FAA0     RCALL lcdWriteQ
108:                       lcdWriteWordUnsignedQ(ctrl.pots[bank++]);
0076F4  450572     ADD W10, #0x12, W10
0076F6  4D85E0     ADDC W11, #0x0, W11
0076F8  45050A     ADD W10, W10, W10
0076FA  4D858B     ADDC W11, W11, W11
0076FC  44040A     ADD W8, W10, W8
0076FE  780018     MOV [W8], W0
007700  07FB8D     RCALL lcdWriteWordUnsignedQ
109:                   }
110:               }
007702  BE054F     MOV.D [--W15], W10
007704  BE044F     MOV.D [--W15], W8
007706  060000     RETURN
111:               
112:               
113:               void screenDebugFlash(void){
114:                       if(state!=laststate){
007708  80B050     MOV laststate, W0
00770A  E3162E     CP 0x162E
00770C  32005B     BRA Z, 0x77C4
115:                       //setup here
116:                       lcdClearQ();
00770E  07FAA7     RCALL lcdClearQ
117:                       lcdSetCursorQ(0,0);
007710  EB4080     CLR.B W1
007712  784001     MOV.B W1, W0
007714  07FAAF     RCALL lcdSetCursorQ
118:                       lcdWriteByteQ(RxBufferA[0]);
007716  212000     MOV #0x1200, W0
007718  784010     MOV.B [W0], W0
00771A  07FB55     RCALL lcdWriteByteQ
119:                        lcdSetCursorQ(3,0);
00771C  EB4080     CLR.B W1
00771E  B3C030     MOV.B #0x3, W0
007720  07FAA9     RCALL lcdSetCursorQ
120:                       lcdWriteByteQ(RxBufferA[1]);
007722  212010     MOV #0x1201, W0
007724  784010     MOV.B [W0], W0
007726  07FB4F     RCALL lcdWriteByteQ
121:                        lcdSetCursorQ(6,0);
007728  EB4080     CLR.B W1
00772A  B3C060     MOV.B #0x6, W0
00772C  07FAA3     RCALL lcdSetCursorQ
122:                       lcdWriteByteQ(RxBufferA[2]);
00772E  212020     MOV #0x1202, W0
007730  784010     MOV.B [W0], W0
007732  07FB49     RCALL lcdWriteByteQ
123:                        lcdSetCursorQ(9,0);
007734  EB4080     CLR.B W1
007736  B3C090     MOV.B #0x9, W0
007738  07FA9D     RCALL lcdSetCursorQ
124:                       lcdWriteByteQ(RxBufferA[3]);
00773A  212030     MOV #0x1203, W0
00773C  784010     MOV.B [W0], W0
00773E  07FB43     RCALL lcdWriteByteQ
125:                       lcdSetCursorQ(12,0);
007740  EB4080     CLR.B W1
007742  B3C0C0     MOV.B #0xC, W0
007744  07FA97     RCALL lcdSetCursorQ
126:                       lcdWriteByteQ(RxBufferA[4]);
007746  212040     MOV #0x1204, W0
007748  784010     MOV.B [W0], W0
00774A  07FB3D     RCALL lcdWriteByteQ
127:                       lcdSetCursorQ(15,0);
00774C  EB4080     CLR.B W1
00774E  B3C0F0     MOV.B #0xF, W0
007750  07FA91     RCALL lcdSetCursorQ
128:                       lcdWriteByteQ(RxBufferA[5]);
007752  212050     MOV #0x1205, W0
007754  784010     MOV.B [W0], W0
007756  07FB37     RCALL lcdWriteByteQ
129:                       lcdSetCursorQ(18,0);
007758  EB4080     CLR.B W1
00775A  B3C120     MOV.B #0x12, W0
00775C  07FA8B     RCALL lcdSetCursorQ
130:                       lcdWriteByteQ(RxBufferA[6]);
00775E  212060     MOV #0x1206, W0
007760  784010     MOV.B [W0], W0
007762  07FB31     RCALL lcdWriteByteQ
131:                       lcdSetCursorQ(0,1);
007764  B3C011     MOV.B #0x1, W1
007766  EB4000     CLR.B W0
007768  07FA85     RCALL lcdSetCursorQ
132:                       lcdWriteByteQ(RxBufferA[7]);
00776A  212070     MOV #0x1207, W0
00776C  784010     MOV.B [W0], W0
00776E  07FB2B     RCALL lcdWriteByteQ
133:                        lcdSetCursorQ(3,1);
007770  B3C011     MOV.B #0x1, W1
007772  B3C030     MOV.B #0x3, W0
007774  07FA7F     RCALL lcdSetCursorQ
134:                       lcdWriteByteQ(RxBufferA[8]);
007776  212080     MOV #0x1208, W0
007778  784010     MOV.B [W0], W0
00777A  07FB25     RCALL lcdWriteByteQ
135:                        lcdSetCursorQ(6,1);
00777C  B3C011     MOV.B #0x1, W1
00777E  B3C060     MOV.B #0x6, W0
007780  07FA79     RCALL lcdSetCursorQ
136:                       lcdWriteByteQ(RxBufferA[9]);
007782  212090     MOV #0x1209, W0
007784  784010     MOV.B [W0], W0
007786  07FB1F     RCALL lcdWriteByteQ
137:                        lcdSetCursorQ(9,1);
007788  B3C011     MOV.B #0x1, W1
00778A  B3C090     MOV.B #0x9, W0
00778C  07FA73     RCALL lcdSetCursorQ
138:                       lcdWriteByteQ(RxBufferA[10]);
00778E  2120A0     MOV #0x120A, W0
007790  784010     MOV.B [W0], W0
007792  07FB19     RCALL lcdWriteByteQ
139:                       lcdSetCursorQ(12,1);
007794  B3C011     MOV.B #0x1, W1
007796  B3C0C0     MOV.B #0xC, W0
007798  07FA6D     RCALL lcdSetCursorQ
140:                       lcdWriteByteQ(RxBufferA[11]);
00779A  2120B0     MOV #0x120B, W0
00779C  784010     MOV.B [W0], W0
00779E  07FB13     RCALL lcdWriteByteQ
141:                       lcdSetCursorQ(15,1);
0077A0  B3C011     MOV.B #0x1, W1
0077A2  B3C0F0     MOV.B #0xF, W0
0077A4  07FA67     RCALL lcdSetCursorQ
142:                       lcdWriteByteQ(RxBufferA[12]);
0077A6  2120C0     MOV #0x120C, W0
0077A8  784010     MOV.B [W0], W0
0077AA  07FB0D     RCALL lcdWriteByteQ
143:                       lcdSetCursorQ(18,1);
0077AC  B3C011     MOV.B #0x1, W1
0077AE  B3C120     MOV.B #0x12, W0
0077B0  07FA61     RCALL lcdSetCursorQ
144:                       lcdWriteByteQ(RxBufferA[13]);
0077B2  2120D0     MOV #0x120D, W0
0077B4  784010     MOV.B [W0], W0
0077B6  07FB07     RCALL lcdWriteByteQ
145:                       lcdSetCursorQ(0,3);
0077B8  B3C031     MOV.B #0x3, W1
0077BA  EB4000     CLR.B W0
0077BC  07FA5B     RCALL lcdSetCursorQ
146:                       lcdWriteStringQ("Stat:");
0077BE  2EBEB0     MOV #0xEBEB, W0
0077C0  07FA6D     RCALL lcdWriteStringQ
0077C2  370063     BRA 0x788A
147:                   } else {
148:                       //update here
149:                       lcdSetCursorQ(0,0);
0077C4  EB4080     CLR.B W1
0077C6  784001     MOV.B W1, W0
0077C8  07FA55     RCALL lcdSetCursorQ
150:                       lcdWriteByteQ(RxBufferA[0]);
0077CA  212000     MOV #0x1200, W0
0077CC  784010     MOV.B [W0], W0
0077CE  07FAFB     RCALL lcdWriteByteQ
151:                        lcdSetCursorQ(3,0);
0077D0  EB4080     CLR.B W1
0077D2  B3C030     MOV.B #0x3, W0
0077D4  07FA4F     RCALL lcdSetCursorQ
152:                       lcdWriteByteQ(RxBufferA[1]);
0077D6  212010     MOV #0x1201, W0
0077D8  784010     MOV.B [W0], W0
0077DA  07FAF5     RCALL lcdWriteByteQ
153:                        lcdSetCursorQ(6,0);
0077DC  EB4080     CLR.B W1
0077DE  B3C060     MOV.B #0x6, W0
0077E0  07FA49     RCALL lcdSetCursorQ
154:                       lcdWriteByteQ(RxBufferA[2]);
0077E2  212020     MOV #0x1202, W0
0077E4  784010     MOV.B [W0], W0
0077E6  07FAEF     RCALL lcdWriteByteQ
155:                        lcdSetCursorQ(9,0);
0077E8  EB4080     CLR.B W1
0077EA  B3C090     MOV.B #0x9, W0
0077EC  07FA43     RCALL lcdSetCursorQ
156:                       lcdWriteByteQ(RxBufferA[3]);
0077EE  212030     MOV #0x1203, W0
0077F0  784010     MOV.B [W0], W0
0077F2  07FAE9     RCALL lcdWriteByteQ
157:                       lcdSetCursorQ(12,0);
0077F4  EB4080     CLR.B W1
0077F6  B3C0C0     MOV.B #0xC, W0
0077F8  07FA3D     RCALL lcdSetCursorQ
158:                       lcdWriteByteQ(RxBufferA[4]);
0077FA  212040     MOV #0x1204, W0
0077FC  784010     MOV.B [W0], W0
0077FE  07FAE3     RCALL lcdWriteByteQ
159:                       lcdSetCursorQ(15,0);
007800  EB4080     CLR.B W1
007802  B3C0F0     MOV.B #0xF, W0
007804  07FA37     RCALL lcdSetCursorQ
160:                       lcdWriteByteQ(RxBufferA[5]);
007806  212050     MOV #0x1205, W0
007808  784010     MOV.B [W0], W0
00780A  07FADD     RCALL lcdWriteByteQ
161:                       lcdSetCursorQ(18,0);
00780C  EB4080     CLR.B W1
00780E  B3C120     MOV.B #0x12, W0
007810  07FA31     RCALL lcdSetCursorQ
162:                       lcdWriteByteQ(RxBufferA[6]);
007812  212060     MOV #0x1206, W0
007814  784010     MOV.B [W0], W0
007816  07FAD7     RCALL lcdWriteByteQ
163:                       lcdSetCursorQ(0,1);
007818  B3C011     MOV.B #0x1, W1
00781A  EB4000     CLR.B W0
00781C  07FA2B     RCALL lcdSetCursorQ
164:                       lcdWriteByteQ(RxBufferA[7]);
00781E  212070     MOV #0x1207, W0
007820  784010     MOV.B [W0], W0
007822  07FAD1     RCALL lcdWriteByteQ
165:                        lcdSetCursorQ(3,1);
007824  B3C011     MOV.B #0x1, W1
007826  B3C030     MOV.B #0x3, W0
007828  07FA25     RCALL lcdSetCursorQ
166:                       lcdWriteByteQ(RxBufferA[8]);
00782A  212080     MOV #0x1208, W0
00782C  784010     MOV.B [W0], W0
00782E  07FACB     RCALL lcdWriteByteQ
167:                        lcdSetCursorQ(6,1);
007830  B3C011     MOV.B #0x1, W1
007832  B3C060     MOV.B #0x6, W0
007834  07FA1F     RCALL lcdSetCursorQ
168:                       lcdWriteByteQ(RxBufferA[9]);
007836  212090     MOV #0x1209, W0
007838  784010     MOV.B [W0], W0
00783A  07FAC5     RCALL lcdWriteByteQ
169:                        lcdSetCursorQ(9,1);
00783C  B3C011     MOV.B #0x1, W1
00783E  B3C090     MOV.B #0x9, W0
007840  07FA19     RCALL lcdSetCursorQ
170:                       lcdWriteByteQ(RxBufferA[10]);
007842  2120A0     MOV #0x120A, W0
007844  784010     MOV.B [W0], W0
007846  07FABF     RCALL lcdWriteByteQ
171:                       lcdSetCursorQ(12,1);
007848  B3C011     MOV.B #0x1, W1
00784A  B3C0C0     MOV.B #0xC, W0
00784C  07FA13     RCALL lcdSetCursorQ
172:                       lcdWriteByteQ(RxBufferA[11]);
00784E  2120B0     MOV #0x120B, W0
007850  784010     MOV.B [W0], W0
007852  07FAB9     RCALL lcdWriteByteQ
173:                       lcdSetCursorQ(15,1);
007854  B3C011     MOV.B #0x1, W1
007856  B3C0F0     MOV.B #0xF, W0
007858  07FA0D     RCALL lcdSetCursorQ
174:                       lcdWriteByteQ(RxBufferA[12]);
00785A  2120C0     MOV #0x120C, W0
00785C  784010     MOV.B [W0], W0
00785E  07FAB3     RCALL lcdWriteByteQ
175:                       lcdSetCursorQ(18,1);
007860  B3C011     MOV.B #0x1, W1
007862  B3C120     MOV.B #0x12, W0
007864  07FA07     RCALL lcdSetCursorQ
176:                       lcdWriteByteQ(RxBufferA[13]);
007866  2120D0     MOV #0x120D, W0
007868  784010     MOV.B [W0], W0
00786A  07FAAD     RCALL lcdWriteByteQ
177:               
178:                       lcdSetCursorQ(0,3);
00786C  B3C031     MOV.B #0x3, W1
00786E  EB4000     CLR.B W0
007870  07FA01     RCALL lcdSetCursorQ
179:                       lcdWriteStringQ("Stat:");
007872  2EBEB0     MOV #0xEBEB, W0
007874  07FA13     RCALL lcdWriteStringQ
180:                       lcdWriteWordUnsignedQ(flashStatusCheck(FLASH_RDSR1));
007876  B3C050     MOV.B #0x5, W0
007878  07012C     RCALL flashStatusCheck
00787A  FB0000     SE W0, W0
00787C  07FACF     RCALL lcdWriteWordUnsignedQ
181:                       lcdWriteStringQ(", ");
00787E  2EBF10     MOV #0xEBF1, W0
007880  07FA0D     RCALL lcdWriteStringQ
182:                       lcdWriteWordUnsignedQ(flashStatusCheck(FLASH_BRRD));
007882  B3C160     MOV.B #0x16, W0
007884  070126     RCALL flashStatusCheck
007886  FB0000     SE W0, W0
007888  07FAC9     RCALL lcdWriteWordUnsignedQ
183:                       
184:                   }
185:               }
00788A  060000     RETURN
186:               
187:               void screenDebugInput(void){
188:                   if(state!=laststate){
00788C  80B050     MOV laststate, W0
00788E  E3162E     CP 0x162E
007890  320016     BRA Z, 0x78BE
189:                       //setup here
190:                       lcdClearQ();
007892  07F9E5     RCALL lcdClearQ
191:                       lcdSetCursorQ(0,0);
007894  EB4080     CLR.B W1
007896  784001     MOV.B W1, W0
007898  07F9ED     RCALL lcdSetCursorQ
192:                       lcdWriteStringQ("Input Debug");
00789A  2EBF40     MOV #0xEBF4, W0
00789C  07F9FF     RCALL lcdWriteStringQ
193:                       lcdSetCursorQ(0,1);
00789E  B3C011     MOV.B #0x1, W1
0078A0  EB4000     CLR.B W0
0078A2  07F9E8     RCALL lcdSetCursorQ
194:                       lcdWriteStringQ("Size:");
0078A4  2EC000     MOV #0xEC00, W0
0078A6  07F9FA     RCALL lcdWriteStringQ
195:                       lcdSetCursorQ(0,2);
0078A8  B3C021     MOV.B #0x2, W1
0078AA  EB4000     CLR.B W0
0078AC  07F9E3     RCALL lcdSetCursorQ
196:                       lcdWriteStringQ("Playing:");
0078AE  2EC060     MOV #0xEC06, W0
0078B0  07F9F5     RCALL lcdWriteStringQ
197:                       lcdSetCursorQ(0,3);
0078B2  B3C031     MOV.B #0x3, W1
0078B4  EB4000     CLR.B W0
0078B6  07F9DE     RCALL lcdSetCursorQ
198:                       lcdWriteStringQ("Blocks:");
0078B8  2EC0F0     MOV #0xEC0F, W0
0078BA  07F9F0     RCALL lcdWriteStringQ
0078BC  370013     BRA 0x78E4
199:                   } else {
200:                       //update here
201:                       lcdSetCursorQ(5,1);
0078BE  B3C011     MOV.B #0x1, W1
0078C0  B3C050     MOV.B #0x5, W0
0078C2  07F9D8     RCALL lcdSetCursorQ
202:                       lcdWriteWordUnsignedQ(sine.size);
0078C4  812020     MOV 0x2404, W0
0078C6  07FAAA     RCALL lcdWriteWordUnsignedQ
203:                       lcdSetCursorQ(8,2);
0078C8  B3C021     MOV.B #0x2, W1
0078CA  B3C080     MOV.B #0x8, W0
0078CC  07F9D3     RCALL lcdSetCursorQ
204:                       lcdWriteWordUnsignedQ(sine.playing);
0078CE  224080     MOV #0x2408, W0
0078D0  FB8010     ZE [W0], W0
0078D2  07FAA4     RCALL lcdWriteWordUnsignedQ
205:                       lcdSetCursorQ(7,3);
0078D4  B3C031     MOV.B #0x3, W1
0078D6  B3C070     MOV.B #0x7, W0
0078D8  07F9CD     RCALL lcdSetCursorQ
206:                       lcdWriteDecimalQ(sine.block_index, 3);
0078DA  200031     MOV #0x3, W1
0078DC  812050     MOV 0x240A, W0
0078DE  07FAF8     RCALL lcdWriteDecimalQ
207:                       
208:                       lcdDrawPads(16);
0078E0  B3C100     MOV.B #0x10, W0
0078E2  07FB28     RCALL lcdDrawPads
209:                   }
210:               }
0078E4  060000     RETURN
211:               
212:               void screenNoFXmod(unsigned int col, fractional param1, fractional param2, fractional param3){
007330  781F88     MOV W8, [W15++]
007332  780400     MOV W0, W8
213:                       if(fxNow!=fxLast || state!=laststate){
007334  80B150     MOV fxLast, W0
007336  E3162C     CP fxNow
007338  3A0003     BRA NZ, 0x7340
00733A  80B050     MOV laststate, W0
00733C  E3162E     CP 0x162E
00733E  320015     BRA Z, 0x736A
214:                       // Setup here
215:                           
216:                       lcdSetCursorQ(col+5,0);
007340  444065     ADD.B W8, #0x5, W0
007342  EB4080     CLR.B W1
007344  07FC97     RCALL lcdSetCursorQ
217:                       lcdWriteStringQ("OFF");
007346  2EB740     MOV #0xEB74, W0
007348  07FCA9     RCALL lcdWriteStringQ
218:                       lcdSetCursorQ(col,1);
00734A  B3C011     MOV.B #0x1, W1
00734C  784008     MOV.B W8, W0
00734E  07FC92     RCALL lcdSetCursorQ
219:                       lcdWriteStringQ("        ");
007350  2EB780     MOV #0xEB78, W0
007352  07FCA4     RCALL lcdWriteStringQ
220:                       lcdSetCursorQ(col,2);
007354  B3C021     MOV.B #0x2, W1
007356  784008     MOV.B W8, W0
007358  07FC8D     RCALL lcdSetCursorQ
221:                       lcdWriteStringQ("        ");
00735A  2EB780     MOV #0xEB78, W0
00735C  07FC9F     RCALL lcdWriteStringQ
222:                       lcdSetCursorQ(col,3);
00735E  B3C031     MOV.B #0x3, W1
007360  784008     MOV.B W8, W0
007362  07FC88     RCALL lcdSetCursorQ
223:                       lcdWriteStringQ("        ");
007364  2EB780     MOV #0xEB78, W0
007366  07FC9A     RCALL lcdWriteStringQ
007368  370005     BRA 0x7374
224:               
225:                   } else {
226:                       // Update here
227:                       lcdSetCursorQ(col+5,0);
00736A  444065     ADD.B W8, #0x5, W0
00736C  EB4080     CLR.B W1
00736E  07FC82     RCALL lcdSetCursorQ
228:                       lcdWriteStringQ("OFF");
007370  2EB740     MOV #0xEB74, W0
007372  07FC94     RCALL lcdWriteStringQ
229:                   }
230:               }
007374  78044F     MOV [--W15], W8
007376  060000     RETURN
231:               
232:               void screenLPFmod(unsigned int col, fractional param1, fractional param2, fractional param3){
0074E0  BE9F88     MOV.D W8, [W15++]
0074E2  BE9F8A     MOV.D W10, [W15++]
0074E4  780400     MOV W0, W8
0074E6  780501     MOV W1, W10
0074E8  780582     MOV W2, W11
0074EA  780483     MOV W3, W9
233:                   if(fxNow!=fxLast || state!=laststate){
0074EC  80B150     MOV fxLast, W0
0074EE  E3162C     CP fxNow
0074F0  3A0003     BRA NZ, 0x74F8
0074F2  80B050     MOV laststate, W0
0074F4  E3162E     CP 0x162E
0074F6  320015     BRA Z, 0x7522
234:                       // Setup here
235:                       lcdSetCursorQ(col+5,0);
0074F8  444065     ADD.B W8, #0x5, W0
0074FA  EB4080     CLR.B W1
0074FC  07FBBB     RCALL lcdSetCursorQ
236:                       lcdWriteStringQ("LPF");
0074FE  2EBA50     MOV #0xEBA5, W0
007500  07FBCD     RCALL lcdWriteStringQ
237:                       lcdSetCursorQ(col,1);
007502  B3C011     MOV.B #0x1, W1
007504  784008     MOV.B W8, W0
007506  07FBB6     RCALL lcdSetCursorQ
238:                       lcdWriteStringQ("frq");
007508  2EBA90     MOV #0xEBA9, W0
00750A  07FBC8     RCALL lcdWriteStringQ
239:                       lcdSetCursorQ(col,2);
00750C  B3C021     MOV.B #0x2, W1
00750E  784008     MOV.B W8, W0
007510  07FBB1     RCALL lcdSetCursorQ
240:                       lcdWriteStringQ("d/w");
007512  2EB890     MOV #0xEB89, W0
007514  07FBC3     RCALL lcdWriteStringQ
241:                       lcdSetCursorQ(col,3);
007516  B3C031     MOV.B #0x3, W1
007518  784008     MOV.B W8, W0
00751A  07FBAC     RCALL lcdSetCursorQ
242:                       lcdWriteStringQ("pwr");
00751C  2EB8D0     MOV #0xEB8D, W0
00751E  07FBBE     RCALL lcdWriteStringQ
007520  370018     BRA 0x7552
243:                   } else {
244:                       // Update here
245:                       lcdSetCursorQ(col+5,1);
007522  444465     ADD.B W8, #0x5, W8
007524  B3C011     MOV.B #0x1, W1
007526  784008     MOV.B W8, W0
007528  07FBA5     RCALL lcdSetCursorQ
246:                       lcdWriteDecimalQ(param1, 3);
00752A  200031     MOV #0x3, W1
00752C  78400A     MOV.B W10, W0
00752E  07FCD0     RCALL lcdWriteDecimalQ
247:                       lcdSetCursorQ(col+5,2);
007530  B3C021     MOV.B #0x2, W1
007532  784008     MOV.B W8, W0
007534  07FB9F     RCALL lcdSetCursorQ
248:                       lcdWriteDecimalQ(param2, 3);
007536  200031     MOV #0x3, W1
007538  78400B     MOV.B W11, W0
00753A  07FCCA     RCALL lcdWriteDecimalQ
249:                       lcdSetCursorQ(col+5,3);
00753C  B3C031     MOV.B #0x3, W1
00753E  784008     MOV.B W8, W0
007540  07FB99     RCALL lcdSetCursorQ
250:                       if(param3>=50)
007542  200310     MOV #0x31, W0
007544  548F80     SUB W9, W0, [W15]
007546  340003     BRA LE, 0x754E
251:                           lcdWriteStringQ(" ON");
007548  2EB910     MOV #0xEB91, W0
00754A  07FBA8     RCALL lcdWriteStringQ
00754C  370002     BRA 0x7552
252:                       else lcdWriteStringQ("OFF");
00754E  2EB740     MOV #0xEB74, W0
007550  07FBA5     RCALL lcdWriteStringQ
253:                   }
254:               }
007552  BE054F     MOV.D [--W15], W10
007554  BE044F     MOV.D [--W15], W8
007556  060000     RETURN
255:               
256:               void screenTRMmod(unsigned int col, fractional param1, fractional param2, fractional param3){
007468  BE9F88     MOV.D W8, [W15++]
00746A  BE9F8A     MOV.D W10, [W15++]
00746C  780400     MOV W0, W8
00746E  780501     MOV W1, W10
007470  780582     MOV W2, W11
007472  780483     MOV W3, W9
257:                   if(fxNow!=fxLast || state!=laststate){
007474  80B150     MOV fxLast, W0
007476  E3162C     CP fxNow
007478  3A0003     BRA NZ, 0x7480
00747A  80B050     MOV laststate, W0
00747C  E3162E     CP 0x162E
00747E  320015     BRA Z, 0x74AA
258:                       // Setup here
259:                       lcdSetCursorQ(col+5,0);
007480  444065     ADD.B W8, #0x5, W0
007482  EB4080     CLR.B W1
007484  07FBF7     RCALL lcdSetCursorQ
260:                       lcdWriteStringQ("TRM");
007486  2EB990     MOV #0xEB99, W0
007488  07FC09     RCALL lcdWriteStringQ
261:                       lcdSetCursorQ(col,1);
00748A  B3C011     MOV.B #0x1, W1
00748C  784008     MOV.B W8, W0
00748E  07FBF2     RCALL lcdSetCursorQ
262:                       lcdWriteStringQ("rat");
007490  2EB9D0     MOV #0xEB9D, W0
007492  07FC04     RCALL lcdWriteStringQ
263:                       lcdSetCursorQ(col,2);
007494  B3C021     MOV.B #0x2, W1
007496  784008     MOV.B W8, W0
007498  07FBED     RCALL lcdSetCursorQ
264:                       lcdWriteStringQ("dep");
00749A  2EBA10     MOV #0xEBA1, W0
00749C  07FBFF     RCALL lcdWriteStringQ
265:                       lcdSetCursorQ(col,3);
00749E  B3C031     MOV.B #0x3, W1
0074A0  784008     MOV.B W8, W0
0074A2  07FBE8     RCALL lcdSetCursorQ
266:                       lcdWriteStringQ("pwr");
0074A4  2EB8D0     MOV #0xEB8D, W0
0074A6  07FBFA     RCALL lcdWriteStringQ
0074A8  370018     BRA 0x74DA
267:                   } else {
268:                       // Update here
269:                       lcdSetCursorQ(col+5,1);
0074AA  444465     ADD.B W8, #0x5, W8
0074AC  B3C011     MOV.B #0x1, W1
0074AE  784008     MOV.B W8, W0
0074B0  07FBE1     RCALL lcdSetCursorQ
270:                       lcdWriteDecimalQ(param1, 3);
0074B2  200031     MOV #0x3, W1
0074B4  78400A     MOV.B W10, W0
0074B6  07FD0C     RCALL lcdWriteDecimalQ
271:                       lcdSetCursorQ(col+5,2);
0074B8  B3C021     MOV.B #0x2, W1
0074BA  784008     MOV.B W8, W0
0074BC  07FBDB     RCALL lcdSetCursorQ
272:                       lcdWriteDecimalQ(param2, 3);
0074BE  200031     MOV #0x3, W1
0074C0  78400B     MOV.B W11, W0
0074C2  07FD06     RCALL lcdWriteDecimalQ
273:                       lcdSetCursorQ(col+5,3);
0074C4  B3C031     MOV.B #0x3, W1
0074C6  784008     MOV.B W8, W0
0074C8  07FBD5     RCALL lcdSetCursorQ
274:                       if(param3>=50)
0074CA  200310     MOV #0x31, W0
0074CC  548F80     SUB W9, W0, [W15]
0074CE  340003     BRA LE, 0x74D6
275:                           lcdWriteStringQ(" ON");
0074D0  2EB910     MOV #0xEB91, W0
0074D2  07FBE4     RCALL lcdWriteStringQ
0074D4  370002     BRA 0x74DA
276:                       else lcdWriteStringQ("OFF");
0074D6  2EB740     MOV #0xEB74, W0
0074D8  07FBE1     RCALL lcdWriteStringQ
277:                   }
278:               }
0074DA  BE054F     MOV.D [--W15], W10
0074DC  BE044F     MOV.D [--W15], W8
0074DE  060000     RETURN
279:               
280:               void screenLOPmod(unsigned int col, fractional param1, fractional param2, fractional param3){
0073F0  BE9F88     MOV.D W8, [W15++]
0073F2  BE9F8A     MOV.D W10, [W15++]
0073F4  780400     MOV W0, W8
0073F6  780501     MOV W1, W10
0073F8  780582     MOV W2, W11
0073FA  780483     MOV W3, W9
281:                   if(fxNow!=fxLast || state!=laststate){
0073FC  80B150     MOV fxLast, W0
0073FE  E3162C     CP fxNow
007400  3A0003     BRA NZ, 0x7408
007402  80B050     MOV laststate, W0
007404  E3162E     CP 0x162E
007406  320015     BRA Z, 0x7432
282:                       // Setup here
283:                       lcdSetCursorQ(col+5,0);
007408  444065     ADD.B W8, #0x5, W0
00740A  EB4080     CLR.B W1
00740C  07FC33     RCALL lcdSetCursorQ
284:                       lcdWriteStringQ("LOP");
00740E  2EB950     MOV #0xEB95, W0
007410  07FC45     RCALL lcdWriteStringQ
285:                       lcdSetCursorQ(col,1);
007412  B3C011     MOV.B #0x1, W1
007414  784008     MOV.B W8, W0
007416  07FC2E     RCALL lcdSetCursorQ
286:                       lcdWriteStringQ("siz");
007418  2EB850     MOV #0xEB85, W0
00741A  07FC40     RCALL lcdWriteStringQ
287:                       lcdSetCursorQ(col,2);
00741C  B3C021     MOV.B #0x2, W1
00741E  784008     MOV.B W8, W0
007420  07FC29     RCALL lcdSetCursorQ
288:                       lcdWriteStringQ("d/w");
007422  2EB890     MOV #0xEB89, W0
007424  07FC3B     RCALL lcdWriteStringQ
289:                       lcdSetCursorQ(col,3);
007426  B3C031     MOV.B #0x3, W1
007428  784008     MOV.B W8, W0
00742A  07FC24     RCALL lcdSetCursorQ
290:                       lcdWriteStringQ("pwr");
00742C  2EB8D0     MOV #0xEB8D, W0
00742E  07FC36     RCALL lcdWriteStringQ
007430  370018     BRA 0x7462
291:                   } else {
292:                       // Update here
293:                       lcdSetCursorQ(col+5,1);
007432  444465     ADD.B W8, #0x5, W8
007434  B3C011     MOV.B #0x1, W1
007436  784008     MOV.B W8, W0
007438  07FC1D     RCALL lcdSetCursorQ
294:                       lcdWriteDecimalQ(param1, 3);
00743A  200031     MOV #0x3, W1
00743C  78400A     MOV.B W10, W0
00743E  07FD48     RCALL lcdWriteDecimalQ
295:                       lcdSetCursorQ(col+5,2);
007440  B3C021     MOV.B #0x2, W1
007442  784008     MOV.B W8, W0
007444  07FC17     RCALL lcdSetCursorQ
296:                       lcdWriteDecimalQ(param2, 3);
007446  200031     MOV #0x3, W1
007448  78400B     MOV.B W11, W0
00744A  07FD42     RCALL lcdWriteDecimalQ
297:                       lcdSetCursorQ(col+5,3);
00744C  B3C031     MOV.B #0x3, W1
00744E  784008     MOV.B W8, W0
007450  07FC11     RCALL lcdSetCursorQ
298:                       if(param3>=50)
007452  200310     MOV #0x31, W0
007454  548F80     SUB W9, W0, [W15]
007456  340003     BRA LE, 0x745E
299:                           lcdWriteStringQ(" ON");
007458  2EB910     MOV #0xEB91, W0
00745A  07FC20     RCALL lcdWriteStringQ
00745C  370002     BRA 0x7462
300:                       else lcdWriteStringQ("OFF");
00745E  2EB740     MOV #0xEB74, W0
007460  07FC1D     RCALL lcdWriteStringQ
301:                   }
302:               }
007462  BE054F     MOV.D [--W15], W10
007464  BE044F     MOV.D [--W15], W8
007466  060000     RETURN
303:               
304:               void screenBTCmod(unsigned int col, fractional param1, fractional param2, fractional param3){
007378  BE9F88     MOV.D W8, [W15++]
00737A  BE9F8A     MOV.D W10, [W15++]
00737C  780400     MOV W0, W8
00737E  780501     MOV W1, W10
007380  780582     MOV W2, W11
007382  780483     MOV W3, W9
305:                   if(fxNow!=fxLast || state!=laststate){
007384  80B150     MOV fxLast, W0
007386  E3162C     CP fxNow
007388  3A0003     BRA NZ, 0x7390
00738A  80B050     MOV laststate, W0
00738C  E3162E     CP 0x162E
00738E  320015     BRA Z, 0x73BA
306:                       // Setup here
307:                       lcdSetCursorQ(col+5,0);
007390  444065     ADD.B W8, #0x5, W0
007392  EB4080     CLR.B W1
007394  07FC6F     RCALL lcdSetCursorQ
308:                       lcdWriteStringQ("BIT");
007396  2EB810     MOV #0xEB81, W0
007398  07FC81     RCALL lcdWriteStringQ
309:                       lcdSetCursorQ(col,1);
00739A  B3C011     MOV.B #0x1, W1
00739C  784008     MOV.B W8, W0
00739E  07FC6A     RCALL lcdSetCursorQ
310:                       lcdWriteStringQ("siz");
0073A0  2EB850     MOV #0xEB85, W0
0073A2  07FC7C     RCALL lcdWriteStringQ
311:                       lcdSetCursorQ(col,2);
0073A4  B3C021     MOV.B #0x2, W1
0073A6  784008     MOV.B W8, W0
0073A8  07FC65     RCALL lcdSetCursorQ
312:                       lcdWriteStringQ("d/w");
0073AA  2EB890     MOV #0xEB89, W0
0073AC  07FC77     RCALL lcdWriteStringQ
313:                       lcdSetCursorQ(col,3);
0073AE  B3C031     MOV.B #0x3, W1
0073B0  784008     MOV.B W8, W0
0073B2  07FC60     RCALL lcdSetCursorQ
314:                       lcdWriteStringQ("pwr");
0073B4  2EB8D0     MOV #0xEB8D, W0
0073B6  07FC72     RCALL lcdWriteStringQ
0073B8  370018     BRA 0x73EA
315:                   } else {
316:                       // Update here
317:                       lcdSetCursorQ(col+5,1);
0073BA  444465     ADD.B W8, #0x5, W8
0073BC  B3C011     MOV.B #0x1, W1
0073BE  784008     MOV.B W8, W0
0073C0  07FC59     RCALL lcdSetCursorQ
318:                       lcdWriteDecimalQ(param1, 3);
0073C2  200031     MOV #0x3, W1
0073C4  78400A     MOV.B W10, W0
0073C6  07FD84     RCALL lcdWriteDecimalQ
319:                       lcdSetCursorQ(col+5,2);
0073C8  B3C021     MOV.B #0x2, W1
0073CA  784008     MOV.B W8, W0
0073CC  07FC53     RCALL lcdSetCursorQ
320:                       lcdWriteDecimalQ(param2, 3);
0073CE  200031     MOV #0x3, W1
0073D0  78400B     MOV.B W11, W0
0073D2  07FD7E     RCALL lcdWriteDecimalQ
321:                       lcdSetCursorQ(col+5,3);
0073D4  B3C031     MOV.B #0x3, W1
0073D6  784008     MOV.B W8, W0
0073D8  07FC4D     RCALL lcdSetCursorQ
322:                       if(param3>=50)
0073DA  200310     MOV #0x31, W0
0073DC  548F80     SUB W9, W0, [W15]
0073DE  340003     BRA LE, 0x73E6
323:                           lcdWriteStringQ(" ON");
0073E0  2EB910     MOV #0xEB91, W0
0073E2  07FC5C     RCALL lcdWriteStringQ
0073E4  370002     BRA 0x73EA
324:                       else lcdWriteStringQ("OFF");
0073E6  2EB740     MOV #0xEB74, W0
0073E8  07FC59     RCALL lcdWriteStringQ
325:                   }
326:               }
0073EA  BE054F     MOV.D [--W15], W10
0073EC  BE044F     MOV.D [--W15], W8
0073EE  060000     RETURN
327:               
328:               void screenFX(void){
0078E6  781F88     MOV W8, [W15++]
329:                   if(state!=laststate){
0078E8  80B050     MOV laststate, W0
0078EA  E3162E     CP 0x162E
0078EC  32001D     BRA Z, 0x7928
330:                       //setup here
331:                       lcdClearQ();
0078EE  07F9B7     RCALL lcdClearQ
332:                       lcdSetCursorQ(0,0);
0078F0  EB4080     CLR.B W1
0078F2  784001     MOV.B W1, W0
0078F4  07F9BF     RCALL lcdSetCursorQ
333:                       lcdWriteStringQ("Fx1:");
0078F6  2EC170     MOV #0xEC17, W0
0078F8  07F9D1     RCALL lcdWriteStringQ
334:                       lcdSetCursorQ(10,0);
0078FA  EB4080     CLR.B W1
0078FC  B3C0A0     MOV.B #0xA, W0
0078FE  07F9BA     RCALL lcdSetCursorQ
335:                       lcdWriteStringQ("Fx2:");
007900  2EC1C0     MOV #0xEC1C, W0
007902  07F9CC     RCALL lcdWriteStringQ
336:                       fxModPointers[fxUnits[0]](0,  ctrl.pots_scaled[FX_1], ctrl.pots_scaled[FX_2], ctrl.pots_scaled[FX_3]);
007904  D4160C     SL fxUnits, WREG
007906  2245E8     MOV #0x245E, W8
007908  400008     ADD W0, W8, W0
00790A  780210     MOV [W0], W4
00790C  80B3D3     MOV 0x167A, W3
00790E  80B3B2     MOV 0x1676, W2
007910  80B391     MOV 0x1672, W1
007912  EB0000     CLR W0
007914  010004     CALL W4
337:                       fxModPointers[fxUnits[1]](10, ctrl.pots_scaled[FX_4], ctrl.pots_scaled[FX_5], ctrl.pots_scaled[FX_6]);
007916  D4160E     SL 0x160E, WREG
007918  400408     ADD W0, W8, W8
00791A  780218     MOV [W8], W4
00791C  80B3E3     MOV 0x167C, W3
00791E  80B3C2     MOV 0x1678, W2
007920  80B3A1     MOV 0x1674, W1
007922  2000A0     MOV #0xA, W0
007924  010004     CALL W4
007926  370011     BRA 0x794A
338:                       
339:                   } else {
340:                       //update here 
341:                       fxModPointers[fxUnits[0]](0,  ctrl.pots_scaled[FX_1], ctrl.pots_scaled[FX_2], ctrl.pots_scaled[FX_3]);
007928  D4160C     SL fxUnits, WREG
00792A  2245E8     MOV #0x245E, W8
00792C  400008     ADD W0, W8, W0
00792E  780210     MOV [W0], W4
007930  80B3D3     MOV 0x167A, W3
007932  80B3B2     MOV 0x1676, W2
007934  80B391     MOV 0x1672, W1
007936  EB0000     CLR W0
007938  010004     CALL W4
342:                       fxModPointers[fxUnits[1]](10, ctrl.pots_scaled[FX_4], ctrl.pots_scaled[FX_5], ctrl.pots_scaled[FX_6]);
00793A  D4160E     SL 0x160E, WREG
00793C  400408     ADD W0, W8, W8
00793E  780218     MOV [W8], W4
007940  80B3E3     MOV 0x167C, W3
007942  80B3C2     MOV 0x1678, W2
007944  80B3A1     MOV 0x1674, W1
007946  2000A0     MOV #0xA, W0
007948  010004     CALL W4
343:                   }
344:                        
345:               }
00794A  78044F     MOV [--W15], W8
00794C  060000     RETURN
346:               
347:               void screenSHIFT(void){
348:                   if(state!=laststate){
00794E  80B050     MOV laststate, W0
007950  E3162E     CP 0x162E
007952  32000C     BRA Z, 0x796C
349:                       //setup here
350:                       lcdClearQ();
007954  07F984     RCALL lcdClearQ
351:                       lcdSetCursorQ(0,0);
007956  EB4080     CLR.B W1
007958  784001     MOV.B W1, W0
00795A  07F98C     RCALL lcdSetCursorQ
352:                       lcdWriteStringQ("SHIFT");
00795C  2EC210     MOV #0xEC21, W0
00795E  07F99E     RCALL lcdWriteStringQ
353:                       lcdSetCursorQ(0,1);
007960  B3C011     MOV.B #0x1, W1
007962  EB4000     CLR.B W0
007964  07F987     RCALL lcdSetCursorQ
354:                       lcdWriteStringQ("Volume: ");
007966  2EC270     MOV #0xEC27, W0
007968  07F999     RCALL lcdWriteStringQ
00796A  370006     BRA 0x7978
355:                   } else {
356:                       //update here 
357:                       lcdSetCursorQ(8,1);
00796C  B3C011     MOV.B #0x1, W1
00796E  B3C080     MOV.B #0x8, W0
007970  07F981     RCALL lcdSetCursorQ
358:                       lcdWriteDecimalQ(ctrl.pots_scaled[POT_VOLUME], 3);
007972  200031     MOV #0x3, W1
007974  80B400     MOV 0x1680, W0
007976  07FAAC     RCALL lcdWriteDecimalQ
359:                   }
360:               }
007978  060000     RETURN
361:               
362:               void screenUpdate(void){
363:                   fxNow=fxUnits[0]+fxUnits[1];
00797A  80B060     MOV fxUnits, W0
00797C  B4160E     ADD 0x160E, WREG
00797E  88B160     MOV W0, fxNow
364:                   
365:                   switch(state){
007980  80B170     MOV 0x162E, W0
007982  500FE3     SUB W0, #0x3, [W15]
007984  320010     BRA Z, 0x79A6
007986  3E0005     BRA GTU, 0x7992
007988  500FE1     SUB W0, #0x1, [W15]
00798A  320009     BRA Z, 0x799E
00798C  500FE2     SUB W0, #0x2, [W15]
00798E  3A0012     BRA NZ, 0x79B4
007990  370008     BRA 0x79A2
007992  500FE5     SUB W0, #0x5, [W15]
007994  32000C     BRA Z, 0x79AE
007996  390009     BRA NC, 0x79AA
007998  500FE6     SUB W0, #0x6, [W15]
00799A  3A000C     BRA NZ, 0x79B4
00799C  37000A     BRA 0x79B2
366:                       case start: break;
367:                       case scrnFX:            screenFX(); 
00799E  07FFA3     RCALL screenFX
368:                       break;
0079A0  370009     BRA 0x79B4
369:                       case scrnSHIFT:         screenSHIFT();
0079A2  07FFD5     RCALL screenSHIFT
370:                       break;
0079A4  370007     BRA 0x79B4
371:                       case debugscrnPOTS:     screenDebugPots();
0079A6  07FE09     RCALL screenDebugPots
372:                       break;
0079A8  370005     BRA 0x79B4
373:                       case debugscrnFLASH:    screenDebugFlash();
0079AA  07FEAE     RCALL screenDebugFlash
374:                       break;
0079AC  370003     BRA 0x79B4
375:                       case debugscrnBUFFERS:  screenDebugBuffers();
0079AE  07FDD5     RCALL screenDebugBuffers
376:                       break;
0079B0  370001     BRA 0x79B4
377:                       case debugscrnINPUT:    screenDebugInput();
0079B2  07FF6C     RCALL screenDebugInput
378:                       break;
379:                                       
380:                       default: break;
381:                   }
382:                   
383:                   laststate=state;
0079B4  F8162E     PUSH 0x162E
0079B6  F9160A     POP laststate
384:                   fxLast=fxUnits[0]+fxUnits[1];
0079B8  80B060     MOV fxUnits, W0
0079BA  B4160E     ADD 0x160E, WREG
0079BC  88B150     MOV W0, fxLast
385:               }
0079BE  060000     RETURN
386:                   /*
387:                   lcdSetCursorQ(0,3);
388:                   if(hard_clipped==TRUE){                                                     //CLIP CONTROL    
389:                       lcdWriteStringQ("CLIP");
390:                       hard_clipped=FALSE;  
391:                   }
392:                   else if(TEST_SIN==TRUE)lcdWriteStringQ("SINE");
393:                   else lcdWriteStringQ("THRU");
394:                    * 
395:                    *    lcdSetCursorQ(10,3);
396:                  lcdWriteWordQ(ENCODERCNTL);
397:                   */
398:               
399:               
---  C:/Users/ryan/Documents/seniorproject/ps-040/routines.c  -------------------------------------------
1:                 #include <xc.h>
2:                 #include <p33EP512GM310.h>
3:                 #include <dsp.h>
4:                 #include "common.h"
5:                 #include "routines.h"
6:                 
7:                 extern fractional   outputA[STREAMBUF], outputB[STREAMBUF],
8:                                     streamA[STREAMBUF], streamB[STREAMBUF];
9:                 extern unsigned int write_ptr, rw, frameReady;
10:                
11:                extern unsigned char    TxBufferA[FLASH_DMAXFER_BYTES]__attribute__((space(xmemory))), 
12:                                        RxBufferA[FLASH_DMAXFER_BYTES]__attribute__((space(xmemory)));
13:                
14:                extern struct sflags stat;
15:                
16:                extern unsigned char btread;
17:                
18:                //Description: This interrupt triggers at the completion of DCI output
19:                //Dependancies: initSPI2(); 
20:                void __attribute__ ((interrupt, auto_psv)) _DCIInterrupt(void){
00031E  BE9F80     MOV.D W0, [W15++]
000320  BE9F82     MOV.D W2, [W15++]
000322  BE9F84     MOV.D W4, [W15++]
000324  F80032     PUSH DSRPAG
000326  F80034     PUSH DSWPAG
000328  200010     MOV #0x1, W0
00032A  8801A0     MOV W0, DSWPAG
00032C  202000     MOV #0x200, W0
00032E  880190     MOV W0, DSRPAG
000330  000000     NOP
000332  FA0004     LNK #0x4
21:                    static fractional sampoutA=0, sampoutB=0;
22:                    fractional sampinA=0, sampinB=0;
23:                    
24:                    int trashA=RXBUF0;
000334  801480     MOV RXBUF0, W0
25:                    sampinA=RXBUF1;
000336  801490     MOV RXBUF1, W0
000338  9FBFE0     MOV W0, [W15-4]
26:                    int trashB=RXBUF2;
00033A  8014A0     MOV RXBUF2, W0
27:                    sampinB=RXBUF3;
00033C  8014B5     MOV RXBUF3, W5
00033E  9FBFF5     MOV W5, [W15-2]
28:                    TXBUF0=TXBUF1=sampoutA;                                    //output buffered sample to DAC
000340  F81620     PUSH sampoutA
000342  F9029A     POP TXBUF1
000344  F8029A     PUSH TXBUF1
000346  F90298     POP TXBUF0
29:                    TXBUF2=TXBUF3=sampoutB;
000348  F8161E     PUSH sampoutB
00034A  F9029E     POP TXBUF3
00034C  F8029E     PUSH TXBUF3
00034E  F9029C     POP TXBUF2
30:                
31:                    __builtin_btg(&sampinA, 15);                             //convert to Q1.15 compatible format
000350  97B86F     MOV [W15-4], W0
000352  A2F000     BTG W0, #15
000354  9FBFE0     MOV W0, [W15-4]
32:                    __builtin_btg(&sampinB, 15);                             //convert to Q1.15 compatible format
000356  A2F005     BTG W5, #15
000358  9FBFF5     MOV W5, [W15-2]
33:                    
34:                    if(write_ptr== STREAMBUF){                       //reset pointer when out of bounds
00035A  201000     MOV #0x100, W0
00035C  E31600     CP write_ptr
00035E  3A0004     BRA NZ, 0x368
35:                        write_ptr=0;
000360  EF3600     CLR write_ptr
36:                        __builtin_btg(&rw,0);
000362  AA1602     BTG rw, #0
37:                        frameReady=1;
000364  200010     MOV #0x1, W0
000366  88B020     MOV W0, frameReady
38:                    }
39:                   
40:                    if(rw){
000368  E21602     CP0 rw
00036A  320019     BRA Z, 0x39E
41:                        streamB[write_ptr]=sampinA;
00036C  80B000     MOV write_ptr, W0
00036E  B80161     MUL.UU W0, #1, W2
000370  410102     ADD W2, W2, W2
000372  498183     ADDC W3, W3, W3
000374  21CA24     MOV #0x1CA2, W4
000376  420082     ADD W4, W2, W1
000378  97BAEF     MOV [W15-4], W5
00037A  780885     MOV W5, [W1]
42:                        sampoutA=outputA[write_ptr++]; 
00037C  216A21     MOV #0x16A2, W1
00037E  408102     ADD W1, W2, W2
000380  780112     MOV [W2], W2
000382  88B102     MOV W2, sampoutA
000384  E80000     INC W0, W0
43:                        streamB[write_ptr]=sampinB;
000386  B80161     MUL.UU W0, #1, W2
000388  410102     ADD W2, W2, W2
00038A  498183     ADDC W3, W3, W3
00038C  420202     ADD W4, W2, W4
00038E  97BAFF     MOV [W15-2], W5
000390  780A05     MOV W5, [W4]
44:                        sampoutB=outputA[write_ptr++];  
000392  408102     ADD W1, W2, W2
000394  780112     MOV [W2], W2
000396  88B0F2     MOV W2, sampoutB
000398  E80000     INC W0, W0
00039A  88B000     MOV W0, write_ptr
00039C  370018     BRA 0x3CE
45:                    } else {
46:                        streamA[write_ptr]=sampinA; 
00039E  80B000     MOV write_ptr, W0
0003A0  B80161     MUL.UU W0, #1, W2
0003A2  410102     ADD W2, W2, W2
0003A4  498183     ADDC W3, W3, W3
0003A6  21AA24     MOV #0x1AA2, W4
0003A8  420082     ADD W4, W2, W1
0003AA  97BAEF     MOV [W15-4], W5
0003AC  780885     MOV W5, [W1]
47:                        sampoutA=outputB[write_ptr++];  
0003AE  218A21     MOV #0x18A2, W1
0003B0  408102     ADD W1, W2, W2
0003B2  780112     MOV [W2], W2
0003B4  88B102     MOV W2, sampoutA
0003B6  E80000     INC W0, W0
48:                        streamA[write_ptr]=sampinB; 
0003B8  B80161     MUL.UU W0, #1, W2
0003BA  410102     ADD W2, W2, W2
0003BC  498183     ADDC W3, W3, W3
0003BE  420202     ADD W4, W2, W4
0003C0  97BAFF     MOV [W15-2], W5
0003C2  780A05     MOV W5, [W4]
49:                        sampoutB=outputB[write_ptr++];  
0003C4  408102     ADD W1, W2, W2
0003C6  780112     MOV [W2], W2
0003C8  88B0F2     MOV W2, sampoutB
0003CA  E80000     INC W0, W0
0003CC  88B000     MOV W0, write_ptr
50:                    } 
51:                    _DCIIF=0;
0003CE  A98807     BCLR 0x807, #4
52:                }
0003D0  FA8000     ULNK
0003D2  F90034     POP DSWPAG
0003D4  F90032     POP DSRPAG
0003D6  BE024F     MOV.D [--W15], W4
0003D8  BE014F     MOV.D [--W15], W2
0003DA  BE004F     MOV.D [--W15], W0
0003DC  064000     RETFIE
53:                
54:                void __attribute__((interrupt, auto_psv)) _DMA0Interrupt(void) {
0003DE  F80032     PUSH DSRPAG
0003E0  F80034     PUSH DSWPAG
0003E2  781F88     MOV W8, [W15++]
0003E4  200018     MOV #0x1, W8
0003E6  8801A8     MOV W8, DSWPAG
0003E8  202008     MOV #0x200, W8
0003EA  880198     MOV W8, DSRPAG
0003EC  000000     NOP
0003EE  78044F     MOV [--W15], W8
55:                    //DMA1CONbits.CHEN = 0;
56:                    //DMA0CONbits.CHEN = 0;
57:                    /*
58:                    SS3a=SS3b=1;
59:                    stat.FLASH_DMA=FALSE;
60:                    
61:                    if(stat.DMA_READING==TRUE){
62:                        stat.DMA_READING=FALSE;
63:                        stat.DMA_JUSTREAD=TRUE;
64:                    }
65:                    
66:                    DMA1CONbits.CHEN = 0;
67:                    DMA0CONbits.CHEN = 0;
68:                    
69:                    IFS5bits.SPI3IF = 0;        // Clear the Interrupt flag
70:                     */ 
71:                    //SS3a=SS3b=1;
72:                    //SPI3STATbits.SPIROV = 0;    // Clear SPI1 receive overflow flag if set
73:                    //IFS5bits.SPI3IF = 0;        // Clear the Interrupt flag
74:                    IFS0bits.DMA0IF = 0; // Clear the DMA0 Interrupt flag
0003F0  A98800     BCLR IFS0, #4
75:                }
0003F2  F90034     POP DSWPAG
0003F4  F90032     POP DSRPAG
0003F6  064000     RETFIE
76:                
77:                void __attribute__((interrupt, auto_psv)) _DMA1Interrupt(void){
0003F8  BE9F80     MOV.D W0, [W15++]
0003FA  F80032     PUSH DSRPAG
0003FC  F80034     PUSH DSWPAG
0003FE  200010     MOV #0x1, W0
000400  8801A0     MOV W0, DSWPAG
000402  202000     MOV #0x200, W0
000404  880190     MOV W0, DSRPAG
000406  000000     NOP
78:                    //static unsigned int BufferCount = 0; // Keep record of the buffer that contains RX data
79:                    //if(BufferCount == 0) ;
80:                        //ProcessRxData(TxBufferA); // Process received SPI data in DMA RAM Primary buffer
81:                    //else;
82:                        //ProcessRxData(TxBufferB); // Process received SPI data in DMA RAM Secondary buffer
83:                 
84:                    //BufferCount ^= 1;
85:                    
86:                    //BufferCount ^= 1;
87:                    IFS0bits.DMA1IF = 0;        // Clear the DMA1 Interrupt flag
000408  A9C801     BCLR 0x801, #6
88:                    SS3a=SS3b=1;
00040A  A8EE35     BSET 0xE35, #7
00040C  8071A0     MOV LATD, W0
00040E  DE004F     LSR W0, #15, W0
000410  400000     ADD W0, W0, W0
000412  8072A1     MOV LATF, W1
000414  A11001     BCLR W1, #1
000416  700081     IOR W0, W1, W1
000418  8872A1     MOV W1, LATF
89:                    
90:                    if(stat.DMA_READING==TRUE){
00041A  216330     MOV #0x1633, W0
00041C  EBC080     SETM.B W1
00041E  10CF90     SUBR.B W1, [W0], [W15]
000420  3A0003     BRA NZ, 0x428
91:                        stat.DMA_READING=FALSE;
000422  EB4800     CLR.B [W0]
92:                        stat.DMA_JUSTREAD=TRUE;
000424  E90000     DEC W0, W0
000426  EBC800     SETM.B [W0]
93:                    }
94:                    
95:                    DMA1CONbits.CHEN = 0;
000428  A9EB11     BCLR 0xB11, #7
96:                    DMA0CONbits.CHEN = 0;
00042A  A9EB01     BCLR 0xB01, #7
97:                    SPI3STATbits.SPIROV = 0;    // Clear SPI1 receive overflow flag if set
00042C  A9C2A0     BCLR SPI3STAT, #6
98:                    IFS5bits.SPI3IF = 0;        // Clear the Interrupt flag
00042E  A9680B     BCLR 0x80B, #3
99:                    
100:               }
000430  F90034     POP DSWPAG
000432  F90032     POP DSRPAG
000434  BE004F     MOV.D [--W15], W0
000436  064000     RETFIE
101:               
102:               //Description: This interrupt handles UART reception
103:               //Dependencies: initUART1();
104:               void __attribute__ ((interrupt, auto_psv)) _U1RXInterrupt(void){
000438  781F80     MOV W0, [W15++]
00043A  F80032     PUSH DSRPAG
00043C  F80034     PUSH DSWPAG
00043E  200010     MOV #0x1, W0
000440  8801A0     MOV W0, DSWPAG
000442  202000     MOV #0x200, W0
000444  880190     MOV W0, DSRPAG
000446  000000     NOP
105:                   //unsigned char trash;
106:                   btread=U1RXREG;
000448  801130     MOV U1RXREG, W0
00044A  B7F610     MOV.B WREG, btread
107:                   IFS0bits.U1RXIF = 0;            //clear flag, restart
00044C  A96801     BCLR 0x801, #3
108:               }
00044E  F90034     POP DSWPAG
000450  F90032     POP DSRPAG
000452  78004F     MOV [--W15], W0
000454  064000     RETFIE
109:               
110:               //Description: This interrupt handles UART transmission
111:               //Dependencies: initUART1();
112:               void __attribute__ ((interrupt, auto_psv)) _U1TXInterrupt(void){
000456  F80032     PUSH DSRPAG
000458  F80034     PUSH DSWPAG
00045A  781F88     MOV W8, [W15++]
00045C  200018     MOV #0x1, W8
00045E  8801A8     MOV W8, DSWPAG
000460  202008     MOV #0x200, W8
000462  880198     MOV W8, DSRPAG
000464  000000     NOP
000466  78044F     MOV [--W15], W8
113:                   IFS0bits.U1TXIF = 0;            //clear flag, restart
000468  A98801     BCLR 0x801, #4
114:               } 
00046A  F90034     POP DSWPAG
00046C  F90032     POP DSRPAG
00046E  064000     RETFIE
---  C:/Users/ryan/Documents/seniorproject/ps-040/plcd.c  -----------------------------------------------
1:                 /*
2:                  * File:   plcd.c
3:                  */
4:                 #include "xc.h"
5:                 #include "plcd.h"
6:                 #include "common.h"
7:                 #include "screens.h"
8:                 #include "utilities.h"
9:                 
10:                extern struct ctrlsrfc ctrl;
11:                
12:                int lcdBuf[LCDBUF+1]={0};
13:                int *lcdWritePtr=lcdBuf;
14:                int *lcdReadPtr=lcdBuf;
15:                
16:                // There are write and command macros in the header, make sure these match.
17:                void lcdWriteQ(unsigned char data){
18:                    *lcdWritePtr++=data|0x0000;
006C34  FB8000     ZE W0, W0
006C36  80B131     MOV 0x1626, W1
006C38  781880     MOV W0, [W1++]
006C3A  88B131     MOV W1, 0x1626
19:                    if(lcdWritePtr==&lcdBuf[LCDBUF])
006C3C  220A20     MOV #0x20A2, W0
006C3E  508F80     SUB W1, W0, [W15]
006C40  3A0002     BRA NZ, 0x6C46
20:                        lcdWritePtr=lcdBuf;
006C42  B12000     SUB #0x200, W0
006C44  88B130     MOV W0, 0x1626
21:                }
006C46  060000     RETURN
22:                
23:                // There are write and command macros in the header, make sure these match.
24:                void lcdCommandQ(unsigned char data){
25:                    *lcdWritePtr++=data|0x0100;     //flag for rs=1
006C48  FB8000     ZE W0, W0
006C4A  80B131     MOV 0x1626, W1
006C4C  A08000     BSET W0, #8
006C4E  781880     MOV W0, [W1++]
006C50  88B131     MOV W1, 0x1626
26:                    if(lcdWritePtr==&lcdBuf[LCDBUF])
006C52  220A20     MOV #0x20A2, W0
006C54  508F80     SUB W1, W0, [W15]
006C56  3A0002     BRA NZ, 0x6C5C
27:                        lcdWritePtr=lcdBuf;
006C58  B12000     SUB #0x200, W0
006C5A  88B130     MOV W0, 0x1626
28:                }
006C5C  060000     RETURN
29:                
30:                void lcdClearQ(void){
31:                    *lcdWritePtr++=LCD_CLEARDISPLAY|0x0300;     //flag for rs=1 & long delay
006C5E  80B130     MOV 0x1626, W0
006C60  203011     MOV #0x301, W1
006C62  781801     MOV W1, [W0++]
006C64  88B130     MOV W0, 0x1626
32:                    if(lcdWritePtr==&lcdBuf[LCDBUF])
006C66  220A21     MOV #0x20A2, W1
006C68  500F81     SUB W0, W1, [W15]
006C6A  3A0003     BRA NZ, 0x6C72
33:                        lcdWritePtr=lcdBuf;
006C6C  2FE000     MOV #0xFE00, W0
006C6E  400001     ADD W0, W1, W0
006C70  88B130     MOV W0, 0x1626
34:                }
006C72  060000     RETURN
35:                
36:                void lcdSetCursorQ(unsigned char col, unsigned char row) {
006C74  784101     MOV.B W1, W2
37:                  static unsigned char offsets[] = { 0x00, 0x40, 0x14, 0x54 };
38:                  if (row > 3) {
39:                    row = 3;
40:                  }
41:                  *lcdWritePtr++=(LCD_SETDDRAMADDR | (col + offsets[row]))|0x0100;  //flag for rs=0 
006C76  80B131     MOV 0x1626, W1
006C78  514FE3     SUB.B W2, #0x3, [W15]
006C7A  360001     BRA LEU, 0x6C7E
006C7C  B3C032     MOV.B #0x3, W2
006C7E  FB8102     ZE W2, W2
006C80  2EC303     MOV #0xEC30, W3
006C82  418102     ADD W3, W2, W2
006C84  FB8112     ZE [W2], W2
006C86  FB8000     ZE W0, W0
006C88  410000     ADD W2, W0, W0
006C8A  201802     MOV #0x180, W2
006C8C  701882     IOR W0, W2, [W1++]
006C8E  88B131     MOV W1, 0x1626
42:                    if(lcdWritePtr==&lcdBuf[LCDBUF]) 
006C90  220A20     MOV #0x20A2, W0
006C92  508F80     SUB W1, W0, [W15]
006C94  3A0002     BRA NZ, 0x6C9A
43:                        lcdWritePtr=lcdBuf; 
006C96  B12000     SUB #0x200, W0
006C98  88B130     MOV W0, 0x1626
44:                }
006C9A  060000     RETURN
45:                
46:                void lcdWriteStringQ(char *string) {
006CAA  E80200     INC W0, W4
006CAC  EB0280     CLR W5
47:                    char *it = string;
48:                    for (; *it; it++) {
006C9C  784090     MOV.B [W0], W1
006C9E  E00401     CP0.B W1
006CA0  320012     BRA Z, 0x6CC6
006CA2  EB0100     CLR W2
006CBC  410004     ADD W2, W4, W0
006CBE  784090     MOV.B [W0], W1
006CC0  E80102     INC W2, W2
006CC2  E00401     CP0.B W1
006CC4  3AFFF4     BRA NZ, 0x6CAE
49:                        lcdWriteQMac(*it);
006CA4  220A23     MOV #0x20A2, W3
006CA6  2FE006     MOV #0xFE00, W6
006CA8  430303     ADD W6, W3, W6
006CAE  FB0081     SE W1, W1
006CB0  80B130     MOV 0x1626, W0
006CB2  781801     MOV W1, [W0++]
006CB4  88B130     MOV W0, 0x1626
006CB6  500F83     SUB W0, W3, [W15]
006CB8  3A0001     BRA NZ, 0x6CBC
006CBA  88B136     MOV W6, 0x1626
50:                  }
51:                }
006CC6  060000     RETURN
52:                
53:                void lcdCustomSymbols(void){
54:                    int i=0;
55:                    lcdCommandQMac(0x40);
006CC8  80B130     MOV 0x1626, W0
006CCA  201401     MOV #0x140, W1
006CCC  781801     MOV W1, [W0++]
006CCE  88B130     MOV W0, 0x1626
006CD0  220A21     MOV #0x20A2, W1
006CD2  500F81     SUB W0, W1, [W15]
006CD4  3A0003     BRA NZ, 0x6CDC
006CD6  2FE000     MOV #0xFE00, W0
006CD8  400001     ADD W0, W1, W0
006CDA  88B130     MOV W0, 0x1626
56:                    Delay_us(200);
006CDC  200C80     MOV #0xC8, W0
006CDE  070AC7     RCALL Delay_us
57:                   // for(; i<8; i++)lcdWriteString(loadingOne[i]);
58:                    //lcdWriteString(loadingTwo);
59:                    //lcdWriteString(loadingThree);
60:                    //lcdWriteString(loadingFour);
61:                }
006CE0  060000     RETURN
62:                
63:                void lcdWriteWordQ(int word){
006CE2  FA0004     LNK #0x4
006D24  200011     MOV #0x1, W1
006D26  578164     SUB W15, #0x4, W2
006D28  B81361     MUL.UU W2, #1, W6
006D2A  DD0942     SL W1, #2, W2
006D30  DE89CF     ASR W1, #15, W3
006D32  408206     ADD W1, W6, W4
006D34  498287     ADDC W3, W7, W5
64:                    int i;
65:                    char inchar[4];
66:                    
67:                    if(word<0) {
006CE4  E00000     CP0 W0
006CE6  3D000C     BRA GE, 0x6D00
68:                        lcdWriteQMac('-');
006CE8  80B131     MOV 0x1626, W1
006CEA  2002D2     MOV #0x2D, W2
006CEC  781882     MOV W2, [W1++]
006CEE  88B131     MOV W1, 0x1626
006CF0  220A22     MOV #0x20A2, W2
006CF2  508F82     SUB W1, W2, [W15]
006CF4  3A0003     BRA NZ, 0x6CFC
006CF6  2FE001     MOV #0xFE00, W1
006CF8  408082     ADD W1, W2, W1
006CFA  88B131     MOV W1, 0x1626
69:                        word=~word+1;
006CFC  EA0000     NEG W0, W0
006CFE  37000A     BRA 0x6D14
70:                    }else lcdWriteQMac(' ');
006D00  80B131     MOV 0x1626, W1
006D02  200202     MOV #0x20, W2
006D04  781882     MOV W2, [W1++]
006D06  88B131     MOV W1, 0x1626
006D08  220A22     MOV #0x20A2, W2
006D0A  508F82     SUB W1, W2, [W15]
006D0C  3A0003     BRA NZ, 0x6D14
006D0E  2FE001     MOV #0xFE00, W1
006D10  408082     ADD W1, W2, W1
006D12  88B131     MOV W1, 0x1626
71:                   
72:                   inchar[0] = word&0x000F; 
006D14  6040EF     AND.B W0, #0xF, W1
73:                   if (inchar[0] > 9) 
006D16  50CFE9     SUB.B W1, #0x9, [W15]
006D18  340003     BRA LE, 0x6D20
74:                       inchar[0]+=55;
006D1A  B04371     ADD.B #0x37, W1
006D1C  9FFFC1     MOV.B W1, [W15-4]
006D1E  370002     BRA 0x6D24
75:                   else inchar[0]+=48;
006D20  B04301     ADD.B #0x30, W1
006D22  9FFFC1     MOV.B W1, [W15-4]
76:                   
77:                   for(i=1; i<4; i++){ 
006D46  E80081     INC W1, W1
006D48  508FE4     SUB W1, #0x4, [W15]
006D4A  3AFFEF     BRA NZ, 0x6D2A
78:                      inchar[i] = ((word>>(i*4))&0x0000F); 
006D2C  DE8102     ASR W0, W2, W2
006D2E  61416F     AND.B W2, #0xF, W2
006D36  784A02     MOV.B W2, [W4]
79:                      if (inchar[i] > 9) 
006D38  514FE9     SUB.B W2, #0x9, [W15]
006D3A  340003     BRA LE, 0x6D42
80:                          inchar[i]+=55;
006D3C  B3C373     MOV.B #0x37, W3
006D3E  414A03     ADD.B W2, W3, [W4]
006D40  370002     BRA 0x6D46
81:                      else inchar[i]+=48;
006D42  B3C303     MOV.B #0x30, W3
006D44  414A03     ADD.B W2, W3, [W4]
82:                   } 
83:                   lcdWriteQMac(inchar[3]);
006D4C  97F8FF     MOV.B [W15-1], W1
006D4E  FB0081     SE W1, W1
006D50  80B130     MOV 0x1626, W0
006D52  781801     MOV W1, [W0++]
006D54  220A21     MOV #0x20A2, W1
006D56  500F81     SUB W0, W1, [W15]
006D58  3A000A     BRA NZ, 0x6D6E
84:                   lcdWriteQMac(inchar[2]);
006D5A  97F86F     MOV.B [W15-2], W0
006D5C  FB0000     SE W0, W0
006D5E  88F510     MOV W0, lcdBuf
006D6E  97F8EF     MOV.B [W15-2], W1
006D70  FB0081     SE W1, W1
006D72  781801     MOV W1, [W0++]
006D74  88B130     MOV W0, 0x1626
006D76  220A21     MOV #0x20A2, W1
006D78  500F81     SUB W0, W1, [W15]
006D7A  3A0009     BRA NZ, 0x6D8E
85:                   lcdWriteQMac(inchar[1]);
006D60  97F85F     MOV.B [W15-3], W0
006D62  FB0000     SE W0, W0
006D64  88F520     MOV W0, 0x1EA4
006D66  2FE040     MOV #0xFE04, W0
006D68  400001     ADD W0, W1, W0
006D6A  88B130     MOV W0, 0x1626
006D6C  37001F     BRA 0x6DAC
006D7C  97F85F     MOV.B [W15-3], W0
006D7E  FB0000     SE W0, W0
006D80  88F510     MOV W0, lcdBuf
006D8E  97F8DF     MOV.B [W15-3], W1
006D90  FB0081     SE W1, W1
006D92  80B130     MOV 0x1626, W0
006D94  781801     MOV W1, [W0++]
006D96  88B130     MOV W0, 0x1626
006D98  220A21     MOV #0x20A2, W1
006D9A  500F81     SUB W0, W1, [W15]
006D9C  3A0007     BRA NZ, 0x6DAC
86:                   lcdWriteQMac(inchar[0]);
006D82  97F8CF     MOV.B [W15-4], W1
006D84  FB0001     SE W1, W0
006D86  88F520     MOV W0, 0x1EA4
006D88  21EA60     MOV #0x1EA6, W0
006D8A  88B130     MOV W0, 0x1626
006D8C  37001A     BRA 0x6DC2
006D9E  97F94F     MOV.B [W15-4], W2
006DA0  FB0002     SE W2, W0
006DA2  88F510     MOV W0, lcdBuf
006DA4  2FE020     MOV #0xFE02, W0
006DA6  400001     ADD W0, W1, W0
006DA8  88B130     MOV W0, 0x1626
006DAA  37000B     BRA 0x6DC2
006DAC  97F9CF     MOV.B [W15-4], W3
006DAE  FB0083     SE W3, W1
006DB0  80B130     MOV 0x1626, W0
006DB2  781801     MOV W1, [W0++]
006DB4  88B130     MOV W0, 0x1626
006DB6  220A21     MOV #0x20A2, W1
006DB8  500F81     SUB W0, W1, [W15]
006DBA  3A0003     BRA NZ, 0x6DC2
006DBC  2FE000     MOV #0xFE00, W0
006DBE  400001     ADD W0, W1, W0
006DC0  88B130     MOV W0, 0x1626
87:                }
006DC2  FA8000     ULNK
006DC4  060000     RETURN
88:                
89:                void lcdWriteByteQ(char word){
006DC6  FA0002     LNK #0x2
90:                    int i;
91:                    char inchar[2];
92:                     
93:                   inchar[0] = word&0x0F; 
006DC8  6040EF     AND.B W0, #0xF, W1
94:                   if (inchar[0] > 9) 
006DCA  50CFE9     SUB.B W1, #0x9, [W15]
006DCC  340003     BRA LE, 0x6DD4
95:                       inchar[0]+=55;
006DCE  B04371     ADD.B #0x37, W1
006DD0  9FFFE1     MOV.B W1, [W15-2]
006DD2  370002     BRA 0x6DD8
96:                   else inchar[0]+=48;
006DD4  B04301     ADD.B #0x30, W1
006DD6  9FFFE1     MOV.B W1, [W15-2]
97:                   
98:                   for(i=1; i<2; i++){ 
99:                      inchar[i] = ((word>>(i*4))&0x0000F); 
006DD8  DE0044     LSR W0, #4, W0
006DDA  60006F     AND W0, #0xF, W0
100:                     if (inchar[i] > 9) 
006DDC  504FE9     SUB.B W0, #0x9, [W15]
006DDE  340003     BRA LE, 0x6DE6
101:                         inchar[i]+=55;
006DE0  B04370     ADD.B #0x37, W0
006DE2  9FFFF0     MOV.B W0, [W15-1]
006DE4  370002     BRA 0x6DEA
102:                     else inchar[i]+=48;
006DE6  B04300     ADD.B #0x30, W0
006DE8  9FFFF0     MOV.B W0, [W15-1]
103:                  } 
104:                  lcdWriteQMac(inchar[1]);
006DEA  97F8FF     MOV.B [W15-1], W1
006DEC  FB0081     SE W1, W1
006DEE  80B130     MOV 0x1626, W0
006DF0  781801     MOV W1, [W0++]
006DF2  220A21     MOV #0x20A2, W1
006DF4  500F81     SUB W0, W1, [W15]
006DF6  3A0006     BRA NZ, 0x6E04
105:                  lcdWriteQMac(inchar[0]);
006DF8  97F8EF     MOV.B [W15-2], W1
006DFA  FB0001     SE W1, W0
006DFC  88F510     MOV W0, lcdBuf
006DFE  21EA40     MOV #0x1EA4, W0
006E00  88B130     MOV W0, 0x1626
006E02  37000A     BRA 0x6E18
006E04  97F96F     MOV.B [W15-2], W2
006E06  FB0082     SE W2, W1
006E08  781801     MOV W1, [W0++]
006E0A  88B130     MOV W0, 0x1626
006E0C  220A21     MOV #0x20A2, W1
006E0E  500F81     SUB W0, W1, [W15]
006E10  3A0003     BRA NZ, 0x6E18
006E12  2FE000     MOV #0xFE00, W0
006E14  400001     ADD W0, W1, W0
006E16  88B130     MOV W0, 0x1626
106:               }
006E18  FA8000     ULNK
006E1A  060000     RETURN
107:               
108:               void lcdWriteWordUnsignedQ(unsigned int word){
006E1C  FA0004     LNK #0x4
006E2E  200011     MOV #0x1, W1
006E30  578164     SUB W15, #0x4, W2
006E32  B81361     MUL.UU W2, #1, W6
006E34  DD0942     SL W1, #2, W2
006E3A  DE89CF     ASR W1, #15, W3
006E3C  408206     ADD W1, W6, W4
006E3E  498287     ADDC W3, W7, W5
109:                   int i;
110:                   char inchar[4];
111:                   
112:                  inchar[0] = word&0x000F; 
006E1E  6040EF     AND.B W0, #0xF, W1
113:                  if (inchar[0] > 9) 
006E20  50CFE9     SUB.B W1, #0x9, [W15]
006E22  340003     BRA LE, 0x6E2A
114:                      inchar[0]+=55;
006E24  B04371     ADD.B #0x37, W1
006E26  9FFFC1     MOV.B W1, [W15-4]
006E28  370002     BRA 0x6E2E
115:                  else inchar[0]+=48;
006E2A  B04301     ADD.B #0x30, W1
006E2C  9FFFC1     MOV.B W1, [W15-4]
116:                  
117:                  for(i=1; i<4; i++){ 
006E50  E80081     INC W1, W1
006E52  508FE4     SUB W1, #0x4, [W15]
006E54  3AFFEF     BRA NZ, 0x6E34
118:                     inchar[i] = ((word>>(i*4))&0x0000F); 
006E36  DE0102     LSR W0, W2, W2
006E38  61416F     AND.B W2, #0xF, W2
006E40  784A02     MOV.B W2, [W4]
119:                     if (inchar[i] > 9) 
006E42  514FE9     SUB.B W2, #0x9, [W15]
006E44  340003     BRA LE, 0x6E4C
120:                         inchar[i]+=55;
006E46  B3C373     MOV.B #0x37, W3
006E48  414A03     ADD.B W2, W3, [W4]
006E4A  370002     BRA 0x6E50
121:                     else inchar[i]+=48;
006E4C  B3C303     MOV.B #0x30, W3
006E4E  414A03     ADD.B W2, W3, [W4]
122:                  } 
123:                  lcdWriteQMac(inchar[3]);
006E56  97F8FF     MOV.B [W15-1], W1
006E58  FB0081     SE W1, W1
006E5A  80B130     MOV 0x1626, W0
006E5C  781801     MOV W1, [W0++]
006E5E  220A21     MOV #0x20A2, W1
006E60  500F81     SUB W0, W1, [W15]
006E62  3A000A     BRA NZ, 0x6E78
124:                  lcdWriteQMac(inchar[2]);
006E64  97F86F     MOV.B [W15-2], W0
006E66  FB0000     SE W0, W0
006E68  88F510     MOV W0, lcdBuf
006E78  97F8EF     MOV.B [W15-2], W1
006E7A  FB0081     SE W1, W1
006E7C  781801     MOV W1, [W0++]
006E7E  88B130     MOV W0, 0x1626
006E80  220A21     MOV #0x20A2, W1
006E82  500F81     SUB W0, W1, [W15]
006E84  3A0009     BRA NZ, 0x6E98
125:                  lcdWriteQMac(inchar[1]);
006E6A  97F85F     MOV.B [W15-3], W0
006E6C  FB0000     SE W0, W0
006E6E  88F520     MOV W0, 0x1EA4
006E70  2FE040     MOV #0xFE04, W0
006E72  400001     ADD W0, W1, W0
006E74  88B130     MOV W0, 0x1626
006E76  37001F     BRA 0x6EB6
006E86  97F85F     MOV.B [W15-3], W0
006E88  FB0000     SE W0, W0
006E8A  88F510     MOV W0, lcdBuf
006E98  97F8DF     MOV.B [W15-3], W1
006E9A  FB0081     SE W1, W1
006E9C  80B130     MOV 0x1626, W0
006E9E  781801     MOV W1, [W0++]
006EA0  88B130     MOV W0, 0x1626
006EA2  220A21     MOV #0x20A2, W1
006EA4  500F81     SUB W0, W1, [W15]
006EA6  3A0007     BRA NZ, 0x6EB6
126:                  lcdWriteQMac(inchar[0]);
006E8C  97F8CF     MOV.B [W15-4], W1
006E8E  FB0001     SE W1, W0
006E90  88F520     MOV W0, 0x1EA4
006E92  21EA60     MOV #0x1EA6, W0
006E94  88B130     MOV W0, 0x1626
006E96  37001A     BRA 0x6ECC
006EA8  97F94F     MOV.B [W15-4], W2
006EAA  FB0002     SE W2, W0
006EAC  88F510     MOV W0, lcdBuf
006EAE  2FE020     MOV #0xFE02, W0
006EB0  400001     ADD W0, W1, W0
006EB2  88B130     MOV W0, 0x1626
006EB4  37000B     BRA 0x6ECC
006EB6  97F9CF     MOV.B [W15-4], W3
006EB8  FB0083     SE W3, W1
006EBA  80B130     MOV 0x1626, W0
006EBC  781801     MOV W1, [W0++]
006EBE  88B130     MOV W0, 0x1626
006EC0  220A21     MOV #0x20A2, W1
006EC2  500F81     SUB W0, W1, [W15]
006EC4  3A0003     BRA NZ, 0x6ECC
006EC6  2FE000     MOV #0xFE00, W0
006EC8  400001     ADD W0, W1, W0
006ECA  88B130     MOV W0, 0x1626
127:               }
006ECC  FA8000     ULNK
006ECE  060000     RETURN
128:               
129:               void lcdWriteDecimalQ(char word, int digits){
006ED0  FA0000     LNK #0x0
006ED2  781F88     MOV W8, [W15++]
006ED4  780381     MOV W1, W7
130:                   const char maxdigits = 4;
131:                   char result[maxdigits];
006ED8  4787E6     ADD W15, #0x6, W15
006EDA  780186     MOV W6, W3
132:                   char i = 3;
006EDC  B3C032     MOV.B #0x3, W2
133:                   do {
134:                       result[i] = '0' + word % 10;
006EDE  2000A4     MOV #0xA, W4
006EE0  FB0282     SE W2, W5
006EE2  418285     ADD W3, W5, W5
006EE4  FB0000     SE W0, W0
006EE6  090011     REPEAT #0x11
006EE8  D80004     DIV.SW W0, W4
006EEA  B3C308     MOV.B #0x30, W8
006EEC  40CA88     ADD.B W1, W8, [W5]
135:                       word /= 10;
136:                       i--;
006EEE  E94102     DEC.B W2, W2
137:                   }
138:                   while (word > 0);
006EF0  E00400     CP0.B W0
006EF2  3CFFF6     BRA GT, 0x6EE0
139:                   while (i>=0) result[i--] = ' '; 
006EF4  E00402     CP0.B W2
006EF6  350007     BRA LT, 0x6F06
006EF8  B3C204     MOV.B #0x20, W4
006EFA  FB0002     SE W2, W0
006EFC  418000     ADD W3, W0, W0
006EFE  784804     MOV.B W4, [W0]
006F00  E94102     DEC.B W2, W2
006F02  414FE1     ADD.B W2, #0x1, [W15]
006F04  3AFFFA     BRA NZ, 0x6EFA
140:                 
141:                   for (i=maxdigits-digits; i<maxdigits; i++) {
006F06  B3C041     MOV.B #0x4, W1
006F08  50C087     SUB.B W1, W7, W1
006F0A  50CFE3     SUB.B W1, #0x3, [W15]
006F0C  3C000F     BRA GT, 0x6F2C
006F26  E84081     INC.B W1, W1
006F28  50CFE4     SUB.B W1, #0x4, [W15]
006F2A  3AFFF4     BRA NZ, 0x6F14
142:                       lcdWriteQMac(result[i]);
006F0E  220A24     MOV #0x20A2, W4
006F10  2FE005     MOV #0xFE00, W5
006F12  428284     ADD W5, W4, W5
006F14  FB0001     SE W1, W0
006F16  418000     ADD W3, W0, W0
006F18  FB0110     SE [W0], W2
006F1A  80B130     MOV 0x1626, W0
006F1C  781802     MOV W2, [W0++]
006F1E  88B130     MOV W0, 0x1626
006F20  500F84     SUB W0, W4, [W15]
006F22  3A0001     BRA NZ, 0x6F26
006F24  88B135     MOV W5, 0x1626
143:                   }
144:               }
006ED6  78030F     MOV W15, W6
006F2C  780786     MOV W6, W15
006F2E  78044F     MOV [--W15], W8
006F30  FA8000     ULNK
006F32  060000     RETURN
145:               
146:               //4x4 pad debug
147:               void lcdDrawPads(unsigned char col){
006F34  BE9F88     MOV.D W8, [W15++]
006F36  784480     MOV.B W0, W9
148:                   unsigned char block=0xFF;
006F46  EBC400     SETM.B W8
149:                   if(!ctrl.pad[34]||!ctrl.pad[16]) block='*';
006F38  B3C2A8     MOV.B #0x2A, W8
006F3A  216580     MOV #0x1658, W0
006F3C  E00410     CP0.B [W0]
006F3E  320004     BRA Z, 0x6F48
006F40  500072     SUB W0, #0x12, W0
006F42  E00410     CP0.B [W0]
006F44  320001     BRA Z, 0x6F48
150:                   
151:                   lcdSetCursorQ(col, 0);
006F48  EB4080     CLR.B W1
006F4A  784009     MOV.B W9, W0
006F4C  07FE93     RCALL lcdSetCursorQ
152:                   if(!ctrl.pad[12]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
006F4E  216420     MOV #0x1642, W0
006F50  E00410     CP0.B [W0]
006F52  3A000B     BRA NZ, 0x6F6A
006F54  80B130     MOV 0x1626, W0
006F56  200201     MOV #0x20, W1
006F58  781801     MOV W1, [W0++]
006F5A  88B130     MOV W0, 0x1626
006F5C  220A21     MOV #0x20A2, W1
006F5E  500F81     SUB W0, W1, [W15]
006F60  3A000E     BRA NZ, 0x6F7E
006F62  2FE000     MOV #0xFE00, W0
006F64  400001     ADD W0, W1, W0
006F66  88B130     MOV W0, 0x1626
006F68  37000A     BRA 0x6F7E
006F6A  FB8088     ZE W8, W1
006F6C  80B130     MOV 0x1626, W0
006F6E  781801     MOV W1, [W0++]
006F70  88B130     MOV W0, 0x1626
006F72  220A21     MOV #0x20A2, W1
006F74  500F81     SUB W0, W1, [W15]
006F76  3A0003     BRA NZ, 0x6F7E
006F78  2FE000     MOV #0xFE00, W0
006F7A  400001     ADD W0, W1, W0
006F7C  88B130     MOV W0, 0x1626
153:                   if(!ctrl.pad[13]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
006F7E  216430     MOV #0x1643, W0
006F80  E00410     CP0.B [W0]
006F82  3A000B     BRA NZ, 0x6F9A
006F84  80B130     MOV 0x1626, W0
006F86  200201     MOV #0x20, W1
006F88  781801     MOV W1, [W0++]
006F8A  88B130     MOV W0, 0x1626
006F8C  220A21     MOV #0x20A2, W1
006F8E  500F81     SUB W0, W1, [W15]
006F90  3A000E     BRA NZ, 0x6FAE
006F92  2FE000     MOV #0xFE00, W0
006F94  400001     ADD W0, W1, W0
006F96  88B130     MOV W0, 0x1626
006F98  37000A     BRA 0x6FAE
006F9A  FB8088     ZE W8, W1
006F9C  80B130     MOV 0x1626, W0
006F9E  781801     MOV W1, [W0++]
006FA0  88B130     MOV W0, 0x1626
006FA2  220A21     MOV #0x20A2, W1
006FA4  500F81     SUB W0, W1, [W15]
006FA6  3A0003     BRA NZ, 0x6FAE
006FA8  2FE000     MOV #0xFE00, W0
006FAA  400001     ADD W0, W1, W0
006FAC  88B130     MOV W0, 0x1626
154:                   if(!ctrl.pad[14]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
006FAE  216440     MOV #0x1644, W0
006FB0  E00410     CP0.B [W0]
006FB2  3A000B     BRA NZ, 0x6FCA
006FB4  80B130     MOV 0x1626, W0
006FB6  200201     MOV #0x20, W1
006FB8  781801     MOV W1, [W0++]
006FBA  88B130     MOV W0, 0x1626
006FBC  220A21     MOV #0x20A2, W1
006FBE  500F81     SUB W0, W1, [W15]
006FC0  3A000E     BRA NZ, 0x6FDE
006FC2  2FE000     MOV #0xFE00, W0
006FC4  400001     ADD W0, W1, W0
006FC6  88B130     MOV W0, 0x1626
006FC8  37000A     BRA 0x6FDE
006FCA  FB8088     ZE W8, W1
006FCC  80B130     MOV 0x1626, W0
006FCE  781801     MOV W1, [W0++]
006FD0  88B130     MOV W0, 0x1626
006FD2  220A21     MOV #0x20A2, W1
006FD4  500F81     SUB W0, W1, [W15]
006FD6  3A0003     BRA NZ, 0x6FDE
006FD8  2FE000     MOV #0xFE00, W0
006FDA  400001     ADD W0, W1, W0
006FDC  88B130     MOV W0, 0x1626
155:                   if(!ctrl.pad[15]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
006FDE  216450     MOV #0x1645, W0
006FE0  E00410     CP0.B [W0]
006FE2  3A000B     BRA NZ, 0x6FFA
006FE4  80B130     MOV 0x1626, W0
006FE6  200201     MOV #0x20, W1
006FE8  781801     MOV W1, [W0++]
006FEA  88B130     MOV W0, 0x1626
006FEC  220A21     MOV #0x20A2, W1
006FEE  500F81     SUB W0, W1, [W15]
006FF0  3A000E     BRA NZ, 0x700E
006FF2  2FE000     MOV #0xFE00, W0
006FF4  400001     ADD W0, W1, W0
006FF6  88B130     MOV W0, 0x1626
006FF8  37000A     BRA 0x700E
006FFA  FB8088     ZE W8, W1
006FFC  80B130     MOV 0x1626, W0
006FFE  781801     MOV W1, [W0++]
007000  88B130     MOV W0, 0x1626
007002  220A21     MOV #0x20A2, W1
007004  500F81     SUB W0, W1, [W15]
007006  3A0003     BRA NZ, 0x700E
007008  2FE000     MOV #0xFE00, W0
00700A  400001     ADD W0, W1, W0
00700C  88B130     MOV W0, 0x1626
156:                   lcdSetCursorQ(col, 1);
00700E  B3C011     MOV.B #0x1, W1
007010  784009     MOV.B W9, W0
007012  07FE30     RCALL lcdSetCursorQ
157:                   if(!ctrl.pad[8]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
007014  2163E0     MOV #0x163E, W0
007016  E00410     CP0.B [W0]
007018  3A000B     BRA NZ, 0x7030
00701A  80B130     MOV 0x1626, W0
00701C  200201     MOV #0x20, W1
00701E  781801     MOV W1, [W0++]
007020  88B130     MOV W0, 0x1626
007022  220A21     MOV #0x20A2, W1
007024  500F81     SUB W0, W1, [W15]
007026  3A000E     BRA NZ, 0x7044
007028  2FE000     MOV #0xFE00, W0
00702A  400001     ADD W0, W1, W0
00702C  88B130     MOV W0, 0x1626
00702E  37000A     BRA 0x7044
007030  FB8088     ZE W8, W1
007032  80B130     MOV 0x1626, W0
007034  781801     MOV W1, [W0++]
007036  88B130     MOV W0, 0x1626
007038  220A21     MOV #0x20A2, W1
00703A  500F81     SUB W0, W1, [W15]
00703C  3A0003     BRA NZ, 0x7044
00703E  2FE000     MOV #0xFE00, W0
007040  400001     ADD W0, W1, W0
007042  88B130     MOV W0, 0x1626
158:                   if(!ctrl.pad[9]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
007044  2163F0     MOV #0x163F, W0
007046  E00410     CP0.B [W0]
007048  3A000B     BRA NZ, 0x7060
00704A  80B130     MOV 0x1626, W0
00704C  200201     MOV #0x20, W1
00704E  781801     MOV W1, [W0++]
007050  88B130     MOV W0, 0x1626
007052  220A21     MOV #0x20A2, W1
007054  500F81     SUB W0, W1, [W15]
007056  3A000E     BRA NZ, 0x7074
007058  2FE000     MOV #0xFE00, W0
00705A  400001     ADD W0, W1, W0
00705C  88B130     MOV W0, 0x1626
00705E  37000A     BRA 0x7074
007060  FB8088     ZE W8, W1
007062  80B130     MOV 0x1626, W0
007064  781801     MOV W1, [W0++]
007066  88B130     MOV W0, 0x1626
007068  220A21     MOV #0x20A2, W1
00706A  500F81     SUB W0, W1, [W15]
00706C  3A0003     BRA NZ, 0x7074
00706E  2FE000     MOV #0xFE00, W0
007070  400001     ADD W0, W1, W0
007072  88B130     MOV W0, 0x1626
159:                   if(!ctrl.pad[10]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
007074  216400     MOV #0x1640, W0
007076  E00410     CP0.B [W0]
007078  3A000B     BRA NZ, 0x7090
00707A  80B130     MOV 0x1626, W0
00707C  200201     MOV #0x20, W1
00707E  781801     MOV W1, [W0++]
007080  88B130     MOV W0, 0x1626
007082  220A21     MOV #0x20A2, W1
007084  500F81     SUB W0, W1, [W15]
007086  3A000E     BRA NZ, 0x70A4
007088  2FE000     MOV #0xFE00, W0
00708A  400001     ADD W0, W1, W0
00708C  88B130     MOV W0, 0x1626
00708E  37000A     BRA 0x70A4
007090  FB8088     ZE W8, W1
007092  80B130     MOV 0x1626, W0
007094  781801     MOV W1, [W0++]
007096  88B130     MOV W0, 0x1626
007098  220A21     MOV #0x20A2, W1
00709A  500F81     SUB W0, W1, [W15]
00709C  3A0003     BRA NZ, 0x70A4
00709E  2FE000     MOV #0xFE00, W0
0070A0  400001     ADD W0, W1, W0
0070A2  88B130     MOV W0, 0x1626
160:                   if(!ctrl.pad[11]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
0070A4  216410     MOV #0x1641, W0
0070A6  E00410     CP0.B [W0]
0070A8  3A000B     BRA NZ, 0x70C0
0070AA  80B130     MOV 0x1626, W0
0070AC  200201     MOV #0x20, W1
0070AE  781801     MOV W1, [W0++]
0070B0  88B130     MOV W0, 0x1626
0070B2  220A21     MOV #0x20A2, W1
0070B4  500F81     SUB W0, W1, [W15]
0070B6  3A000E     BRA NZ, 0x70D4
0070B8  2FE000     MOV #0xFE00, W0
0070BA  400001     ADD W0, W1, W0
0070BC  88B130     MOV W0, 0x1626
0070BE  37000A     BRA 0x70D4
0070C0  FB8088     ZE W8, W1
0070C2  80B130     MOV 0x1626, W0
0070C4  781801     MOV W1, [W0++]
0070C6  88B130     MOV W0, 0x1626
0070C8  220A21     MOV #0x20A2, W1
0070CA  500F81     SUB W0, W1, [W15]
0070CC  3A0003     BRA NZ, 0x70D4
0070CE  2FE000     MOV #0xFE00, W0
0070D0  400001     ADD W0, W1, W0
0070D2  88B130     MOV W0, 0x1626
161:                   lcdSetCursorQ(col, 2);
0070D4  B3C021     MOV.B #0x2, W1
0070D6  784009     MOV.B W9, W0
0070D8  07FDCD     RCALL lcdSetCursorQ
162:                   if(!ctrl.pad[4]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
0070DA  2163A0     MOV #0x163A, W0
0070DC  E00410     CP0.B [W0]
0070DE  3A000B     BRA NZ, 0x70F6
0070E0  80B130     MOV 0x1626, W0
0070E2  200201     MOV #0x20, W1
0070E4  781801     MOV W1, [W0++]
0070E6  88B130     MOV W0, 0x1626
0070E8  220A21     MOV #0x20A2, W1
0070EA  500F81     SUB W0, W1, [W15]
0070EC  3A000E     BRA NZ, 0x710A
0070EE  2FE000     MOV #0xFE00, W0
0070F0  400001     ADD W0, W1, W0
0070F2  88B130     MOV W0, 0x1626
0070F4  37000A     BRA 0x710A
0070F6  FB8088     ZE W8, W1
0070F8  80B130     MOV 0x1626, W0
0070FA  781801     MOV W1, [W0++]
0070FC  88B130     MOV W0, 0x1626
0070FE  220A21     MOV #0x20A2, W1
007100  500F81     SUB W0, W1, [W15]
007102  3A0003     BRA NZ, 0x710A
007104  2FE000     MOV #0xFE00, W0
007106  400001     ADD W0, W1, W0
007108  88B130     MOV W0, 0x1626
163:                   if(!ctrl.pad[5]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
00710A  2163B0     MOV #0x163B, W0
00710C  E00410     CP0.B [W0]
00710E  3A000B     BRA NZ, 0x7126
007110  80B130     MOV 0x1626, W0
007112  200201     MOV #0x20, W1
007114  781801     MOV W1, [W0++]
007116  88B130     MOV W0, 0x1626
007118  220A21     MOV #0x20A2, W1
00711A  500F81     SUB W0, W1, [W15]
00711C  3A000E     BRA NZ, 0x713A
00711E  2FE000     MOV #0xFE00, W0
007120  400001     ADD W0, W1, W0
007122  88B130     MOV W0, 0x1626
007124  37000A     BRA 0x713A
007126  FB8088     ZE W8, W1
007128  80B130     MOV 0x1626, W0
00712A  781801     MOV W1, [W0++]
00712C  88B130     MOV W0, 0x1626
00712E  220A21     MOV #0x20A2, W1
007130  500F81     SUB W0, W1, [W15]
007132  3A0003     BRA NZ, 0x713A
007134  2FE000     MOV #0xFE00, W0
007136  400001     ADD W0, W1, W0
007138  88B130     MOV W0, 0x1626
164:                   if(!ctrl.pad[6]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
00713A  2163C0     MOV #0x163C, W0
00713C  E00410     CP0.B [W0]
00713E  3A000B     BRA NZ, 0x7156
007140  80B130     MOV 0x1626, W0
007142  200201     MOV #0x20, W1
007144  781801     MOV W1, [W0++]
007146  88B130     MOV W0, 0x1626
007148  220A21     MOV #0x20A2, W1
00714A  500F81     SUB W0, W1, [W15]
00714C  3A000E     BRA NZ, 0x716A
00714E  2FE000     MOV #0xFE00, W0
007150  400001     ADD W0, W1, W0
007152  88B130     MOV W0, 0x1626
007154  37000A     BRA 0x716A
007156  FB8088     ZE W8, W1
007158  80B130     MOV 0x1626, W0
00715A  781801     MOV W1, [W0++]
00715C  88B130     MOV W0, 0x1626
00715E  220A21     MOV #0x20A2, W1
007160  500F81     SUB W0, W1, [W15]
007162  3A0003     BRA NZ, 0x716A
007164  2FE000     MOV #0xFE00, W0
007166  400001     ADD W0, W1, W0
007168  88B130     MOV W0, 0x1626
165:                   if(!ctrl.pad[7]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
00716A  2163D0     MOV #0x163D, W0
00716C  E00410     CP0.B [W0]
00716E  3A000B     BRA NZ, 0x7186
007170  80B130     MOV 0x1626, W0
007172  200201     MOV #0x20, W1
007174  781801     MOV W1, [W0++]
007176  88B130     MOV W0, 0x1626
007178  220A21     MOV #0x20A2, W1
00717A  500F81     SUB W0, W1, [W15]
00717C  3A000E     BRA NZ, 0x719A
00717E  2FE000     MOV #0xFE00, W0
007180  400001     ADD W0, W1, W0
007182  88B130     MOV W0, 0x1626
007184  37000A     BRA 0x719A
007186  FB8088     ZE W8, W1
007188  80B130     MOV 0x1626, W0
00718A  781801     MOV W1, [W0++]
00718C  88B130     MOV W0, 0x1626
00718E  220A21     MOV #0x20A2, W1
007190  500F81     SUB W0, W1, [W15]
007192  3A0003     BRA NZ, 0x719A
007194  2FE000     MOV #0xFE00, W0
007196  400001     ADD W0, W1, W0
007198  88B130     MOV W0, 0x1626
166:                   lcdSetCursorQ(col, 3);
00719A  B3C031     MOV.B #0x3, W1
00719C  784009     MOV.B W9, W0
00719E  07FD6A     RCALL lcdSetCursorQ
167:                   if(!ctrl.pad[0]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
0071A0  216360     MOV #0x1636, W0
0071A2  E00410     CP0.B [W0]
0071A4  3A000B     BRA NZ, 0x71BC
0071A6  80B130     MOV 0x1626, W0
0071A8  200201     MOV #0x20, W1
0071AA  781801     MOV W1, [W0++]
0071AC  88B130     MOV W0, 0x1626
0071AE  220A21     MOV #0x20A2, W1
0071B0  500F81     SUB W0, W1, [W15]
0071B2  3A000E     BRA NZ, 0x71D0
0071B4  2FE000     MOV #0xFE00, W0
0071B6  400001     ADD W0, W1, W0
0071B8  88B130     MOV W0, 0x1626
0071BA  37000A     BRA 0x71D0
0071BC  FB8088     ZE W8, W1
0071BE  80B130     MOV 0x1626, W0
0071C0  781801     MOV W1, [W0++]
0071C2  88B130     MOV W0, 0x1626
0071C4  220A21     MOV #0x20A2, W1
0071C6  500F81     SUB W0, W1, [W15]
0071C8  3A0003     BRA NZ, 0x71D0
0071CA  2FE000     MOV #0xFE00, W0
0071CC  400001     ADD W0, W1, W0
0071CE  88B130     MOV W0, 0x1626
168:                   if(!ctrl.pad[1]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
0071D0  216370     MOV #0x1637, W0
0071D2  E00410     CP0.B [W0]
0071D4  3A000B     BRA NZ, 0x71EC
0071D6  80B130     MOV 0x1626, W0
0071D8  200201     MOV #0x20, W1
0071DA  781801     MOV W1, [W0++]
0071DC  88B130     MOV W0, 0x1626
0071DE  220A21     MOV #0x20A2, W1
0071E0  500F81     SUB W0, W1, [W15]
0071E2  3A000E     BRA NZ, 0x7200
0071E4  2FE000     MOV #0xFE00, W0
0071E6  400001     ADD W0, W1, W0
0071E8  88B130     MOV W0, 0x1626
0071EA  37000A     BRA 0x7200
0071EC  FB8088     ZE W8, W1
0071EE  80B130     MOV 0x1626, W0
0071F0  781801     MOV W1, [W0++]
0071F2  88B130     MOV W0, 0x1626
0071F4  220A21     MOV #0x20A2, W1
0071F6  500F81     SUB W0, W1, [W15]
0071F8  3A0003     BRA NZ, 0x7200
0071FA  2FE000     MOV #0xFE00, W0
0071FC  400001     ADD W0, W1, W0
0071FE  88B130     MOV W0, 0x1626
169:                   if(!ctrl.pad[2]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
007200  216380     MOV #0x1638, W0
007202  E00410     CP0.B [W0]
007204  3A000B     BRA NZ, 0x721C
007206  80B130     MOV 0x1626, W0
007208  200201     MOV #0x20, W1
00720A  781801     MOV W1, [W0++]
00720C  88B130     MOV W0, 0x1626
00720E  220A21     MOV #0x20A2, W1
007210  500F81     SUB W0, W1, [W15]
007212  3A000E     BRA NZ, 0x7230
007214  2FE000     MOV #0xFE00, W0
007216  400001     ADD W0, W1, W0
007218  88B130     MOV W0, 0x1626
00721A  37000A     BRA 0x7230
00721C  FB8088     ZE W8, W1
00721E  80B130     MOV 0x1626, W0
007220  781801     MOV W1, [W0++]
007222  88B130     MOV W0, 0x1626
007224  220A21     MOV #0x20A2, W1
007226  500F81     SUB W0, W1, [W15]
007228  3A0003     BRA NZ, 0x7230
00722A  2FE000     MOV #0xFE00, W0
00722C  400001     ADD W0, W1, W0
00722E  88B130     MOV W0, 0x1626
170:                   if(!ctrl.pad[3]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
007230  216390     MOV #0x1639, W0
007232  E00410     CP0.B [W0]
007234  3A000B     BRA NZ, 0x724C
007236  80B130     MOV 0x1626, W0
007238  200201     MOV #0x20, W1
00723A  781801     MOV W1, [W0++]
00723C  88B130     MOV W0, 0x1626
00723E  220A21     MOV #0x20A2, W1
007240  500F81     SUB W0, W1, [W15]
007242  3A000E     BRA NZ, 0x7260
007244  2FE000     MOV #0xFE00, W0
007246  400001     ADD W0, W1, W0
007248  88B130     MOV W0, 0x1626
00724A  37000A     BRA 0x7260
00724C  FB8408     ZE W8, W8
00724E  80B130     MOV 0x1626, W0
007250  781808     MOV W8, [W0++]
007252  88B130     MOV W0, 0x1626
007254  220A21     MOV #0x20A2, W1
007256  500F81     SUB W0, W1, [W15]
007258  3A0003     BRA NZ, 0x7260
00725A  2FE000     MOV #0xFE00, W0
00725C  400001     ADD W0, W1, W0
00725E  88B130     MOV W0, 0x1626
171:               }
007260  BE044F     MOV.D [--W15], W8
007262  060000     RETURN
172:               
173:               void lcdPoll(void){  
174:                   if(lcdWritePtr!=lcdReadPtr){   
007264  80B140     MOV 0x1628, W0
007266  E31626     CP 0x1626
007268  320018     BRA Z, 0x729A
175:                       if((*lcdReadPtr>>8)&1) LCD_RS=0;
00726A  201001     MOV #0x100, W1
00726C  608090     AND W1, [W0], W1
00726E  320002     BRA Z, 0x7274
007270  A9EE45     BCLR 0xE45, #7
007272  370001     BRA 0x7276
176:                       else LCD_RS=1;
007274  A8EE45     BSET 0xE45, #7
177:                       if((*lcdReadPtr>>9)&1) PR3=0x2DF0; //2DF0 for ~1.3mS
007276  202001     MOV #0x200, W1
007278  608090     AND W1, [W0], W1
00727A  320003     BRA Z, 0x7282
00727C  22DF01     MOV #0x2DF0, W1
00727E  880871     MOV W1, PR3
007280  370002     BRA 0x7286
178:                       else PR3=0x0120; //120 for ~40uS
007282  201201     MOV #0x120, W1
007284  880871     MOV W1, PR3
179:                       PMDIN1=(*lcdReadPtr++)&0x00FF;
007286  200FF1     MOV #0xFF, W1
007288  6080B0     AND W1, [W0++], W1
00728A  883041     MOV W1, PMDIN1
00728C  88B140     MOV W0, 0x1628
180:                       if(lcdReadPtr==&lcdBuf[LCDBUF]) lcdReadPtr=lcdBuf;
00728E  220A21     MOV #0x20A2, W1
007290  500F81     SUB W0, W1, [W15]
007292  3A0003     BRA NZ, 0x729A
007294  2FE000     MOV #0xFE00, W0
007296  400001     ADD W0, W1, W0
007298  88B140     MOV W0, 0x1628
181:                   } 
182:                   TMR3=0x0000; 
00729A  EF210A     CLR TMR3
183:               }
00729C  060000     RETURN
184:               
185:               //ALWAYS SENDS, blocks program
186:               void lcdBlockingSend(unsigned char data){
00729E  BE9F88     MOV.D W8, [W15++]
0072A0  781F8A     MOV W10, [W15++]
0072A2  784500     MOV.B W0, W10
187:                   while(PMMODEbits.BUSY)Delay_us(2);
0072A4  E20602     CP0 PMMODE
0072A6  3D0007     BRA GE, 0x72B6
0072A8  200028     MOV #0x2, W8
0072AA  280009     MOV #0x8000, W9
0072AC  780008     MOV W8, W0
0072AE  0707DF     RCALL Delay_us
0072B0  803011     MOV PMMODE, W1
0072B2  648001     AND W9, W1, W0
0072B4  3AFFFB     BRA NZ, 0x72AC
188:                   PMDIN1=data; 
0072B6  FB850A     ZE W10, W10
0072B8  88304A     MOV W10, PMDIN1
189:               }
0072BA  78054F     MOV [--W15], W10
0072BC  BE044F     MOV.D [--W15], W8
0072BE  060000     RETURN
190:               //ALWAYS SENDS, blocks program
191:               void lcdBlockingClear(void){
0072C0  BE9F88     MOV.D W8, [W15++]
192:                   while(PMMODEbits.BUSY)Delay_us(2);
0072C2  E20602     CP0 PMMODE
0072C4  3D0007     BRA GE, 0x72D4
0072C6  200028     MOV #0x2, W8
0072C8  280009     MOV #0x8000, W9
0072CA  780008     MOV W8, W0
0072CC  0707D0     RCALL Delay_us
0072CE  803011     MOV PMMODE, W1
0072D0  648001     AND W9, W1, W0
0072D2  3AFFFB     BRA NZ, 0x72CA
193:                   PMDIN1=LCD_CLEARDISPLAY; 
0072D4  200010     MOV #0x1, W0
0072D6  883040     MOV W0, PMDIN1
194:               }
0072D8  BE044F     MOV.D [--W15], W8
0072DA  060000     RETURN
195:               
196:               //ALWAYS SENDS, blocks program
197:               void lcdBlockingReturn(void){
0072DC  BE9F88     MOV.D W8, [W15++]
198:                   while(PMMODEbits.BUSY)Delay_us(2);
0072DE  E20602     CP0 PMMODE
0072E0  3D0007     BRA GE, 0x72F0
0072E2  200028     MOV #0x2, W8
0072E4  280009     MOV #0x8000, W9
0072E6  780008     MOV W8, W0
0072E8  0707C2     RCALL Delay_us
0072EA  803011     MOV PMMODE, W1
0072EC  648001     AND W9, W1, W0
0072EE  3AFFFB     BRA NZ, 0x72E6
199:                   PMDIN1=LCD_RETURNHOME;
0072F0  200020     MOV #0x2, W0
0072F2  883040     MOV W0, PMDIN1
200:               }
0072F4  BE044F     MOV.D [--W15], W8
0072F6  060000     RETURN
201:               
202:               void lcdInit(void){
203:                   LCD_RS=0;
0072F8  A9EE45     BCLR 0xE45, #7
204:                   lcdBlockingSend(0x38);              //function set, 8 bits, 2 line disp, 5x8
0072FA  B3C380     MOV.B #0x38, W0
0072FC  07FFD0     RCALL lcdBlockingSend
205:                   Delay_us(4500);                //>4.1 mS required
0072FE  211940     MOV #0x1194, W0
007300  0707B6     RCALL Delay_us
206:                   lcdBlockingSend(0x0C);              //display on, cursor on, blink on   (0f for blink+cursor)
007302  B3C0C0     MOV.B #0xC, W0
007304  07FFCC     RCALL lcdBlockingSend
207:                   Delay_us(4500);
007306  211940     MOV #0x1194, W0
007308  0707B2     RCALL Delay_us
208:                   lcdBlockingClear();                    //Display Clear  
00730A  07FFDA     RCALL lcdBlockingClear
209:                   Delay_us(1800);                //>1.64mS required
00730C  207080     MOV #0x708, W0
00730E  0707AF     RCALL Delay_us
210:                   lcdBlockingSend(0x06);               // entry Mode Set
007310  B3C060     MOV.B #0x6, W0
007312  07FFC5     RCALL lcdBlockingSend
211:                   Delay_us(200);
007314  200C80     MOV #0xC8, W0
007316  0707AB     RCALL Delay_us
212:                   lcdBlockingReturn();
007318  07FFE1     RCALL lcdBlockingReturn
213:                   Delay_us(1500);
00731A  205DC0     MOV #0x5DC, W0
00731C  0707A8     RCALL Delay_us
214:                   
215:                   //lcdCustomSymbols();
216:                   Delay_us(200);
00731E  200C80     MOV #0xC8, W0
007320  0707A6     RCALL Delay_us
217:                   lcdBlockingClear();                         //Display Clear  
007322  07FFCE     RCALL lcdBlockingClear
218:                   Delay_us(1500);
007324  205DC0     MOV #0x5DC, W0
007326  0707A3     RCALL Delay_us
219:                   lcdBlockingReturn();
007328  07FFD9     RCALL lcdBlockingReturn
220:                   Delay_us(200);
00732A  200C80     MOV #0xC8, W0
00732C  0707A0     RCALL Delay_us
221:               }
00732E  060000     RETURN
---  C:/Users/ryan/Documents/seniorproject/ps-040/main.c  -----------------------------------------------
1:                 #include <xc.h>
2:                 #include <p33EP512GM310.h>
3:                 #include <dsp.h>
4:                 #include "common.h"
5:                 #include "devInits.h"
6:                 #include "utilities.h"
7:                 #include "audio.h"
8:                 #include "sounds.h"
9:                 #include "flash.h"
10:                #include "plcd.h"
11:                
12:                #pragma config ICS = PGD1       //pgeDC 1 is used
13:                #pragma config JTAGEN = OFF     //disable jtag
14:                #pragma config BOREN = OFF      //disable brown out (FYI possible erratta case in 33eMU810)
15:                #pragma config FWDTEN = OFF     //disable watchdog timer 
16:                #pragma config GCP = OFF        //disable general segment code protect
17:                #pragma config PLLKEN = ON      //wait for PLL lock
18:                #pragma config POSCMD = NONE    //no external oscillator
19:                #pragma config OSCIOFNC = OFF   //OSC2 is clock output
20:                #pragma config FNOSC = FRCPLL   //clock source
21:                
22:                /* Data Buffers & index variables */
23:                fractional  outputA[STREAMBUF], outputB[STREAMBUF],
24:                            streamA[STREAMBUF], streamB[STREAMBUF];
25:                unsigned int write_ptr=0, rw=0, frameReady=0;
26:                
27:                unsigned char   TxBufferA[FLASH_DMAXFER_BYTES] __attribute__((space(xmemory))),
28:                                RxBufferA[FLASH_DMAXFER_BYTES] __attribute__((space(xmemory)));
29:                fractional      RxBufferB[STREAMBUF] __attribute__((space(xmemory)));
30:                
31:                /* Debug Variables */
32:                unsigned int process_time=0, flash_time = 0;;
33:                
34:                struct sflags stat = {  .UART_ON = FALSE,
35:                                        .TEST_SIN = FALSE,
36:                                        .DMA_JUSTREAD = FALSE,
37:                                        .DMA_READING = FALSE,
38:                                        .hard_clipped = FALSE};
39:                
40:                
41:                /* Screen state variables */
42:                enum screenStruc state = scrnFX;
43:                enum screenStruc laststate = invalid;
44:                enum fxStruct fxUnits[NUMFXUNITS]={0,0};
45:                
46:                /* Buttons & Potentiometers */
47:                struct ctrlsrfc ctrl = {0};
48:                
49:                unsigned char btread;
50:                
51:                void initBuffers(void){
0088BC  BE9F88     MOV.D W8, [W15++]
0088C0  21AA28     MOV #0x1AA2, W8
0088C2  EB0480     CLR W9
0088C6  21CA26     MOV #0x1CA2, W6
0088C8  EB0380     CLR W7
0088CC  B90161     MUL.SU W0, #1, W2
0088CE  410102     ADD W2, W2, W2
0088D0  498183     ADDC W3, W3, W3
0088E2  216364     MOV #0x1636, W4
0088E4  EB0280     CLR W5
0088F6  210008     MOV #0x1000, W8
0088F8  EB0480     CLR W9
0088FC  212006     MOV #0x1200, W6
0088FE  EB0380     CLR W7
008902  B90161     MUL.SU W0, #1, W2
52:                    int i;
53:                    
54:                    for(i=0; i<STREAMBUF; i++){
0088BE  EB0000     CLR W0
0088CA  201005     MOV #0x100, W5
0088DA  E80000     INC W0, W0
0088DC  500F85     SUB W0, W5, [W15]
0088DE  3AFFF6     BRA NZ, 0x88CC
0088E0  EB0000     CLR W0
55:                        streamA[i]=0;
0088C4  EB0080     CLR W1
0088D2  410208     ADD W2, W8, W4
0088D4  780A01     MOV W1, [W4]
56:                        streamB[i]=0;
0088D6  410106     ADD W2, W6, W2
0088D8  780901     MOV W1, [W2]
57:                    }
58:                    
59:                    for(i=0; i<BUTTONS; i++)
0088E8  200232     MOV #0x23, W2
0088EE  E80000     INC W0, W0
0088F0  500F82     SUB W0, W2, [W15]
0088F2  3AFFFB     BRA NZ, 0x88EA
0088F4  EB0000     CLR W0
60:                        ctrl.pad[i]=1;
0088E6  B3C013     MOV.B #0x1, W3
0088EA  400084     ADD W0, W4, W1
0088EC  784883     MOV.B W3, [W1]
61:                    
62:                    for(i=0; i<FLASH_DMAXFER_BYTES; i++){
008900  202005     MOV #0x200, W5
00890C  E80000     INC W0, W0
00890E  500F85     SUB W0, W5, [W15]
008910  3AFFF8     BRA NZ, 0x8902
63:                        TxBufferA[i]=0;
0088FA  EB4080     CLR.B W1
008904  410208     ADD W2, W8, W4
008906  784A01     MOV.B W1, [W4]
64:                        RxBufferA[i]=0;
008908  410106     ADD W2, W6, W2
00890A  784901     MOV.B W1, [W2]
65:                    }
66:                }
008912  BE044F     MOV.D [--W15], W8
008914  060000     RETURN
67:                
68:                int main(void) {
008916  BE9F88     MOV.D W8, [W15++]
008918  BE9F8A     MOV.D W10, [W15++]
00891A  BE9F8C     MOV.D W12, [W15++]
00891C  781F8E     MOV W14, [W15++]
69:                    initPorts();                    // Configure io device & adc 
00891E  07FCB0     RCALL initPorts
70:                    initBuffers();
008920  07FFCD     RCALL initBuffers
71:                    initDMA();
008922  07FDFD     RCALL initDMA
72:                    initSPI3_MEM();                 // Start flash 
008924  07FE29     RCALL initSPI3_MEM
73:                    initDCI_DAC();                  // Configure & enable DAC
008926  07FDD5     RCALL initDCI_DAC
74:                    //genSine(STREAMBUF);
75:                    initADC1();                     // Configure & enable internal ADC
008928  07FD79     RCALL initADC1
76:                    initPMP();
00892A  07FD94     RCALL initPMP
77:                    initQEI_ENC();
00892C  07FE47     RCALL initQEI_ENC
78:                    if(stat.UART_ON) initUART1();        // Configure & enable UART
00892E  216300     MOV #0x1630, W0
008930  E00410     CP0.B [W0]
008932  320001     BRA Z, 0x8936
008934  07FD60     RCALL initUART1
79:                    
80:                    initT1();                       // Configure & start T1 
008936  07FDA2     RCALL initT1
81:                    initT2();                       // Configure & start T2 
008938  07FDAA     RCALL initT2
82:                    initT3();                       // Configure & start T3 for lcd
00893A  07FDB5     RCALL initT3
83:                    //initT5();
84:                    fractional *ping, *pong;
85:                    
86:                    while(1){    
87:                        if(frameReady) {
008946  E21604     CP0 frameReady
008948  32001F     BRA Z, 0x8988
88:                            if(rw){
00894A  E21602     CP0 rw
00894C  320003     BRA Z, 0x8954
89:                                ping = streamA;
008944  21AA2E     MOV #0x1AA2, W14
008950  78040E     MOV W14, W8
008952  370002     BRA 0x8958
90:                                pong = outputB;
008942  218A2D     MOV #0x18A2, W13
00894E  78048D     MOV W13, W9
91:                            }else{
92:                                ping = streamB;
008940  21CA2C     MOV #0x1CA2, W12
008956  78040C     MOV W12, W8
93:                                pong = outputA;
00893E  216A2B     MOV #0x16A2, W11
008954  78048B     MOV W11, W9
94:                            }
95:                
96:                            if(stat.DMA_JUSTREAD==TRUE){    
00893C  21632A     MOV #0x1632, W10
008958  EBC000     SETM.B W0
00895A  104F9A     SUBR.B W0, [W10], [W15]
00895C  3A0006     BRA NZ, 0x896A
97:                                    flashProcessRead();                             // Process DMA requested read data
00895E  07F96C     RCALL flashProcessRead
98:                                    stat.DMA_JUSTREAD=FALSE;
008960  EB4D00     CLR.B [W10]
99:                                    VectorCopy(STREAMBUF, ping, RxBufferB);
008962  214002     MOV #0x1400, W2
008964  780088     MOV W8, W1
008966  201000     MOV #0x100, W0
008968  07BD97     RCALL _VectorCopy
100:                                   //VectorAdd(STREAMBUF, ping, ping, RxBufferB);
101:                           }
102:                           if(state==scrnFX||state==debugscrnBUFFERS){
00896A  80B170     MOV 0x162E, W0
00896C  500FE1     SUB W0, #0x1, [W15]
00896E  320002     BRA Z, 0x8974
008970  500FE5     SUB W0, #0x5, [W15]
008972  3A0002     BRA NZ, 0x8978
103:                                   flashFXops(ping);
008974  780008     MOV W8, W0
008976  07F9B5     RCALL flashFXops
104:                           }
105:                           processAudio(ping, pong);
008978  BE0008     MOV.D W8, W0
00897A  07FF3E     RCALL processAudio
106:                           process_time=write_ptr;    //DEBUG
00897C  80B000     MOV write_ptr, W0
00897E  88B030     MOV W0, process_time
107:                           while(!SS3a);               //wait for flash transmissions to complete
008980  AB2E54     BTST LATF, #1
008982  32FFFE     BRA Z, 0x8980
108:                           flash_time=write_ptr;
008984  88B040     MOV W0, flash_time
109:                           frameReady=0;
008986  EF3604     CLR frameReady
110:                       }
111:                       if(_T2IF){
008988  ABE800     BTST IFS0, #7
00898A  320005     BRA Z, 0x8996
112:                           scanButtons();                   //read button matrix
00898C  07FA6E     RCALL scanButtons
113:                           if(_AD1IF) readPots();
00898E  ABA801     BTST 0x801, #5
008990  320001     BRA Z, 0x8994
008992  07FAD9     RCALL readPots
114:                           _T2IF=0;
008994  A9E800     BCLR IFS0, #7
115:                       }
116:                       if(_T1IF){
008996  AB6800     BTST IFS0, #3
008998  320002     BRA Z, 0x899E
117:                           display();
00899A  07FBDC     RCALL display
118:                           _T1IF=0;
00899C  A96800     BCLR IFS0, #3
119:                       }
120:                       if(_T3IF) {
00899E  AB0801     BTST 0x801, #0
0089A0  32FFD2     BRA Z, 0x8946
121:                           lcdPoll();
0089A2  07F460     RCALL lcdPoll
122:                           _T3IF=0;
0089A4  A90801     BCLR 0x801, #0
0089A6  37FFCF     BRA 0x8946
123:                       }
124:                   }
125:                   return 0;
126:               }
---  C:/Users/ryan/Documents/seniorproject/ps-040/flash.c  ----------------------------------------------
1:                 /*
2:                  This file has hardware routines for flash writing and DMA read/writes
3:                  */
4:                 #include <xc.h>
5:                 #include <dsp.h>
6:                 #include "flash.h"
7:                 #include "common.h"
8:                 
9:                 char receive;
10:                unsigned long  eraseAddr=0;
11:                struct clip_flash clipmap[FLASH_NUMCHUNKS];
12:                
13:                
14:                extern unsigned char    TxBufferA[FLASH_DMAXFER_BYTES]__attribute__((space(xmemory))), 
15:                                        RxBufferA[FLASH_DMAXFER_BYTES]__attribute__((space(xmemory)));
16:                extern fractional       RxBufferB[STREAMBUF] __attribute__((space(xmemory)));
17:                
18:                extern struct sflags stat;
19:                extern struct ctrlsrfc ctrl;
20:                
21:                void flashSoftSetup(void){
0079C0  FA0014     LNK #0x14
0079C2  BE9F88     MOV.D W8, [W15++]
0079C4  BE9F8A     MOV.D W10, [W15++]
0079C6  BE9F8C     MOV.D W12, [W15++]
0079EC  5084F4     SUB W1, #0x14, W9
0079EE  B84D61     MUL.UU W9, #1, W10
0079F0  78000A     MOV W10, W0
0079F2  B85661     MUL.UU W10, #1, W12
0079F4  450570     ADD W10, #0x10, W10
0079F6  EB0580     CLR W11
0079F8  4000F2     ADD W0, #0x12, W1
0079FA  B80B61     MUL.UU W1, #1, W6
0079FC  9FBF86     MOV W6, [W15-16]
0079FE  9FBF97     MOV W7, [W15-14]
007A00  4000F3     ADD W0, #0x13, W1
007A02  B80B61     MUL.UU W1, #1, W6
007A04  9FB7E6     MOV W6, [W15-20]
007A06  9FB7F7     MOV W7, [W15-18]
007A08  4000EC     ADD W0, #0xC, W1
007A0A  B80B61     MUL.UU W1, #1, W6
007A0C  9FB7C6     MOV W6, [W15-24]
007A0E  9FB7D7     MOV W7, [W15-22]
007A10  4000F4     ADD W0, #0x14, W1
007A12  B80B61     MUL.UU W1, #1, W6
007A14  9FB7A6     MOV W6, [W15-28]
007A16  9FB7B7     MOV W7, [W15-26]
007A18  500072     SUB W0, #0x12, W0
007A1A  B80361     MUL.UU W0, #1, W6
007A1C  9FB786     MOV W6, [W15-32]
007A1E  9FB797     MOV W7, [W15-30]
007A20  B91076     MUL.SU W2, #22, W0
22:                    int i=1;
23:                    unsigned long chunksize = (FLASH_MAX/FLASH_NUMCHUNKS);
24:                    
25:                    clipmap[0].start_address=0;
0079C8  B82260     MUL.UU W4, #0, W4
0079CA  891524     MOV W4, clipmap
0079CC  891535     MOV W5, 0x22A6
26:                    clipmap[0].read_index=clipmap[0].start_address;
0079CE  891564     MOV W4, 0x22AC
0079D0  891575     MOV W5, 0x22AE
27:                    clipmap[0].voices=1;
0079D2  200012     MOV #0x1, W2
0079D4  8915A2     MOV W2, 0x22B4
28:                    clipmap[0].one_shot=FALSE;
0079D6  EB4000     CLR.B W0
0079D8  222B61     MOV #0x22B6, W1
0079DA  784880     MOV.B W0, [W1]
29:                    clipmap[0].choke=FALSE;
0079DC  E80081     INC W1, W1
0079DE  784880     MOV.B W0, [W1]
30:                    clipmap[0].block_index=0;
0079E0  891584     MOV W4, 0x22B0
0079E2  891595     MOV W5, 0x22B2
31:                    clipmap[0].playing=FALSE;
0079E4  E80081     INC W1, W1
0079E6  784880     MOV.B W0, [W1]
0079E8  200004     MOV #0x0, W4
0079EA  200405     MOV #0x40, W5
32:                    
33:                    for(; i<FLASH_NUMCHUNKS; i++){
007A60  E80102     INC W2, W2
007A62  200000     MOV #0x0, W0
007A64  200401     MOV #0x40, W1
007A66  400204     ADD W0, W4, W4
007A68  488285     ADDC W1, W5, W5
007A6A  510FF0     SUB W2, #0x10, [W15]
007A6C  3AFFD9     BRA NZ, 0x7A20
34:                        clipmap[i].start_address=chunksize*i;
007A22  40018C     ADD W0, W12, W3
007A24  BE8984     MOV.D W4, [W3]
35:                        clipmap[i].read_index=clipmap[i].start_address;
007A26  B91361     MUL.SU W2, #1, W6
007A28  B93CF6     MUL.SU W7, #22, W8
007A2A  B83376     MUL.UU W6, #22, W6
007A2C  440387     ADD W8, W7, W7
007A2E  430368     ADD W6, #0x8, W6
007A30  4B83E0     ADDC W7, #0x0, W7
007A32  448306     ADD W9, W6, W6
007A34  BE8B04     MOV.D W4, [W6]
36:                        clipmap[i].voices=1;
007A36  40030A     ADD W0, W10, W6
007A38  200017     MOV #0x1, W7
007A3A  780B07     MOV W7, [W6]
37:                        clipmap[i].one_shot=FALSE;
007A3C  97BC0F     MOV [W15-16], W8
007A3E  400388     ADD W0, W8, W7
007A40  EB4300     CLR.B W6
007A42  EB4B80     CLR.B [W7]
38:                        clipmap[i].choke=FALSE;
007A44  97B46F     MOV [W15-20], W8
007A46  400388     ADD W0, W8, W7
007A48  784B86     MOV.B W6, [W7]
39:                        clipmap[i].block_index=0;
007A4A  97B44F     MOV [W15-24], W8
007A4C  400388     ADD W0, W8, W7
007A4E  EB0B80     CLR [W7]
007A50  7813B7     MOV [W7++], [W7--]
40:                        clipmap[i].playing=FALSE;
007A52  97B42F     MOV [W15-28], W8
007A54  400388     ADD W0, W8, W7
007A56  784B86     MOV.B W6, [W7]
41:                        
42:                        clipmap[i-1].end_address=clipmap[i].start_address;
007A58  97B30F     MOV [W15-32], W6
007A5A  400006     ADD W0, W6, W0
007A5C  781833     MOV [W3++], [W0++]
007A5E  781023     MOV [W3--], [W0--]
43:                    }
44:                    clipmap[FLASH_NUMCHUNKS-1].end_address=FLASH_MAX;
007A6E  200000     MOV #0x0, W0
007A70  204001     MOV #0x400, W1
007A72  891F90     MOV W0, 0x23F2
007A74  891FA1     MOV W1, 0x23F4
45:                }
007A76  BE064F     MOV.D [--W15], W12
007A78  BE054F     MOV.D [--W15], W10
007A7A  BE044F     MOV.D [--W15], W8
007A7C  FA8000     ULNK
007A7E  060000     RETURN
46:                
47:                void flashWriteReg(char command) {
48:                    if(SS3a){
007A80  AB2E54     BTST LATF, #1
007A82  32000B     BRA Z, 0x7A9A
49:                        SS3a=0;
007A84  A92E54     BCLR LATF, #1
50:                        SPI3BUF=command;               //WEL=1 for write enable
007A86  FB0000     SE W0, W0
007A88  881540     MOV W0, SPI3BUF
51:                        while(!_SPI3IF);
007A8A  208001     MOV #0x800, W1
007A8C  804052     MOV IFS5, W2
007A8E  608002     AND W1, W2, W0
007A90  32FFFD     BRA Z, 0x7A8C
52:                        SS3a=1;
007A92  A82E54     BSET LATF, #1
53:                        _SPI3IF=0;
007A94  A9680B     BCLR 0x80B, #3
54:                        receive=SPI3BUF;
007A96  801540     MOV SPI3BUF, W0
007A98  B7F61C     MOV.B WREG, receive
55:                    }
56:                }
007A9A  060000     RETURN
57:                
58:                void flashWriteBreg(char newreg){
007A9C  781F88     MOV W8, [W15++]
007A9E  784400     MOV.B W0, W8
59:                    if(SS3a){
007AA0  AB2E54     BTST LATF, #1
007AA2  320015     BRA Z, 0x7ACE
60:                        flashWriteReg(FLASH_WREN);
007AA4  B3C060     MOV.B #0x6, W0
007AA6  07FFEC     RCALL flashWriteReg
61:                        SS3a=0;
007AA8  A92E54     BCLR LATF, #1
62:                        SPI3BUF=FLASH_BRWR;               //WEL=1 for write enable
007AAA  200170     MOV #0x17, W0
007AAC  881540     MOV W0, SPI3BUF
63:                        while(!_SPI3IF); _SPI3IF=0;
007AAE  208001     MOV #0x800, W1
007AB0  804052     MOV IFS5, W2
007AB2  608002     AND W1, W2, W0
007AB4  32FFFD     BRA Z, 0x7AB0
007AB6  A9680B     BCLR 0x80B, #3
64:                        receive=SPI3BUF;
007AB8  801540     MOV SPI3BUF, W0
65:                        SPI3BUF=newreg;               //WEL=1 for write enable
007ABA  FB0408     SE W8, W8
007ABC  881548     MOV W8, SPI3BUF
66:                        while(!_SPI3IF); 
007ABE  208001     MOV #0x800, W1
007AC0  804052     MOV IFS5, W2
007AC2  608002     AND W1, W2, W0
007AC4  32FFFD     BRA Z, 0x7AC0
67:                        SS3a=1;
007AC6  A82E54     BSET LATF, #1
68:                        _SPI3IF=0;
007AC8  A9680B     BCLR 0x80B, #3
69:                        receive=SPI3BUF;
007ACA  801540     MOV SPI3BUF, W0
007ACC  B7F61C     MOV.B WREG, receive
70:                        
71:                    }
72:                }
007ACE  78044F     MOV [--W15], W8
007AD0  060000     RETURN
73:                
74:                char flashStatusCheck(char command){
007AD2  784080     MOV.B W0, W1
75:                    if(SS3a){
007AD6  AB2E54     BTST LATF, #1
007AD8  320015     BRA Z, 0x7B04
76:                        SS3a=0;
007ADA  A92E54     BCLR LATF, #1
77:                        SPI3BUF=command;               //WEL=1 for write enable
007ADC  FB0081     SE W1, W1
007ADE  881541     MOV W1, SPI3BUF
78:                        while(!_SPI3IF); _SPI3IF=0;
007AE0  208001     MOV #0x800, W1
007AE2  804052     MOV IFS5, W2
007AE4  608002     AND W1, W2, W0
007AE6  32FFFD     BRA Z, 0x7AE2
007AE8  A9680B     BCLR 0x80B, #3
79:                        receive=SPI3BUF;
007AEA  801540     MOV SPI3BUF, W0
80:                        SPI3BUF=0x00;               //WEL=1 for write enable
007AEC  EF22A8     CLR SPI3BUF
81:                        while(!_SPI3IF); 
007AEE  208001     MOV #0x800, W1
007AF0  804053     MOV IFS5, W3
007AF2  608003     AND W1, W3, W0
007AF4  32FFFD     BRA Z, 0x7AF0
82:                        SS3a=1;
007AF6  A82E54     BSET LATF, #1
83:                        _SPI3IF=0;
007AF8  A9680B     BCLR 0x80B, #3
84:                        receive=SPI3BUF;
007AFA  801541     MOV SPI3BUF, W1
007AFC  784001     MOV.B W1, W0
007AFE  784181     MOV.B W1, W3
007B00  2161C2     MOV #0x161C, W2
007B02  784903     MOV.B W3, [W2]
85:                        
86:                        return receive;
87:                    }else return 0xFF;
007AD4  EBC000     SETM.B W0
88:                }
007B04  060000     RETURN
89:                
90:                void flashWritePage(fractional* source, unsigned long address){
007B06  BE9F88     MOV.D W8, [W15++]
007B08  BE9F8A     MOV.D W10, [W15++]
007B0A  BE9F8C     MOV.D W12, [W15++]
007B0C  781F8E     MOV W14, [W15++]
007B0E  780500     MOV W0, W10
007B10  BE0402     MOV.D W2, W8
007B1C  B85661     MUL.UU W10, #1, W12
007B1E  210001     MOV #0x1000, W1
007B20  B80D61     MUL.UU W1, #1, W10
007B22  E80081     INC W1, W1
007B24  B80B61     MUL.UU W1, #1, W6
007B28  B90161     MUL.SU W0, #1, W2
007B38  E88000     INC2 W0, W0
91:                    if(SS3a){
007B12  AB2E54     BTST LATF, #1
007B14  320046     BRA Z, 0x7BA2
92:                        int i;
93:                        fractional sample;
94:                        
95:                        flashWriteReg(FLASH_WREN);
007B16  B3C060     MOV.B #0x6, W0
007B18  07FFB3     RCALL flashWriteReg
96:                        
97:                        for(i=0; i<FLASH_DMAXFER_BYTES; i++){
007B1A  EB0000     CLR W0
007B26  202005     MOV #0x200, W5
007B3A  500F85     SUB W0, W5, [W15]
007B3C  3AFFF5     BRA NZ, 0x7B28
98:                            sample=*source++;
007B2A  41008C     ADD W2, W12, W1
007B2C  780091     MOV [W1], W1
99:                            TxBufferA[i++]=(sample>>8)&0xFF;
007B2E  450202     ADD W10, W2, W4
007B30  DE0F48     LSR W1, #8, W14
007B32  784A0E     MOV.B W14, [W4]
100:                           TxBufferA[i]=sample&0xFF;
007B34  410106     ADD W2, W6, W2
007B36  784901     MOV.B W1, [W2]
101:                       }
102:                       SS3a=0;
007B3E  A92E54     BCLR LATF, #1
103:               
104:                       SPI3BUF=FLASH_4PP;
007B40  200120     MOV #0x12, W0
007B42  881540     MOV W0, SPI3BUF
105:                       while(!_SPI3IF); _SPI3IF=0;
007B44  208001     MOV #0x800, W1
007B46  804052     MOV IFS5, W2
007B48  608002     AND W1, W2, W0
007B4A  32FFFD     BRA Z, 0x7B46
007B4C  A9680B     BCLR 0x80B, #3
106:                       receive=SPI3BUF;
007B4E  801540     MOV SPI3BUF, W0
107:                       SPI3BUF=(address>>24)&0xFF;                  
007B50  DE4848     LSR W9, #8, W0
007B52  200001     MOV #0x0, W1
007B54  881540     MOV W0, SPI3BUF
108:                       while(!_SPI3IF); _SPI3IF=0;
007B56  208001     MOV #0x800, W1
007B58  804052     MOV IFS5, W2
007B5A  608002     AND W1, W2, W0
007B5C  32FFFD     BRA Z, 0x7B58
007B5E  A9680B     BCLR 0x80B, #3
109:                       receive=SPI3BUF;
007B60  801540     MOV SPI3BUF, W0
110:                       SPI3BUF=(address>>16)&0xFF;                  
007B62  FB8009     ZE W9, W0
007B64  881540     MOV W0, SPI3BUF
111:                       while(!_SPI3IF); _SPI3IF=0;
007B66  208001     MOV #0x800, W1
007B68  804052     MOV IFS5, W2
007B6A  608002     AND W1, W2, W0
007B6C  32FFFD     BRA Z, 0x7B68
007B6E  A9680B     BCLR 0x80B, #3
112:                       receive=SPI3BUF;
007B70  801540     MOV SPI3BUF, W0
113:                       SPI3BUF=(address>>8)&0xFF;                  
007B72  DD4948     SL W9, #8, W2
007B74  DE4048     LSR W8, #8, W0
007B76  710000     IOR W2, W0, W0
007B78  DE48C8     LSR W9, #8, W1
007B7A  FB8000     ZE W0, W0
007B7C  881540     MOV W0, SPI3BUF
114:                       while(!_SPI3IF); _SPI3IF=0;
007B7E  208001     MOV #0x800, W1
007B80  804052     MOV IFS5, W2
007B82  608002     AND W1, W2, W0
007B84  32FFFD     BRA Z, 0x7B80
007B86  A9680B     BCLR 0x80B, #3
115:                       receive=SPI3BUF;
007B88  801540     MOV SPI3BUF, W0
116:                       SPI3BUF=(address&0xFF);               
007B8A  FB8408     ZE W8, W8
007B8C  881548     MOV W8, SPI3BUF
117:                       while(!_SPI3IF); _SPI3IF=0;
007B8E  208001     MOV #0x800, W1
007B90  804052     MOV IFS5, W2
007B92  608002     AND W1, W2, W0
007B94  32FFFD     BRA Z, 0x7B90
007B96  A9680B     BCLR 0x80B, #3
118:                       receive=SPI3BUF;
007B98  801540     MOV SPI3BUF, W0
007B9A  B7F61C     MOV.B WREG, receive
119:                       
120:                       //SPI3STATbits.SPIROV = 0;    // Clear SPI1 receive overflow flag if set
121:                       //DMA1CONbits.NULLW=0;                          // NULL WRITE (debug))
122:                       DMA0CONbits.CHEN = 1;
007B9C  A8EB01     BSET 0xB01, #7
123:                       DMA1CONbits.CHEN = 1;
007B9E  A8EB11     BSET 0xB11, #7
124:                       DMA0REQbits.FORCE = 1; // Manual mode: Kick-start the 1st transfer 
007BA0  A8EB03     BSET 0xB03, #7
125:                       //SPI3BUF = 0x00;
126:                       //while (DMA0REQbits.FORCE == 1);
127:                       //DMA1REQbits.FORCE = 1; // Manual mode: Kick-start the 1st transfer  
128:                   }
129:               }
007BA2  78074F     MOV [--W15], W14
007BA4  BE064F     MOV.D [--W15], W12
007BA6  BE054F     MOV.D [--W15], W10
007BA8  BE044F     MOV.D [--W15], W8
007BAA  060000     RETURN
130:               
131:               void flashStartRead(unsigned long address){
007BAC  BE9F88     MOV.D W8, [W15++]
007BAE  BE0400     MOV.D W0, W8
007BB6  210006     MOV #0x1000, W6
007BB8  EB0380     CLR W7
132:                   if(SS3a){
007BB0  AB2E54     BTST LATF, #1
007BB2  320040     BRA Z, 0x7C34
007BB4  EB0080     CLR W1
133:                       int i;
134:               
135:                       for(i=0; i<FLASH_DMAXFER_BYTES; i++){
007BBC  202003     MOV #0x200, W3
007BC2  E80081     INC W1, W1
007BC4  508F83     SUB W1, W3, [W15]
007BC6  3AFFFB     BRA NZ, 0x7BBE
136:                           TxBufferA[i]=0;
007BBA  EB4200     CLR.B W4
007BBE  408106     ADD W1, W6, W2
007BC0  784904     MOV.B W4, [W2]
137:                       }
138:               
139:                       stat.DMA_READING=TRUE;
007BC8  216330     MOV #0x1633, W0
007BCA  EBC800     SETM.B [W0]
140:                       stat.DMA_JUSTREAD=FALSE;
007BCC  E90000     DEC W0, W0
007BCE  EB4800     CLR.B [W0]
141:                       
142:                       SS3a=0;
007BD0  A92E54     BCLR LATF, #1
143:                       SPI3BUF=FLASH_4READ;
007BD2  200130     MOV #0x13, W0
007BD4  881540     MOV W0, SPI3BUF
144:                       while(!_SPI3IF); _SPI3IF=0;
007BD6  208000     MOV #0x800, W0
007BD8  804052     MOV IFS5, W2
007BDA  600082     AND W0, W2, W1
007BDC  32FFFD     BRA Z, 0x7BD8
007BDE  A9680B     BCLR 0x80B, #3
145:                       receive=SPI3BUF;
007BE0  801540     MOV SPI3BUF, W0
146:                       
147:                       SPI3BUF=(address>>24)&0xFF;                  
007BE2  DE4848     LSR W9, #8, W0
007BE4  200001     MOV #0x0, W1
007BE6  881540     MOV W0, SPI3BUF
148:                       while(!_SPI3IF); _SPI3IF=0;
007BE8  208002     MOV #0x800, W2
007BEA  804050     MOV IFS5, W0
007BEC  610080     AND W2, W0, W1
007BEE  32FFFD     BRA Z, 0x7BEA
007BF0  A9680B     BCLR 0x80B, #3
149:                       receive=SPI3BUF;
007BF2  801540     MOV SPI3BUF, W0
150:                       SPI3BUF=(address>>16)&0xFF;                  
007BF4  FB8009     ZE W9, W0
007BF6  881540     MOV W0, SPI3BUF
151:                       while(!_SPI3IF); _SPI3IF=0;
007BF8  208002     MOV #0x800, W2
007BFA  804050     MOV IFS5, W0
007BFC  610080     AND W2, W0, W1
007BFE  32FFFD     BRA Z, 0x7BFA
007C00  A9680B     BCLR 0x80B, #3
152:                       receive=SPI3BUF;
007C02  801540     MOV SPI3BUF, W0
153:                       SPI3BUF=(address>>8)&0xFF;                  
007C04  DD4948     SL W9, #8, W2
007C06  DE4048     LSR W8, #8, W0
007C08  710000     IOR W2, W0, W0
007C0A  DE48C8     LSR W9, #8, W1
007C0C  FB8000     ZE W0, W0
007C0E  881540     MOV W0, SPI3BUF
154:                       while(!_SPI3IF); _SPI3IF=0;
007C10  208002     MOV #0x800, W2
007C12  804050     MOV IFS5, W0
007C14  610080     AND W2, W0, W1
007C16  32FFFD     BRA Z, 0x7C12
007C18  A9680B     BCLR 0x80B, #3
155:                       receive=SPI3BUF;
007C1A  801540     MOV SPI3BUF, W0
156:                       SPI3BUF=(address&0xFF);               
007C1C  FB8408     ZE W8, W8
007C1E  881548     MOV W8, SPI3BUF
157:                       while(!_SPI3IF); _SPI3IF=0;
007C20  208001     MOV #0x800, W1
007C22  804052     MOV IFS5, W2
007C24  608002     AND W1, W2, W0
007C26  32FFFD     BRA Z, 0x7C22
007C28  A9680B     BCLR 0x80B, #3
158:                       receive=SPI3BUF;
007C2A  801540     MOV SPI3BUF, W0
007C2C  B7F61C     MOV.B WREG, receive
159:               
160:                       /* Kick off dma read here */
161:                       //SPI3STATbits.SPIROV = 0;    // Clear SPI1 receive overflow flag if set
162:                       //DMA1CONbits.NULLW=1;                          // NULL WRITE (debug))
163:                       DMA0CONbits.CHEN = 1;
007C2E  A8EB01     BSET 0xB01, #7
164:                       DMA1CONbits.CHEN = 1;
007C30  A8EB11     BSET 0xB11, #7
165:                       DMA0REQbits.FORCE = 1; // Manual mode: Kick-start the 1st transfer
007C32  A8EB03     BSET 0xB03, #7
166:                       //SPI3BUF = 0x00;
167:                       //while (DMA0REQbits.FORCE == 1);
168:                       //DMA1REQbits.FORCE = 1; // Manual mode: Kick-start the 1st transfer
169:                   }
170:               }
007C34  BE044F     MOV.D [--W15], W8
007C36  060000     RETURN
171:               
172:               void flashProcessRead(void){
007C38  BE9F88     MOV.D W8, [W15++]
007C3A  BE9F8A     MOV.D W10, [W15++]
007C3E  212001     MOV #0x1200, W1
007C40  21400A     MOV #0x1400, W10
007C42  EB0580     CLR W11
007C44  B80C61     MUL.UU W1, #1, W8
007C46  E80081     INC W1, W1
007C48  B80B61     MUL.UU W1, #1, W6
007C4C  B90161     MUL.SU W0, #1, W2
007C5C  E88000     INC2 W0, W0
173:                   int i,j; 
174:                   
175:                   for(i=j=0; i<STREAMBUF; i++){
007C3C  EB0000     CLR W0
007C4A  202005     MOV #0x200, W5
007C5E  500F85     SUB W0, W5, [W15]
007C60  3AFFF5     BRA NZ, 0x7C4C
176:                       unsigned int temp = (RxBufferA[j++]<<8)&0xFF00;
007C50  410208     ADD W2, W8, W4
007C52  FB8214     ZE [W4], W4
007C54  DD2248     SL W4, #8, W4
177:                       RxBufferB[i]=(temp|RxBufferA[j++]);
007C4E  41008A     ADD W2, W10, W1
007C56  410106     ADD W2, W6, W2
007C58  FB8112     ZE [W2], W2
007C5A  720882     IOR W4, W2, [W1]
178:                   }    
179:               }
007C62  BE054F     MOV.D [--W15], W10
007C64  BE044F     MOV.D [--W15], W8
007C66  060000     RETURN
180:               
181:               void flashEraseSector(unsigned long address){
007C68  BE9F88     MOV.D W8, [W15++]
007C6A  BE0400     MOV.D W0, W8
182:                   if(SS3a){
007C6C  AB2E54     BTST LATF, #1
007C6E  320032     BRA Z, 0x7CD4
183:                       flashWriteReg(FLASH_WREN);
007C70  B3C060     MOV.B #0x6, W0
007C72  07FF06     RCALL flashWriteReg
184:                       SS3a=0;
007C74  A92E54     BCLR LATF, #1
185:                       SPI3BUF=FLASH_4SE;                 
007C76  200DC0     MOV #0xDC, W0
007C78  881540     MOV W0, SPI3BUF
186:                       while(!_SPI3IF); _SPI3IF=0;
007C7A  208001     MOV #0x800, W1
007C7C  804052     MOV IFS5, W2
007C7E  608002     AND W1, W2, W0
007C80  32FFFD     BRA Z, 0x7C7C
007C82  A9680B     BCLR 0x80B, #3
187:                       receive=SPI3BUF;
007C84  801540     MOV SPI3BUF, W0
188:                       SPI3BUF=(address>>24)&0xFF;                  
007C86  DE4848     LSR W9, #8, W0
007C88  200001     MOV #0x0, W1
007C8A  881540     MOV W0, SPI3BUF
189:                       while(!_SPI3IF); _SPI3IF=0;
007C8C  208001     MOV #0x800, W1
007C8E  804052     MOV IFS5, W2
007C90  608002     AND W1, W2, W0
007C92  32FFFD     BRA Z, 0x7C8E
007C94  A9680B     BCLR 0x80B, #3
190:                       receive=SPI3BUF;
007C96  801540     MOV SPI3BUF, W0
191:                       SPI3BUF=(address>>16)&0xFF;                  
007C98  FB8009     ZE W9, W0
007C9A  881540     MOV W0, SPI3BUF
192:                       while(!_SPI3IF); _SPI3IF=0;
007C9C  208001     MOV #0x800, W1
007C9E  804052     MOV IFS5, W2
007CA0  608002     AND W1, W2, W0
007CA2  32FFFD     BRA Z, 0x7C9E
007CA4  A9680B     BCLR 0x80B, #3
193:                       receive=SPI3BUF;
007CA6  801540     MOV SPI3BUF, W0
194:                       SPI3BUF=(address>>8)&0xFF;                  
007CA8  DD4948     SL W9, #8, W2
007CAA  DE4048     LSR W8, #8, W0
007CAC  710000     IOR W2, W0, W0
007CAE  DE48C8     LSR W9, #8, W1
007CB0  FB8000     ZE W0, W0
007CB2  881540     MOV W0, SPI3BUF
195:                       while(!_SPI3IF); _SPI3IF=0;
007CB4  208001     MOV #0x800, W1
007CB6  804052     MOV IFS5, W2
007CB8  608002     AND W1, W2, W0
007CBA  32FFFD     BRA Z, 0x7CB6
007CBC  A9680B     BCLR 0x80B, #3
196:                       receive=SPI3BUF;
007CBE  801540     MOV SPI3BUF, W0
197:                       SPI3BUF=(address&0xFF);               
007CC0  FB8408     ZE W8, W8
007CC2  881548     MOV W8, SPI3BUF
198:                       while(!_SPI3IF); _SPI3IF=0;
007CC4  208001     MOV #0x800, W1
007CC6  804052     MOV IFS5, W2
007CC8  608002     AND W1, W2, W0
007CCA  32FFFD     BRA Z, 0x7CC6
007CCC  A9680B     BCLR 0x80B, #3
199:                       receive=SPI3BUF;
007CCE  801540     MOV SPI3BUF, W0
007CD0  B7F61C     MOV.B WREG, receive
200:                       SS3a=1;
007CD2  A82E54     BSET LATF, #1
201:                   }
202:               }
007CD4  BE044F     MOV.D [--W15], W8
007CD6  060000     RETURN
203:               
204:               void flashBulkErase(void) {
205:                   flashWriteReg(FLASH_WREN);
007CD8  B3C060     MOV.B #0x6, W0
007CDA  07FED2     RCALL flashWriteReg
206:                   flashWriteReg(FLASH_FRMT);
007CDC  B3C600     MOV.B #0x60, W0
007CDE  07FED0     RCALL flashWriteReg
207:               }
007CE0  060000     RETURN
208:               
209:               void flashFXops(fractional* stream){
007CE2  4787EA     ADD W15, #0xA, W15
007CE4  BE9F88     MOV.D W8, [W15++]
007CE6  BE9F8A     MOV.D W10, [W15++]
007CE8  BE9F8C     MOV.D W12, [W15++]
007CEA  781F8E     MOV W14, [W15++]
007CEC  780680     MOV W0, W13
007CF6  EB0400     CLR W8
007CF8  21636B     MOV #0x1636, W11
007CFA  458071     ADD W11, #0x11, W0
007CFC  B80161     MUL.UU W0, #1, W2
007CFE  9FB7D2     MOV W2, [W15-22]
007D00  9FB7E3     MOV W3, [W15-20]
007D02  222A49     MOV #0x22A4, W9
007D04  780609     MOV W9, W12
007D06  448764     ADD W9, #0x4, W14
007D08  78050B     MOV W11, W10
007D3A  B94176     MUL.SU W8, #22, W2
007D7E  B94176     MUL.SU W8, #22, W2
007D9C  222A49     MOV #0x22A4, W9
007D9E  780589     MOV W9, W11
007DA0  448064     ADD W9, #0x4, W0
007DA2  B80161     MUL.UU W0, #1, W2
007DA4  9FB7F2     MOV W2, [W15-18]
007DA6  9FBF83     MOV W3, [W15-16]
007DCC  B94076     MUL.SU W8, #22, W0
007E12  B94176     MUL.SU W8, #22, W2
210:                   int i;
211:                   
212:                   if(!ctrl.pad[33]) flashBulkErase();
007CEE  216570     MOV #0x1657, W0
007CF0  E00410     CP0.B [W0]
007CF2  3A0001     BRA NZ, 0x7CF6
007CF4  07FFF1     RCALL flashBulkErase
213:                   
214:                   //check write triggers
215:                   for(i=0; i<FLASH_NUMCHUNKS; i++){
007D94  E80408     INC W8, W8
007D96  540FF0     SUB W8, #0x10, [W15]
007D98  3AFFB7     BRA NZ, 0x7D08
007D9A  EB0400     CLR W8
216:                       if(!ctrl.pad[i+17]){    //use shifted pads to trigger recording
007D0A  97B1DF     MOV [W15-22], W3
007D0C  440003     ADD W8, W3, W0
007D0E  E00410     CP0.B [W0]
007D10  3A0036     BRA NZ, 0x7D7E
217:                           flashWritePage(stream, clipmap[i].read_index);
007D12  B94261     MUL.SU W8, #1, W4
007D14  9FB7F4     MOV W4, [W15-18]
007D16  9FBF85     MOV W5, [W15-16]
007D18  B929F6     MUL.SU W5, #22, W2
007D1A  B82076     MUL.UU W4, #22, W0
007D1C  410081     ADD W2, W1, W1
007D1E  400068     ADD W0, #0x8, W0
007D20  4880E0     ADDC W1, #0x0, W1
007D22  448000     ADD W9, W0, W0
007D24  BE0110     MOV.D [W0], W2
007D26  78000D     MOV W13, W0
007D28  07FEEE     RCALL flashWritePage
218:                           if(clipmap[i].read_index<clipmap[i].end_address){
007D2A  97BA8F     MOV [W15-16], W5
007D2C  B929F6     MUL.SU W5, #22, W2
007D2E  97B1FF     MOV [W15-18], W3
007D30  B81876     MUL.UU W3, #22, W0
007D32  410081     ADD W2, W1, W1
007D34  400068     ADD W0, #0x8, W0
007D36  4880E0     ADDC W1, #0x0, W1
007D38  448000     ADD W9, W0, W0
007D3C  470082     ADD W14, W2, W1
007D3E  BE0210     MOV.D [W0], W4
007D40  520FB1     SUB W4, [W1++], [W15]
007D42  5A8FA1     SUBB W5, [W1--], [W15]
007D44  310011     BRA C, 0x7D68
219:                               clipmap[i].read_index+=FLASH_PAGE;
007D46  B94061     MUL.SU W8, #1, W0
007D48  B90AF6     MUL.SU W1, #22, W4
007D4A  B80176     MUL.UU W0, #22, W2
007D4C  420183     ADD W4, W3, W3
007D4E  410168     ADD W2, #0x8, W2
007D50  4981E0     ADDC W3, #0x0, W3
007D52  448102     ADD W9, W2, W2
007D54  B80076     MUL.UU W0, #22, W0
007D56  420081     ADD W4, W1, W1
007D58  400068     ADD W0, #0x8, W0
007D5A  4880E0     ADDC W1, #0x0, W1
007D5C  448000     ADD W9, W0, W0
007D5E  202004     MOV #0x200, W4
007D60  200005     MOV #0x0, W5
007D62  421832     ADD W4, [W2++], [W0++]
007D64  4A9022     ADDC W5, [W2--], [W0--]
007D66  370016     BRA 0x7D94
220:                           }
221:                           else {
222:                               clipmap[i].read_index=clipmap[i].start_address;
007D68  460102     ADD W12, W2, W2
007D6A  B94061     MUL.SU W8, #1, W0
007D6C  B90AF6     MUL.SU W1, #22, W4
007D6E  B80076     MUL.UU W0, #22, W0
007D70  420081     ADD W4, W1, W1
007D72  400068     ADD W0, #0x8, W0
007D74  4880E0     ADDC W1, #0x0, W1
007D76  448000     ADD W9, W0, W0
007D78  781832     MOV [W2++], [W0++]
007D7A  781022     MOV [W2--], [W0--]
007D7C  37000B     BRA 0x7D94
223:                           }
224:                       } 
225:                       else {
226:                           clipmap[i].read_index=clipmap[i].start_address;
007D80  460102     ADD W12, W2, W2
007D82  B94061     MUL.SU W8, #1, W0
007D84  B90AF6     MUL.SU W1, #22, W4
007D86  B80076     MUL.UU W0, #22, W0
007D88  420081     ADD W4, W1, W1
007D8A  400068     ADD W0, #0x8, W0
007D8C  4880E0     ADDC W1, #0x0, W1
007D8E  448000     ADD W9, W0, W0
007D90  781832     MOV [W2++], [W0++]
007D92  781022     MOV [W2--], [W0--]
227:                       }
228:                   }
229:                   
230:                   /*
231:                   if(!ctrl.pad[3]){
232:                       flashWritePage(stream, writeAddr);
233:                       writeAddr+=FLASH_PAGE;
234:                   } else writeAddr=0;
235:                   */
236:                   
237:                   //check read triggers
238:                   for(i=0; i<FLASH_NUMCHUNKS; i++){
007E28  E80408     INC W8, W8
007E2A  540FF0     SUB W8, #0x10, [W15]
007E2C  3AFFBD     BRA NZ, 0x7DA8
239:                       if(!ctrl.pad[i]){
007DA8  450008     ADD W10, W8, W0
007DAA  E00410     CP0.B [W0]
007DAC  3A0032     BRA NZ, 0x7E12
240:                           flashStartRead(clipmap[i].read_index);     // READBACK
007DAE  B94661     MUL.SU W8, #1, W12
007DB0  B969F6     MUL.SU W13, #22, W2
007DB2  B86076     MUL.UU W12, #22, W0
007DB4  410081     ADD W2, W1, W1
007DB6  400068     ADD W0, #0x8, W0
007DB8  4880E0     ADDC W1, #0x0, W1
007DBA  448000     ADD W9, W0, W0
007DBC  BE0010     MOV.D [W0], W0
007DBE  07FEF6     RCALL flashStartRead
241:                           if(clipmap[i].read_index<clipmap[i].end_address){
007DC0  B968F6     MUL.SU W13, #22, W0
007DC2  B86676     MUL.UU W12, #22, W12
007DC4  40068D     ADD W0, W13, W13
007DC6  460668     ADD W12, #0x8, W12
007DC8  4E86E0     ADDC W13, #0x0, W13
007DCA  44860C     ADD W9, W12, W12
007DCE  97B1FF     MOV [W15-18], W3
007DD0  400103     ADD W0, W3, W2
007DD2  BE021C     MOV.D [W12], W4
007DD4  520FB2     SUB W4, [W2++], [W15]
007DD6  5A8FA2     SUBB W5, [W2--], [W15]
007DD8  310011     BRA C, 0x7DFC
242:                               clipmap[i].read_index=clipmap[i].read_index+FLASH_PAGE;
007DDA  B94061     MUL.SU W8, #1, W0
007DDC  B90AF6     MUL.SU W1, #22, W4
007DDE  B80176     MUL.UU W0, #22, W2
007DE0  420183     ADD W4, W3, W3
007DE2  410168     ADD W2, #0x8, W2
007DE4  4981E0     ADDC W3, #0x0, W3
007DE6  448102     ADD W9, W2, W2
007DE8  B80076     MUL.UU W0, #22, W0
007DEA  420081     ADD W4, W1, W1
007DEC  400068     ADD W0, #0x8, W0
007DEE  4880E0     ADDC W1, #0x0, W1
007DF0  448000     ADD W9, W0, W0
007DF2  202004     MOV #0x200, W4
007DF4  200005     MOV #0x0, W5
007DF6  421832     ADD W4, [W2++], [W0++]
007DF8  4A9022     ADDC W5, [W2--], [W0--]
007DFA  370016     BRA 0x7E28
243:                           }
244:                           else {
245:                               clipmap[i].read_index=clipmap[i].start_address;
007DFC  458000     ADD W11, W0, W0
007DFE  B94161     MUL.SU W8, #1, W2
007E00  B91AF6     MUL.SU W3, #22, W4
007E02  B81176     MUL.UU W2, #22, W2
007E04  420183     ADD W4, W3, W3
007E06  410168     ADD W2, #0x8, W2
007E08  4981E0     ADDC W3, #0x0, W3
007E0A  448102     ADD W9, W2, W2
007E0C  781930     MOV [W0++], [W2++]
007E0E  781120     MOV [W0--], [W2--]
007E10  37000B     BRA 0x7E28
246:                           }
247:                       } 
248:                       else {
249:                           clipmap[i].read_index=clipmap[i].start_address;
007E14  458102     ADD W11, W2, W2
007E16  B94061     MUL.SU W8, #1, W0
007E18  B90AF6     MUL.SU W1, #22, W4
007E1A  B80076     MUL.UU W0, #22, W0
007E1C  420081     ADD W4, W1, W1
007E1E  400068     ADD W0, #0x8, W0
007E20  4880E0     ADDC W1, #0x0, W1
007E22  448000     ADD W9, W0, W0
007E24  781832     MOV [W2++], [W0++]
007E26  781022     MOV [W2--], [W0--]
250:                       }
251:                   }
252:                   
253:                   /*
254:                   if(!ctrl.pad[4]){
255:                       flashStartRead(readAddr);     // READBACK
256:                       readAddr+=FLASH_PAGE;
257:                   } else readAddr=0;
258:                   */
259:                   
260:                   if(!ctrl.pad[5]){
007E2E  2163B0     MOV #0x163B, W0
007E30  E00410     CP0.B [W0]
007E32  3A000E     BRA NZ, 0x7E50
261:                       if(flashStatusCheck(FLASH_RDSR1)==0x03);
007E34  B3C050     MOV.B #0x5, W0
007E36  07FE4D     RCALL flashStatusCheck
007E38  504FE3     SUB.B W0, #0x3, [W15]
007E3A  32000C     BRA Z, 0x7E54
262:                       else{
263:                           flashEraseSector(eraseAddr);
007E3C  80B0C0     MOV eraseAddr, W0
007E3E  80B0D1     MOV 0x161A, W1
007E40  07FF13     RCALL flashEraseSector
264:                           eraseAddr+=FLASH_PAGE;
007E42  80B0C0     MOV eraseAddr, W0
007E44  80B0D1     MOV 0x161A, W1
007E46  B02000     ADD #0x200, W0
007E48  B08001     ADDC #0x0, W1
007E4A  88B0C0     MOV W0, eraseAddr
007E4C  88B0D1     MOV W1, 0x161A
007E4E  370002     BRA 0x7E54
265:                       }
266:                   } else eraseAddr=0;
007E50  EF3618     CLR eraseAddr
007E52  EF361A     CLR 0x161A
267:                   if(!ctrl.pad[6])flashWriteReg(FLASH_WREN);
007E54  2163C0     MOV #0x163C, W0
007E56  E00410     CP0.B [W0]
007E58  3A0002     BRA NZ, 0x7E5E
007E5A  B3C060     MOV.B #0x6, W0
007E5C  07FE11     RCALL flashWriteReg
268:                   
269:                   //if(!ctrl.pad[7]) stat.TEST_SIN=TRUE;
270:                   //else stat.TEST_SIN = FALSE;
271:               }
007E5E  78074F     MOV [--W15], W14
007E60  BE064F     MOV.D [--W15], W12
007E62  BE054F     MOV.D [--W15], W10
007E64  BE044F     MOV.D [--W15], W8
007E66  B100AF     SUB #0xA, W15
007E68  060000     RETURN
---  C:/Users/ryan/Documents/seniorproject/ps-040/devInits.c  -------------------------------------------
1:                 /*
2:                  ** This file contains functions to initialize various peripheral devices
3:                  */
4:                 #include <xc.h>
5:                 #include <p33EP512GM310.h>
6:                 #include "common.h"
7:                 #include "devInits.h"
8:                 #include "utilities.h"
9:                 #include "plcd.h"
10:                #include "screens.h"
11:                #include "flash.h"
12:                #include "dsp.h"
13:                
14:                extern unsigned char    TxBufferA[FLASH_DMAXFER_BYTES]__attribute__((space(xmemory))), 
15:                                        RxBufferA[FLASH_DMAXFER_BYTES]__attribute__((space(xmemory)));
16:                extern fractional       RxBufferB[STREAMBUF] __attribute__((space(xmemory)));
17:                
18:                void initPorts(void){
19:                    /* Clock Setup */
20:                    CLKDIVbits.PLLPOST=0;
008280  2FF3F0     MOV #0xFF3F, W0
008282  B62744     AND CLKDIV
21:                    CLKDIVbits.PLLPRE=0;
008284  2FFE00     MOV #0xFFE0, W0
008286  B62744     AND CLKDIV
22:                    PLLFBDbits.PLLDIV = 0x49;       //d_73 for ~140Mhz
008288  2FE000     MOV #0xFE00, W0
00828A  B60746     AND PLLFBD, WREG
00828C  B30490     IOR #0x49, W0
00828E  883A30     MOV W0, PLLFBD
23:                    while(OSCCONbits.LOCK!=1) {};   //wait for PLL to lock
008290  200201     MOV #0x20, W1
008292  803A12     MOV OSCCON, W2
008294  608002     AND W1, W2, W0
008296  32FFFD     BRA Z, 0x8292
24:                    
25:                    /* Digital IO DIRECTION (1 = input) */ 
26:                    TRISA=TRISB=TRISC=TRISD=TRISE=TRISF=TRISG=0x0000; 
008298  EF2E60     CLR TRISG
00829A  F80E60     PUSH TRISG
00829C  F90E50     POP TRISF
00829E  F80E50     PUSH TRISF
0082A0  F90E40     POP TRISE
0082A2  F80E40     PUSH TRISE
0082A4  F90E30     POP TRISD
0082A6  F80E30     PUSH TRISD
0082A8  F90E20     POP TRISC
0082AA  F80E20     PUSH TRISC
0082AC  F90E10     POP TRISB
0082AE  F80E10     PUSH TRISB
0082B0  F90E00     POP TRISA
27:                    TRISA=0x1E01; CNPUA=0x0801; 
0082B2  21E010     MOV #0x1E01, W0
0082B4  887000     MOV W0, TRISA
0082B6  208010     MOV #0x801, W0
0082B8  887050     MOV W0, CNPUA
28:                    TRISB=0x0000; CNPUB=0x0000; 
0082BA  EF2E10     CLR TRISB
0082BC  EF2E1A     CLR CNPUB
29:                    TRISC=0x2087; 
0082BE  220870     MOV #0x2087, W0
0082C0  887100     MOV W0, TRISC
30:                    TRISD=0x111E; CNPUD=0x801E; 
0082C2  2111E0     MOV #0x111E, W0
0082C4  887180     MOV W0, TRISD
0082C6  2801E0     MOV #0x801E, W0
0082C8  8871D0     MOV W0, CNPUD
31:                    TRISE=0x7300; 
0082CA  273000     MOV #0x7300, W0
0082CC  887200     MOV W0, TRISE
32:                    TRISF=0x00F0; CNPUF=0x00F2; 
0082CE  200F00     MOV #0xF0, W0
0082D0  887280     MOV W0, TRISF
0082D2  E88000     INC2 W0, W0
0082D4  8872D0     MOV W0, CNPUF
33:                    TRISG=CNPUG=0xFFFF;   //PORTG all inputs, weak pull ups on all of G 
0082D6  EB8100     SETM W2
0082D8  887352     MOV W2, CNPUG
0082DA  F80E6A     PUSH CNPUG
0082DC  F90E60     POP TRISG
34:                     
35:                    /* DIGITAL OUTPUT LATCH */ 
36:                    LATA=LATB=LATC=LATD=LATE=LATF=LATG=0x0000; 
0082DE  EF2E64     CLR LATG
0082E0  F80E64     PUSH LATG
0082E2  F90E54     POP LATF
0082E4  F80E54     PUSH LATF
0082E6  F90E44     POP LATE
0082E8  F80E44     PUSH LATE
0082EA  F90E34     POP LATD
0082EC  F80E34     PUSH LATD
0082EE  F90E24     POP LATC
0082F0  F80E24     PUSH LATC
0082F2  F90E14     POP LATB
0082F4  F80E14     PUSH LATB
0082F6  F90E04     POP LATA
37:                    LATA=0x0040; 
0082F8  200400     MOV #0x40, W0
0082FA  887020     MOV W0, LATA
38:                    SS3a=SS3b=1; 
0082FC  A8EE35     BSET 0xE35, #7
0082FE  8071A0     MOV LATD, W0
008300  DE004F     LSR W0, #15, W0
008302  400000     ADD W0, W0, W0
008304  8072A1     MOV LATF, W1
008306  A11001     BCLR W1, #1
008308  700081     IOR W0, W1, W1
00830A  8872A1     MOV W1, LATF
39:                    FLASHCLK=0;            // Keep SPI CS & CLK asserted 
00830C  A92E25     BCLR 0xE25, #1
40:                    
41:                     
42:                    /* ANALOG PINS (1 = analog) */ 
43:                    ANSELA=ANSELB=ANSELC=ANSELD=ANSELE=ANSELF=ANSELG=0x0000; 
00830E  EF2E6E     CLR ANSELG
008310  F80E6E     PUSH ANSELG
008312  F90E5E     POP ANSELF
008314  F80E5E     PUSH ANSELF
008316  F90E4E     POP ANSELE
008318  F80E4E     PUSH ANSELE
00831A  F90E3E     POP ANSELD
00831C  F80E3E     PUSH ANSELD
00831E  F90E2E     POP ANSELC
008320  F80E2E     PUSH ANSELC
008322  F90E1E     POP ANSELB
008324  F80E1E     PUSH ANSELB
008326  F90E0E     POP ANSELA
44:                    ANSELCbits.ANSC0=1;     //AN6 
008328  A80E2E     BSET ANSELC, #0
45:                    ANSELCbits.ANSC1=1;     //AN7 
00832A  A82E2E     BSET ANSELC, #1
46:                    ANSELCbits.ANSC2=1;     //AN8 
00832C  A84E2E     BSET ANSELC, #2
47:                    ANSELAbits.ANSA12=1;    //AN10  
00832E  A88E0F     BSET 0xE0F, #4
48:                    ANSELEbits.ANSE8=1;     //AN21 
008330  A80E4F     BSET 0xE4F, #0
49:                    ANSELEbits.ANSE9=1;     //AN20
008332  A82E4F     BSET 0xE4F, #1
50:                    
51:                    /* Remappable Pins*/
52:                	__builtin_write_OSCCONL(OSCCON & ~(1<<6));      // Unlock Registers
008334  803A10     MOV OSCCON, W0
008336  A16000     BCLR W0, #6
008338  200463     MOV #0x46, W3
00833A  200574     MOV #0x57, W4
00833C  207421     MOV #0x742, W1
00833E  784883     MOV.B W3, [W1]
008340  784884     MOV.B W4, [W1]
008342  784880     MOV.B W0, [W1]
53:                        RPINR18bits.U1RXR = 0x48;       // U1 rx on RPI72
008344  2FF800     MOV #0xFF80, W0
008346  803625     MOV RPINR18, W5
008348  600085     AND W0, W5, W1
00834A  B30481     IOR #0x48, W1
00834C  883621     MOV W1, RPINR18
54:                        RPOR1bits.RP37R = 0x01;         // Pin 70, RP37 U1 tx
00834E  2C0FF1     MOV #0xC0FF, W1
008350  803416     MOV RPOR1, W6
008352  608286     AND W1, W6, W5
008354  A08005     BSET W5, #8
008356  883415     MOV W5, RPOR1
55:                        RPINR24bits.CSDIR=0x3D;         //DCI IN on RPI61           
008358  803687     MOV RPINR24, W7
00835A  600287     AND W0, W7, W5
00835C  B303D5     IOR #0x3D, W5
00835E  883685     MOV W5, RPINR24
56:                        RPOR3bits.RP40R=0x0C;           //DCI clock
008360  2FFC05     MOV #0xFFC0, W5
008362  803437     MOV RPOR3, W7
008364  628307     AND W5, W7, W6
008366  B300C6     IOR #0xC, W6
008368  883436     MOV W6, RPOR3
57:                        RPOR2bits.RP39R=0x0D;           //DCI frame sync
00836A  803426     MOV RPOR2, W6
00836C  608386     AND W1, W6, W7
00836E  20D006     MOV #0xD00, W6
008370  730307     IOR W6, W7, W6
008372  883426     MOV W6, RPOR2
58:                        RPOR3bits.RP41R=0x0B;           //DCI output
008374  803436     MOV RPOR3, W6
008376  608386     AND W1, W6, W7
008378  20B006     MOV #0xB00, W6
00837A  730307     IOR W6, W7, W6
00837C  883436     MOV W6, RPOR3
59:                        RPOR6bits.RP54R=0x20;           //SCK3 output on pin 77
00837E  803467     MOV RPOR6, W7
008380  628287     AND W5, W7, W5
008382  A05005     BSET W5, #5
008384  883465     MOV W5, RPOR6
60:                        RPINR29bits.SCK3R=0x36;         //SCK3 input on pin 77
008386  280FF5     MOV #0x80FF, W5
008388  8036D6     MOV RPINR29, W6
00838A  628386     AND W5, W6, W7
00838C  236006     MOV #0x3600, W6
00838E  730307     IOR W6, W7, W6
008390  8836D6     MOV W6, RPINR29
61:                        RPOR8bits.RP70R=0x1F;           //SDO3 on pin 83
008392  803487     MOV RPOR8, W7
008394  608087     AND W1, W7, W1
008396  21F006     MOV #0x1F00, W6
008398  730301     IOR W6, W1, W6
00839A  883486     MOV W6, RPOR8
62:                        RPINR29bits.SDI3R=0x4C;         //SDI on pin 79, RPI76
00839C  8036D6     MOV RPINR29, W6
00839E  600086     AND W0, W6, W1
0083A0  B304C1     IOR #0x4C, W1
0083A2  8836D1     MOV W1, RPINR29
63:                        RPINR14bits.QEA1R=0x10;         //QEA on pin 22, RPI16
0083A4  B606BC     AND RPINR14, WREG
0083A6  A04000     BSET W0, #4
0083A8  8835E0     MOV W0, RPINR14
64:                        RPINR14bits.QEB1R=0x1B;         //QEB on pin 21, RPI27
0083AA  8035E7     MOV RPINR14, W7
0083AC  628287     AND W5, W7, W5
0083AE  21B000     MOV #0x1B00, W0
0083B0  700005     IOR W0, W5, W0
0083B2  8835E0     MOV W0, RPINR14
65:                	__builtin_write_OSCCONL(OSCCON | (1<<6));       // Lock Registers
0083B4  803A10     MOV OSCCON, W0
0083B6  A06000     BSET W0, #6
0083B8  207421     MOV #0x742, W1
0083BA  784883     MOV.B W3, [W1]
0083BC  784884     MOV.B W4, [W1]
0083BE  784880     MOV.B W0, [W1]
66:                    
67:                    /* PERIPHERAL ENABLE (0) - DISABLE (1) */
68:                    PMD1=PMD2=PMD3=PMD4=PMD6=PMD7=0xFFFF;
0083C0  883B62     MOV W2, PMD7
0083C2  F8076C     PUSH PMD7
0083C4  F9076A     POP PMD6
0083C6  F8076A     PUSH PMD6
0083C8  F90766     POP PMD4
0083CA  F80766     PUSH PMD4
0083CC  F90764     POP PMD3
0083CE  F80764     PUSH PMD3
0083D0  F90762     POP PMD2
0083D2  F80762     PUSH PMD2
0083D4  F90760     POP PMD1
69:                    PMD1bits.AD1MD=0;
0083D6  A90760     BCLR PMD1, #0
70:                    PMD1bits.SPI1MD=0;
0083D8  A96760     BCLR PMD1, #3
71:                    PMD1bits.SPI2MD=0;
0083DA  A98760     BCLR PMD1, #4
72:                    PMD1bits.U1MD=0;
0083DC  A9A760     BCLR PMD1, #5
73:                    PMD1bits.U2MD=0;
0083DE  A9C760     BCLR PMD1, #6
74:                    PMD1bits.DCIMD=0;
0083E0  A90761     BCLR 0x761, #0
75:                    PMD1bits.T1MD=0;
0083E2  A96761     BCLR 0x761, #3
76:                    PMD1bits.T2MD=0;
0083E4  A98761     BCLR 0x761, #4
77:                    PMD1bits.T3MD=0;
0083E6  A9A761     BCLR 0x761, #5
78:                    PMD1bits.T4MD=0;
0083E8  A9C761     BCLR 0x761, #6
79:                    PMD1bits.T5MD=0;
0083EA  A9E761     BCLR 0x761, #7
80:                    PMD3bits.PMPMD=0;
0083EC  A90765     BCLR 0x765, #0
81:                    PMD3bits.CMPMD=0;
0083EE  A94765     BCLR 0x765, #2
82:                    PMD6bits.SPI3MD=0;
0083F0  A9076A     BCLR PMD6, #0
83:                    PMD7bits.DMA0MD=0;  
0083F2  A9876C     BCLR PMD7, #4
84:                }
0083F4  060000     RETURN
85:                
86:                void initUART1(void){
87:                    IFS0bits.U1TXIF = 0;        //clear flag
0083F6  A98801     BCLR 0x801, #4
88:                    IFS0bits.U1RXIF = 0;        //clear flag
0083F8  A96801     BCLR 0x801, #3
89:                    U1STA=0x1510;               //enable tx & rx
0083FA  215100     MOV #0x1510, W0
0083FC  881110     MOV W0, U1STA
90:                    
91:                    U1BRG=BRGVAL;               //baud rate
0083FE  201C10     MOV #0x1C1, W0
008400  881140     MOV W0, U1BRG
92:                    //U1MODEbits.PDSEL=0;         //8 bit data, even parity
93:                    IPC2bits.U1RXIP = 4;        //interrupt priority 3 (low)
008402  28FFF0     MOV #0x8FFF, W0
008404  B60844     AND IPC2, WREG
008406  A0E000     BSET W0, #14
008408  884220     MOV W0, IPC2
94:                    IPC3bits.U1TXIP = 4;        //interrupt priority 3 (low)
00840A  2FFF80     MOV #0xFFF8, W0
00840C  B60846     AND IPC3, WREG
00840E  A02000     BSET W0, #2
008410  884230     MOV W0, IPC3
95:                    IEC0bits.U1TXIE = 1;        //enable tx interrupt
008412  A88821     BSET 0x821, #4
96:                    IEC0bits.U1RXIE = 1;        //enable rx interrupt
008414  A86821     BSET 0x821, #3
97:                    U1MODEbits.UARTEN = 1;      //start uart
008416  A8E221     BSET 0x221, #7
98:                    U1STAbits.UTXEN = 1;
008418  A84223     BSET 0x223, #2
99:                }
00841A  060000     RETURN
100:               
101:               void initADC1(void){ 
102:               
103:                   /* Assign MUXA inputs */
104:                   AD1CON1 = 0x04E4;               // Enable 12-bit mode, auto-sample and auto-conversion
00841C  204E40     MOV #0x4E4, W0
00841E  881900     MOV W0, AD1CON1
105:                   AD1CON2 = 0x0408;               // Sample alternately using channel scanning
008420  B10DC0     SUB #0xDC, W0
008422  881910     MOV W0, AD1CON2
106:                   AD1CON2bits.SMPI=(POTS/2)-1;    // Sample 6 channels
008424  2FF830     MOV #0xFF83, W0
008426  B60322     AND AD1CON2, WREG
008428  B30140     IOR #0x14, W0
00842A  881910     MOV W0, AD1CON2
107:                   AD1CON3 = 0x0F0F;               // Sample for n*TAD before converting
00842C  20F0F0     MOV #0xF0F, W0
00842E  881920     MOV W0, AD1CON3
108:                   AD1CON1bits.FORM=2;             // Signed fractional format 
008430  2FCFF0     MOV #0xFCFF, W0
008432  B60320     AND AD1CON1, WREG
008434  A09000     BSET W0, #9
008436  881900     MOV W0, AD1CON1
109:                   AD1CON3bits.ADCS=0x07;
008438  B3C070     MOV.B #0x7, W0
00843A  B7E324     MOV.B WREG, AD1CON3
110:                   AD1CON3bits.SAMC=0x1F;
00843C  21F000     MOV #0x1F00, W0
00843E  B72324     IOR AD1CON3
111:                   AD1CSSLbits.CSS6=1;             //AN6 in channel scan
008440  A8C330     BSET AD1CSSL, #6
112:                   AD1CSSLbits.CSS7=1;             //AN7 in channel scan
008442  A8E330     BSET AD1CSSL, #7
113:                   AD1CSSLbits.CSS8=1;             //AN8 in channel scan
008444  A80331     BSET 0x331, #0
114:                   AD1CSSLbits.CSS10=1;            //AN10 in channel scan
008446  A84331     BSET 0x331, #2
115:                   AD1CSSHbits.CSS20=1;            //AN20 in channel scan
008448  A8832E     BSET AD1CSSH, #4
116:                   AD1CSSHbits.CSS21=1;            //AN21 in channel scan
00844A  A8A32E     BSET AD1CSSH, #5
117:                   
118:                   /* Enable ADC module and provide ADC stabilization delay */
119:                   AD1CON1bits.ADON = 1;
00844C  A8E321     BSET 0x321, #7
120:                   Delay_us(30);
00844E  2001E0     MOV #0x1E, W0
008450  07FF0E     RCALL Delay_us
121:               }
008452  060000     RETURN
122:               
123:               void initPMP(void){
124:                   /*
125:                    Data is clocked on falling edge of E
126:                    *  RS = 44 = PMAO (H = display data, L = display instruction)
127:                    *  E = 81 = PMWR (pulse width 450ns MIN, data triggers from H to L) 
128:                    */
129:                   PMMODEbits.MODE=3;              // Master mode 1 
008454  203000     MOV #0x300, W0
008456  B72602     IOR PMMODE
130:                   PMCONbits.PTWREN = 1;
008458  A82601     BSET 0x601, #1
131:                   PMCONbits.PTRDEN = 1;
00845A  A80601     BSET 0x601, #0
132:                   PMCONbits.WRSP=1;               // Write strobe active high
00845C  A82600     BSET PMCON, #1
133:                   PMCONbits.RDSP=1;               // Read strobe active high
00845E  A80600     BSET PMCON, #0
134:               
135:                   PMMODEbits.WAITB = 0;
008460  2FF3F0     MOV #0xFF3F, W0
008462  B62602     AND PMMODE
136:                   PMMODEbits.WAITM = 0xC;
008464  2FFC30     MOV #0xFFC3, W0
008466  B60602     AND PMMODE, WREG
008468  B30300     IOR #0x30, W0
00846A  883010     MOV W0, PMMODE
137:                   PMMODEbits.WAITE = 0;
00846C  2FFFC0     MOV #0xFFFC, W0
00846E  B62602     AND PMMODE
138:                   LCD_RS=0;
008470  A9EE45     BCLR 0xE45, #7
139:                   PMCONbits.PMPEN = 1;
008472  A8E601     BSET 0x601, #7
140:                   
141:                   /* INIT DEVICE */
142:                   Delay_us(40000);
008474  29C400     MOV #0x9C40, W0
008476  07FEFB     RCALL Delay_us
143:                   lcdInit();
008478  07F73F     RCALL lcdInit
144:               }
00847A  060000     RETURN
145:               
146:               
147:               //Description: Initializes timer for LED's UART and display
148:               //Prereq: initUART1()
149:               //Frequency: 15Hz
150:               void initT1(void){          //16 bit timer
151:                   TMR1 = 0x0000;          //clear timer 4
00847C  EF2100     CLR TMR1
152:                   T1CONbits.TCKPS = 3;    //prescale 1:256
00847E  200300     MOV #0x30, W0
008480  B72104     IOR T1CON
153:                   T1CONbits.TCS = 0;      //use internal clock
008482  A92104     BCLR T1CON, #1
154:                   T1CONbits.TGATE = 0;    //gate accumulation disabled
008484  A9C104     BCLR T1CON, #6
155:                   PR1 = Fcy/(256*Fdisp);    //period register
008486  269780     MOV #0x6978, W0
008488  880810     MOV W0, PR1
156:                   //PR1=0x7FFF;
157:               
158:                   T1CONbits.TON = 1;      //start timer
00848A  A8E105     BSET 0x105, #7
159:               }
00848C  060000     RETURN
160:               
161:               //Description:  Initializes timer handles polling button input
162:               //Prereq: initADC1() 
163:               //Frequency: 512Hz
164:               void initT2(void){          //16/32 bit timer
165:                   TMR2 = 0x0000;          //clear timer 4
00848E  EF2106     CLR TMR2
166:                   T2CONbits.T32 = 0;      //16 bit mode
008490  A96110     BCLR T2CON, #3
167:                   T2CONbits.TCKPS = 1;    //prescale 1:8
008492  2FFCF0     MOV #0xFFCF, W0
008494  B60110     AND T2CON, WREG
008496  A04000     BSET W0, #4
008498  880880     MOV W0, T2CON
168:                   T2CONbits.TCS = 0;      //use internal clock
00849A  A92110     BCLR T2CON, #1
169:                   T2CONbits.TGATE = 0;    //gate accumulation disabled
00849C  A9C110     BCLR T2CON, #6
170:                   PR2 = Fcy/(8*Fscan);      //period register about 512hz, PR2 = 0x3938 
00849E  2A8C00     MOV #0xA8C0, W0
0084A0  880860     MOV W0, PR2
171:               
172:                   T2CONbits.TON = 1;      //start timer
0084A2  A8E111     BSET 0x111, #7
173:               }
0084A4  060000     RETURN
174:               
175:               //Description: Initialize timer handling LCD sending
176:               //Frequency: variable depending on lcd latency values in datasheet
177:               void initT3(void){          //16/32 bit timer
178:                   TMR3 = 0x0000;          //clear timer 3
0084A6  EF210A     CLR TMR3
179:                   T3CONbits.TCKPS = 1;    //prescale 8:1
0084A8  2FFCF0     MOV #0xFFCF, W0
0084AA  B60112     AND T3CON, WREG
0084AC  A04000     BSET W0, #4
0084AE  880890     MOV W0, T3CON
180:                   T3CONbits.TCS = 0;      //use internal clock
0084B0  A92112     BCLR T3CON, #1
181:                   T3CONbits.TGATE = 0;    //gate accumulation disabled
0084B2  A9C112     BCLR T3CON, #6
182:                   //PR3 = Fcy/(256*T3freq);           //period register
183:                   PR3 = 0x01D0;           //45uS initial delay
0084B4  201D00     MOV #0x1D0, W0
0084B6  880870     MOV W0, PR3
184:                   
185:                   T3CONbits.TON = 1;
0084B8  A8E113     BSET 0x113, #7
186:                   
187:               }
0084BA  060000     RETURN
188:               
189:               void initT5() 
190:               {
191:                       TMR5 = 0x0000;
0084BC  EF2118     CLR TMR5
192:                       PR5 = 4999;
0084BE  213870     MOV #0x1387, W0
0084C0  8808E0     MOV W0, PR5
193:                       T5CONbits.TCKPS = 2;    //prescale 8:1
0084C2  2FFCF0     MOV #0xFFCF, W0
0084C4  B60120     AND T5CON, WREG
0084C6  A05000     BSET W0, #5
0084C8  880900     MOV W0, T5CON
194:                       IFS1bits.T5IF = 0;
0084CA  A98803     BCLR 0x803, #4
195:                       IEC1bits.T5IE = 0;
0084CC  A98823     BCLR 0x823, #4
196:               
197:                       //Start Timer 3
198:                       T5CONbits.TON = 1;
0084CE  A8E121     BSET 0x121, #7
199:               
200:               }
0084D0  060000     RETURN
201:               
202:               //Description: Initializes & starts 16 bit DCI I2S DAC
203:               //Prereq: initSPI_ADC(void)
204:               void initDCI_DAC(void){
205:                   DCICON3bits.BCG=(Fcy/(64*Fout)-1);  // Calculate baud rate (WILL TRUNCATE)
0084D2  2F0000     MOV #0xF000, W0
0084D4  B60284     AND DCICON3, WREG
0084D6  B30170     IOR #0x17, W0
0084D8  881420     MOV W0, DCICON3
206:                   DCICON1bits.COFSM=1;                // I2S mode
0084DA  2FFFC0     MOV #0xFFFC, W0
0084DC  B60280     AND DCICON1, WREG
0084DE  A00000     BSET W0, #0
0084E0  881400     MOV W0, DCICON1
207:                   DCICON1bits.CSCKE=1;                // Sample on rising edge
0084E2  A82281     BSET 0x281, #1
208:                   DCICON2bits.WS=0xF;                 // 16 bit data word
0084E4  2000F0     MOV #0xF, W0
0084E6  B72282     IOR DCICON2
209:                   DCICON2bits.COFSG=0;                // Data frame has 1 word (per frame)
0084E8  2FE1F0     MOV #0xFE1F, W0
0084EA  B62282     AND DCICON2
210:                   DCICON1bits.DJST=0;                 // Align data
0084EC  A9A280     BCLR DCICON1, #5
211:                   DCICON2bits.BLEN=3;                 // 4 words buffer btwn interrupts
0084EE  20C000     MOV #0xC00, W0
0084F0  B72282     IOR DCICON2
212:                   
213:                   TSCONbits.TSE0 = 1;                 // Transmit on Time Slot 0     
0084F2  A80288     BSET TSCON, #0
214:                   TSCONbits.TSE1 = 1;                 // Transmit on Time Slot 1   
0084F4  A82288     BSET TSCON, #1
215:                   TSCONbits.TSE2 = 1;                 // Transmit on Time Slot 2     
0084F6  A84288     BSET TSCON, #2
216:                   TSCONbits.TSE3 = 1;                 // Transmit on Time Slot 3   
0084F8  A86288     BSET TSCON, #3
217:                   RSCONbits.RSE0 = 1;                 // Rcv on Time Slot 0     
0084FA  A8028C     BSET RSCON, #0
218:                   RSCONbits.RSE1 = 1;                 // Rcv on Time Slot 1 
0084FC  A8228C     BSET RSCON, #1
219:                   RSCONbits.RSE2 = 1;                 // Rcv on Time Slot 2     
0084FE  A8428C     BSET RSCON, #2
220:                   RSCONbits.RSE3 = 1;                 // Rcv on Time Slot 3 
008500  A8628C     BSET RSCON, #3
221:                   
222:                   IPC15bits.DCIIP = 5;                // Interrput priority
008502  2FFF80     MOV #0xFFF8, W0
008504  B6085E     AND IPC15, WREG
008506  B30050     IOR #0x5, W0
008508  8842F0     MOV W0, IPC15
223:                   IFS3bits.DCIIF=0;
00850A  A98807     BCLR 0x807, #4
224:                   IEC3bits.DCIIE=1;                   // =0 if letting dma handle interrupt
00850C  A88827     BSET 0x827, #4
225:                   
226:                   TXBUF0=0;                           // Pre-load send registers.
00850E  EF2298     CLR TXBUF0
227:                   TXBUF1=0;   
008510  EF229A     CLR TXBUF1
228:                   TXBUF2=0;
008512  EF229C     CLR TXBUF2
229:                   TXBUF3=0;
008514  EF229E     CLR TXBUF3
230:                   DCICON1bits.DCIEN=1;                // ENABLE
008516  A8E281     BSET 0x281, #7
231:                   Delay_us(20);                       // Stabilization delay
008518  200140     MOV #0x14, W0
00851A  07FEA9     RCALL Delay_us
232:               }
00851C  060000     RETURN
233:               
234:               void initDMA(void){
235:                   /* RX */
236:                   IFS0bits.DMA1IF = 0;
00851E  A9C801     BCLR 0x801, #6
237:                   IEC0bits.DMA1IE = 1;
008520  A8C821     BSET 0x821, #6
238:                   IPC3bits.DMA1IP = 6;
008522  2F8FF1     MOV #0xF8FF, W1
008524  804230     MOV IPC3, W0
008526  608080     AND W1, W0, W1
008528  206000     MOV #0x600, W0
00852A  700001     IOR W0, W1, W0
00852C  884230     MOV W0, IPC3
239:                   DMA1CONbits.SIZE=1;                             // Byte size
00852E  A8CB11     BSET 0xB11, #6
240:                   DMA1CONbits.DIR=0;                              // Read from flash
008530  A9AB11     BCLR 0xB11, #5
241:                   DMA1CONbits.MODE=1;                             // One shot, ping pong
008532  2FFFC3     MOV #0xFFFC, W3
008534  805881     MOV DMA1CON, W1
008536  618001     AND W3, W1, W0
008538  A00000     BSET W0, #0
00853A  885880     MOV W0, DMA1CON
242:                   //DMA1CONbits.NULLW=1;                          // NULL WRITE (debug))
243:                   DMA1STAL = (unsigned int)(&RxBufferA);
00853C  212000     MOV #0x1200, W0
00853E  8858A0     MOV W0, DMA1STAL
244:                   //DMA1STAH = (unsigned int)(&RxBufferB);
245:                   DMA1PAD = (volatile unsigned int) &SPI3BUF;
008540  202A82     MOV #0x2A8, W2
008542  8858E2     MOV W2, DMA1PAD
246:                   DMA1CNT = (unsigned int)(FLASH_DMAXFER_BYTES-1);
008544  201FF1     MOV #0x1FF, W1
008546  8858F1     MOV W1, DMA1CNT
247:                   DMA1REQbits.IRQSEL = 0x5B;
008548  B3C5B0     MOV.B #0x5B, W0
00854A  B7EB12     MOV.B WREG, DMA1REQ
248:                   DMA1CONbits.CHEN = 0;
00854C  A9EB11     BCLR 0xB11, #7
249:                   
250:                   
251:                   /* TX */
252:                   IFS0bits.DMA0IF = 0;
00854E  A98800     BCLR IFS0, #4
253:                   IEC0bits.DMA0IE = 1;
008550  A88820     BSET IEC0, #4
254:                   IPC1bits.DMA0IP = 6;
008552  2FFF84     MOV #0xFFF8, W4
008554  804215     MOV IPC1, W5
008556  620205     AND W4, W5, W4
008558  B30064     IOR #0x6, W4
00855A  884214     MOV W4, IPC1
255:                   DMAPWC = 0;
00855C  EF2BF0     CLR DMAPWC
256:                   DMA0CONbits.SIZE=1;                             // Byte size
00855E  A8CB01     BSET 0xB01, #6
257:                   DMA0CONbits.DIR=1;                              // Write to flash
008560  A8AB01     BSET 0xB01, #5
258:                   DMA0CONbits.MODE=1;                             // One shot, ping pong
008562  805804     MOV DMA0CON, W4
008564  618184     AND W3, W4, W3
008566  A00003     BSET W3, #0
008568  885803     MOV W3, DMA0CON
259:                   DMA0STAL = (unsigned int)(&TxBufferA);
00856A  210003     MOV #0x1000, W3
00856C  885823     MOV W3, DMA0STAL
260:                   //DMA0STAH = (unsigned int)(&TxBufferB);
261:                   DMA0PAD = (volatile unsigned int) &SPI3BUF;
00856E  885862     MOV W2, DMA0PAD
262:                   DMA0CNT = (unsigned int)(FLASH_DMAXFER_BYTES-1);
008570  885871     MOV W1, DMA0CNT
263:                   DMA0REQbits.IRQSEL = 0x5B;
008572  B7EB02     MOV.B WREG, DMA0REQ
264:                   DMA0CONbits.CHEN = 0;
008574  A9EB01     BCLR 0xB01, #7
265:               }
008576  060000     RETURN
266:               
267:               void initSPI3_MEM(void){
268:                   SS3a=SS3b=1;
008578  A8EE35     BSET 0xE35, #7
00857A  8071A0     MOV LATD, W0
00857C  DE004F     LSR W0, #15, W0
00857E  400000     ADD W0, W0, W0
008580  8072A1     MOV LATF, W1
008582  A11001     BCLR W1, #1
008584  700081     IOR W0, W1, W1
008586  8872A1     MOV W1, LATF
269:                   FLASHCLK=0;
008588  A92E25     BCLR 0xE25, #1
270:                   
271:                   IFS5bits.SPI3IF = 0;        // Clear the Interrupt flag
00858A  A9680B     BCLR 0x80B, #3
272:                   IEC5bits.SPI3IE = 0;        // Disable the interrupt
00858C  A9682B     BCLR 0x82B, #3
273:                   SPI3CON1bits.MSTEN=1;       // Master mode
00858E  A8A2A2     BSET SPI3CON1, #5
274:                   SPI3CON1bits.DISSCK = 0;    // Internal serial clock is enabled
008590  A982A3     BCLR 0x2A3, #4
275:                   SPI3CON1bits.MODE16=0;      // 8 bitBuffer
008592  A942A3     BCLR 0x2A3, #2
276:                   SPI3CON1bits.DISSDO=0;      // Enable SDO 
008594  A962A3     BCLR 0x2A3, #3
277:                   SPI3CON2bits.FRMEN=0;       // No enable framed mode
008596  A9E2A5     BCLR 0x2A5, #7
278:                   SPI3CON2bits.SPIBEN=0;      // Enhanced buffer mode
008598  A902A4     BCLR SPI3CON2, #0
279:                   
280:                   SPI3CON1bits.SMP=1;         // Data sampled at end of output time
00859A  A822A3     BSET 0x2A3, #1
281:                   SPI3CON1bits.CKP=0;         // Idle clock is high
00859C  A9C2A2     BCLR SPI3CON1, #6
282:                   SPI3CON1bits.CKE=1;         // Data changes from H to L
00859E  A802A3     BSET 0x2A3, #0
283:                   
284:                   SPI3CON1bits.PPRE=2;        // 1:1 primary prescale (3) (1))
0085A0  2FFFC0     MOV #0xFFFC, W0
0085A2  B602A2     AND SPI3CON1, WREG
0085A4  A01000     BSET W0, #1
0085A6  881510     MOV W0, SPI3CON1
285:                   SPI3CON1bits.SPRE=6;        // 2:1 secondary (6) (6)) )
0085A8  2FFE30     MOV #0xFFE3, W0
0085AA  B602A2     AND SPI3CON1, WREG
0085AC  B30180     IOR #0x18, W0
0085AE  881510     MOV W0, SPI3CON1
286:                   
287:                   SPI3STATbits.SPIROV = 0;    // Clear SPI1 receive overflow flag if set
0085B0  A9C2A0     BCLR SPI3STAT, #6
288:                   SPI3STATbits.SPIEN = 1;     // Start SPI module
0085B2  A8E2A1     BSET 0x2A1, #7
289:                   //IEC5bits.SPI3IE = 0;      // Enable the Interrupt   
290:                   
291:                   flashSoftSetup();           // Set up flash memory map
0085B4  07FA05     RCALL flashSoftSetup
292:                   
293:                   flashWriteBreg(0x80);            // 4 byte addressing
0085B6  B3C800     MOV.B #0x80, W0
0085B8  07FA71     RCALL flashWriteBreg
294:               }
0085BA  060000     RETURN
295:               
296:               /* Quadradure Encoder */
297:               void initQEI_ENC(void){
298:                   QEI1CONbits.INTDIV=6;       // 1:64 prescaler
0085BC  2FF8F0     MOV #0xFF8F, W0
0085BE  B601C0     AND QEI1CON, WREG
0085C0  B30600     IOR #0x60, W0
0085C2  880E00     MOV W0, QEI1CON
299:                   QEI1IOCbits.FLTREN=1;       // Enable input filter
0085C4  A8C1C3     BSET 0x1C3, #6
300:                   QEI1CONbits.QEIEN=1;        // Enable Quad encoder inteface
0085C6  A8E1C1     BSET 0x1C1, #7
301:               }
0085C8  060000     RETURN
302:               
---  C:/Users/ryan/Documents/seniorproject/ps-040/audio.c  ----------------------------------------------
1:                 #include "xc.h"
2:                 #include "audio.h"
3:                 #include "common.h"
4:                 #include "sounds.h"
5:                 #include <dsp.h>
6:                 #include "utilities.h"
7:                 #include "flash.h"
8:                 
9:                 extern unsigned char    TxBufferA[FLASH_DMAXFER_BYTES]__attribute__((space(xmemory))), 
10:                                        RxBufferA[FLASH_DMAXFER_BYTES]__attribute__((space(xmemory)));
11:                extern fractional       RxBufferB[STREAMBUF] __attribute__((space(xmemory)));
12:                
13:                extern fractional sintab[SINRES];
14:                static fractional loopbuf[LOOP_BUF_SIZE] __attribute__ ((eds)) = {0};
15:                
16:                
17:                fractional lpf_alpha=Q15(0.5), lpf_inv_alpha=Q15(0.5);
18:                static fractional psvbuf[STREAMBUF]={0};
19:                
20:                extern enum fxStruct fxUnits[NUMFXUNITS];
21:                extern struct clip_psv sine, kick, snare;
22:                extern struct sflags stat;
23:                extern struct ctrlsrfc ctrl;
24:                struct clip_eds history = { .size = LOOP_BUF_SIZE,
25:                                            .blocks=LOOP_BUF_SIZE/STREAMBUF, 
26:                                            .playing=FALSE, .flash=FALSE, 
27:                                            .block_index=0, 
28:                                            .start_ptr=loopbuf, 
29:                                            .end_ptr=&loopbuf[LOOP_BUF_SIZE-1], 
30:                                            .read_ptr=loopbuf};
31:                
32:                
33:                void (*fxFuncPointers[NUMFX])(fractional *, fractional *, fractional, fractional, fractional) = {NULL, runLPF, runTRM, runLOP, runBTC};
34:                
35:                void runBufferLooper(fractional *source){
0087BA  FA0002     LNK #0x2
0087BC  BE9F88     MOV.D W8, [W15++]
0087C0  BE0300     MOV.D W0, W6
0087C2  B02006     ADD #0x200, W6
0087C4  B08007     ADDC #0x0, W7
36:                    volatile fractional sample;
37:                    unsigned int loop_ptr = 0;
0087C6  EB0100     CLR W2
38:                    
39:                    int *readPTR=source;
40:                    
41:                    int counter=0;
42:                    for(; counter<STREAMBUF; counter++){
0087EC  500F86     SUB W0, W6, [W15]
0087EE  588F87     SUBB W1, W7, [W15]
0087F0  3AFFEE     BRA NZ, 0x87CE
43:                        sample=*readPTR++; //!rw
0087CE  780290     MOV [W0], W5
0087D0  9FBFD5     MOV W5, [W15-6]
44:                        if(loop_ptr<LOOP_BUF_SIZE)
0087C8  243FF4     MOV #0x43FF, W4
0087D2  510F84     SUB W2, W4, [W15]
0087D4  3E0006     BRA GTU, 0x87E2
45:                            loopbuf[loop_ptr++]=sample;
0087D6  D00282     SL W2, W5
0087D8  428283     ADD W5, W3, W5
0087DA  97BCDF     MOV [W15-6], W9
0087DC  780A89     MOV W9, [W5]
0087DE  E80102     INC W2, W2
0087E0  370003     BRA 0x87E8
46:                        else {
47:                            loop_ptr=0;
48:                            loopbuf[loop_ptr++]=sample;
0087BE  EB0080     CLR W1
0087CA  248003     MOV #0x4800, W3
0087CC  200018     MOV #0x1, W8
0087E2  97B95F     MOV [W15-6], W2
0087E4  780982     MOV W2, [W3]
0087E6  780108     MOV W8, W2
0087E8  400062     ADD W0, #0x2, W0
0087EA  4880E0     ADDC W1, #0x0, W1
49:                        }
50:                    }
51:                }
0087F2  BE044F     MOV.D [--W15], W8
0087F4  FA8000     ULNK
0087F6  060000     RETURN
52:                
53:                void runLPF(fractional *source, fractional *destination, fractional param1, fractional param2, fractional param3){
008762  FA0002     LNK #0x2
008764  F80022     PUSH ACCA
008766  F80024     PUSH ACCAH
008768  F80026     PUSH ACCAU
008782  BE0302     MOV.D W2, W6
008784  B02006     ADD #0x200, W6
008786  B08007     ADDC #0x0, W7
54:                    volatile register int result asm("A");
55:                    static fractional delayed_sample;
56:                    volatile fractional sample;
57:                    if(param3>=0x3FFF){     //LPF CONTROL
00876A  23FFE3     MOV #0x3FFE, W3
00876C  520F83     SUB W4, W3, [W15]
00876E  340020     BRA LE, 0x87B0
58:                        if(param1>=310){                      
008770  201353     MOV #0x135, W3
008772  510F83     SUB W2, W3, [W15]
008774  340004     BRA LE, 0x877E
59:                            lpf_alpha=param1;
008776  88B112     MOV W2, 0x1622
60:                            lpf_inv_alpha=(32767-lpf_alpha); 
008778  27FFF3     MOV #0x7FFF, W3
00877A  518102     SUB W3, W2, W2
00877C  88B122     MOV W2, 0x1624
00877E  B80161     MUL.UU W0, #1, W2
008780  B80861     MUL.UU W1, #1, W0
61:                        }
62:                
63:                
64:                        int *readPTR=source;
65:                        int *rewritePTR=destination;
66:                
67:                
68:                        int counter=0;
69:                        for(; counter<STREAMBUF; counter++){
0087AA  510F86     SUB W2, W6, [W15]
0087AC  598F87     SUBB W3, W7, [W15]
0087AE  3AFFEC     BRA NZ, 0x8788
70:                            sample=*readPTR++; //!rw
008788  780212     MOV [W2], W4
00878A  9FBFC4     MOV W4, [W15-8]
71:                
72:                            //LPF-EMA//   y(i)= ??x(i)+(1-?)?y(i-1)
73:                            result =__builtin_mpy(sample,lpf_alpha, NULL, NULL, 0, NULL, NULL, 0);
00878C  97BA4F     MOV [W15-8], W4
00878E  80B115     MOV 0x1622, W5
008790  C00113     MPY W4*W5, A
74:                            result =__builtin_mac(result, delayed_sample, lpf_inv_alpha, NULL, NULL, 0, NULL, NULL, 0, 0, result);
008792  80B124     MOV 0x1624, W4
008794  80B0B5     MOV delayed_sample, W5
008796  C00112     MAC W4*W5, A
75:                            delayed_sample=__builtin_sac(result, 0);
008798  CC0004     SAC A, W4
00879A  88B0B4     MOV W4, delayed_sample
76:                            sample=delayed_sample;
00879C  9FBFC4     MOV W4, [W15-8]
77:                
78:                            *rewritePTR++=sample; //rw
00879E  97BA4F     MOV [W15-8], W4
0087A0  780804     MOV W4, [W0]
0087A2  410162     ADD W2, #0x2, W2
0087A4  4981E0     ADDC W3, #0x0, W3
0087A6  400062     ADD W0, #0x2, W0
0087A8  4880E0     ADDC W1, #0x0, W1
79:                        }
80:                    }
81:                    
82:                }
0087B0  F90026     POP ACCAU
0087B2  F90024     POP ACCAH
0087B4  F90022     POP ACCA
0087B6  FA8000     ULNK
0087B8  060000     RETURN
83:                
84:                void runTRM(fractional *source, fractional *destination, fractional param1, fractional param2, fractional param3){
0085CA  4787E6     ADD W15, #0x6, W15
0085CC  BE9F88     MOV.D W8, [W15++]
0085CE  BE9F8A     MOV.D W10, [W15++]
0085D0  BE9F8C     MOV.D W12, [W15++]
0085D2  781F8E     MOV W14, [W15++]
0085D4  F80022     PUSH ACCA
0085D6  F80024     PUSH ACCAH
0085D8  F80026     PUSH ACCAU
0085DA  F80028     PUSH ACCB
0085DC  F8002A     PUSH ACCBH
0085DE  F8002C     PUSH ACCBU
0085E0  780283     MOV W3, W5
0085FA  BE0402     MOV.D W2, W8
0085FC  B02008     ADD #0x200, W8
0085FE  B08009     ADDC #0x0, W9
85:                    volatile register int result1 asm("A");
86:                    volatile register int result2 asm("B");
87:                    volatile fractional sample, trem_mod;
88:                    int *readPTR=source;
89:                    int *rewritePTR=destination;
90:                    int counter=0;
91:                    static unsigned int trem_delay=0, tremelo_ptr=0;
92:                    const int pot_offset = 5;
93:                    
94:                    if(param3>=0x3FFF){     // TREM CONTROL
0085E2  23FFE3     MOV #0x3FFE, W3
0085E4  520F83     SUB W4, W3, [W15]
0085E6  34004A     BRA LE, 0x867C
95:                        result1 =__builtin_mpy(param1,Q15(0.0006), NULL, NULL, 0, NULL, NULL, 0);
0085E8  780202     MOV W2, W4
0085EA  200146     MOV #0x14, W6
0085EC  C10113     MPY W4*W6, A
96:                        param1=__builtin_sac(result1, 0);
0085EE  CC0006     SAC A, W6
97:                        if(param2<-0x7) param2=0;
0085F0  428FE7     ADD W5, #0x7, [W15]
0085F2  3D0001     BRA GE, 0x85F6
0085F4  EB0280     CLR W5
0085F6  B80961     MUL.UU W1, #1, W2
0085F8  EB0080     CLR W1
98:                        
99:                        for(; counter<STREAMBUF; counter++){
008676  510F88     SUB W2, W8, [W15]
008678  598F89     SUBB W3, W9, [W15]
00867A  3AFFC7     BRA NZ, 0x860A
100:                           sample=*readPTR++; //!rw
00860A  780390     MOV [W0], W7
00860C  9FB797     MOV W7, [W15-30]
101:                                                                          //TREMELO//
102:                           if (trem_delay<=param1+pot_offset){
008600  430365     ADD W6, #0x5, W6
00860E  80B0A4     MOV trem_delay, W4
008610  530F84     SUB W6, W4, [W15]
008612  390013     BRA NC, 0x863A
103:                               trem_delay++;
008614  E80204     INC W4, W4
008616  88B0A4     MOV W4, trem_delay
104:                               result1 =__builtin_mpy(param2,sintab[tremelo_ptr], NULL, NULL, 0, NULL, NULL, 0);
008618  80B094     MOV tremelo_ptr, W4
00861A  D00204     SL W4, W4
00861C  42020A     ADD W4, W10, W4
00861E  780214     MOV [W4], W4
008620  C00113     MPY W4*W5, A
105:                               trem_mod=__builtin_sac(result1, 0);
008622  CC0004     SAC A, W4
008624  9FB7A4     MOV W4, [W15-28]
106:                               trem_mod=0x7FF0-trem_mod;
008626  97B22F     MOV [W15-28], W4
008628  570204     SUB W14, W4, W4
00862A  9FB7A4     MOV W4, [W15-28]
107:                               result2 =__builtin_mpy(trem_mod,sample, NULL, NULL, 0, NULL, NULL, 0);
00862C  97B69F     MOV [W15-30], W13
00862E  97B3AF     MOV [W15-28], W7
008630  78020D     MOV W13, W4
008632  C28113     MPY W4*W7, B
108:                               sample=__builtin_sac(result2, 0);
008634  CC8007     SAC B, W7
008636  9FB797     MOV W7, [W15-30]
008638  370018     BRA 0x866A
109:                           }
110:                           else{
111:                               trem_delay=0;
008602  EB0580     CLR W11
00863A  88B0AB     MOV W11, trem_delay
112:                               if(tremelo_ptr==1024)
008604  20400C     MOV #0x400, W12
00863C  80B094     MOV tremelo_ptr, W4
00863E  520F8C     SUB W4, W12, [W15]
008640  3A0002     BRA NZ, 0x8646
113:                                   tremelo_ptr=0;
008642  88B09B     MOV W11, tremelo_ptr
008644  370002     BRA 0x864A
114:                               else tremelo_ptr++;
008646  E80204     INC W4, W4
008648  88B094     MOV W4, tremelo_ptr
115:                               
116:                               result1 =__builtin_mpy(param2,sintab[tremelo_ptr], NULL, NULL, 0, NULL, NULL, 0);
008606  2E374A     MOV #0xE374, W10
00864A  80B094     MOV tremelo_ptr, W4
00864C  D00204     SL W4, W4
00864E  42020A     ADD W4, W10, W4
008650  780214     MOV [W4], W4
008652  C00113     MPY W4*W5, A
117:                               trem_mod=__builtin_sac(result1, 0);
008654  CC0004     SAC A, W4
008656  9FB7A4     MOV W4, [W15-28]
118:                               trem_mod=0x7FF0-trem_mod;
008608  27FF0E     MOV #0x7FF0, W14
008658  97B22F     MOV [W15-28], W4
00865A  570204     SUB W14, W4, W4
00865C  9FB7A4     MOV W4, [W15-28]
119:                               result2 =__builtin_mpy(trem_mod,sample, NULL, NULL, 0, NULL, NULL, 0);
00865E  97B69F     MOV [W15-30], W13
008660  97B22F     MOV [W15-28], W4
008662  78038D     MOV W13, W7
008664  C28113     MPY W4*W7, B
120:                               sample=__builtin_sac(result2, 0);
008666  CC8004     SAC B, W4
008668  9FB794     MOV W4, [W15-30]
121:                           }
122:               
123:                           *rewritePTR++=sample; //rw
00866A  97B39F     MOV [W15-30], W7
00866C  780907     MOV W7, [W2]
00866E  410162     ADD W2, #0x2, W2
008670  4981E0     ADDC W3, #0x0, W3
008672  400062     ADD W0, #0x2, W0
008674  4880E0     ADDC W1, #0x0, W1
124:                       }
125:                   }
126:               }
00867C  F9002C     POP ACCBU
00867E  F9002A     POP ACCBH
008680  F90028     POP ACCB
008682  F90026     POP ACCAU
008684  F90024     POP ACCAH
008686  F90022     POP ACCA
008688  78074F     MOV [--W15], W14
00868A  BE064F     MOV.D [--W15], W12
00868C  BE054F     MOV.D [--W15], W10
00868E  BE044F     MOV.D [--W15], W8
008690  B1006F     SUB #0x6, W15
008692  060000     RETURN
127:               
128:               void runBTC(fractional *source, fractional *destination, fractional param1, fractional param2, fractional param3){
008714  FA0002     LNK #0x2
008716  BE9F88     MOV.D W8, [W15++]
008718  BE9F8A     MOV.D W10, [W15++]
00871A  780480     MOV W0, W9
00871C  780501     MOV W1, W10
00871E  780082     MOV W2, W1
008720  780404     MOV W4, W8
008730  BE0200     MOV.D W0, W4
008732  B02004     ADD #0x200, W4
008734  B08005     ADDC #0x0, W5
129:                   volatile fractional sample;
130:                   
131:                   int *readPTR=source;
132:                   int *rewritePTR=destination;
133:                   int counter=0;
134:                   int shift = scalePotsCustom(14, param1);
008722  2000E0     MOV #0xE, W0
008724  07FCF6     RCALL scalePotsCustom
135:                   fractional sign;
136:                   
137:                   for(; counter<STREAMBUF; counter++){
008754  500F84     SUB W0, W4, [W15]
008756  588F85     SUBB W1, W5, [W15]
008758  3AFFEF     BRA NZ, 0x8738
138:                       sample=*readPTR++; //!rw
008738  780310     MOV [W0], W6
00873A  9FBFB6     MOV W6, [W15-10]
139:                       
140:                       if(param3>=0x3FFF){     // BIT CONTROL
008736  23FFE2     MOV #0x3FFE, W2
00873C  540F82     SUB W8, W2, [W15]
00873E  340004     BRA LE, 0x8748
141:                           sign = sample&0x8000;
008740  97BB3F     MOV [W15-10], W6
142:                           sample=sample&(-1<<(16-shift));
008726  100070     SUBR W0, #0x10, W0
008728  EB8180     SETM W3
00872A  DD1980     SL W3, W0, W3
00872C  B84861     MUL.UU W9, #1, W0
00872E  EB0580     CLR W11
008742  97BB3F     MOV [W15-10], W6
008744  618306     AND W3, W6, W6
008746  9FBFB6     MOV W6, [W15-10]
143:                       }
144:               
145:                       *rewritePTR++=sample; //rw
008748  97BB3F     MOV [W15-10], W6
00874A  780D06     MOV W6, [W10]
00874C  400062     ADD W0, #0x2, W0
00874E  4880E0     ADDC W1, #0x0, W1
008750  450562     ADD W10, #0x2, W10
008752  4D85E0     ADDC W11, #0x0, W11
146:                   }
147:               }
00875A  BE054F     MOV.D [--W15], W10
00875C  BE044F     MOV.D [--W15], W8
00875E  FA8000     ULNK
008760  060000     RETURN
148:               
149:               void runLOP(fractional *source, fractional *destination, fractional param1, fractional param2, fractional param3){
008694  F80022     PUSH ACCA
008696  F80024     PUSH ACCAH
008698  F80026     PUSH ACCAU
150:                   volatile register int result asm("A");
151:                   
152:                   result =__builtin_mpy(param1, POT_LOOP, NULL, NULL, 0, NULL, NULL, 0);
00869A  780282     MOV W2, W5
00869C  244006     MOV #0x4400, W6
00869E  C40113     MPY W5*W6, A
153:                   int loop_lim = __builtin_sac(result, 0);
0086A0  CC0002     SAC A, W2
154:                   
155:                   __eds__ fractional *ptrr = history.start_ptr;
0086A2  8121E6     MOV 0x243C, W6
0086A4  8121F7     MOV 0x243E, W7
156:                   ptrr+=loop_lim;
0086A6  DE91CF     ASR W2, #15, W3
0086A8  410102     ADD W2, W2, W2
0086AA  498183     ADDC W3, W3, W3
0086AC  D28F82     RLC W2, [W15]
0086AE  D28183     RLC W3, W3
0086B0  780102     MOV W2, W2
0086B2  A1F002     BCLR W2, #15
0086B4  D00006     SL W6, W0
0086B6  D00282     SL W2, W5
0086B8  400105     ADD W0, W5, W2
0086BA  A82042     BSET SR, #1
0086BC  4B8183     ADDC W7, W3, W3
0086BE  A90042     BCLR SR, #0
0086C0  AE2042     BTSS SR, #1
0086C2  A80042     BSET SR, #0
0086C4  D38102     RRC W2, W2
157:                   
158:                   //Run looper Buffer
159:                   if(history.read_ptr>=(ptrr)) {
0086C6  224440     MOV #0x2444, W0
0086C8  900290     MOV [W0+2], W5
0086CA  528F83     SUB W5, W3, [W15]
0086CC  390005     BRA NC, 0x86D8
0086CE  3A0002     BRA NZ, 0x86D4
0086D0  110F90     SUBR W2, [W0], [W15]
0086D2  390002     BRA NC, 0x86D8
160:                       history.read_ptr=history.start_ptr;
0086D4  892226     MOV W6, 0x2444
0086D6  892237     MOV W7, 0x2446
161:                   }
162:                   if(param3<0x3FFF){
0086D8  23FFE0     MOV #0x3FFE, W0
0086DA  520F80     SUB W4, W0, [W15]
0086DC  3C0005     BRA GT, 0x86E8
163:                       ClipCopy_toeds(STREAMBUF, history.read_ptr, destination);
0086DE  812222     MOV 0x2444, W2
0086E0  812233     MOV 0x2446, W3
0086E2  201000     MOV #0x100, W0
0086E4  07FDAD     RCALL ClipCopy_toeds
0086E6  370004     BRA 0x86F0
164:                   }
165:                   
166:                   else {
167:                       ClipCopy_eds(STREAMBUF, destination, history.read_ptr);
0086E8  812222     MOV 0x2444, W2
0086EA  812233     MOV 0x2446, W3
0086EC  201000     MOV #0x100, W0
0086EE  07FD8F     RCALL ClipCopy_eds
168:                   }
169:                   history.read_ptr+=STREAMBUF;
0086F0  224440     MOV #0x2444, W0
0086F2  BE0210     MOV.D [W0], W4
0086F4  202002     MOV #0x200, W2
0086F6  200003     MOV #0x0, W3
0086F8  D00304     SL W4, W6
0086FA  D00082     SL W2, W1
0086FC  430101     ADD W6, W1, W2
0086FE  A82042     BSET SR, #1
008700  4A8183     ADDC W5, W3, W3
008702  A90042     BCLR SR, #0
008704  AE2042     BTSS SR, #1
008706  A80042     BSET SR, #0
008708  D38102     RRC W2, W2
00870A  BE8802     MOV.D W2, [W0]
170:               }
00870C  F90026     POP ACCAU
00870E  F90024     POP ACCAH
008710  F90022     POP ACCA
008712  060000     RETURN
171:               
172:               void processAudio(fractional *source, fractional *destination){
0087F8  BE9F88     MOV.D W8, [W15++]
0087FA  BE0400     MOV.D W0, W8
173:                   volatile register int result1 asm("A");
174:                   
175:                   
176:                   //Run each FX unit
177:                   if(fxUnits[0]==0); else fxFuncPointers[fxUnits[0]](source, source, ctrl.pots[FX_1], ctrl.pots[FX_2], ctrl.pots[FX_3]);
0087FC  80B060     MOV fxUnits, W0
0087FE  E00000     CP0 W0
008800  32000A     BRA Z, 0x8816
008802  D00000     SL W0, W0
008804  224481     MOV #0x2448, W1
008806  400001     ADD W0, W1, W0
008808  780290     MOV [W0], W5
00880A  80B314     MOV 0x1662, W4
00880C  80B2F3     MOV 0x165E, W3
00880E  80B2D2     MOV 0x165A, W2
008810  780088     MOV W8, W1
008812  780008     MOV W8, W0
008814  010005     CALL W5
178:                   if(fxUnits[1]==0); else fxFuncPointers[fxUnits[1]](source, source, ctrl.pots[FX_4], ctrl.pots[FX_5], ctrl.pots[FX_6]);
008816  80B070     MOV 0x160E, W0
008818  E00000     CP0 W0
00881A  32000A     BRA Z, 0x8830
00881C  D00000     SL W0, W0
00881E  224481     MOV #0x2448, W1
008820  400001     ADD W0, W1, W0
008822  780290     MOV [W0], W5
008824  80B324     MOV 0x1664, W4
008826  80B303     MOV 0x1660, W3
008828  80B2E2     MOV 0x165C, W2
00882A  780088     MOV W8, W1
00882C  780008     MOV W8, W0
00882E  010005     CALL W5
179:                  
180:                   if(kick.playing==TRUE){
008830  224180     MOV #0x2418, W0
008832  EBC080     SETM.B W1
008834  10CF90     SUBR.B W1, [W0], [W15]
008836  3A001F     BRA NZ, 0x8876
181:                       ClipCopy_psv(STREAMBUF, psvbuf, kick.read_ptr);
008838  812102     MOV 0x2420, W2
00883A  812113     MOV 0x2422, W3
00883C  220A41     MOV #0x20A4, W1
00883E  201000     MOV #0x100, W0
008840  07FCCB     RCALL ClipCopy_psv
182:                          
183:                       //ClipCopy_psv(STREAMBUF, source, sine.read_ptr);
184:                       kick.block_index++;
008842  2241A1     MOV #0x241A, W1
008844  E80011     INC [W1], W0
008846  780880     MOV W0, [W1]
185:                       if(kick.block_index==kick.blocks) {
008848  5080E4     SUB W1, #0x4, W1
00884A  500F91     SUB W0, [W1], [W15]
00884C  3A0009     BRA NZ, 0x8860
186:                           kick.read_ptr=kick.start_ptr;
00884E  8120E4     MOV 0x241C, W4
008850  8120F5     MOV 0x241E, W5
008852  892104     MOV W4, 0x2420
008854  892115     MOV W5, 0x2422
187:                           kick.block_index=0;
008856  EB0000     CLR W0
008858  8920D0     MOV W0, 0x241A
188:                           kick.playing=FALSE;
00885A  E88081     INC2 W1, W1
00885C  784880     MOV.B W0, [W1]
00885E  370006     BRA 0x886C
189:                       }
190:                       else kick.read_ptr+=STREAMBUF;
008860  224200     MOV #0x2420, W0
008862  BE0110     MOV.D [W0], W2
008864  BE0202     MOV.D W2, W4
008866  B02004     ADD #0x200, W4
008868  B08005     ADDC #0x0, W5
00886A  BE8804     MOV.D W4, [W0]
191:                               
192:                       //VectorScale(STREAMBUF, psvbuf, psvbuf, Q15(0.9));
193:                       VectorAdd(STREAMBUF, source, source, psvbuf);
00886C  220A43     MOV #0x20A4, W3
00886E  780108     MOV W8, W2
008870  780088     MOV W8, W1
008872  201000     MOV #0x100, W0
008874  07BDFF     RCALL _VectorAdd
194:                               
195:                       //result1 =__builtin_mpy(sample,Q15(0.85), NULL, NULL, 0, NULL, NULL, 0);
196:                       //result1 = __builtin_add(result1,kick[kick_ptr++],0);
197:                       //sample=__builtin_sac(result1, 0);
198:                   }
199:                   /*
200:                   else if (pad[0]==1&&kick_playing==TRUE&&kick_ptr==kick_max){
201:                       kick_playing=FALSE;
202:                       kick_ptr=0;
203:                   }
204:               
205:                   if(snare.playing==TRUE){
206:                       result1 =__builtin_mpy(sample,Q15(0.85), NULL, NULL, 0, NULL, NULL, 0);
207:               
208:                       result1 = __builtin_add(result1,snare[snare_ptr++],0);
209:                       sample=__builtin_sac(result1, 0);
210:               
211:                       snare_playing=FALSE;
212:                   }
213:                   */
214:               
215:                   if (stat.TEST_SIN==TRUE){
008876  216310     MOV #0x1631, W0
008878  EBC280     SETM.B W5
00887A  12CF90     SUBR.B W5, [W0], [W15]
00887C  3A0011     BRA NZ, 0x88A0
216:                       ClipCopy_psv(STREAMBUF, source, sine.read_ptr);
00887E  812082     MOV 0x2410, W2
008880  812093     MOV 0x2412, W3
008882  780088     MOV W8, W1
008884  201000     MOV #0x100, W0
008886  07FCA8     RCALL ClipCopy_psv
217:                       sine.block_index++;
008888  2240A1     MOV #0x240A, W1
00888A  E80011     INC [W1], W0
00888C  780880     MOV W0, [W1]
218:                       if(sine.block_index==sine.blocks) {
00888E  5080E4     SUB W1, #0x4, W1
008890  500F91     SUB W0, [W1], [W15]
008892  3A0006     BRA NZ, 0x88A0
219:                           sine.read_ptr=sine.start_ptr;
008894  812060     MOV 0x240C, W0
008896  812071     MOV 0x240E, W1
008898  892080     MOV W0, 0x2410
00889A  892091     MOV W1, 0x2412
220:                           sine.block_index=0;
00889C  2240A0     MOV #0x240A, W0
00889E  EB0800     CLR [W0]
221:                       }
222:                       //else sine.read_ptr+=STREAMBUF;
223:                   }
224:                       
225:                   VectorCopy(STREAMBUF, destination, source);     //copy from ping to pong buffer
0088A0  780108     MOV W8, W2
0088A2  780089     MOV W9, W1
0088A4  201000     MOV #0x100, W0
0088A6  07BDF8     RCALL _VectorCopy
226:                   
227:                   //VOLUME CONTROL
228:                   //if(pots[POT_VOLUME]<=0x000F); 
229:                   if(ctrl.pots[POT_VOLUME]>=0x7FF7);
0088A8  80B343     MOV 0x1668, W3
0088AA  27FF60     MOV #0x7FF6, W0
0088AC  518F80     SUB W3, W0, [W15]
0088AE  3C0004     BRA GT, 0x88B8
230:                   else{
231:                       VectorScale(STREAMBUF, destination, destination, ctrl.pots[POT_VOLUME]);
0088B0  780109     MOV W9, W2
0088B2  780089     MOV W9, W1
0088B4  201000     MOV #0x100, W0
0088B6  07BDF9     RCALL _VectorScale
232:                   }
233:               }
0088B8  BE044F     MOV.D [--W15], W8
0088BA  060000     RETURN
