Disassembly Listing for sampler_0.49.2
Generated From:
C:/Users/ryan/Documents/seniorproject/ps-040/dist/default/production/ps-040.production.elf
Feb 15, 2018 11:55:23 PM

---  C:/Users/ryan/Documents/seniorproject/ps-040/utilitites.c  -----------------------------------------
1:                 /*
2:                  General utilities, button and pot scanning
3:                  */
4:                 #include <xc.h>
5:                 #include <p33EP512GM310.h>
6:                 #include <dsp.h>
7:                 #include "common.h"
8:                 #include "sounds.h"
9:                 #include "flash.h"
10:                #include "screens.h"
11:                #include "utilities.h"
12:                
13:                extern enum fxStruct fxUnits[NUMFXUNITS];
14:                extern enum screenStruc state;
15:                extern struct ctrlsrfc ctrl;
16:                extern struct sflags stat;
17:                extern struct clip_psv sine, kick, snare;
18:                extern struct clip_flash clipmap[FLASH_NUMCHUNKS];
19:                
20:                /* Buttons have 4 states
21:                    held          0 0 (represented as 3)
22:                    pressed       1 0 (represented as 1)
23:                    depressed     0 1 (represented as 2)
24:                    inactive      1 1 (represented as 0)
25:                 * So that a pad value > 1 indicates playing
26:                */
27:                void scanButtons(void){
007F8C  4787E4     ADD W15, #0x4, W15
007F8E  BE9F88     MOV.D W8, [W15++]
007F90  BE9F8A     MOV.D W10, [W15++]
007F92  BE9F8C     MOV.D W12, [W15++]
007F94  781F8E     MOV W14, [W15++]
007FA2  2251E6     MOV #0x251E, W6
007FA4  EB0380     CLR W7
007FA6  225314     MOV #0x2531, W4
007FA8  EB0280     CLR W5
007FAA  B90161     MUL.SU W0, #1, W2
007FAC  BE0406     MOV.D W6, W8
007FAE  BE0504     MOV.D W4, W10
00803E  2163A4     MOV #0x163A, W4
008040  EB0280     CLR W5
00804A  B90161     MUL.SU W0, #1, W2
008094  2163A2     MOV #0x163A, W2
008096  EB0180     CLR W3
28:                    int i;
29:                    static unsigned char pad_last[BUTTONS]={[0 ... (BUTTONS-1)] = 1};
30:                    static unsigned char pad_now[BUTTONS]={[0 ... (BUTTONS-1)] = 1};
31:                    int portrdG, portrdD, portrdF;
32:                
33:                    portrdG = PORTG;
007F96  807310     MOV PORTG, W0
007F98  9FBF80     MOV W0, [W15-16]
007F9A  780600     MOV W0, W12
34:                    portrdD = PORTD;
007F9C  80719D     MOV PORTD, W13
35:                    portrdF = PORTF;
007F9E  80729E     MOV PORTF, W14
36:                    
37:                    for(i=0; i<BUTTONS; i++){      // Get last button history
007FA0  EB0000     CLR W0
007FB6  E80000     INC W0, W0
007FB8  500FF3     SUB W0, #0x13, [W15]
007FBA  3AFFF7     BRA NZ, 0x7FAA
00803C  EB0000     CLR W0
38:                        pad_last[i]=pad_now[i];
007FB0  410084     ADD W2, W4, W1
007FB2  410106     ADD W2, W6, W2
007FB4  784892     MOV.B [W2], [W1]
39:                    }
40:                    
41:                    pad_now[BTN_SPECIAL]=(portrdF>>7)&1;        // Special function button
007FBC  DEF047     ASR W14, #7, W0
007FBE  604061     AND.B W0, #0x1, W0
007FC0  225301     MOV #0x2530, W1
007FC2  784880     MOV.B W0, [W1]
42:                    
43:                    pad_now[6]=(portrdF>>6)&1;
007FC4  DEF146     ASR W14, #6, W2
007FC6  5080EC     SUB W1, #0xC, W1
007FC8  6148E1     AND.B W2, #0x1, [W1]
44:                    pad_now[5]=(portrdF>>5)&1;
007FCA  DEF145     ASR W14, #5, W2
007FCC  E90081     DEC W1, W1
007FCE  6148E1     AND.B W2, #0x1, [W1]
45:                    pad_now[4]=(portrdF>>4)&1;
007FD0  DEF744     ASR W14, #4, W14
007FD2  E90081     DEC W1, W1
007FD4  6748E1     AND.B W14, #0x1, [W1]
46:                    pad_now[0]=(portrdG)&1;
007FD6  5080E4     SUB W1, #0x4, W1
007FD8  6648E1     AND.B W12, #0x1, [W1]
47:                    pad_now[1]=(portrdG>>1)&1;
007FDA  D1810C     ASR W12, W2
007FDC  E80081     INC W1, W1
007FDE  6148E1     AND.B W2, #0x1, [W1]
48:                    pad_now[2]=(portrdG>>2)&1;
007FE0  DEE142     ASR W12, #2, W2
007FE2  E80081     INC W1, W1
007FE4  6148E1     AND.B W2, #0x1, [W1]
49:                    pad_now[3]=(portrdG>>3)&1;
007FE6  DEE143     ASR W12, #3, W2
007FE8  E80081     INC W1, W1
007FEA  6148E1     AND.B W2, #0x1, [W1]
50:                    pad_now[16]=(portrdG>>10)&1;    // Encoder button
007FEC  DEE0CA     ASR W12, #10, W1
007FEE  60C0E1     AND.B W1, #0x1, W1
007FF0  2252E2     MOV #0x252E, W2
007FF2  784901     MOV.B W1, [W2]
51:                    pad_now[11]=(portrdG>>11)&1;
007FF4  DEE1CB     ASR W12, #11, W3
007FF6  510165     SUB W2, #0x5, W2
007FF8  61C961     AND.B W3, #0x1, [W2]
52:                    pad_now[12]=(portrdG>>12)&1;
007FFA  DEE1CC     ASR W12, #12, W3
007FFC  E80102     INC W2, W2
007FFE  61C961     AND.B W3, #0x1, [W2]
53:                    pad_now[13]=(portrdG>>13)&1;
008000  DEE1CD     ASR W12, #13, W3
008002  E80102     INC W2, W2
008004  61C961     AND.B W3, #0x1, [W2]
54:                    pad_now[14]=(portrdG>>14)&1;
008006  DEE64E     ASR W12, #14, W12
008008  E80102     INC W2, W2
00800A  664961     AND.B W12, #0x1, [W2]
55:                    pad_now[15]=(portrdG>>15)&1;
00800C  97B90F     MOV [W15-16], W2
00800E  DE11CF     LSR W2, #15, W3
008010  2252D2     MOV #0x252D, W2
008012  784903     MOV.B W3, [W2]
56:                    pad_now[7]=(portrdD>>1)&1;
008014  D1818D     ASR W13, W3
008016  510168     SUB W2, #0x8, W2
008018  61C961     AND.B W3, #0x1, [W2]
57:                    pad_now[8]=(portrdD>>2)&1;
00801A  DEE9C2     ASR W13, #2, W3
00801C  E80102     INC W2, W2
00801E  61C961     AND.B W3, #0x1, [W2]
58:                    pad_now[9]=(portrdD>>3)&1;
008020  DEE9C3     ASR W13, #3, W3
008022  E80102     INC W2, W2
008024  61C961     AND.B W3, #0x1, [W2]
59:                    pad_now[10]=(portrdD>>4)&1;  
008026  DEEEC4     ASR W13, #4, W13
008028  E80102     INC W2, W2
00802A  66C961     AND.B W13, #0x1, [W2]
60:                    
61:                    if(!pad_now[BTN_SPECIAL])
00802C  E00400     CP0.B W0
00802E  3A0003     BRA NZ, 0x8036
62:                        pad_now[BTN_ENCSPEC]=pad_now[16];
008030  410067     ADD W2, #0x7, W0
008032  784801     MOV.B W1, [W0]
008034  370003     BRA 0x803C
63:                    else pad_now[BTN_ENCSPEC]=1;
008036  B3C011     MOV.B #0x1, W1
008038  2252F0     MOV #0x252F, W0
00803A  784801     MOV.B W1, [W0]
64:                    
65:                    
66:                    for(i=0; i<BUTTONS; i++){
008088  E80000     INC W0, W0
00808A  500FF3     SUB W0, #0x13, [W15]
00808C  3AFFDE     BRA NZ, 0x804A
008090  784210     MOV.B [W0], W4
008092  EB0000     CLR W0
67:                        unsigned char temp = ((pad_last[i]&1)<<1) + (pad_now[i]&1);
00804C  41008A     ADD W2, W10, W1
00804E  784091     MOV.B [W1], W1
008050  60C0E1     AND.B W1, #0x1, W1
008052  40C081     ADD.B W1, W1, W1
008054  410708     ADD W2, W8, W14
008056  78471E     MOV.B [W14], W14
008058  674761     AND.B W14, #0x1, W14
00805A  40C08E     ADD.B W1, W14, W1
68:                        switch(temp){
00805C  50CFE1     SUB.B W1, #0x1, [W15]
00805E  320009     BRA Z, 0x8072
008060  390005     BRA NC, 0x806C
008062  50CFE2     SUB.B W1, #0x2, [W15]
008064  320009     BRA Z, 0x8078
008066  50CFE3     SUB.B W1, #0x3, [W15]
008068  3A000D     BRA NZ, 0x8084
00806A  370009     BRA 0x807E
69:                            case 0x00: 
70:                                ctrl.pad[i] = 3;    // HELD
008044  B3C03C     MOV.B #0x3, W12
00806C  410104     ADD W2, W4, W2
00806E  78490C     MOV.B W12, [W2]
71:                                break;
008070  37000B     BRA 0x8088
72:                            case 0x01: 
73:                                ctrl.pad[i] = 1;    // DEPRESSED
008042  B3C01D     MOV.B #0x1, W13
008072  410104     ADD W2, W4, W2
008074  78490D     MOV.B W13, [W2]
74:                                break;
008076  370008     BRA 0x8088
75:                            case 0x02: 
76:                                ctrl.pad[i] = 2;    // PRESSED
008046  B3C027     MOV.B #0x2, W7
008078  410104     ADD W2, W4, W2
00807A  784907     MOV.B W7, [W2]
77:                                break;
00807C  370005     BRA 0x8088
78:                            case 0x03: 
79:                                ctrl.pad[i] = 0;    // INACTIVE
00807E  410104     ADD W2, W4, W2
008080  784906     MOV.B W6, [W2]
80:                                break;
008082  370002     BRA 0x8088
81:                            default: 
82:                                ctrl.pad[i]=0;
008048  EB4300     CLR.B W6
008084  410104     ADD W2, W4, W2
008086  784906     MOV.B W6, [W2]
83:                                break;
84:                        }
85:                    }
86:                    
87:                    //find last pressed button
88:                    for(i=0; i<(BUTTONS-3); i++){
0080A2  E80000     INC W0, W0
0080A4  500FF0     SUB W0, #0x10, [W15]
0080A6  3AFFF8     BRA NZ, 0x8098
0080A8  2164D0     MOV #0x164D, W0
0080AA  784804     MOV.B W4, [W0]
89:                        if(ctrl.pad[i]>1) ctrl.last_pressed=i;
00808E  2164D0     MOV #0x164D, W0
008098  400082     ADD W0, W2, W1
00809A  B3C015     MOV.B #0x1, W5
00809C  12CF91     SUBR.B W5, [W1], [W15]
00809E  360001     BRA LEU, 0x80A2
0080A0  784200     MOV.B W0, W4
90:                    }
91:                }
0080AC  78074F     MOV [--W15], W14
0080AE  BE064F     MOV.D [--W15], W12
0080B0  BE054F     MOV.D [--W15], W10
0080B2  BE044F     MOV.D [--W15], W8
0080B4  B1004F     SUB #0x4, W15
0080B6  060000     RETURN
92:                
93:                void readPots(void){
0080B8  B0022F     ADD #0x22, W15
0080BA  BE9F88     MOV.D W8, [W15++]
0080BC  BE9F8A     MOV.D W10, [W15++]
0080BE  BE9F8C     MOV.D W12, [W15++]
0080C0  781F8E     MOV W14, [W15++]
0080C2  F80022     PUSH ACCA
0080C4  F80024     PUSH ACCAH
0080C6  F80026     PUSH ACCAU
0080D8  216664     MOV #0x1666, W4
0080DA  EB0280     CLR W5
008182  780508     MOV W8, W10
008184  EB0580     CLR W11
008188  2FFD88     MOV #0xFFD8, W8
00818A  44040F     ADD W8, W15, W8
00818C  EB0480     CLR W9
008190  2FFCC3     MOV #0xFFCC, W3
008192  41818F     ADD W3, W15, W3
008194  B81961     MUL.UU W3, #1, W2
008196  9FB7A2     MOV W2, [W15-28]
008198  9FB7B3     MOV W3, [W15-26]
00819C  B90161     MUL.SU W0, #1, W2
00819E  410102     ADD W2, W2, W2
0081A0  498183     ADDC W3, W3, W3
0081AC  40020C     ADD W0, W12, W4
94:                    volatile register int result asm("A");
95:                    fractional pots_buf[POTS/2]; 
96:                    fractional pots_last[POTS/2];
97:                    static fractional pots_smoothed[POTS/2];
98:                    const fractional pot_alpha = 0x0F80;    //larger = rougher, lower = more latency
99:                    const fractional pot_alpha_inv = 32767-pot_alpha;
100:                   const unsigned int shift = 0xFE00;
101:                   int i, j;
102:                   
103:                   _AD1IF = 0; // Clear conversion done status bit
0080C8  A9A801     BCLR 0x801, #5
104:                   
105:                   if(ctrl.pad[BTN_SPECIAL]<2)i=0;
0080CC  2164C0     MOV #0x164C, W0
0080CE  B3C011     MOV.B #0x1, W1
0080D0  10CF90     SUBR.B W1, [W0], [W15]
0080D2  3E0001     BRA GTU, 0x80D6
0080D4  EB0600     CLR W12
106:                   else i=POTS/2;
0080CA  20006C     MOV #0x6, W12
107:                   
108:                   for(j=0; j<POTS; j++){
0080D6  EB0000     CLR W0
0080E2  E80000     INC W0, W0
0080E4  500FEC     SUB W0, #0xC, [W15]
0080E6  3AFFFB     BRA NZ, 0x80DE
109:                       ctrl.pot_moved[j]=FALSE;
0080DC  EB4100     CLR.B W2
0080DE  400084     ADD W0, W4, W1
0080E0  784882     MOV.B W2, [W1]
110:                   }
111:                   
112:                   pots_buf[0]=(ADC1BUF5>>1)|0x7;
0080E8  D5030A     LSR ADC1BUF5, WREG
0080EA  780200     MOV W0, W4
0080EC  B30074     IOR #0x7, W4
0080EE  9FA7E4     MOV W4, [W15-52]
113:                   pots_buf[1]=(ADC1BUF2>>1)|0x7;
0080F0  D50304     LSR ADC1BUF2, WREG
0080F2  780700     MOV W0, W14
0080F4  B3007E     IOR #0x7, W14
0080F6  9FA7FE     MOV W14, [W15-50]
114:                   pots_buf[2]=(ADC1BUF4>>1)|0x7;
0080F8  D50308     LSR ADC1BUF4, WREG
0080FA  780580     MOV W0, W11
0080FC  B3007B     IOR #0x7, W11
0080FE  9FAF8B     MOV W11, [W15-48]
115:                   pots_buf[3]=(ADC1BUF1>>1)|0x7;
008100  D50302     LSR ADC1BUF1, WREG
008102  780480     MOV W0, W9
008104  B30079     IOR #0x7, W9
008106  9FAF99     MOV W9, [W15-46]
116:                   pots_buf[4]=(ADC1BUF3>>1)|0x7;
008108  D50306     LSR ADC1BUF3, WREG
00810A  780680     MOV W0, W13
00810C  B3007D     IOR #0x7, W13
00810E  9FAFAD     MOV W13, [W15-44]
117:                   pots_buf[5]=(ADC1BUF0>>1)|0x7;
008110  D50300     LSR ADC1BUF0, WREG
008112  780500     MOV W0, W10
008114  B3007A     IOR #0x7, W10
008116  9FAFBA     MOV W10, [W15-42]
118:                   
119:                   pots_last[0]=(pots_smoothed[0]&shift);
008118  2257A8     MOV #0x257A, W8
00811A  2FE000     MOV #0xFE00, W0
00811C  600098     AND W0, [W8], W1
00811E  9FAFC1     MOV W1, [W15-40]
120:                   pots_last[1]=(pots_smoothed[1]&shift);
008120  E88388     INC2 W8, W7
008122  600097     AND W0, [W7], W1
008124  9FAFD1     MOV W1, [W15-38]
121:                   pots_last[2]=(pots_smoothed[2]&shift);
008126  E88107     INC2 W7, W2
008128  600092     AND W0, [W2], W1
00812A  9FAFE1     MOV W1, [W15-36]
122:                   pots_last[3]=(pots_smoothed[3]&shift);
00812C  E88182     INC2 W2, W3
00812E  600093     AND W0, [W3], W1
008130  9FAFF1     MOV W1, [W15-34]
123:                   pots_last[4]=(pots_smoothed[4]&shift);
008132  410164     ADD W2, #0x4, W2
008134  600092     AND W0, [W2], W1
008136  9FB781     MOV W1, [W15-32]
124:                   pots_last[5]=(pots_smoothed[5]&shift);
008138  E88082     INC2 W2, W1
00813A  600011     AND W0, [W1], W0
00813C  9FB790     MOV W0, [W15-30]
125:                   
126:                   result =__builtin_mpy(pots_buf[0],pot_alpha, NULL, NULL, 0, NULL, NULL, 0);
00813E  20F805     MOV #0xF80, W5
008140  C00113     MPY W4*W5, A
127:                   result =__builtin_mac(result, pots_smoothed[0], pot_alpha_inv, NULL, NULL, 0, NULL, NULL, 0, 0, result);
008142  780018     MOV [W8], W0
008144  2707F4     MOV #0x707F, W4
008146  780300     MOV W0, W6
008148  C10112     MAC W4*W6, A
128:                   pots_smoothed[0]=__builtin_sac(result, 0);
00814A  CC0018     SAC A, [W8]
129:                   result =__builtin_mpy(pots_buf[1],pot_alpha, NULL, NULL, 0, NULL, NULL, 0);
00814C  78030E     MOV W14, W6
00814E  C40113     MPY W5*W6, A
130:                   result =__builtin_mac(result, pots_smoothed[1], pot_alpha_inv, NULL, NULL, 0, NULL, NULL, 0, 0, result);
008150  780317     MOV [W7], W6
008152  C10112     MAC W4*W6, A
131:                   pots_smoothed[1]=__builtin_sac(result, 0);
008154  CC0017     SAC A, [W7]
132:                   result =__builtin_mpy(pots_buf[2],pot_alpha, NULL, NULL, 0, NULL, NULL, 0);
008156  78038B     MOV W11, W7
008158  C50113     MPY W5*W7, A
133:                   result =__builtin_mac(result, pots_smoothed[2], pot_alpha_inv, NULL, NULL, 0, NULL, NULL, 0, 0, result);
00815A  508066     SUB W1, #0x6, W0
00815C  780390     MOV [W0], W7
00815E  C20112     MAC W4*W7, A
134:                   pots_smoothed[2]=__builtin_sac(result, 0);
008160  CC0010     SAC A, [W0]
135:                   result =__builtin_mpy(pots_buf[3],pot_alpha, NULL, NULL, 0, NULL, NULL, 0);
008162  780309     MOV W9, W6
008164  C40113     MPY W5*W6, A
136:                   result =__builtin_mac(result, pots_smoothed[3], pot_alpha_inv, NULL, NULL, 0, NULL, NULL, 0, 0, result);
008166  780313     MOV [W3], W6
008168  C10112     MAC W4*W6, A
137:                   pots_smoothed[3]=__builtin_sac(result, 0);
00816A  CC0013     SAC A, [W3]
138:                   result =__builtin_mpy(pots_buf[4],pot_alpha, NULL, NULL, 0, NULL, NULL, 0);
00816C  78038D     MOV W13, W7
00816E  C50113     MPY W5*W7, A
139:                   result =__builtin_mac(result, pots_smoothed[4], pot_alpha_inv, NULL, NULL, 0, NULL, NULL, 0, 0, result);
008170  780312     MOV [W2], W6
008172  C10112     MAC W4*W6, A
140:                   pots_smoothed[4]=__builtin_sac(result, 0);
008174  CC0012     SAC A, [W2]
141:                   result =__builtin_mpy(pots_buf[5],pot_alpha, NULL, NULL, 0, NULL, NULL, 0);
008176  78030A     MOV W10, W6
008178  C40113     MPY W5*W6, A
142:                   result =__builtin_mac(result, pots_smoothed[5], pot_alpha_inv, NULL, NULL, 0, NULL, NULL, 0, 0, result);
00817A  780291     MOV [W1], W5
00817C  C00112     MAC W4*W5, A
143:                   pots_smoothed[5]=__builtin_sac(result, 0);
00817E  CC0011     SAC A, [W1]
144:                   
145:                   for(j=0; j<(POTS/2); j++){
008180  EB0000     CLR W0
0081CE  E80000     INC W0, W0
0081D0  500FE6     SUB W0, #0x6, [W15]
0081D2  3AFFE4     BRA NZ, 0x819C
146:                       if((pots_smoothed[j]&shift)!=pots_last[j]){ 
008186  2FE00E     MOV #0xFE00, W14
0081A2  41020A     ADD W2, W10, W4
0081A4  670294     AND W14, [W4], W5
0081A6  410208     ADD W2, W8, W4
0081A8  528F94     SUB W5, [W4], [W15]
0081AA  320011     BRA Z, 0x81CE
147:                           ctrl.pots[i+j]=pots_buf[j];
00818E  2163A1     MOV #0x163A, W1
0081AE  DEA2CF     ASR W4, #15, W5
0081B0  42036A     ADD W4, #0xA, W6
0081B2  4A83E0     ADDC W5, #0x0, W7
0081B4  430306     ADD W6, W6, W6
0081B6  4B8387     ADDC W7, W7, W7
0081B8  9FB7C6     MOV W6, [W15-24]
0081BA  9FB7D7     MOV W7, [W15-22]
0081BC  97B3CF     MOV [W15-24], W7
0081BE  408307     ADD W1, W7, W6
0081C0  97B3AF     MOV [W15-28], W7
0081C2  410107     ADD W2, W7, W2
0081C4  780B12     MOV [W2], [W6]
148:                           ctrl.pot_moved[i+j]=TRUE;
00819A  EBC680     SETM.B W13
0081C6  B002C4     ADD #0x2C, W4
0081C8  B08005     ADDC #0x0, W5
0081CA  408204     ADD W1, W4, W4
0081CC  784A0D     MOV.B W13, [W4]
149:                       }
150:                   }
151:               }
0081D4  F90026     POP ACCAU
0081D6  F90024     POP ACCAH
0081D8  F90022     POP ACCA
0081DA  78074F     MOV [--W15], W14
0081DC  BE064F     MOV.D [--W15], W12
0081DE  BE054F     MOV.D [--W15], W10
0081E0  BE044F     MOV.D [--W15], W8
0081E2  B1022F     SUB #0x22, W15
0081E4  060000     RETURN
152:               
153:               void scalePots(void){
0081E6  F80022     PUSH ACCA
0081E8  F80024     PUSH ACCAH
0081EA  F80026     PUSH ACCAU
154:                   /* Potentiometer scaling for fx or lcd display */
155:                   volatile register int scaled asm("A");
156:                   
157:                   scaled=__builtin_mpy(ctrl.pots[0],POT_PERCENT, NULL, NULL, 0, NULL, NULL, 0);
0081EC  232644     MOV #0x3264, W4
0081EE  80B275     MOV 0x164E, W5
0081F0  C00113     MPY W4*W5, A
158:                   ctrl.pots_scaled[0]=__builtin_sac(scaled, 7);
0081F2  216720     MOV #0x1672, W0
0081F4  CC0390     SAC A, #7, [W0]
159:                   scaled=__builtin_mpy(ctrl.pots[1],POT_PERCENT, NULL, NULL, 0, NULL, NULL, 0);
0081F6  80B285     MOV 0x1650, W5
0081F8  C00113     MPY W4*W5, A
160:                   ctrl.pots_scaled[1]=__builtin_sac(scaled, 7);
0081FA  E88000     INC2 W0, W0
0081FC  CC0390     SAC A, #7, [W0]
161:                   scaled=__builtin_mpy(ctrl.pots[2],POT_PERCENT, NULL, NULL, 0, NULL, NULL, 0);
0081FE  80B295     MOV 0x1652, W5
008200  C00113     MPY W4*W5, A
162:                   ctrl.pots_scaled[2]=__builtin_sac(scaled, 7);
008202  E88000     INC2 W0, W0
008204  CC0390     SAC A, #7, [W0]
163:                   scaled=__builtin_mpy(ctrl.pots[3],POT_PERCENT, NULL, NULL, 0, NULL, NULL, 0);
008206  80B2A5     MOV 0x1654, W5
008208  C00113     MPY W4*W5, A
164:                   ctrl.pots_scaled[3]=__builtin_sac(scaled, 7);
00820A  E88000     INC2 W0, W0
00820C  CC0390     SAC A, #7, [W0]
165:                   scaled=__builtin_mpy(ctrl.pots[4],POT_PERCENT, NULL, NULL, 0, NULL, NULL, 0);
00820E  80B2B5     MOV 0x1656, W5
008210  C00113     MPY W4*W5, A
166:                   ctrl.pots_scaled[4]=__builtin_sac(scaled, 7);
008212  E88000     INC2 W0, W0
008214  CC0390     SAC A, #7, [W0]
167:                   scaled=__builtin_mpy(ctrl.pots[5],POT_PERCENT, NULL, NULL, 0, NULL, NULL, 0);
008216  80B2C5     MOV 0x1658, W5
008218  C00113     MPY W4*W5, A
168:                   ctrl.pots_scaled[5]=__builtin_sac(scaled, 7);
00821A  E88000     INC2 W0, W0
00821C  CC0390     SAC A, #7, [W0]
169:                   
170:                   scaled=__builtin_mpy(ctrl.pots[POT_FX_SELECT1],FXSCALE, NULL, NULL, 0, NULL, NULL, 0);
00821E  200055     MOV #0x5, W5
008220  80B316     MOV 0x1662, W6
008222  C40113     MPY W5*W6, A
171:                   ctrl.pots_scaled[POT_FX_SELECT1]=__builtin_sac(scaled, 0);
008224  40006A     ADD W0, #0xA, W0
008226  CC0010     SAC A, [W0]
172:                   scaled=__builtin_mpy(ctrl.pots[POT_FX_SELECT2],FXSCALE, NULL, NULL, 0, NULL, NULL, 0);
008228  80B326     MOV 0x1664, W6
00822A  C40113     MPY W5*W6, A
173:                   ctrl.pots_scaled[POT_FX_SELECT2]=__builtin_sac(scaled, 0);
00822C  E88000     INC2 W0, W0
00822E  CC0010     SAC A, [W0]
174:                   
175:                   scaled=__builtin_mpy(ctrl.pots[POT_VOLUME],POT_PERCENT, NULL, NULL, 0, NULL, NULL, 0);
008230  80B2E5     MOV 0x165C, W5
008232  C00113     MPY W4*W5, A
176:                   ctrl.pots_scaled[POT_VOLUME]=__builtin_sac(scaled, 0);
008234  500068     SUB W0, #0x8, W0
008236  CC0010     SAC A, [W0]
177:               }
008238  F90026     POP ACCAU
00823A  F90024     POP ACCAH
00823C  F90022     POP ACCA
00823E  060000     RETURN
178:               
179:               fractional scalePotsCustom(unsigned int steps, fractional scaleme){
008240  781F88     MOV W8, [W15++]
008242  F80022     PUSH ACCA
008244  F80024     PUSH ACCAH
008246  F80026     PUSH ACCAU
008248  780100     MOV W0, W2
00824A  780401     MOV W1, W8
180:                   volatile register int scaled asm("A");
181:                   fractional scale = Q15(steps*0.000030518509476);
00824C  B81061     MUL.UU W2, #1, W0
00824E  07C1CC     RCALL ___floatunsisf
008250  201002     MOV #0x100, W2
008252  238003     MOV #0x3800, W3
008254  07C21E     RCALL ___mulsf3
008256  2FE002     MOV #0xFE00, W2
008258  246FF3     MOV #0x46FF, W3
00825A  07C21B     RCALL ___mulsf3
00825C  200002     MOV #0x0, W2
00825E  23F003     MOV #0x3F00, W3
008260  07C145     RCALL ___addsf3
008262  07C1A1     RCALL ___fixsfsi
182:                   
183:                   scaled=__builtin_mpy(scaleme,scale, NULL, NULL, 0, NULL, NULL, 0);
008264  780208     MOV W8, W4
008266  780280     MOV W0, W5
008268  C00113     MPY W4*W5, A
184:                   return(__builtin_sac(scaled, 0));
00826A  CC0000     SAC A, W0
185:               }
00826C  F90026     POP ACCAU
00826E  F90024     POP ACCAH
008270  F90022     POP ACCA
008272  78044F     MOV [--W15], W8
008274  060000     RETURN
186:               
187:               void changeFX(void){
188:                   fxUnits[0]=ctrl.pots_scaled[POT_FX_SELECT1];
008276  80B430     MOV 0x1686, W0
008278  88B060     MOV W0, fxUnits
189:                   fxUnits[1]=ctrl.pots_scaled[POT_FX_SELECT2];
00827A  80B440     MOV 0x1688, W0
00827C  88B070     MOV W0, 0x160E
190:               }
00827E  060000     RETURN
191:               
192:               void display(void){
193:                   long int newstate;
194:                   static long int laststate;
195:                   
196:                   scalePots();
008280  07FFB2     RCALL scalePots
197:                   
198:                   // Update ui state logic here
199:                   newstate = (ENCODERCNTL/4);
008282  800E30     MOV POS1CNTL, W0
008284  DE0042     LSR W0, #2, W0
008286  EB0080     CLR W1
200:                   if(newstate > laststate){
008288  80B0F2     MOV laststate, W2
00828A  80B103     MOV 0x1620, W3
00828C  500F82     SUB W0, W2, [W15]
00828E  588F83     SUBB W1, W3, [W15]
008290  340006     BRA LE, 0x829E
201:                       if(state<(SCREENS-1))
008292  80B052     MOV state, W2
008294  510FE5     SUB W2, #0x5, [W15]
008296  3E000B     BRA GTU, 0x82AE
202:                           state++;
008298  E80102     INC W2, W2
00829A  88B052     MOV W2, state
00829C  370008     BRA 0x82AE
203:                   } 
204:                   else if(newstate < laststate){
00829E  500F82     SUB W0, W2, [W15]
0082A0  588F83     SUBB W1, W3, [W15]
0082A2  3D0005     BRA GE, 0x82AE
205:                       if(state>0)
0082A4  80B052     MOV state, W2
0082A6  E00002     CP0 W2
0082A8  320002     BRA Z, 0x82AE
206:                           state--;
0082AA  E90102     DEC W2, W2
0082AC  88B052     MOV W2, state
207:                   }
208:                   laststate=newstate;
0082AE  88B0F0     MOV W0, laststate
0082B0  88B101     MOV W1, 0x1620
209:                   
210:                   changeFX();
0082B2  07FFE1     RCALL changeFX
211:               
212:                   // Update screen here
213:                   screenUpdate();
0082B4  07FE5C     RCALL screenUpdate
214:                  
215:                  if(stat.UART_ON==TRUE){
0082B6  216340     MOV #0x1634, W0
0082B8  EBC080     SETM.B W1
0082BA  10CF90     SUBR.B W1, [W0], [W15]
0082BC  3A0002     BRA NZ, 0x82C2
216:                       U1TXREG = 0x61;
0082BE  200610     MOV #0x61, W0
0082C0  881120     MOV W0, U1TXREG
217:                   }
218:                  
219:                  SLED=~SLED;
0082C2  8072A0     MOV LATF, W0
0082C4  EA8000     COM W0, W0
0082C6  600061     AND W0, #0x1, W0
0082C8  8072A1     MOV LATF, W1
0082CA  A10001     BCLR W1, #0
0082CC  700081     IOR W0, W1, W1
0082CE  8872A1     MOV W1, LATF
220:               }
0082D0  060000     RETURN
221:               
222:               void processRxData(fractional *sourceBuffer, fractional *targetBuffer){
223:                   /* This procedure loops back the received data to the*/
224:                   /* the codec output. The user application could process*/
225:                   /* this data as per application requirements.*/
226:                   int index;
227:                   for(index = 0;index < STREAMBUF;index ++)
0082D2  EB0100     CLR W2
0082D4  201006     MOV #0x100, W6
0082E2  E80102     INC W2, W2
0082E4  510F86     SUB W2, W6, [W15]
0082E6  3AFFF7     BRA NZ, 0x82D6
228:                   {
229:                       targetBuffer[index] = sourceBuffer[index];
0082D6  B91261     MUL.SU W2, #1, W4
0082D8  420204     ADD W4, W4, W4
0082DA  4A8285     ADDC W5, W5, W5
0082DC  408184     ADD W1, W4, W3
0082DE  400204     ADD W0, W4, W4
0082E0  780994     MOV [W4], [W3]
230:                   }
231:               }
0082E8  060000     RETURN
232:               
233:               void ClipCopy_psv(int numElems, fractional * dstV, __psv__ fractional * srcV){
0082EA  781F88     MOV W8, [W15++]
0082EC  BE9F8A     MOV.D W10, [W15++]
0082EE  BE0202     MOV.D W2, W4
0082F6  B80D61     MUL.UU W1, #1, W10
0082F8  D00103     SL W3, W2
234:                   int i;
235:                   
236:                   for(i=0; i<numElems; i++){
0082F0  E00000     CP0 W0
0082F2  340013     BRA LE, 0x831A
0082F4  EB0180     CLR W3
008314  E80183     INC W3, W3
008316  518F80     SUB W3, W0, [W15]
008318  3AFFEF     BRA NZ, 0x82F8
237:                       *dstV++=*srcV++;
0082FA  41010A     ADD W2, W10, W2
0082FC  800198     MOV DSRPAG, W8
0082FE  780304     MOV W4, W6
008300  A4F006     BTSTS.C W6, #15
008302  D28385     RLC W5, W7
008304  880197     MOV W7, DSRPAG
008306  000000     NOP
008308  780316     MOV [W6], W6
00830A  880198     MOV W8, DSRPAG
00830C  000000     NOP
00830E  780906     MOV W6, [W2]
008310  420262     ADD W4, #0x2, W4
008312  4A82E0     ADDC W5, #0x0, W5
238:                   }
239:               }
00831A  BE054F     MOV.D [--W15], W10
00831C  78044F     MOV [--W15], W8
00831E  060000     RETURN
240:               
241:               void ClipCopy_eds(int numElems, fractional * dstV, __eds__ fractional * srcV){
008320  BE9F88     MOV.D W8, [W15++]
008328  B80C61     MUL.UU W1, #1, W8
00832A  D00304     SL W4, W6
242:                   int i;
243:                   
244:                   for(i=0; i<numElems; i++){
008322  E00000     CP0 W0
008324  340014     BRA LE, 0x834E
008326  EB0200     CLR W4
008348  E80204     INC W4, W4
00834A  520F80     SUB W4, W0, [W15]
00834C  3AFFEE     BRA NZ, 0x832A
245:                       *dstV++=*srcV++;
00832C  430308     ADD W6, W8, W6
00832E  800195     MOV DSRPAG, W5
008330  880193     MOV W3, DSRPAG
008332  000000     NOP
008334  780B12     MOV [W2], [W6]
008336  880195     MOV W5, DSRPAG
008338  000000     NOP
00833A  780082     MOV W2, W1
00833C  B00022     ADD #0x2, W2
00833E  688082     XOR W1, W2, W1
008340  AF6042     BTSC SR, #3
008342  A0F002     BSET W2, #15
008344  D28081     RLC W1, W1
008346  B08003     ADDC #0x0, W3
246:                   } 
247:               }
00834E  BE044F     MOV.D [--W15], W8
008350  060000     RETURN
248:               
249:               void ClipCopy_toeds(int numElems, __eds__ fractional * dstV, fractional * srcV){
008352  BE9F88     MOV.D W8, [W15++]
00835A  B80C61     MUL.UU W1, #1, W8
00835C  D00384     SL W4, W7
250:                   int i;
251:                   
252:                   for(i=0; i<numElems; i++){
008354  E00000     CP0 W0
008356  340012     BRA LE, 0x837C
008358  EB0200     CLR W4
008376  E80204     INC W4, W4
008378  520F80     SUB W4, W0, [W15]
00837A  3AFFF0     BRA NZ, 0x835C
253:                       *dstV++=*srcV++;
00835E  438388     ADD W7, W8, W7
008360  8001A5     MOV DSWPAG, W5
008362  8801A3     MOV W3, DSWPAG
008364  780917     MOV [W7], [W2]
008366  8801A5     MOV W5, DSWPAG
008368  780082     MOV W2, W1
00836A  B00022     ADD #0x2, W2
00836C  688082     XOR W1, W2, W1
00836E  AF6042     BTSC SR, #3
008370  A0F002     BSET W2, #15
008372  D28081     RLC W1, W1
008374  B08003     ADDC #0x0, W3
254:                   } 
255:               }
00837C  BE044F     MOV.D [--W15], W8
00837E  060000     RETURN
256:               
257:               //A blocking delay function. Not very accurate but good enough.
258:               void Delay_us(unsigned int delay)
259:               {
260:                   int i;
261:                   for (i = 0; i < delay; i++)
008380  E00000     CP0 W0
008382  320006     BRA Z, 0x8390
008384  EB0080     CLR W1
00838A  E80081     INC W1, W1
00838C  500F81     SUB W0, W1, [W15]
00838E  3EFFFB     BRA GTU, 0x8386
262:                   {
263:                       __asm__ volatile ("repeat #50");
008386  090032     REPEAT #0x32
264:                       __asm__ volatile ("nop");
008388  000000     NOP
265:                   }
266:               }
008390  060000     RETURN
---  C:/Users/ryan/Documents/seniorproject/ps-040/sounds.c  ---------------------------------------------
1:                 /*
2:                  * File:   sounds.c
3:                  * Author: ThinkPad-OwnerX220
4:                  *
5:                  * Created on February 16, 2017, 2:48 PM
6:                  */
7:                 #include "xc.h"
8:                 #include "common.h"
9:                 #include "sounds.h"
10:                #include "dsp.h"
11:                
12:                fractional __attribute__((space(psv))) sintab[SINRES] = {
13:                     0,     201,     402,     603,     804,    1005,    1206,    1406,
14:                  1607,    1808,    2009,    2209,    2410,    2610,    2811,    3011,
15:                  3211,    3411,    3611,    3811,    4011,    4210,    4409,    4608,
16:                  4807,    5006,    5205,    5403,    5601,    5799,    5997,    6195,
17:                  6392,    6589,    6786,    6982,    7179,    7375,    7571,    7766,
18:                  7961,    8156,    8351,    8545,    8739,    8932,    9126,    9319,
19:                  9511,    9703,    9895,   10087,   10278,   10469,   10659,   10849,
20:                 11038,   11227,   11416,   11604,   11792,   11980,   12166,   12353,
21:                 12539,   12724,   12909,   13094,   13278,   13462,   13645,   13827,
22:                 14009,   14191,   14372,   14552,   14732,   14911,   15090,   15268,
23:                 15446,   15623,   15799,   15975,   16150,   16325,   16499,   16672,
24:                 16845,   17017,   17189,   17360,   17530,   17699,   17868,   18036,
25:                 18204,   18371,   18537,   18702,   18867,   19031,   19194,   19357,
26:                 19519,   19680,   19840,   20000,   20159,   20317,   20474,   20631,
27:                 20787,   20942,   21096,   21249,   21402,   21554,   21705,   21855,
28:                 22004,   22153,   22301,   22448,   22594,   22739,   22883,   23027,
29:                 23169,   23311,   23452,   23592,   23731,   23869,   24006,   24143,
30:                 24278,   24413,   24546,   24679,   24811,   24942,   25072,   25201,
31:                 25329,   25456,   25582,   25707,   25831,   25954,   26077,   26198,
32:                 26318,   26437,   26556,   26673,   26789,   26905,   27019,   27132,
33:                 27244,   27355,   27466,   27575,   27683,   27790,   27896,   28001,
34:                 28105,   28208,   28309,   28410,   28510,   28608,   28706,   28802,
35:                 28897,   28992,   29085,   29177,   29268,   29358,   29446,   29534,
36:                 29621,   29706,   29790,   29873,   29955,   30036,   30116,   30195,
37:                 30272,   30349,   30424,   30498,   30571,   30643,   30713,   30783,
38:                 30851,   30918,   30984,   31049,   31113,   31175,   31236,   31297,
39:                 31356,   31413,   31470,   31525,   31580,   31633,   31684,   31735,
40:                 31785,   31833,   31880,   31926,   31970,   32014,   32056,   32097,
41:                 32137,   32176,   32213,   32249,   32284,   32318,   32350,   32382,
42:                 32412,   32441,   32468,   32495,   32520,   32544,   32567,   32588,
43:                 32609,   32628,   32646,   32662,   32678,   32692,   32705,   32717,
44:                 32727,   32736,   32744,   32751,   32757,   32761,   32764,   32766,
45:                 32767,   32766,   32764,   32761,   32757,   32751,   32744,   32736,
46:                 32727,   32717,   32705,   32692,   32678,   32662,   32646,   32628,
47:                 32609,   32588,   32567,   32544,   32520,   32495,   32468,   32441,
48:                 32412,   32382,   32350,   32318,   32284,   32249,   32213,   32176,
49:                 32137,   32097,   32056,   32014,   31970,   31926,   31880,   31833,
50:                 31785,   31735,   31684,   31633,   31580,   31525,   31470,   31413,
51:                 31356,   31297,   31236,   31175,   31113,   31049,   30984,   30918,
52:                 30851,   30783,   30713,   30643,   30571,   30498,   30424,   30349,
53:                 30272,   30195,   30116,   30036,   29955,   29873,   29790,   29706,
54:                 29621,   29534,   29446,   29358,   29268,   29177,   29085,   28992,
55:                 28897,   28802,   28706,   28608,   28510,   28410,   28309,   28208,
56:                 28105,   28001,   27896,   27790,   27683,   27575,   27466,   27355,
57:                 27244,   27132,   27019,   26905,   26789,   26673,   26556,   26437,
58:                 26318,   26198,   26077,   25954,   25831,   25707,   25582,   25456,
59:                 25329,   25201,   25072,   24942,   24811,   24679,   24546,   24413,
60:                 24278,   24143,   24006,   23869,   23731,   23592,   23452,   23311,
61:                 23169,   23027,   22883,   22739,   22594,   22448,   22301,   22153,
62:                 22004,   21855,   21705,   21554,   21402,   21249,   21096,   20942,
63:                 20787,   20631,   20474,   20317,   20159,   20000,   19840,   19680,
64:                 19519,   19357,   19194,   19031,   18867,   18702,   18537,   18371,
65:                 18204,   18036,   17868,   17699,   17530,   17360,   17189,   17017,
66:                 16845,   16672,   16499,   16325,   16150,   15975,   15799,   15623,
67:                 15446,   15268,   15090,   14911,   14732,   14552,   14372,   14191,
68:                 14009,   13827,   13645,   13462,   13278,   13094,   12909,   12724,
69:                 12539,   12353,   12166,   11980,   11792,   11604,   11416,   11227,
70:                 11038,   10849,   10659,   10469,   10278,   10087,    9895,    9703,
71:                  9511,    9319,    9126,    8932,    8739,    8545,    8351,    8156,
72:                  7961,    7766,    7571,    7375,    7179,    6982,    6786,    6589,
73:                  6392,    6195,    5997,    5799,    5601,    5403,    5205,    5006,
74:                  4807,    4608,    4409,    4210,    4011,    3811,    3611,    3411,
75:                  3211,    3011,    2811,    2610,    2410,    2209,    2009,    1808,
76:                  1607,    1406,    1206,    1005,     804,     603,     402,     201,
77:                     0,    -201,    -402,    -603,    -804,   -1005,   -1206,   -1406,
78:                 -1607,   -1808,   -2009,   -2209,   -2410,   -2610,   -2811,   -3011,
79:                 -3211,   -3411,   -3611,   -3811,   -4011,   -4210,   -4409,   -4608,
80:                 -4807,   -5006,   -5205,   -5403,   -5601,   -5799,   -5997,   -6195,
81:                 -6392,   -6589,   -6786,   -6982,   -7179,   -7375,   -7571,   -7766,
82:                 -7961,   -8156,   -8351,   -8545,   -8739,   -8932,   -9126,   -9319,
83:                 -9511,   -9703,   -9895,  -10087,  -10278,  -10469,  -10659,  -10849,
84:                -11038,  -11227,  -11416,  -11604,  -11792,  -11980,  -12166,  -12353,
85:                -12539,  -12724,  -12909,  -13094,  -13278,  -13462,  -13645,  -13827,
86:                -14009,  -14191,  -14372,  -14552,  -14732,  -14911,  -15090,  -15268,
87:                -15446,  -15623,  -15799,  -15975,  -16150,  -16325,  -16499,  -16672,
88:                -16845,  -17017,  -17189,  -17360,  -17530,  -17699,  -17868,  -18036,
89:                -18204,  -18371,  -18537,  -18702,  -18867,  -19031,  -19194,  -19357,
90:                -19519,  -19680,  -19840,  -20000,  -20159,  -20317,  -20474,  -20631,
91:                -20787,  -20942,  -21096,  -21249,  -21402,  -21554,  -21705,  -21855,
92:                -22004,  -22153,  -22301,  -22448,  -22594,  -22739,  -22883,  -23027,
93:                -23169,  -23311,  -23452,  -23592,  -23731,  -23869,  -24006,  -24143,
94:                -24278,  -24413,  -24546,  -24679,  -24811,  -24942,  -25072,  -25201,
95:                -25329,  -25456,  -25582,  -25707,  -25831,  -25954,  -26077,  -26198,
96:                -26318,  -26437,  -26556,  -26673,  -26789,  -26905,  -27019,  -27132,
97:                -27244,  -27355,  -27466,  -27575,  -27683,  -27790,  -27896,  -28001,
98:                -28105,  -28208,  -28309,  -28410,  -28510,  -28608,  -28706,  -28802,
99:                -28897,  -28992,  -29085,  -29177,  -29268,  -29358,  -29446,  -29534,
100:               -29621,  -29706,  -29790,  -29873,  -29955,  -30036,  -30116,  -30195,
101:               -30272,  -30349,  -30424,  -30498,  -30571,  -30643,  -30713,  -30783,
102:               -30851,  -30918,  -30984,  -31049,  -31113,  -31175,  -31236,  -31297,
103:               -31356,  -31413,  -31470,  -31525,  -31580,  -31633,  -31684,  -31735,
104:               -31785,  -31833,  -31880,  -31926,  -31970,  -32014,  -32056,  -32097,
105:               -32137,  -32176,  -32213,  -32249,  -32284,  -32318,  -32350,  -32382,
106:               -32412,  -32441,  -32468,  -32495,  -32520,  -32544,  -32567,  -32588,
107:               -32609,  -32628,  -32646,  -32662,  -32678,  -32692,  -32705,  -32717,
108:               -32727,  -32736,  -32744,  -32751,  -32757,  -32761,  -32764,  -32766,
109:               -32767,  -32766,  -32764,  -32761,  -32757,  -32751,  -32744,  -32736,
110:               -32727,  -32717,  -32705,  -32692,  -32678,  -32662,  -32646,  -32628,
111:               -32609,  -32588,  -32567,  -32544,  -32520,  -32495,  -32468,  -32441,
112:               -32412,  -32382,  -32350,  -32318,  -32284,  -32249,  -32213,  -32176,
113:               -32137,  -32097,  -32056,  -32014,  -31970,  -31926,  -31880,  -31833,
114:               -31785,  -31735,  -31684,  -31633,  -31580,  -31525,  -31470,  -31413,
115:               -31356,  -31297,  -31236,  -31175,  -31113,  -31049,  -30984,  -30918,
116:               -30851,  -30783,  -30713,  -30643,  -30571,  -30498,  -30424,  -30349,
117:               -30272,  -30195,  -30116,  -30036,  -29955,  -29873,  -29790,  -29706,
118:               -29621,  -29534,  -29446,  -29358,  -29268,  -29177,  -29085,  -28992,
119:               -28897,  -28802,  -28706,  -28608,  -28510,  -28410,  -28309,  -28208,
120:               -28105,  -28001,  -27896,  -27790,  -27683,  -27575,  -27466,  -27355,
121:               -27244,  -27132,  -27019,  -26905,  -26789,  -26673,  -26556,  -26437,
122:               -26318,  -26198,  -26077,  -25954,  -25831,  -25707,  -25582,  -25456,
123:               -25329,  -25201,  -25072,  -24942,  -24811,  -24679,  -24546,  -24413,
124:               -24278,  -24143,  -24006,  -23869,  -23731,  -23592,  -23452,  -23311,
125:               -23169,  -23027,  -22883,  -22739,  -22594,  -22448,  -22301,  -22153,
126:               -22004,  -21855,  -21705,  -21554,  -21402,  -21249,  -21096,  -20942,
127:               -20787,  -20631,  -20474,  -20317,  -20159,  -20000,  -19840,  -19680,
128:               -19519,  -19357,  -19194,  -19031,  -18867,  -18702,  -18537,  -18371,
129:               -18204,  -18036,  -17868,  -17699,  -17530,  -17360,  -17189,  -17017,
130:               -16845,  -16672,  -16499,  -16325,  -16150,  -15975,  -15799,  -15623,
131:               -15446,  -15268,  -15090,  -14911,  -14732,  -14552,  -14372,  -14191,
132:               -14009,  -13827,  -13645,  -13462,  -13278,  -13094,  -12909,  -12724,
133:               -12539,  -12353,  -12166,  -11980,  -11792,  -11604,  -11416,  -11227,
134:               -11038,  -10849,  -10659,  -10469,  -10278,  -10087,   -9895,   -9703,
135:                -9511,   -9319,   -9126,   -8932,   -8739,   -8545,   -8351,   -8156,
136:                -7961,   -7766,   -7571,   -7375,   -7179,   -6982,   -6786,   -6589,
137:                -6392,   -6195,   -5997,   -5799,   -5601,   -5403,   -5205,   -5006,
138:                -4807,   -4608,   -4409,   -4210,   -4011,   -3811,   -3611,   -3411,
139:                -3211,   -3011,   -2811,   -2610,   -2410,   -2209,   -2009,   -1808,
140:                -1607,   -1406,   -1206,   -1005,    -804,    -603,    -402,    -201
141:               };
142:               
143:               
144:               void genSine(unsigned int size){
145:                   /*
146:                   long int counter=0;
147:                   for(; counter<size; counter++)
148:                       sintab[counter]=Q15(0.5);
149:                   */
150:                   
151:               }
00918C  060000     RETURN
152:               
153:               fractional __attribute__((space(psv))) kicksamp[5552] = {-1, 3, -5, 6, -6, 5, -4, 3, -2, 2, -3, 3, -3, 3, -2, 1, -1, 1, -1, 1, -1, 1, 0, -1, 1, -1, 1, -1, 1, -1, 1, -1, -12, -49, -72, -26, 132, 337, 578, 813, 1029, 1202, 1334, 1425, 1472, 1501, 1469, 1438, 1379, 1328, 1269, 1219, 1160, 1107, 1062, 1037, 1044, 1066, 1113, 1167, 1197, 1225, 1192, 1142, 1026, 882, 702, 498, 284, 66, -161, -419, -722, -1087, -1515, -1991, -2511, -3042, -3581, -4092, -4567, -4994, -5360, -5668, -5909, -6102, -6234, -6326, -6368, -6385, -6362, -6325, -6260, -6176, -6079, -5957, -5825, -5677, -5504, -5322, -5107, -4882, -4635, -4390, -4128, -3866, -3580, -3281, -2946, -2589, -2195, -1767, -1312, -808, -293, 274, 825, 1423, 1995, 2597, 3189, 3791, 4385, 4987, 5577, 6174, 6749, 7328, 7886, 8429, 8966, 9467, 9965, 10417, 10859, 11272, 11669, 12031, 12370, 12672, 12946, 13178, 13386, 13547, 13684, 13787, 13846, 13892, 13887, 13868, 13812, 13731, 13620, 13485, 13324, 13140, 12928, 12687, 12415, 12115, 11780, 11428, 11054, 10668, 10272, 9871, 9460, 9060, 8646, 8243, 7834, 7425, 7019, 6605, 6195, 5779, 5356, 4936, 4500, 4075, 3628, 3190, 2737, 2287, 1829, 1370, 904, 440, -31, -496, -969, -1432, -1906, -2362, -2834, -3285, -3748, -4195, -4650, -5085, -5536, -5960, -6395, -6816, -7236, -7648, -8053, -8453, -8846, -9232, -9611, -9981, -10342, -10708, -11055, -11397, -11723, -12065, -12435, -12841, -13293, -13758, -14251, -14717, -15172, -15590, -15951, -16259, -16496, -16647, -16729, -16708, -16632, -16478, -16263, -15984, -15654, -15281, -14906, -14526, -14175, -13866, -13608, -13426, -13311, -13290, -13337, -13474, -13681, -13954, -14281, -14663, -15072, -15516, -15971, -16435, -16903, -17356, -17799, -18230, -18625, -19012, -19354, -19677, -19968, -20221, -20452, -20645, -20808, -20940, -21045, -21109, -21163, -21162, -21164, -21102, -21045, -20934, -20806, -20645, -20448, -20228, -19968, -19687, -19356, -19011, -18614, -18199, -17742, -17248, -16732, -16168, -15587, -14960, -14315, -13632, -12924, -12192, -11429, -10645, -9847, -9014, -8185, -7321, -6463, -5586, -4707, -3826, -2938, -2059, -1178, -299, 579, 1392, 2246, 3094, 3949, 4745, 5556, 6311, 7043, 7767, 8436, 9113, 9743, 10360, 10966, 11530, 12107, 12635, 13167, 13672, 14165, 14643, 15109, 15550, 15993, 16414, 16846, 17265, 17681, 18099, 18491, 18892, 19259, 19621, 19965, 20288, 20596, 20890, 21162, 21426, 21671, 21903, 22131, 22338, 22548, 22735, 22927, 23101, 23275, 23442, 23596, 23755, 23897, 24041, 24175, 24318, 24427, 24533, 24656, 24785, 24890, 25004, 25092, 25173, 25250, 25300, 25361, 25394, 25427, 25459, 25464, 25487, 25478, 25481, 25470, 25451, 25436, 25402, 25377, 25331, 25300, 25245, 25204, 25144, 25088, 25021, 24956, 24872, 24798, 24706, 24613, 24505, 24402, 24290, 24198, 24100, 24009, 23918, 23817, 23705, 23584, 23434, 23279, 23094, 22898, 22678, 22451, 22203, 21958, 21692, 21427, 21154, 20892, 20622, 20359, 20065, 19788, 19484, 19203, 18917, 18662, 18412, 18208, 18008, 17858, 17713, 17608, 17517, 17442, 17389, 17336, 17299, 17263, 17221, 17184, 17135, 17079, 17012, 16930, 16830, 16711, 16540, 16436, 16275, 16005, 15745, 15436, 15124, 14796, 14449, 14092, 13711, 13313, 12895, 12449, 11987, 11488, 10980, 10431, 9869, 9279, 8664, 8035, 7374, 6706, 6016, 5306, 4602, 3856, 3137, 2381, 1640, 891, 136, -609, -1351, -2096, -2818, -3543, -4252, -4941, -5637, -6289, -6959, -7580, -8215, -8807, -9405, -9967, -10531, -11061, -11590, -12094, -12590, -13068, -13533, -13986, -14428, -14853, -15281, -15681, -16091, -16480, -16866, -17251, -17611, -17985, -18332, -18683, -19025, -19353, -19683, -19999, -20306, -20614, -20897, -21194, -21471, -21753, -22028, -22298, -22557, -22814, -23048, -23282, -23500, -23693, -23896, -24057, -24231, -24375, -24514, -24640, -24754, -24862, -24951, -25048, -25109, -25198, -25239, -25313, -25342, -25396, -25420, -25450, -25467, -25481, -25480, -25488, -25461, -25465, -25418, -25406, -25354, -25314, -25265, -25198, -25142, -25067, -24993, -24914, -24824, -24737, -24641, -24535, -24449, -24340, -24226, -24082, -23986, -23911, -23814, -23727, -23611, -23493, -23367, -23221, -23082, -22929, -22775, -22623, -22463, -22305, -22156, -21989, -21847, -21683, -21538, -21386, -21234, -21097, -20944, -20808, -20666, -20527, -20392, -20255, -20122, -19989, -19859, -19727, -19601, -19466, -19344, -19209, -19084, -18954, -18820, -18691, -18560, -18419, -18296, -18125, -17998, -17899, -17743, -17552, -17343, -17140, -16942, -16753, -16565, -16389, -16198, -16026, -15822, -15637, -15416, -15203, -14959, -14711, -14439, -14146, -13840, -13502, -13156, -12776, -12382, -11952, -11515, -11045, -10568, -10065, -9543, -9005, -8433, -7854, -7229, -6604, -5932, -5263, -4554, -3846, -3110, -2377, -1620, -881, -116, 619, 1378, 2106, 2854, 3574, 4302, 5008, 5702, 6381, 7035, 7675, 8280, 8879, 9436, 9987, 10500, 11003, 11476, 11938, 12375, 12795, 13203, 13591, 13967, 14335, 14679, 15025, 15350, 15674, 15988, 16289, 16594, 16879, 17175, 17449, 17736, 18002, 18274, 18542, 18792, 19061, 19301, 19553, 19800, 20029, 20276, 20496, 20730, 20947, 21169, 21381, 21592, 21798, 21996, 22198, 22385, 22578, 22756, 22935, 23111, 23273, 23445, 23592, 23754, 23896, 24036, 24175, 24302, 24424, 24545, 24652, 24757, 24857, 24944, 25031, 25107, 25176, 25240, 25297, 25343, 25390, 25415, 25452, 25465, 25475, 25489, 25473, 25475, 25449, 25428, 25393, 25360, 25304, 25265, 25190, 25134, 25055, 24980, 24907, 24816, 24738, 24639, 24547, 24439, 24331, 24210, 24085, 23950, 23811, 23659, 23510, 23346, 23183, 23016, 22837, 22670, 22480, 22312, 22120, 21945, 21759, 21575, 21398, 21212, 21033, 20859, 20671, 20510, 20322, 20164, 19984, 19823, 19657, 19490, 19338, 19173, 19023, 18868, 18720, 18573, 18433, 18284, 18157, 18012, 17888, 17754, 17628, 17499, 17379, 17245, 17134, 16992, 16882, 16746, 16620, 16491, 16353, 16220, 16082, 15932, 15792, 15630, 15481, 15308, 15139, 14965, 14771, 14586, 14381, 14166, 13957, 13712, 13485, 13223, 12961, 12684, 12386, 12119, 11793, 11398, 11060, 10751, 10469, 10134, 9784, 9403, 8978, 8536, 8066, 7564, 7067, 6523, 5997, 5439, 4881, 4321, 3738, 3171, 2578, 2004, 1412, 829, 242, -338, -926, -1496, -2079, -2639, -3214, -3761, -4322, -4859, -5398, -5924, -6442, -6977, -7477, -7909, -8342, -8906, -9438, -9951, -10431, -10872, -11277, -11658, -12005, -12337, -12647, -12939, -13229, -13496, -13765, -14018, -14268, -14510, -14743, -14979, -15199, -15427, -15636, -15852, -16060, -16260, -16466, -16656, -16855, -17043, -17225, -17419, -17586, -17778, -17943, -18122, -18295, -18457, -18630, -18784, -18953, -19100, -19266, -19406, -19564, -19702, -19850, -19990, -20128, -20263, -20401, -20527, -20665, -20789, -20920, -21046, -21170, -21297, -21418, -21546, -21666, -21789, -21910, -22034, -22154, -22277, -22397, -22520, -22643, -22755, -22891, -22993, -23134, -23239, -23363, -23485, -23591, -23723, -23819, -23944, -24045, -24153, -24262, -24355, -24460, -24552, -24641, -24735, -24809, -24899, -24963, -25044, -25103, -25170, -25223, -25278, -25323, -25369, -25403, -25428, -25452, -25469, -25471, -25489, -25475, -25490, -25471, -25474, -25458, -25446, -25430, -25407, -25383, -25351, -25317, -25277, -25229, -25183, -25117, -25070, -24985, -24928, -24839, -24764, -24673, -24581, -24489, -24383, -24285, -24174, -24066, -23952, -23835, -23715, -23595, -23469, -23345, -23212, -23085, -22952, -22821, -22678, -22551, -22398, -22270, -22116, -21975, -21826, -21679, -21534, -21387, -21241, -21098, -20953, -20812, -20668, -20525, -20380, -20235, -20085, -19938, -19784, -19631, -19476, -19317, -19158, -18996, -18835, -18667, -18506, -18337, -18170, -18008, -17831, -17674, -17496, -17332, -17156, -16984, -16808, -16628, -16449, -16262, -16074, -15884, -15685, -15487, -15281, -15069, -14860, -14632, -14414, -14179, -13941, -13699, -13449, -13197, -12935, -12665, -12393, -12098, -11813, -11499, -11188, -10866, -10523, -10188, -9824, -9466, -9087, -8711, -8311, -7922, -7503, -7097, -6674, -6247, -5817, -5374, -4941, -4488, -4047, -3589, -3138, -2684, -2222, -1764, -1316, -864, -412, 125, 555, 944, 1339, 1745, 2163, 2604, 3043, 3510, 3963, 4437, 4900, 5363, 5832, 6277, 6736, 7170, 7612, 8036, 8452, 8867, 9263, 9655, 10041, 10405, 10775, 11120, 11467, 11795, 12119, 12428, 12733, 13023, 13306, 13577, 13840, 14096, 14338, 14578, 14798, 15024, 15229, 15431, 15629, 15802, 15993, 16146, 16323, 16452, 16666, 16753, 16804, 16991, 17158, 17332, 17479, 17598, 17712, 17777, 17860, 17899, 17951, 17987, 18015, 18051, 18073, 18102, 18133, 18158, 18195, 18217, 18263, 18291, 18334, 18383, 18416, 18482, 18523, 18586, 18645, 18702, 18772, 18839, 18910, 18990, 19066, 19148, 19242, 19320, 19430, 19506, 19619, 19708, 19812, 19913, 20010, 20116, 20211, 20316, 20411, 20511, 20608, 20701, 20798, 20891, 20978, 21076, 21154, 21250, 21328, 21419, 21496, 21582, 21657, 21742, 21814, 21896, 21971, 22046, 22125, 22197, 22273, 22349, 22423, 22497, 22575, 22647, 22724, 22798, 22878, 22947, 23034, 23103, 23185, 23266, 23337, 23427, 23496, 23585, 23662, 23741, 23829, 23898, 23992, 24059, 24147, 24222, 24296, 24379, 24446, 24526, 24593, 24663, 24732, 24798, 24858, 24925, 24972, 25041, 25081, 25140, 25182, 25227, 25267, 25305, 25336, 25371, 25391, 25422, 25435, 25456, 25467, 25474, 25484, 25480, 25482, 25477, 25464, 25456, 25435, 25417, 25394, 25362, 25339, 25295, 25266, 25217, 25177, 25127, 25077, 25020, 24963, 24906, 24833, 24780, 24694, 24634, 24555, 24474, 24404, 24305, 24238, 24135, 24061, 23957, 23873, 23774, 23678, 23584, 23479, 23376, 23275, 23159, 23060, 22948, 22838, 22744, 22619, 22541, 22411, 22331, 22217, 22119, 22025, 21918, 21818, 21723, 21609, 21523, 21401, 21311, 21197, 21096, 20990, 20883, 20777, 20669, 20565, 20452, 20350, 20235, 20134, 20017, 19916, 19796, 19697, 19573, 19474, 19350, 19244, 19124, 19013, 18895, 18782, 18662, 18546, 18422, 18303, 18178, 18049, 17926, 17785, 17655, 17513, 17363, 17225, 17063, 16908, 16752, 16568, 16415, 16216, 16041, 15847, 15646, 15446, 15231, 15013, 14788, 14550, 14312, 14062, 13802, 13542, 13267, 12984, 12700, 12401, 12099, 11791, 11466, 11145, 10808, 10466, 10122, 9763, 9401, 9040, 8656, 8286, 7895, 7503, 7115, 6702, 6310, 5890, 5488, 5072, 4656, 4242, 3820, 3396, 2976, 2537, 2113, 1678, 1238, 807, 362, -73, -508, -952, -1378, -1822, -2244, -2677, -3107, -3509, -3918, -4389, -4798, -5160, -5531, -5905, -6276, -6662, -7044, -7437, -7821, -8212, -8604, -8980, -9369, -9735, -10117, -10469, -10841, -11181, -11536, -11869, -12205, -12532, -12851, -13161, -13475, -13764, -14067, -14345, -14629, -14900, -15166, -15427, -15682, -15924, -16170, -16400, -16629, -16850, -17062, -17275, -17472, -17672, -17859, -18043, -18220, -18388, -18556, -18710, -18867, -19009, -19152, -19281, -19417, -19528, -19655, -19755, -19865, -19962, -20053, -20146, -20218, -20305, -20368, -20439, -20496, -20555, -20607, -20653, -20696, -20736, -20768, -20802, -20832, -20876, -20872, -20834, -20907, -20958, -21007, -21042, -21065, -21065, -21071, -21048, -21040, -21012, -20989, -20969, -20939, -20920, -20897, -20880, -20863, -20848, -20836, -20829, -20821, -20822, -20817, -20826, -20833, -20850, -20860, -20890, -20905, -20946, -20968, -21012, -21044, -21094, -21132, -21188, -21233, -21291, -21346, -21399, -21466, -21520, -21590, -21653, -21718, -21793, -21855, -21934, -22005, -22078, -22160, -22228, -22317, -22387, -22475, -22550, -22637, -22715, -22803, -22884, -22970, -23051, -23144, -23215, -23315, -23385, -23476, -23561, -23638, -23728, -23803, -23887, -23968, -24044, -24125, -24200, -24273, -24353, -24416, -24496, -24559, -24626, -24695, -24754, -24815, -24879, -24923, -24994, -25028, -25088, -25129, -25174, -25216, -25254, -25286, -25324, -25349, -25379, -25401, -25423, -25440, -25456, -25464, -25479, -25479, -25485, -25483, -25478, -25474, -25461, -25451, -25433, -25416, -25392, -25370, -25341, -25313, -25276, -25245, -25202, -25162, -25122, -25067, -25031, -24966, -24929, -24856, -24814, -24741, -24690, -24619, -24559, -24486, -24422, -24349, -24276, -24208, -24127, -24057, -23976, -23899, -23823, -23737, -23667, -23575, -23501, -23415, -23330, -23255, -23159, -23087, -22993, -22915, -22826, -22743, -22656, -22574, -22482, -22405, -22311, -22230, -22142, -22051, -21972, -21875, -21796, -21706, -21618, -21540, -21446, -21369, -21279, -21193, -21116, -21019, -20946, -20851, -20768, -20681, -20595, -20502, -20422, -20321, -20242, -20142, -20054, -19964, -19864, -19780, -19674, -19588, -19481, -19383, -19284, -19173, -19073, -18956, -18845, -18730, -18609, -18484, -18363, -18223, -18096, -17952, -17808, -17661, -17505, -17347, -17183, -17014, -16838, -16657, -16474, -16276, -16084, -15878, -15668, -15453, -15232, -15001, -14776, -14526, -14290, -14035, -13780, -13519, -13250, -12979, -12698, -12420, -12129, -11836, -11543, -11235, -10939, -10618, -10314, -9985, -9676, -9336, -9022, -8673, -8353, -8000, -7668, -7315, -6974, -6616, -6268, -5908, -5554, -5192, -4831, -4465, -4103, -3733, -3367, -2995, -2626, -2252, -1881, -1505, -1132, -756, -384, -4, 365, 747, 1110, 1495, 1855, 2241, 2598, 2981, 3335, 3715, 4067, 4440, 4795, 5156, 5513, 5866, 6221, 6571, 6915, 7264, 7602, 7947, 8278, 8618, 8943, 9275, 9593, 9914, 10251, 10578, 10874, 11164, 11456, 11745, 12046, 12340, 12641, 12943, 13240, 13533, 13838, 14117, 14417, 14694, 14980, 15255, 15532, 15795, 16066, 16321, 16579, 16831, 17072, 17322, 17547, 17789, 18010, 18236, 18450, 18664, 18869, 19075, 19271, 19464, 19654, 19834, 20020, 20186, 20365, 20519, 20690, 20831, 20993, 21123, 21275, 21399, 21538, 21660, 21789, 21908, 22030, 22143, 22261, 22365, 22479, 22574, 22677, 22772, 22866, 22951, 23043, 23116, 23205, 23275, 23350, 23422, 23487, 23555, 23616, 23679, 23732, 23796, 23841, 23903, 23945, 23999, 24044, 24089, 24139, 24175, 24226, 24262, 24304, 24345, 24378, 24420, 24453, 24490, 24529, 24553, 24596, 24618, 24656, 24680, 24715, 24730, 24773, 24777, 24823, 24828, 24859, 24876, 24890, 24910, 24928, 24936, 24959, 24957, 24982, 24977, 24994, 24992, 25001, 25002, 25004, 25002, 25026, 24981, 24958, 24984, 25008, 25018, 25024, 25025, 25007, 24995, 24967, 24941, 24913, 24876, 24849, 24810, 24783, 24745, 24719, 24685, 24655, 24631, 24599, 24579, 24554, 24530, 24517, 24494, 24485, 24468, 24460, 24449, 24446, 24442, 24439, 24442, 24439, 24448, 24449, 24457, 24469, 24472, 24498, 24499, 24529, 24538, 24564, 24591, 24605, 24646, 24657, 24697, 24722, 24748, 24788, 24807, 24849, 24872, 24905, 24937, 24968, 24995, 25030, 25053, 25091, 25112, 25144, 25172, 25195, 25225, 25248, 25269, 25301, 25311, 25346, 25352, 25381, 25395, 25407, 25429, 25433, 25455, 25455, 25472, 25471, 25481, 25482, 25481, 25486, 25476, 25480, 25463, 25464, 25451, 25435, 25430, 25403, 25395, 25368, 25348, 25326, 25295, 25274, 25237, 25212, 25173, 25140, 25102, 25064, 25020, 24984, 24931, 24894, 24842, 24794, 24747, 24690, 24643, 24587, 24527, 24479, 24411, 24360, 24295, 24239, 24170, 24116, 24041, 23989, 23916, 23854, 23786, 23722, 23652, 23587, 23514, 23450, 23378, 23308, 23242, 23166, 23100, 23024, 22955, 22882, 22808, 22733, 22659, 22578, 22506, 22417, 22345, 22250, 22179, 22077, 22000, 21900, 21810, 21714, 21613, 21509, 21411, 21292, 21193, 21064, 20961, 20830, 20712, 20581, 20448, 20318, 20177, 20037, 19893, 19744, 19594, 19440, 19282, 19122, 18957, 18788, 18615, 18445, 18259, 18094, 17900, 17731, 17541, 17357, 17180, 16980, 16807, 16606, 16422, 16227, 16034, 15835, 15641, 15435, 15242, 15029, 14833, 14616, 14415, 14202, 13988, 13779, 13560, 13343, 13128, 12901, 12684, 12458, 12230, 12006, 11776, 11538, 11314, 11068, 10841, 10591, 10359, 10108, 9866, 9616, 9365, 9113, 8861, 8599, 8349, 8079, 7824, 7554, 7289, 7019, 6750, 6478, 6204, 5925, 5650, 5365, 5090, 4805, 4520, 4237, 3946, 3659, 3374, 3074, 2791, 2495, 2200, 1910, 1609, 1319, 1022, 723, 432, 127, -160, -465, -757, -1052, -1353, -1642, -1943, -2234, -2528, -2823, -3112, -3404, -3694, -3983, -4271, -4557, -4843, -5128, -5407, -5696, -5964, -6259, -6518, -6810, -7073, -7351, -7618, -7889, -8153, -8424, -8679, -8951, -9199, -9471, -9714, -9980, -10223, -10479, -10727, -10969, -11219, -11458, -11696, -11942, -12168, -12412, -12635, -12870, -13097, -13319, -13550, -13763, -13984, -14205, -14409, -14636, -14829, -15049, -15248, -15452, -15656, -15848, -16049, -16239, -16435, -16619, -16812, -16993, -17177, -17356, -17537, -17708, -17891, -18052, -18228, -18395, -18554, -18727, -18877, -19044, -19195, -19351, -19504, -19652, -19797, -19946, -20081, -20228, -20360, -20490, -20635, -20746, -20888, -21003, -21125, -21247, -21356, -21475, -21582, -21690, -21795, -21898, -21995, -22092, -22187, -22273, -22368, -22444, -22530, -22612, -22683, -22765, -22828, -22905, -22970, -23034, -23099, -23162, -23210, -23285, -23314, -23387, -23440, -23497, -23538, -23563, -23613, -23636, -23689, -23723, -23771, -23815, -23862, -23904, -23956, -23990, -24044, -24080, -24123, -24170, -24201, -24250, -24283, -24319, -24363, -24388, -24429, -24460, -24491, -24523, -24555, -24578, -24616, -24632, -24668, -24686, -24714, -24736, -24756, -24781, -24796, -24823, -24833, -24857, -24868, -24888, -24899, -24916, -24927, -24942, -24954, -24966, -24978, -24989, -24997, -25012, -25018, -25029, -25040, -25046, -25060, -25064, -25076, -25077, -25094, -25094, -25110, -25108, -25123, -25124, -25137, -25141, -25145, -25161, -25155, -25176, -25170, -25183, -25193, -25190, -25213, -25204, -25222, -25225, -25232, -25242, -25249, -25256, -25265, -25269, -25278, -25292, -25289, -25311, -25308, -25322, -25332, -25332, -25350, -25350, -25365, -25365, -25378, -25387, -25390, -25404, -25401, -25417, -25419, -25429, -25429, -25443, -25438, -25455, -25450, -25461, -25460, -25467, -25466, -25474, -25472, -25475, -25478, -25477, -25477, -25479, -25473, -25477, -25471, -25471, -25464, -25483, -25465, -25418, -25427, -25456, -25462, -25482, -25475, -25477, -25456, -25446, -25416, -25402, -25364, -25349, -25313, -25288, -25265, -25228, -25213, -25178, -25156, -25133, -25106, -25084, -25066, -25039, -25022, -25005, -24982, -24974, -24950, -24938, -24928, -24908, -24904, -24885, -24877, -24870, -24852, -24854, -24831, -24833, -24817, -24810, -24801, -24792, -24778, -24777, -24753, -24757, -24729, -24729, -24702, -24700, -24672, -24666, -24637, -24628, -24593, -24587, -24546, -24535, -24499, -24473, -24439, -24414, -24372, -24344, -24302, -24263, -24226, -24175, -24140, -24079, -24045, -23984, -23935, -23878, -23820, -23760, -23699, -23629, -23568, -23492, -23426, -23346, -23270, -23185, -23107, -23015, -22929, -22835, -22741, -22641, -22540, -22431, -22331, -22210, -22107, -21975, -21864, -21733, -21605, -21479, -21338, -21205, -21060, -20920, -20773, -20620, -20474, -20311, -20161, -19997, -19833, -19671, -19502, -19333, -19163, -18989, -18813, -18639, -18457, -18281, -18096, -17918, -17727, -17551, -17352, -17179, -16977, -16795, -16604, -16405, -16225, -16018, -15832, -15633, -15435, -15241, -15041, -14837, -14646, -14431, -14243, -14025, -13829, -13618, -13408, -13203, -12986, -12780, -12560, -12353, -12125, -11921, -11686, -11475, -11247, -11021, -10804, -10562, -10347, -10103, -9877, -9645, -9399, -9175, -8923, -8687, -8446, -8193, -7959, -7700, -7459, -7204, -6950, -6700, -6444, -6184, -5929, -5665, -5410, -5140, -4884, -4615, -4353, -4082, -3815, -3548, -3278, -3009, -2738, -2464, -2195, -1920, -1650, -1374, -1102, -829, -551, -285, 0, 258, 548, 807, 1090, 1353, 1632, 1898, 2173, 2437, 2714, 2973, 3245, 3513, 3773, 4047, 4300, 4569, 4831, 5084, 5353, 5601, 5865, 6118, 6369, 6629, 6873, 7132, 7373, 7628, 7868, 8120, 8359, 8606, 8844, 9084, 9326, 9554, 9803, 10023, 10263, 10495, 10716, 10957, 11170, 11403, 11625, 11845, 12065, 12288, 12497, 12722, 12925, 13148, 13346, 13568, 13762, 13978, 14173, 14379, 14577, 14775, 14975, 15165, 15363, 15552, 15740, 15933, 16112, 16301, 16482, 16660, 16843, 17017, 17193, 17368, 17536, 17708, 17877, 18036, 18212, 18359, 18539, 18678, 18848, 18997, 19152, 19307, 19451, 19602, 19749, 19891, 20034, 20178, 20311, 20452, 20586, 20711, 20856, 20968, 21112, 21222, 21356, 21469, 21593, 21705, 21822, 21932, 22046, 22150, 22259, 22362, 22462, 22564, 22659, 22756, 22846, 22940, 23026, 23115, 23199, 23279, 23363, 23438, 23516, 23589, 23662, 23733, 23803, 23865, 23934, 23992, 24059, 24115, 24172, 24234, 24277, 24346, 24381, 24446, 24485, 24536, 24582, 24625, 24673, 24709, 24757, 24791, 24831, 24873, 24901, 24945, 24973, 25005, 25044, 25064, 25104, 25123, 25143, 25199, 25216, 25234, 25244, 25248, 25274, 25278, 25305, 25319, 25340, 25358, 25379, 25392, 25413, 25424, 25439, 25451, 25459, 25469, 25473, 25482, 25480, 25483, 25482, 25477, 25474, 25466, 25455, 25449, 25430, 25421, 25401, 25385, 25362, 25346, 25316, 25301, 25264, 25248, 25210, 25187, 25157, 25120, 25094, 25053, 25027, 24984, 24952, 24913, 24877, 24837, 24799, 24759, 24717, 24680, 24635, 24595, 24553, 24508, 24466, 24421, 24377, 24334, 24285, 24242, 24193, 24146, 24101, 24047, 24008, 23947, 23907, 23852, 23800, 23754, 23694, 23648, 23588, 23540, 23483, 23429, 23371, 23316, 23258, 23201, 23142, 23081, 23026, 22961, 22906, 22839, 22781, 22718, 22652, 22595, 22523, 22469, 22396, 22336, 22270, 22204, 22138, 22074, 22005, 21942, 21873, 21806, 21741, 21672, 21610, 21538, 21474, 21405, 21339, 21271, 21203, 21139, 21067, 21007, 20930, 20874, 20798, 20735, 20668, 20598, 20535, 20459, 20423, 20330, 20231, 20183, 20135, 20095, 20042, 19986, 19921, 19852, 19776, 19704, 19622, 19545, 19467, 19385, 19312, 19227, 19158, 19076, 19009, 18932, 18861, 18794, 18720, 18662, 18589, 18534, 18463, 18413, 18348, 18294, 18241, 18182, 18139, 18078, 18037, 17984, 17940, 17889, 17850, 17799, 17762, 17717, 17672, 17637, 17588, 17556, 17506, 17476, 17428, 17392, 17348, 17311, 17267, 17228, 17184, 17143, 17097, 17057, 17009, 16966, 16918, 16874, 16820, 16778, 16719, 16674, 16617, 16564, 16507, 16451, 16392, 16330, 16273, 16207, 16142, 16079, 16007, 15943, 15868, 15797, 15723, 15649, 15569, 15495, 15406, 15334, 15242, 15160, 15078, 14979, 14902, 14801, 14710, 14620, 14513, 14430, 14316, 14226, 14119, 14015, 13912, 13801, 13696, 13585, 13473, 13358, 13250, 13121, 13021, 12885, 12775, 12650, 12524, 12404, 12273, 12149, 12016, 11891, 11750, 11627, 11484, 11352, 11215, 11070, 10938, 10788, 10654, 10500, 10363, 10206, 10069, 9910, 9764, 9610, 9455, 9304, 9142, 8991, 8830, 8669, 8508, 8345, 8183, 8015, 7853, 7681, 7517, 7347, 7170, 7008, 6824, 6661, 6480, 6301, 6134, 5941, 5780, 5585, 5413, 5230, 5043, 4866, 4679, 4492, 4314, 4118, 3941, 3745, 3567, 3370, 3190, 2993, 2810, 2617, 2429, 2238, 2046, 1860, 1667, 1476, 1288, 1094, 906, 714, 526, 333, 146, -48, -233, -426, -612, -805, -992, -1179, -1372, -1552, -1749, -1930, -2120, -2306, -2494, -2672, -2869, -3042, -3234, -3416, -3598, -3781, -3967, -4140, -4333, -4503, -4690, -4868, -5045, -5225, -5405, -5575, -5766, -5921, -6117, -6274, -6459, -6628, -6796, -6973, -7142, -7310, -7482, -7648, -7817, -7984, -8148, -8315, -8478, -8642, -8806, -8965, -9126, -9290, -9441, -9610, -9755, -9924, -10068, -10232, -10378, -10538, -10683, -10837, -10986, -11130, -11286, -11423, -11576, -11720, -11856, -12011, -12139, -12291, -12426, -12563, -12702, -12839, -12972, -13111, -13241, -13375, -13505, -13635, -13767, -13888, -14023, -14142, -14272, -14392, -14518, -14633, -14763, -14873, -14996, -15111, -15229, -15345, -15455, -15570, -15682, -15792, -15899, -16011, -16115, -16221, -16332, -16424, -16543, -16627, -16741, -16837, -16928, -17042, -17117, -17230, -17315, -17407, -17505, -17588, -17684, -17770, -17856, -17942, -18031, -18108, -18200, -18273, -18359, -18434, -18513, -18590, -18665, -18737, -18811, -18882, -18951, -19025, -19088, -19161, -19225, -19288, -19356, -19416, -19478, -19539, -19599, -19656, -19718, -19768, -19828, -19881, -19935, -19984, -20043, -20082, -20145, -20181, -20233, -20281, -20318, -20375, -20402, -20460, -20485, -20536, -20570, -20608, -20646, -20682, -20715, -20749, -20784, -20809, -20852, -20865, -20911, -20924, -20960, -20984, -21003, -21037, -21050, -21078, -21097, -21112, -21141, -21146, -21178, -21180, -21205, -21212, -21230, -21238, -21254, -21257, -21275, -21276, -21289, -21290, -21301, -21301, -21308, -21311, -21308, -21317, -21309, -21312, -21302, -21309, -21324, -21297, -21292, -21272, -21256, -21252, -21236, -21233, -21221, -21220, -21202, -21207, -21187, -21184, -21170, -21156, -21147, -21127, -21118, -21094, -21084, -21057, -21040, -21014, -20997, -20962, -20947, -20908, -20886, -20851, -20823, -20785, -20758, -20714, -20684, -20642, -20603, -20567, -20519, -20483, -20433, -20397, -20340, -20306, -20248, -20206, -20159, -20101, -20061, -20004, -19955, -19900, -19852, -19789, -19745, -19685, -19629, -19582, -19512, -19470, -19401, -19352, -19291, -19234, -19176, -19117, -19059, -18995, -18929, -18868, -18796, -18739, -18665, -18608, -18532, -18477, -18401, -18342, -18271, -18208, -18136, -18078, -18004, -17941, -17878, -17803, -17749, -17671, -17613, -17543, -17476, -17414, -17341, -17284, -17211, -17151, -17080, -17017, -16955, -16882, -16824, -16751, -16692, -16621, -16561, -16493, -16427, -16369, -16293, -16242, -16166, -16111, -16042, -15980, -15917, -15848, -15795, -15721, -15666, -15601, -15537, -15479, -15412, -15352, -15294, -15224, -15176, -15101, -15054, -14984, -14930, -14869, -14807, -14750, -14688, -14657, -14572, -14481, -14439, -14415, -14372, -14339, -14289, -14230, -14180, -14106, -14048, -13976, -13908, -13843, -13771, -13707, -13641, -13572, -13514, -13444, -13389, -13326, -13265, -13214, -13153, -13099, -13051, -12992, -12951, -12899, -12854, -12809, -12762, -12723, -12682, -12639, -12605, -12558, -12532, -12487, -12458, -12421, -12385, -12355, -12317, -12289, -12255, -12220, -12193, -12153, -12126, -12095, -12053, -12037, -11983, -11968, -11920, -11890, -11860, -11812, -11790, -11736, -11715, -11663, -11631, -11587, -11544, -11503, -11460, -11411, -11371, -11316, -11277, -11217, -11177, -11115, -11070, -11013, -10955, -10905, -10838, -10787, -10723, -10659, -10602, -10532, -10467, -10406, -10329, -10266, -10197, -10116, -10060, -9968, -9906, -9822, -9744, -9671, -9584, -9507, -9422, -9340, -9252, -9173, -9074, -8998, -8898, -8809, -8707, -8608, -8510, -8409, -8305, -8207, -8098, -7997, -7892, -7781, -7683, -7566, -7463, -7353, -7239, -7135, -7013, -6910, -6787, -6682, -6560, -6447, -6331, -6213, -6095, -5982, -5852, -5747, -5615, -5502, -5378, -5260, -5134, -5018, -4889, -4773, -4643, -4523, -4400, -4270, -4156, -4019, -3907, -3774, -3653, -3526, -3403, -3275, -3154, -3022, -2903, -2774, -2651, -2524, -2399, -2277, -2148, -2029, -1897, -1778, -1652, -1528, -1403, -1280, -1155, -1036, -909, -788, -668, -542, -422, -303, -176, -65, 67, 178, 305, 415, 547, 650, 783, 888, 1015, 1124, 1247, 1357, 1476, 1592, 1702, 1820, 1931, 2043, 2159, 2266, 2380, 2490, 2600, 2707, 2822, 2921, 3039, 3138, 3249, 3354, 3458, 3564, 3669, 3768, 3881, 3971, 4083, 4175, 4280, 4377, 4481, 4571, 4676, 4767, 4865, 4965, 5049, 5154, 5240, 5332, 5432, 5511, 5612, 5694, 5787, 5872, 5963, 6044, 6136, 6215, 6306, 6381, 6472, 6547, 6631, 6712, 6789, 6872, 6946, 7025, 7098, 7179, 7250, 7325, 7400, 7466, 7545, 7611, 7681, 7753, 7816, 7889, 7950, 8021, 8079, 8148, 8200, 8272, 8315, 8391, 8433, 8502, 8547, 8609, 8657, 8715, 8762, 8818, 8864, 8918, 8960, 9015, 9055, 9107, 9148, 9193, 9238, 9276, 9325, 9358, 9404, 9442, 9475, 9520, 9550, 9589, 9625, 9657, 9690, 9726, 9752, 9787, 9816, 9843, 9876, 9897, 9928, 9953, 9977, 10005, 10024, 10050, 10072, 10092, 10114, 10133, 10153, 10170, 10189, 10205, 10221, 10236, 10249, 10265, 10279, 10289, 10304, 10310, 10325, 10331, 10340, 10352, 10352, 10369, 10365, 10376, 10379, 10384, 10385, 10391, 10389, 10393, 10392, 10394, 10390, 10392, 10386, 10388, 10381, 10379, 10374, 10368, 10365, 10355, 10350, 10343, 10332, 10321, 10320, 10313, 10300, 10276, 10263, 10245, 10229, 10220, 10201, 10197, 10176, 10168, 10154, 10138, 10131, 10106, 10103, 10073, 10069, 10043, 10028, 10012, 9984, 9971, 9946, 9921, 9905, 9871, 9855, 9824, 9800, 9771, 9745, 9714, 9687, 9656, 9624, 9596, 9561, 9532, 9495, 9464, 9427, 9396, 9359, 9323, 9290, 9248, 9221, 9172, 9144, 9101, 9068, 9025, 8990, 8950, 8910, 8876, 8828, 8800, 8748, 8720, 8672, 8635, 8600, 8550, 8521, 8471, 8441, 8392, 8362, 8313, 8282, 8237, 8200, 8159, 8121, 8079, 8047, 8004, 7972, 7930, 7899, 7855, 7828, 7781, 7755, 7710, 7680, 7643, 7605, 7576, 7533, 7506, 7466, 7433, 7400, 7363, 7332, 7297, 7262, 7231, 7197, 7163, 7132, 7099, 7062, 7037, 6999, 6972, 6938, 6904, 6880, 6840, 6818, 6781, 6753, 6724, 6689, 6665, 6632, 6605, 6573, 6548, 6514, 6493, 6457, 6435, 6403, 6377, 6351, 6326, 6310, 6253, 6225, 6222, 6202, 6189, 6169, 6142, 6121, 6087, 6066, 6028, 6005, 5968, 5945, 5913, 5885, 5856, 5828, 5804, 5777, 5751, 5729, 5703, 5684, 5658, 5640, 5620, 5600, 5582, 5565, 5545, 5534, 5513, 5504, 5484, 5473, 5459, 5446, 5434, 5420, 5409, 5399, 5386, 5374, 5364, 5353, 5340, 5333, 5316, 5312, 5294, 5288, 5273, 5263, 5252, 5239, 5227, 5214, 5200, 5189, 5170, 5163, 5140, 5133, 5112, 5098, 5082, 5062, 5049, 5028, 5008, 4994, 4966, 4954, 4929, 4906, 4890, 4859, 4845, 4814, 4795, 4769, 4740, 4722, 4685, 4670, 4631, 4613, 4577, 4554, 4521, 4491, 4463, 4427, 4401, 4365, 4333, 4301, 4267, 4234, 4199, 4163, 4130, 4092, 4059, 4019, 3986, 3946, 3911, 3869, 3835, 3793, 3756, 3717, 3675, 3638, 3595, 3556, 3515, 3474, 3431, 3390, 3349, 3305, 3264, 3220, 3176, 3138, 3088, 3048, 3003, 2959, 2917, 2869, 2829, 2779, 2740, 2689, 2648, 2603, 2554, 2514, 2462, 2427, 2381, 2343, 2297, 2261, 2210, 2178, 2126, 2089, 2045, 2001, 1961, 1914, 1875, 1827, 1788, 1741, 1700, 1656, 1612, 1569, 1523, 1484, 1435, 1397, 1347, 1309, 1261, 1219, 1179, 1131, 1091, 1044, 1003, 960, 917, 873, 828, 791, 740, 706, 656, 618, 575, 532, 491, 449, 407, 364, 326, 281, 243, 199, 160, 118, 79, 37, -2, -42, -83, -121, -163, -198, -241, -276, -317, -358, -389, -436, -466, -508, -544, -580, -618, -655, -689, -731, -760, -801, -835, -869, -906, -939, -975, -1007, -1044, -1074, -1113, -1140, -1179, -1205, -1245, -1270, -1307, -1337, -1367, -1401, -1431, -1459, -1494, -1519, -1554, -1579, -1612, -1639, -1669, -1695, -1727, -1750, -1783, -1806, -1835, -1863, -1887, -1914, -1940, -1964, -1994, -2014, -2043, -2064, -2091, -2112, -2139, -2159, -2185, -2205, -2228, -2254, -2269, -2299, -2311, -2339, -2356, -2380, -2397, -2420, -2436, -2458, -2477, -2494, -2516, -2528, -2554, -2564, -2585, -2603, -2615, -2638, -2648, -2669, -2681, -2699, -2713, -2726, -2745, -2755, -2773, -2783, -2799, -2809, -2826, -2835, -2849, -2861, -2873, -2885, -2895, -2907, -2916, -2929, -2939, -2948, -2959, -2967, -2979, -2985, -2995, -3003, -3010, -3022, -3024, -3039, -3038, -3052, -3055, -3061, -3071, -3072, -3083, -3084, -3092, -3096, -3101, -3105, -3111, -3113, -3120, -3120, -3128, -3127, -3134, -3134, -3138, -3140, -3143, -3145, -3145, -3148, -3149, -3150, -3153, -3151, -3155, -3152, -3154, -3154, -3153, -3156, -3149, -3154, -3149, -3151, -3148, -3147, -3144, -3145, -3139, -3141, -3137, -3132, -3134, -3125, -3127, -3122, -3118, -3117, -3109, -3109, -3103, -3098, -3096, -3088, -3087, -3078, -3078, -3074, -3066, -3059, -3051, -3047, -3038, -3032, -3029, -3016, -3021, -3004, -3009, -2993, -2996, -2983, -2982, -2973, -2966, -2961, -2951, -2947, -2938, -2931, -2922, -2914, -2907, -2897, -2890, -2879, -2871, -2862, -2851, -2842, -2833, -2820, -2814, -2801, -2791, -2782, -2768, -2759, -2747, -2737, -2723, -2716, -2699, -2693, -2677, -2669, -2652, -2648, -2631, -2630, -2614, -2610, -2599, -2590, -2580, -2572, -2561, -2554, -2543, -2536, -2525, -2514, -2510, -2494, -2491, -2478, -2470, -2461, -2450, -2442, -2433, -2423, -2415, -2404, -2395, -2388, -2377, -2370, -2360, -2349, -2343, -2332, -2325, -2314, -2307, -2296, -2290, -2279, -2272, -2261, -2257, -2243, -2241, -2225, -2224, -2210, -2205, -2198, -2185, -2184, -2168, -2167, -2156, -2149, -2139, -2134, -2124, -2119, -2109, -2102, -2095, -2087, -2081, -2072, -2066, -2058, -2050, -2044, -2036, -2029, -2024, -2012, -2012, -1996, -1999, -1985, -1983, -1974, -1967, -1961, -1955, -1947, -1941, -1933, -1929, -1922, -1915, -1914, -1902, -1887, -1891, -1885, -1887, -1880, -1876, -1870, -1862, -1858, -1847, -1841, -1832, -1826, -1816, -1811, -1799, -1799, -1784, -1786, -1768, -1773, -1758, -1759, -1748, -1747, -1739, -1737, -1730, -1729, -1722, -1721, -1715, -1714, -1708, -1709, -1703, -1703, -1701, -1696, -1697, -1691, -1694, -1688, -1690, -1687, -1684, -1685, -1680, -1683, -1678, -1678, -1675, -1675, -1671, -1672, -1667, -1668, -1664, -1664, -1659, -1658, -1657, -1652, -1650, -1648, -1643, -1642, -1636, -1635, -1630, -1628, -1621, -1620, -1610, -1612, -1601, -1602, -1592, -1591, -1581, -1579, -1570, -1566, -1559, -1553, -1546, -1539, -1533, -1525, -1518, -1510, -1502, -1494, -1486, -1477, -1469, -1460, -1451, -1442, -1432, -1426, -1413, -1405, -1396, -1381, -1379, -1360, -1357, -1341, -1334, -1319, -1312, -1299, -1288, -1276, -1265, -1253, -1242, -1229, -1217, -1207, -1191, -1182, -1166, -1157, -1143, -1130, -1117, -1105, -1090, -1081, -1064, -1052, -1039, -1022, -1013, -996, -984, -970, -957, -941, -929, -914, -899, -887, -870, -859, -842, -830, -813, -800, -787, -770, -758, -741, -729, -712, -701, -682, -670, -655, -641, -626, -612, -596, -583, -568, -555, -538, -526, -508, -499, -478, -469, -451, -441, -424, -408, -398, -379, -371, -352, -340, -326, -312, -299, -282, -274, -254, -246, -229, -217, -204, -189, -176, -165, -148, -140, -122, -113, -98, -85, -73, -60, -49, -35, -24, -9, -1, 16, 25, 38, 50, 60, 73, 86, 94, 109, 118, 130, 143, 150, 167, 171, 188, 192, 210, 213, 230, 234, 251, 256, 268, 278, 287, 298, 305, 318, 324, 336, 344, 351, 366, 368, 381, 388, 396, 407, 414, 422, 430, 437, 447, 454, 462, 468, 478, 483, 493, 497, 506, 515, 517, 531, 528, 543, 547, 552, 561, 563, 573, 575, 586, 586, 597, 598, 605, 612, 615, 622, 626, 629, 639, 639, 646, 650, 652, 661, 660, 669, 669, 675, 678, 683, 686, 688, 694, 695, 700, 702, 704, 709, 710, 715, 715, 720, 720, 726, 723, 732, 725, 737, 729, 741, 733, 742, 738, 745, 740, 748, 744, 747, 750, 746, 753, 748, 754, 750, 754, 753, 752, 755, 753, 753, 755, 753, 755, 754, 752, 753, 753, 751, 752, 750, 751, 748, 750, 747, 748, 746, 744, 745, 741, 742, 740, 736, 738, 732, 734, 728, 730, 729, 731, 731, 732, 733, 735, 734, 736, 734, 738, 736, 738, 736, 740, 736, 740, 737, 738, 738, 737, 737, 737, 737, 736, 735, 736, 731, 738, 729, 735, 730, 729, 732, 724, 730, 724, 726, 723, 722, 720, 720, 717, 717, 715, 713, 714, 708, 712, 704, 709, 702, 703, 700, 700, 696, 695, 695, 691, 692, 685, 688, 684, 683, 684, 674, 681, 673, 676, 672, 668, 670, 666, 664, 665, 657, 663, 654, 657, 653, 653, 649, 649, 647, 645, 644, 640, 641, 635, 641, 629, 639, 626, 633, 627, 625, 626, 622, 622, 620, 617, 617, 614, 614, 611, 611, 609, 606, 608, 601, 606, 599, 601, 598, 597, 595, 593, 593, 591, 589, 591, 583, 588, 582, 584, 581, 580, 578, 579, 574, 577, 572, 572, 570, 570, 571, 569, 571, 565, 569, 562, 566, 560, 561, 557, 558, 555, 552, 554, 548, 552, 545, 550, 545, 543, 544, 542, 543, 541, 540, 539, 541, 537, 539, 537, 539, 535, 539, 535, 538, 537, 537, 537, 537, 537, 537, 538, 535, 540, 533, 541, 535, 537, 538, 535, 539, 536, 538, 535, 539, 534, 537, 537, 534, 537, 533, 535, 534, 533, 533, 531, 532, 530, 529, 530, 525, 529, 523, 525, 523, 521, 521, 519, 516, 518, 511, 515, 508, 512, 505, 506, 503, 500, 501, 494, 496, 491, 488, 489, 482, 484, 477, 477, 474, 470, 470, 462, 466, 455, 459, 451, 451, 447, 442, 438, 439, 431, 431, 425, 422, 419, 415, 413, 406, 407, 397, 398, 391, 390, 383, 384, 373, 377, 365, 366, 361, 355, 353, 348, 343, 342, 333, 332, 326, 324, 317, 315, 310, 304, 302, 295, 293, 287, 283, 279, 273, 271, 265, 260, 256, 251, 246, 244, 235, 234, 228, 224, 219, 214, 212, 202, 204, 195, 191, 189, 181, 180, 171, 170, 164, 160, 156, 148, 150, 140, 140, 131, 131, 122, 122, 115, 111, 107, 103, 97, 96, 88, 86, 80, 78, 72, 70, 63, 61, 56, 51, 49, 44, 40, 36, 31, 30, 23, 20, 16, 13, 8, 5, 1, -3, -5, -11, -14, -17, -21, -24, -29, -32, -34, -41, -40, -48, -48, -51, -58, -57, -63, -67, -66, -76, -71, -81, -78, -88, -83, -93, -91, -96, -101, -100, -106, -108, -109, -114, -116, -118, -123, -122, -129, -127, -134, -132, -139, -137, -144, -142, -149, -146, -152, -153, -155, -160, -158, -163, -164, -165, -171, -165, -177, -171, -177, -178, -179, -183, -184, -186, -186, -189, -193, -189, -197, -193, -200, -196, -202, -201, -203, -207, -203, -210, -208, -210, -212, -212, -215, -214, -216, -219, -218, -220, -222, -220, -225, -224, -223, -228, -225, -229, -230, -227, -233, -229, -234, -230, -235, -234, -235, -235, -235, -238, -237, -238, -239, -238, -241, -238, -242, -240, -240, -245, -239, -244, -241, -245, -241, -246, -240, -247, -242, -246, -243, -243, -246, -241, -248, -243, -243, -248, -240, -250, -241, -246, -243, -245, -243, -245, -243, -245, -244, -241, -245, -242, -242, -243, -240, -244, -240, -241, -241, -240, -241, -238, -243, -233, -245, -233, -241, -234, -236, -236, -233, -237, -231, -235, -232, -233, -232, -230, -232, -229, -230, -229, -228, -227, -229, -223, -229, -223, -224, -225, -222, -223, -221, -218, -222, -216, -221, -215, -216, -217, -212, -214, -212, -209, -213, -207, -209, -207, -205, -206, -203, -204, -201, -203, -197, -202, -195, -200, -194, -196, -194, -191, -195, -187, -193, -184, -189, -185, -185, -185, -182, -182, -182, -178, -182, -174, -179, -174, -174, -175, -169, -174, -167, -171, -168, -166, -167, -165, -163, -164, -161, -162, -160, -158, -159, -156, -156, -156, -153, -151, -154, -147, -154, -147, -148, -148, -144, -147, -143, -144, -141, -141, -140, -139, -138, -138, -134, -137, -133, -133, -132, -131, -131, -128, -131, -126, -129, -125, -125, -124, -122, -123, -121, -121, -116, -123, -113, -122, -113, -116, -114, -112, -114, -109, -112, -108, -111, -107, -106, -109, -102, -107, -100, -104, -101, -102, -99, -100, -98, -98, -98, -94, -98, -91, -96, -90, -90, -93, -86, -91, -85, -85, -87, -83, -83, -84, -79, -85, -77, -80, -79, -76, -79, -75, -76, -74, -75, -72};
154:               
155:               fractional __attribute__((space(psv))) snaresamp[6252] = {-114, -124, -115, -131, -144, -136, -135, -170, -178, -207, -251, -275, -274, -301, -315, -333, -325, -312, -293, -279, -277, -286, -323, -338, -293, -297, -291, -259, -296, -338, -343, -340, -380, -402, -403, -417, -417, -398, -419, -423, -410, -422, -432, -407, -397, -438, -479, -457, -451, -525, -526, -498, -517, -502, -502, -542, -522, -518, -504, -452, -426, -443, -460, -502, -509, -537, -540, -553, -576, -547, -530, -536, -541, -544, -520, -473, -501, -502, -483, -507, -506, -522, -559, -517, -534, -524, -489, -512, -481, -462, -501, -497, -597, -645, -539, -533, -608, -700, -701, -735, -900, -778, -455, -301, -235, -530, -927, -965, -997, -1004, -849, -786, -729, -752, -825, -785, -905, -890, -682, -539, -240, 53, 247, 425, 468, 542, 524, 333, 458, 988, 1849, 2512, 2504, 2200, 1661, 602, -1048, -2812, -3350, -2694, -1975, -1151, -382, -244, -522, -821, -965, -919, -818, -749, -726, -689, -772, -966, -1177, -1518, -1733, -1665, -1668, -1762, -2098, -2425, -1951, -1017, -688, -961, -1454, -2310, -3287, -3560, -3208, -2774, -2421, -2080, -1729, -1369, -988, -695, -619, -593, -512, -286, 7, 46, -108, -393, -687, -737, -854, -916, -765, -843, -875, -823, -798, -660, -928, -1424, -2217, -3921, -4833, -4068, -2939, -1986, -1289, -624, -61, 241, 934, 1513, 1659, 1949, 2058, 2331, 2836, 2963, 3326, 3494, 3258, 3181, 2657, 2160, 2309, 2458, 2456, 1941, 926, -449, -2116, -2312, -1187, -545, -486, -980, -827, 876, 2041, 1930, 1475, 511, -319, -181, -236, -1682, -2420, -677, 934, 1090, 1453, 2095, 2638, 3199, 3207, 3069, 3283, 3282, 2869, 2347, 2096, 2229, 2232, 1629, 520, -1068, -2920, -3975, -3543, -2693, -2359, -2013, -1058, -113, 212, -63, -995, -2846, -5067, -5791, -4103, -2398, -1892, -1211, -614, -547, -376, -303, -169, 405, 863, 994, 746, -361, -2380, -4311, -4112, -1440, 1036, 1323, 687, 567, 560, 376, 265, 899, 2633, 4364, 5496, 6185, 6291, 6425, 6982, 8002, 9603, 11032, 11991, 12217, 11866, 11654, 10310, 7183, 1736, -5379, -6259, 832, 5958, 7075, 8767, 10689, 11559, 11277, 10996, 10946, 9658, 6927, 1473, -3510, -1412, 2852, 3443, 4466, 5623, 3785, 1304, -754, -3540, -6268, -7811, -8565, -8132, -5399, -2526, -1159, 754, 2625, 2703, 2337, 2394, 2277, 1247, -876, -3366, -6410, -9741, -11685, -12466, -12694, -11826, -10476, -9332, -8162, -7201, -7198, -8633, -10542, -11790, -12574, -12580, -11861, -11364, -10679, -9555, -8636, -7667, -6826, -6699, -6837, -6744, -6407, -6254, -6850, -8117, -9927, -11810, -13114, -13725, -13688, -13118, -12256, -11534, -11025, -9896, -8063, -6573, -5666, -5106, -4761, -5202, -6847, -8513, -9055, -7931, -5523, -3204, -1442, -1589, -3992, -4081, -178, 3656, 5352, 5616, 5588, 5173, 3754, 3567, 6177, 8196, 6054, 2440, 2727, 3912, 431, -2124, 1628, 6944, 10218, 12120, 12689, 11407, 8380, 4829, 1145, -1796, -1237, 1232, 2146, 2914, 4509, 6239, 9083, 12491, 14528, 14938, 14924, 15195, 14860, 13910, 13298, 12538, 11158, 9031, 6263, 4006, 2433, 1619, 2776, 4696, 5598, 6255, 7289, 8438, 9429, 10097, 10553, 10770, 11101, 11664, 11841, 11389, 10419, 9491, 9453, 9730, 9086, 7419, 5434, 4459, 5103, 5895, 5271, 3592, 1647, -857, -3244, -2870, 406, 3187, 4101, 4639, 5229, 5242, 4571, 4220, 5394, 7219, 7788, 6921, 5211, 2880, 920, 353, 738, 744, -90, -1414, -3304, -5997, -8704, -10287, -10212, -8891, -6879, -4646, -2632, -1169, -646, -1280, -2647, -4243, -6072, -7883, -9320, -10216, -10300, -9474, -8579, -8568, -9247, -10039, -10454, -9736, -8256, -7311, -6982, -6822, -6756, -6520, -6329, -6218, -5793, -5510, -6096, -7549, -9700, -12266, -14162, -14286, -13362, -12902, -12714, -12770, -13196, -12719, -10637, -7796, -5416, -4703, -5293, -6416, -8281, -10664, -13103, -14946, -15771, -16277, -16344, -15561, -14847, -14351, -13752, -13395, -13062, -12478, -11306, -9535, -8257, -8197, -9111, -10296, -10629, -10014, -9031, -8252, -8203, -8425, -8443, -8291, -7999, -8214, -9031, -9520, -9199, -8224, -6964, -4848, -1803, 208, 1262, 2124, 1322, 478, 1174, 565, -1605, -3489, -5557, -6417, -4819, -3300, -3159, -2404, -340, 1674, 3898, 6876, 8475, 7875, 6675, 5423, 4469, 4037, 2872, 1078, 172, 709, 1834, 2170, 2012, 2523, 3417, 4079, 4662, 5499, 7010, 9077, 10815, 12229, 13815, 14733, 14348, 13841, 13670, 13011, 12042, 11344, 10519, 8986, 7056, 6502, 8139, 10536, 12438, 13126, 12417, 11449, 10896, 11218, 12987, 14115, 13173, 12410, 12357, 11565, 11618, 13181, 13557, 12780, 13134, 13544, 12182, 10274, 9895, 10940, 11274, 9857, 7643, 5419, 4708, 6700, 8772, 9185, 9764, 10721, 10828, 10467, 9922, 9077, 8102, 7002, 6037, 5205, 4356, 3734, 3158, 2551, 2288, 1979, 1280, 648, 724, 1832, 3437, 4874, 5969, 6008, 4434, 1833, -1106, -3402, -4234, -4154, -4334, -5372, -6122, -4467, -1295, 412, 292, -462, -1841, -3316, -3268, -1895, -1655, -3981, -8525, -14173, -18241, -18180, -15249, -12289, -9981, -7801, -5884, -4097, -1868, -161, -271, -1542, -3267, -5583, -7363, -8182, -9619, -12595, -16200, -18918, -19937, -19202, -16747, -12858, -9362, -7787, -6367, -3922, -3296, -5358, -7249, -8561, -10179, -11782, -13638, -16010, -18424, -19792, -18992, -17132, -15510, -14019, -13211, -13026, -12731, -12735, -12897, -12759, -12408, -11990, -12124, -12771, -13185, -13479, -13481, -12728, -11544, -10495, -9940, -9521, -8897, -8700, -8978, -9396, -9870, -9976, -10002, -10469, -11163, -12223, -13283, -12849, -10963, -9382, -8479, -7313, -6362, -6240, -6258, -6266, -6689, -7219, -7690, -8041, -8123, -7893, -7353, -7075, -7132, -6506, -4861, -2913, -1586, -1075, -1259, -1923, -1847, -372, 1435, 2950, 3585, 3831, 4923, 5247, 3311, 827, -254, 943, 2917, 4160, 5803, 7762, 9683, 12250, 13887, 14192, 14349, 13898, 12863, 11345, 9565, 8320, 6365, 2821, -2237, -7384, -6821, -1209, 2012, 3671, 7395, 10986, 13493, 16020, 18422, 19766, 19573, 19043, 18458, 17603, 16863, 15410, 13071, 7944, -1278, -6705, -4582, -3206, -3263, 1197, 6793, 9696, 12473, 15852, 18244, 19730, 20551, 20429, 19490, 18279, 17578, 17242, 16582, 15876, 15337, 14658, 13921, 12514, 10264, 9036, 9082, 7151, 2755, 2146, 7777, 12277, 13025, 14174, 14474, 13443, 14439, 15992, 16511, 16617, 15123, 12447, 9174, 5220, 2257, 942, 1474, 3555, 4745, 4973, 5455, 5847, 6321, 6226, 5286, 4581, 3852, 3256, 3269, 3171, 3415, 4092, 4485, 4597, 3989, 3056, 2352, 1251, 39, -1207, -3045, -4999, -6390, -5687, -2516, 468, 2152, 3084, 2515, 733, -1340, -3708, -5624, -5854, -4667, -3807, -4180, -5134, -6081, -6506, -5963, -4894, -3744, -2695, -2029, -1838, -2260, -3246, -3965, -3832, -3721, -4585, -6327, -8247, -8428, -5688, -3294, -3936, -5689, -7645, -10070, -10318, -8077, -7492, -9315, -11188, -13383, -14560, -11505, -6913, -4835, -3929, -3250, -3596, -4173, -4410, -4495, -4727, -5662, -7163, -9288, -12312, -15008, -15672, -14602, -13955, -13454, -10544, -6450, -4113, -3292, -2804, -3022, -4558, -6559, -9095, -13033, -14843, -12976, -12261, -12993, -11858, -9322, -5333, -1166, 700, 2022, 3250, 2443, 548, -1091, -1951, -1983, -2274, -3002, -3700, -3575, -2267, -1351, -1480, -2493, -4830, -6546, -5922, -4304, -2506, -284, 2134, 4872, 7851, 10280, 11917, 13147, 14007, 14339, 14115, 13317, 12527, 11661, 9920, 7097, 3360, 1358, 3437, 5747, 5901, 6801, 8658, 10070, 10943, 10286, 7780, 4302, 3319, 7249, 11087, 11898, 12962, 13927, 13562, 13480, 13715, 13293, 11794, 9265, 5227, 206, -1308, 1247, 2972, 4262, 6654, 8282, 9885, 11647, 11460, 9472, 7139, 6357, 7397, 7527, 5590, 3265, 2699, 4639, 7439, 9383, 9580, 7534, 4422, 1841, 1078, 2489, 3651, 2666, 1179, -284, -3393, -5584, -2791, 1589, 3033, 3972, 5204, 4254, 2020, -274, -3535, -6735, -7142, -4022, -615, 696, 1618, 3229, 4806, 5768, 4847, 2282, -795, -4602, -7902, -8999, -8492, -7502, -6801, -6663, -5865, -3698, -1544, -868, -1516, -2483, -2346, -381, 1148, -148, -2840, -5197, -6840, -6192, -4271, -4368, -6084, -8094, -9971, -8947, -5205, -2758, -2003, -2513, -4844, -7511, -10836, -13793, -11597, -6583, -4442, -3224, -1662, -2429, -4272, -5124, -6209, -7949, -9430, -10719, -11782, -12158, -11405, -8325, -4012, -1998, -1644, -116, 549, -1483, -3666, -4389, -5103, -6710, -8007, -8731, -9898, -11153, -11900, -10789, -6633, -2127, 481, 2140, 3075, 3758, 4152, 2453, -166, -2115, -4716, -7965, -9888, -9825, -8963, -8356, -7796, -6970, -4711, -340, 4128, 7109, 8371, 8331, 7753, 4874, 28, -1743, -55, 1265, 1599, 1007, -951, -3590, -6535, -8252, -5814, -516, 2408, 2726, 3594, 3284, 1311, 1224, 2306, 2677, 2539, 1072, -1154, -3573, -6705, -7177, -2884, 2180, 5309, 7896, 10416, 11685, 12065, 12316, 11869, 10878, 9160, 6408, 3719, 683, -2905, -6629, -10471, -9442, -1810, 3516, 3883, 4785, 6222, 7342, 9615, 11698, 12193, 11312, 8989, 5553, 2907, 3220, 4640, 3794, 1613, -376, -2428, -3490, -2911, -2675, -4106, -4524, -692, 5117, 8357, 9455, 10422, 10378, 9508, 9491, 9087, 6571, 3346, 1452, 725, -488, -2857, -5435, -7118, -7131, -5663, -4260, -3223, -732, 3358, 6602, 7662, 7274, 5518, 2964, 1672, 1587, 704, -1484, -4454, -7892, -10425, -9710, -6824, -5395, -5388, -4323, -1942, 218, 312, -1967, -4864, -7927, -10480, -8784, -3597, -618, -518, -975, -1820, -1807, -196, 570, -947, -3400, -6244, -9979, -12965, -11985, -8100, -5250, -3288, -981, 165, -444, -2150, -3838, -4245, -4354, -5929, -8299, -10607, -12174, -10068, -5324, -2790, -1945, -1171, -1328, -1616, -2036, -3682, -6000, -8192, -10088, -11464, -11812, -11684, -12199, -11543, -7598, -2998, -562, 450, 439, -1084, -3384, -5220, -6758, -8729, -10707, -11946, -10334, -5997, -3475, -2906, -1499, -229, 500, 1127, 842, -884, -3493, -6017, -7921, -7895, -5751, -4148, -3805, -3110, -2153, -1462, -612, -24, -195, -609, -265, 1543, 3399, 3228, 1011, -2205, -5880, -9558, -11030, -9570, -8281, -8407, -7188, -3455, 150, 2002, 3144, 4250, 6279, 9173, 10382, 8968, 5728, 1036, -2666, -2059, 624, 517, -1577, -3504, -5744, -5921, -2629, 287, 1309, 2567, 3701, 4208, 4462, 3623, 2343, 2395, 3737, 4516, 3623, 2391, 1139, -199, 765, 3589, 5052, 4946, 4284, 4081, 5561, 7451, 7951, 6906, 5039, 3898, 3108, 1378, -439, -2117, -2669, 207, 4387, 6116, 6070, 5813, 5136, 5456, 7433, 8037, 6315, 3864, 941, 656, 5389, 9548, 9897, 9397, 7897, 5553, 4934, 5609, 5860, 5026, 3496, 1744, 217, 1200, 4860, 7763, 8717, 9055, 9627, 10837, 11851, 11169, 8425, 4633, 929, -2146, -2992, -727, 2109, 4564, 7053, 8699, 9475, 9129, 8616, 8852, 8023, 6550, 4780, 1863, -663, -2105, -2268, -701, 1245, 2760, 3654, 5170, 9069, 12619, 12926, 11338, 8621, 6549, 7832, 9972, 8956, 5395, 1425, -4860, -11226, -8456, -1032, 77, -886, 188, 1263, 4043, 7740, 9066, 8105, 6050, 3649, 2115, 2290, 3477, 4344, 4354, 3701, 1827, -1355, -5038, -9220, -13136, -14932, -14185, -12753, -11779, -9033, -4883, -2637, -2286, -2505, -2762, -2563, -1768, -813, -754, -1876, -3444, -4816, -5190, -3978, -3470, -5379, -7763, -10265, -10890, -6816, -2638, -1896, -2447, -3788, -5549, -5049, -2518, -2342, -4556, -6156, -7130, -6017, -2638, -972, -1790, -3493, -5012, -4666, -2094, 1126, 3176, 2900, 1452, 970, 1614, 1673, 45, -2202, -4329, -5392, -3668, -2186, -3572, -5486, -6990, -6432, -3014, -248, 568, 340, -367, -338, 804, 1804, 1444, 719, 763, 821, 649, 99, -1129, -2631, -3942, -4018, -2497, -1280, -1114, -786, 65, 1123, 1691, 1587, 1393, 1329, 1762, 2772, 3274, 2490, 522, -1967, -2825, -114, 3767, 5533, 5792, 5075, 3272, 1574, 122, -772, -260, 321, 45, -202, 92, 1046, 1994, 2412, 2784, 3131, 3671, 4502, 4711, 3862, 2335, 1766, 3298, 5230, 5723, 4956, 3791, 2982, 3474, 5150, 6665, 8173, 10720, 13522, 14011, 11772, 8533, 4503, 1649, 1893, 2039, 201, -1393, -1754, -1226, 118, 1414, 2601, 4722, 6743, 7418, 7119, 5945, 4461, 3406, 3300, 4232, 5394, 6795, 7912, 7745, 6435, 4846, 3350, 2387, 3053, 4075, 3622, 2183, 169, -2067, -3969, -5056, -5638, -5662, -3275, 528, 2840, 3893, 4761, 5453, 5631, 5135, 3757, 1782, 224, 568, 2845, 3507, 1185, -1775, -5198, -8957, -11011, -9163, -4408, -871, 902, 2555, 4496, 6777, 7924, 6388, 3014, -1040, -5872, -9626, -10019, -9285, -9381, -9177, -7713, -4688, -1123, 877, 813, -202, -1475, -2006, -1884, -3015, -5304, -7819, -8519, -5985, -4047, -4729, -6101, -6604, -4654, -1557, -279, -1294, -3467, -5822, -8111, -10056, -10728, -9311, -7181, -6264, -5450, -3912, -2608, -1806, -1989, -2643, -2353, -2085, -3517, -5975, -8435, -9545, -7362, -3751, -1958, -1942, -2857, -4624, -5814, -5061, -4020, -3934, -3902, -4208, -4508, -3910, -3280, -3225, -3521, -3824, -3875, -3792, -3862, -4355, -5058, -5860, -6403, -5874, -4332, -2805, -2599, -3867, -5682, -7264, -6110, -1737, 1262, 1301, 332, -1255, -2154, -2408, -4053, -6262, -7827, -8390, -6789, -4005, -2782, -3273, -2985, -888, 1456, 2546, 2076, 486, -1451, -3267, -4582, -4943, -4273, -3512, -2984, -1855, -341, 671, 1439, 2090, 2487, 3357, 4619, 5506, 5134, 3126, 851, -1384, -2686, -1284, 670, 1233, 1655, 2642, 3732, 4300, 4252, 3754, 3294, 3639, 4808, 5572, 4493, 2153, -382, -1711, 567, 4490, 6223, 6117, 5185, 3089, 574, -1010, -1272, 80, 2799, 5906, 8597, 9698, 8956, 7274, 5365, 3932, 2997, 2499, 1914, 734, -722, -1379, 470, 3460, 4880, 5327, 5747, 5818, 5240, 4618, 4594, 4482, 3707, 2055, -57, -1885, -2879, -2469, -1749, -1356, -443, 1768, 5399, 8555, 9508, 8264, 5615, 3096, 1503, 212, -1873, -4752, -7081, -7179, -4954, -2808, -1785, -1160, -975, -689, 25, 655, 701, 143, -872, -2421, -4050, -5004, -4140, -2065, -1412, -2324, -3801, -5630, -7143, -7592, -6833, -5942, -5242, -4008, -2934, -2747, -3382, -3954, -3676, -3097, -2869, -2998, -3026, -2485, -1324, -706, -1837, -3876, -6137, -7734, -7068, -5288, -4712, -5115, -5013, -3483, -808, 1064, 847, -785, -2987, -4021, -2804, -1921, -3215, -5243, -6649, -6505, -4365, -2245, -2218, -3306, -4516, -5653, -5590, -4602, -4301, -5005, -5294, -3866, -1974, -1132, -1028, -1407, -2251, -3260, -4253, -4969, -5302, -5776, -6709, -6692, -4308, -1438, -449, -931, -1869, -2053, -616, 926, 794, -714, -2495, -4122, -4617, -3040, -776, 178, -34, -142, 323, 1055, 1426, 826, -217, -837, -620, 219, 932, 1141, 836, 358, 724, 2123, 3427, 3761, 3272, 2325, 1357, 773, 246, -399, -1234, -1750, -729, 1193, 2676, 3451, 3790, 3961, 4264, 4934, 5156, 4293, 3006, 1774, 924, 357, -358, -946, -101, 2668, 5189, 6055, 6048, 5597, 4923, 4151, 3671, 4097, 4617, 4259, 3415, 2944, 3123, 3820, 4173, 3508, 2642, 2071, 2033, 2371, 2257, 1418, -47, -791, 111, 986, 488, -706, -1631, -1239, 1438, 4929, 6715, 6999, 6434, 5408, 4830, 4143, 2779, 1434, 935, 968, 463, -525, -1581, -2060, -1202, 703, 2621, 3609, 3724, 3115, 1643, 242, 179, 1372, 2263, 2259, 1981, 1370, 611, 798, 2162, 3662, 4592, 4973, 4405, 2731, 456, -1876, -3787, -4190, -2757, -1543, -1621, -1995, -2124, -703, 2428, 4165, 3142, 1017, -1259, -2732, -1763, 20, -4, -841, -1314, -1735, -1458, 22, 1735, 2022, 827, -1033, -3407, -5359, -5556, -4837, -4831, -5442, -5572, -4616, -3064, -2116, -2149, -1768, 333, 2725, 3001, 1419, -995, -4219, -7080, -8252, -8564, -8987, -8755, -7459, -5819, -4601, -4230, -4006, -2410, 63, 1202, 318, -1617, -4193, -6201, -5470, -3532, -3882, -5871, -7361, -7314, -5128, -2934, -2795, -3308, -3409, -3564, -3539, -3445, -3671, -3655, -3264, -2935, -2840, -3275, -3546, -2478, -572, 628, 100, -1958, -4284, -6160, -7182, -6211, -3641, -1833, -1613, -2467, -3732, -3121, 557, 3874, 4115, 3244, 2457, 990, 524, 2186, 3226, 2313, 612, -1520, -3170, -2593, -1153, -1480, -2939, -3315, -1606, 1136, 2217, 1179, -510, -1909, -1576, 622, 1855, 1436, 982, 696, 1383, 3467, 4414, 3385, 1513, -1241, -2921, -1164, 1909, 3222, 3052, 2325, 464, -2042, -2582, -772, 545, 255, -647, -1089, 289, 2630, 3227, 1985, -60, -1391, 161, 2828, 3106, 1884, 1359, 2006, 3491, 4067, 2851, 1223, 106, 319, 1961, 2870, 2193, 1487, 1246, 1301, 1722, 2050, 2309, 2906, 3471, 3588, 3380, 2948, 2526, 2556, 3103, 3307, 2476, 1142, 233, 537, 1968, 3095, 3399, 3423, 3264, 3446, 4570, 5253, 4342, 2636, 928, -10, 232, 541, -160, -1359, -1923, -718, 1835, 3898, 4881, 5234, 4785, 3635, 2385, 1261, 388, -75, -320, -872, -2018, -2328, -463, 1583, 1549, 561, -81, -226, 584, 1481, 777, -1018, -2833, -4291, -3870, -1285, 975, 1586, 1590, 1435, 837, 106, -312, -441, -662, -1331, -2460, -3485, -3398, -2094, -675, 444, 1728, 2821, 3209, 3115, 2568, 1455, 66, -899, -1033, -991, -1592, -2524, -3249, -3602, -3621, -3722, -3232, -956, 1776, 3117, 3534, 3397, 2681, 2379, 2369, 1373, -336, -1753, -2777, -3360, -3152, -2262, -1563, -1465, -999, 511, 2080, 2611, 2253, 1663, 999, 79, -770, -1174, -1457, -1957, -2593, -2970, -2277, -295, 1865, 3464, 4543, 4824, 3876, 2055, 654, 712, 1447, 1218, 32, -797, -432, 805, 1706, 1518, 839, 319, -49, -431, -870, -906, -121, 762, 953, 543, -154, -472, 491, 2220, 3434, 3921, 4180, 4254, 3874, 3002, 1797, 318, -1333, -2914, -4003, -3891, -2439, -673, 702, 2097, 3730, 5006, 5384, 4959, 3906, 2093, 251, -339, -64, -366, -1201, -1530, -751, 644, 1488, 1403, 1113, 1108, 1485, 2310, 3304, 4300, 5038, 5019, 4186, 2876, 1797, 1897, 2590, 2390, 1493, 282, -1510, -2424, -1055, 629, 630, 218, 1307, 3649, 5727, 6645, 6653, 6171, 5664, 5492, 5404, 4813, 3930, 3048, 2347, 2308, 2704, 2527, 1833, 1620, 2172, 3023, 3605, 3654, 3273, 2363, 1427, 1860, 3543, 4528, 4159, 3153, 1613, -4, -311, 683, 1183, 630, 651, 2268, 4340, 5634, 5975, 5484, 4104, 2289, 1112, 1207, 1485, 920, 288, 797, 2171, 3228, 3403, 3192, 3214, 3545, 3999, 3907, 2737, 871, -1480, -3794, -4036, -1922, 112, 1190, 2492, 3890, 4630, 4634, 3866, 2511, 1201, 332, 13, 128, 408, 466, 49, -190, 536, 1430, 1566, 1591, 2091, 2454, 2237, 1700, 1252, 955, 482, -387, -1453, -1946, -1162, 252, 842, 680, 661, 1157, 2172, 3244, 3756, 3803, 3523, 2818, 1816, 888, 445, 741, 1247, 1383, 1067, 397, -458, -1290, -1605, -975, 10, 478, 582, 742, 1106, 1652, 2044, 2057, 1812, 1333, 906, 805, 707, 231, -561, -1088, -827, -153, 381, 933, 1686, 2316, 2504, 2060, 1110, 108, -354, -134, -10, -412, -778, -929, -1208, -1813, -2476, -2196, -662, 729, 1258, 1728, 2479, 3099, 3279, 2855, 1864, 411, -964, -1404, -982, -816, -1543, -2591, -2447, -663, 1081, 1639, 1879, 2336, 2710, 3226, 3757, 3625, 2870, 1750, 338, -498, -272, 37, -609, -1992, -2869, -1939, 215, 1541, 2074, 2971, 3922, 4442, 4722, 4480, 3656, 2776, 2221, 2194, 2382, 2126, 1290, 412, 157, 798, 1779, 2553, 3263, 3834, 3992, 3644, 2858, 2137, 1929, 2049, 2298, 2856, 3443, 3656, 3531, 3217, 2659, 1901, 1201, 1074, 1658, 2401, 2599, 2295, 1979, 2017, 2705, 3718, 4292, 4354, 3986, 3078, 2261, 1997, 1590, 647, -570, -1281, -230, 2243, 4109, 4813, 5137, 5046, 4410, 3630, 2819, 1877, 1001, 379, -139, -571, -498, 185, 755, 673, 175, 212, 1471, 2968, 3444, 3141, 2719, 2496, 2944, 3538, 3187, 1981, 619, -289, -146, 513, 475, 239, 960, 2250, 3152, 3544, 3487, 2861, 2019, 1394, 859, 123, -505, -527, -135, 33, -99, 188, 1068, 1723, 1697, 1574, 1803, 2153, 2118, 1680, 1322, 1371, 1397, 1055, 569, 302, 221, 197, 78, -227, -754, -1384, -1953, -2085, -1419, -477, -269, -784, -1156, -1007, -586, -32, 593, 1165, 1597, 1825, 1721, 1316, 808, 350, 5, -258, -602, -907, -897, -649, -351, -52, 102, -60, -565, -1231, -1374, -695, 56, 177, -69, -281, -302, -156, -27, -165, -490, -620, -308, 91, 230, 122, -148, -220, 412, 1347, 1629, 993, -71, -895, -996, -454, 210, 517, 381, 49, -87, 152, 558, 852, 1094, 1356, 1367, 1019, 670, 877, 1615, 2255, 2362, 1980, 1418, 1223, 1567, 1850, 1660, 1281, 1248, 1714, 2298, 2288, 1482, 593, 608, 1643, 2787, 3425, 3681, 3497, 2730, 1799, 1380, 1395, 1148, 516, 136, 266, 445, 469, 691, 1421, 2371, 2940, 3213, 3723, 4345, 4490, 3895, 2682, 1165, -294, -1378, -1789, -1545, -1021, -436, 434, 1507, 2451, 3002, 3020, 2576, 1967, 1386, 1026, 930, 914, 762, 633, 902, 1771, 2762, 3268, 3177, 2636, 1874, 1296, 980, 540, -143, -524, 20, 1161, 1893, 1770, 1134, 691, 974, 1651, 1971, 1974, 2050, 2105, 2005, 2050, 2455, 2908, 2977, 2641, 2128, 1676, 1462, 1273, 734, -149, -998, -1444, -1300, -897, -510, 214, 1322, 2154, 2217, 1797, 1200, 777, 656, 506, 36, -545, -1057, -1250, -855, -557, -1076, -1922, -2143, -1477, -441, 152, 140, -151, -437, -521, -503, -684, -1015, -1363, -1845, -2305, -2470, -2505, -2756, -3087, -2824, -1702, -427, 396, 805, 914, 738, 427, 26, -558, -1476, -2545, -3462, -3885, -3423, -2238, -1218, -811, -844, -1295, -1818, -1582, -655, -70, -310, -1045, -1555, -1266, -565, -337, -760, -1392, -2017, -2344, -1872, -1247, -1551, -2087, -1615, -880, -757, -531, -7, 179, 232, 312, 47, -365, -463, -192, 329, 708, 550, -36, -725, -968, -579, -227, -454, -904, -961, -251, 956, 1860, 2067, 1702, 1145, 770, 641, 493, 347, 406, 490, 430, 399, 555, 687, 516, -6, -408, -33, 803, 1308, 1507, 1783, 2139, 2476, 2524, 2082, 1376, 755, 541, 804, 947, 511, -199, -624, -321, 557, 1245, 1435, 1332, 1254, 1724, 2576, 2911, 2446, 1446, 478, 330, 884, 986, 384, -295, -551, -176, 680, 1379, 1692, 1719, 1644, 1793, 2281, 2644, 2404, 1720, 729, -322, -1107, -1558, -1742, -1493, -848, -201, 298, 708, 1057, 1436, 1714, 1559, 979, 357, 168, 574, 1024, 969, 452, -315, -1119, -1572, -1492, -1074, -609, -244, -4, 123, 268, 550, 836, 879, 598, 67, -594, -1071, -1325, -1681, -2193, -2389, -2011, -1269, -624, -374, -486, -757, -934, -658, 9, 489, 438, 116, -71, 51, 295, 296, -108, -704, -1117, -1196, -1223, -1509, -1887, -2133, -2233, -2277, -2194, -1705, -800, 83, 536, 591, 538, 671, 874, 681, -18, -763, -1297, -1742, -2159, -2210, -1750, -1296, -1153, -1057, -986, -1284, -1866, -2301, -2093, -984, 481, 1481, 1853, 1809, 1493, 1246, 1080, 567, -364, -1401, -2171, -2377, -2127, -1891, -1824, -1730, -1330, -478, 440, 833, 684, 419, 401, 673, 1006, 1187, 1199, 1049, 782, 647, 785, 1006, 994, 634, 48, -467, -803, -1172, -1595, -1723, -1434, -932, -269, 450, 951, 1216, 1552, 2053, 2376, 2291, 1962, 1573, 1133, 627, 20, -490, -698, -720, -542, 40, 776, 1148, 1103, 860, 709, 830, 995, 1004, 954, 818, 633, 655, 820, 615, 28, -468, -612, -548, -549, -622, -473, 56, 762, 1287, 1679, 2020, 2019, 1412, 443, -388, -716, -603, -497, -566, -453, 118, 974, 1743, 2088, 2065, 1790, 1481, 1360, 1325, 1032, 568, 20, -600, -1311, -1916, -1932, -1067, -77, 299, 229, 163, 372, 825, 1155, 1314, 1465, 1532, 1351, 937, 388, -194, -795, -1290, -1461, -1352, -1141, -846, -403, 214, 981, 1552, 1660, 1343, 900, 591, 405, 14, -645, -1244, -1570, -1648, -1531, -1301, -1034, -787, -568, -395, -225, 30, 336, 474, 479, 457, 245, -309, -772, -635, -99, 144, -190, -884, -1685, -2209, -2086, -1585, -1145, -803, -522, -238, 162, 503, 448, -40, -728, -1089, -1081, -1121, -1403, -1698, -1938, -1907, -1296, -319, -52, -1030, -1970, -1727, -1203, -1113, -905, -704, -884, -928, -832, -1031, -1369, -1597, -1606, -1251, -836, -803, -1149, -1625, -1792, -1211, -54, 952, 1427, 1455, 1243, 895, 370, -471, -1504, -2255, -2484, -2305, -1923, -1421, -983, -832, -874, -601, 150, 762, 796, 327, -312, -580, -316, 36, 136, 105, -17, -185, -353, -502, -643, -685, -542, -316, -189, 42, 737, 1255, 905, 417, 510, 423, -189, -579, -627, -675, -505, -122, 167, 527, 1065, 1513, 1852, 2021, 1815, 1388, 1074, 913, 764, 433, -52, -474, -703, -527, -107, -45, -340, -391, -54, 259, 383, 540, 702, 701, 551, 364, 244, 324, 438, 314, 81, 70, 267, 464, 547, 561, 540, 438, 201, -49, -261, -419, -481, -481, -423, -241, -45, -125, -550, -959, -994, -820, -771, -746, -713, -579, -320, -197, -258, -245, -121, -42, -156, -394, -573, -636, -473, -205, -228, -587, -861, -803, -571, -501, -543, -535, -586, -542, -270, -24, -70, -345, -618, -751, -859, -1048, -1255, -1373, -1334, -1109, -742, -455, -440, -687, -995, -1118, -868, -403, -82, 52, -86, -521, -867, -852, -848, -1117, -1458, -1593, -1438, -1141, -850, -648, -629, -756, -840, -748, -628, -803, -1191, -1352, -1004, -365, 34, 2, -184, -529, -894, -872, -569, -508, -775, -1148, -1337, -1263, -1196, -1145, -943, -610, -327, -64, 73, 74, 160, 400, 673, 619, 192, -356, -921, -958, -146, 638, 435, -1328, -3113, -2058, -46, -323, -443, 836, 612, -532, -609, -679, -856, -414, -191, -506, -851, -1075, -830, -152, 207, 21, -284, -475, -438, -217, -100, -234, -376, -402, -570, -809, -852, -977, -1298, -1471, -1356, -1012, -721, -596, -391, -140, 7, 250, 499, 642, 731, 593, 271, -85, -416, -659, -823, -1032, -1291, -1385, -1119, -741, -460, -204, -21, 120, 381, 706, 937, 870, 389, -224, -604, -662, -564, -491, -548, -619, -588, -532, -344, 42, 386, 657, 865, 931, 860, 712, 544, 372, 121, -96, -286, -439, -384, -260, -202, -91, -64, -57, 1, 122, 320, 422, 356, 195, -107, -73, 347, 479, 269, 104, 109, 194, 176, 114, 58, -15, 188, 597, 891, 978, 848, 589, 425, 275, -36, -592, -1105, -1133, -781, -415, -253, -197, -37, 256, 504, 628, 570, 394, 243, 262, 402, 396, 111, -333, -642, -462, -11, 173, 34, -162, -205, -58, 135, 154, 125, 291, 579, 627, 316, -56, -262, -368, -417, -275, 84, 314, 186, 13, -209, -527, -317, 451, 827, 276, -709, -1070, -743, -692, -680, -172, 107, -51, -123, -207, -418, -492, -343, 28, 248, 28, -487, -916, -936, -491, -139, -166, -79, 288, 569, 588, 256, -19, 205, 275, -418, -1551, -2222, -1612, -820, -1106, -1092, -289, -181, -345, 148, 559, 575, 581, 375, -114, -434, -459, -549, -678, -634, -482, -278, -44, 98, -23, -356, -463, -107, 302, 571, 661, 428, -85, -597, -828, -768, -559, -384, -432, -634, -728, -486, -1, 383, 501, 412, 199, 126, 258, 370, 351, 243, 81, -98, -266, -274, -234, -333, -425, -448, -459, -361, -83, 266, 553, 566, 397, 244, 120, 104, 282, 482, 443, 176, -73, -182, -79, 129, 196, 40, -166, -338, -473, -487, -502, -548, -465, -235, -121, -89, 21, 7, -101, -70, 73, 118, 132, 197, 324, 463, 498, 295, -208, -879, -1371, -1399, -1208, -1161, -1189, -1045, -754, -567, -558, -503, -199, 178, 422, 467, 323, -69, -604, -757, -427, -157, -261, -566, -784, -783, -684, -615, -497, -340, -292, -338, -358, -262, -127, -34, 23, -109, -273, -367, -431, -334, -131, -65, -86, -139, -139, -11, 80, 83, 62, -184, -493, -598, -563, -466, -256, 40, 243, 81, -319, -475, -202, 174, 385, 457, 456, 336, 319, 379, 328, 178, 26, -140, -155, 56, 263, 341, 504, 692, 679, 632, 713, 767, 648, 283, -206, -404, -86, 413, 693, 789, 876, 998, 1006, 735, 422, 287, 192, 102, 158, 220, 137, 15, 38, 166, 324, 582, 847, 983, 1005, 882, 530, 110, -103, -5, 56, -22, -59, -113, -89, 63, 186, 336, 524, 636, 685, 704, 659, 544, 236, -57, -139, -74, 19, -32, -214, -177, 79, 245, 215, 143, 225, 404, 514, 529, 498, 465, 372, 156, 37, 82, 116, 186, 288, 180, -107, -331, -212, 191, 360, 225, -32, -322, -268, 165, 407, 493, 582, 555, 476, 331, 165, 118, 141, 138, 13, -190, -239, -205, -229, -322, -412, -455, -470, -389, -216, -12, 190, 320, 444, 519, 506, 491, 468, 452, 530, 529, 291, -12, -326, -361, -58, 165, 121, -23, -136, -139, 70, 322, 342, 193, -89, -404, -387, -168, 153, 847, 1477, 1045, -771, -1999, -685, 479, -686, -1072, -277, -589, -519, 472, 452, 15, 144, 263, 325, 440, 312, -37, -204, -185, -153, -66, 67, 72, -40, -233, -344, -185, 12, 22, -104, -143, -48, -3, -86, -185, -174, 45, 268, 295, 326, 325, 260, 139, -107, -435, -563, -490, -510, -741, -902, -813, -557, -228, 75, 210, 263, 379, 514, 541, 468, 341, 267, 157, -76, -296, -417, -546, -585, -455, -243, -77, -111, -169, -243, -333, -294, -69, 71, 81, 1, 17, 177, 342, 350, 122, -195, -346, -372, -373, -295, -209, -35, 174, 313, 351, 303, 201, 270, 406, 358, 97, -189, -378, -366, -169, 0, 16, -172, -297, 94, 806, 1026, 343, -305, -114, 43, -270, -129, 226, 34, -250, -339, -345, -16, 246, -92, -545, -367, 95, 190, 268, 471, 248, -183, -280, -234, -188, -74, -82, -220, -170, 58, 86, -47, -155, -199, -147, -53, -13, -38, -156, -331, -380, -315, -264, -218, -281, -543, -663, -405, -165, -136, 32, 135, -99, -431, -641, -725, -682, -566, -544, -712, -777, -660, -587, -543, -435, -380, -479, -673, -842, -906, -803, -457, -112, -131, -461, -748, -861, -834, -339, 560, 721, -577, -2086, -1575, 182, 536, 146, -503, -2468, -2674, -156, 11, -1443, -635, -109, -1079, -751, 14, -346, -482, -261, -572, -928, -898, -727, -555, -460, -596, -704, -723, -806, -843, -836, -867, -784, -537, -373, -411, -419, -314, -238, -217, -186, -169, -182, -296, -455, -527, -470, -354, -352, -495, -630, -748, -724, -509, -335, -234, -94, -61, -76, -35, 86, 197, 263, 185, -180, -563, -526, -190, -105, -240, -351, -459, -416, -233, -182, -264, -361, -490, -573, -523, -354, -248, -236, -176, -163, -266, -393, -353, -243, -252, -372, -477, -571, -588, -460, -326, -295, -299, -481, -763, -840, -699, -419, -272, -357, -430, -507, -584, -547, -581, -715, -748, -739, -859, -1100, -1209, -1118, -976, -853, -700, -657, -720, -722, -694, -672, -660, -745, -843, -866, -951, -1093, -1209, -1138, -855, -676, -748, -953, -1156, -1166, -1047, -920, -887, -840, -766, -754, -808, -885, -1075, -1375, -1555, -1479, -1346, -1194, -1043, -969, -949, -932, -900, -790, -636, -593, -650, -749, -966, -1179, -1252, -1232, -1135, -1025, -982, -905, -823, -789, -787, -863, -981, -1146, -1275, -1252, -1081, -860, -795, -790, -728, -734, -761, -638, -510, -487, -533, -642, -777, -849, -910, -1045, -1108, -1202, -1335, -1212, -845, -539, -456, -503, -679, -802, -683, -529, -457, -411, -455, -514, -464, -408, -483, -550, -490, -529, -629, -662, -680, -471, -53, 239, 1, -742, -1193, -849, -410, -451, -375, -38, -136, -384, -277, -210, -309, -255, -199, -267, -182, 21, 53, 28, -16, -149, -201, -136, -67, -87, -148, -163, -105, -27, 57, 144, 202, 133, -27, -136, -171, -115, 85, 296, 374, 270, 161, 137, 135, 81, 50, 204, 320, 316, 322, 282, 133, -44, -142, -178, -233, -373, -481, -539, -512, -383, -144, 70, 242, 351, 354, 362, 410, 439, 442, 380, 310, 220, 178, 137, -5, -152, -194, -145, -65, 72, 239, 327, 282, 190, 101, 68, 62, 54, 32, -19, -74, -41, 112, 212, 191, 214, 167, 5, -89, -86, -108, -154, -170, -194, -222, -247, -303, -329, -285, -212, -163, -90, 21, 158, 257, 227, 155, 84, 66, 153, 283, 270, 142, -51, -337, -461, -342, -223, -255, -336, -457, -522, -422, -274, -166, -111, -123, -169, -123, -26, 12, 43, 85, 83, 75, 41, -110, -299, -369, -328, -222, -156, -173, -291, -435, -490, -473, -470, -402, -305, -278, -266, -207, -137, -74, -76, -104, -46, 24, 10, -87, -242, -375, -456, -525, -560, -540, -450, -290, -147, -102, -76, -62, -67, -70, -122, -190, -243, -265, -220, -165, -149, -92, -48, 4, 94, 160, 173, 238, 312, 328, 217, 26, -63, -5, 71, 97, 67, -17, -90, -163, -183, -133, 20, 203, 238, 139, 88, 119, 210, 355, 414, 358, 265, 123, 13, 0, 21, -18, -54, -24, 36, 38, 73, 108, 39, -20, 29, 155, 261, 291, 186, 53, 87, 240, 354, 299, 124, -42, -184, -247, -221, -175, -210, -254, -181, -37, 176, 487, 711, 702, 574, 379, 206, 200, 278, 238, 58, -174, -340, -387, -385, -416, -428, -349, -148, 32, 118, 124, 66, 3, 4, 9, -44, -147, -251, -303, -295, -326, -315, -297, -397, -510, -535, -530, -561, -527, -458, -393, -315, -235, -292, -334, -320, -301, -311, -329, -299, -163, -63, -96, -168, -262, -341, -330, -337, -456, -485, -419, -396, -315, -241, -285, -285, -202, -171, -219, -375, -620, -739, -682, -578, -556, -582, -606, -568, -515, -466, -409, -340, -318, -311, -345, -400, -412, -380, -367, -427, -564, -697, -727, -653, -543, -497, -570, -675, -769, -733, -665, -579, -454, -332, -275, -274, -286, -328, -349, -287, -262, -319, -344, -335, -337, -289, -243, -318, -460, -536, -547, -564, -475, -313, -201, -209, -292, -420, -461, -288, -48, 80, 45, -108, -241, -281, -228, -210, -333, -498, -548, -485, -413, -384, -357, -318, -255, -195, -202, -263, -353, -382, -349, -316, -239, -196, -284, -421, -480, -408, -340, -284, -252, -275, -289, -242, -218, -198, -154, -198, -333, -442, -452, -421, -436, -532, -596, -610, -608, -622, -606, -601, -560, -499, -449, -456, -473, -461, -466, -424, -396, -442, -489, -484, -521, -609, -665, -679, -666, -672, -680, -578, -390, -243, -148, -57, -73, -164, -277, -347, -337, -229, -151, -223, -225, -169, -203, -239, -268, -355, -404, -383, -408, -505, -596, -594, -441, -304, -270, -179, -98, -56, 1, -34, -203, -378, -478, -546, -593, -606, -514, -316, -182, -213, -276, -353, -401, -403, -327, -319, -352, -375, -367, -381, -364, -357, -314, -262, -213, -135, -106, -157, -225, -357, -513, -638, -698, -680, -604, -472, -330, -258, -290, -337, -323, -282, -240, -254, -348, -462, -522, -531, -501, -476, -446, -450, -605, -750, -750, -668, -592, -531, -405, -281, -224, -181, -148, -203, -320, -400, -469, -522, -598, -687, -726, -711, -672, -560, -461, -387, -340, -341, -325, -292, -313, -314, -219, -150, -164, -188, -284, -372, -409, -471, -498, -472, -482, -537, -597, -572, -519, -461, -345, -270, -315, -389, -427, -360, -222, -94, -52, -134, -300, -420, -383, -347, -378, -427, -478, -537, -529, -412, -302, -262, -209, -69, -3, -23, -95, -160, -171, -125, -72, -108, -236, -292, -293, -363, -401, -324, -204, -162, -212, -369, -480, -519, -444, -268, -72, 52, 101, -7, -178, -349, -438, -502, -552, -455, -299, -241, -236, -249, -243, -209, -145, -101, -39, -23, -88, -134, -130, -143, -71, -2, 27, 38, 37, 35, 51, 69, 59, -49, -193, -278, -333, -315, -170, 17, 113, 136, 144, 130, 156, 248, 363, 408, 408, 339, 242, 239, 226, 131, 83, 76, 69, 97, 165, 263, 313, 312, 266, 199, 142, 165, 223, 307, 374, 321, 249, 229, 187, 143, 150, 171, 191, 209, 275, 351, 368, 295, 191, 68, -50, -62, -13, 31, 33, 67, 136, 207, 310, 412, 455, 425, 413, 410, 364, 226, 69, -55, -103, -58, 14, 75, 195, 292, 246, 198, 187, 168, 193, 248, 311, 303, 256, 180, 97, 69, 66, 76, 101, 100, 92, 118, 115, 86, 79, 160, 208, 189, 223, 242, 240, 268, 321, 374, 319, 255, 288, 263, 206, 191, 189, 172, 163, 145, 151, 123, 26, 28, 98, 166, 164, 127, 89, 111, 197, 299, 365, 394, 392, 427, 504, 451, 287, 168, 109, 36, 67, 170, 194, 185, 245, 329, 357, 308, 306, 323, 319, 295, 189, 78, 122, 256, 339, 350, 269, 151, 84, 79, 58, 51, 23, -5, 55, 153, 247, 325, 381, 382, 371, 338, 333, 320, 240, 146, 92, 86, 197, 262, 225, 189, 273, 384, 449, 492, 529, 555, 586, 613, 574, 512, 484, 480, 482, 461, 360, 297, 311, 300, 330, 381, 414, 423, 422, 411, 390, 421, 472, 558, 630, 654, 707, 751, 689, 608, 553, 439, 396, 460, 444, 352, 275, 303, 403, 487, 549, 633, 735, 768, 733, 720, 750, 757, 712, 626, 610, 629, 553, 438, 388, 350, 342, 329, 346, 354, 389, 426, 501, 539, 538, 532, 559, 581, 550, 517, 507, 520, 484, 437, 373, 279, 197, 209, 310, 403, 411, 421, 431, 384, 367, 444, 498, 471, 397, 306, 307, 380, 465, 548, 633, 632, 542, 562, 548, 417, 271, 195, 175, 217, 288, 365, 383, 380, 394, 430, 534, 610, 604, 573, 533, 517, 546, 599, 594, 548, 515, 546, 571, 570, 522, 451, 382, 349, 358, 391, 518, 637, 645, 578, 506, 457, 421, 410, 448, 517, 539, 534, 545, 568, 564, 603, 618, 599, 664, 746, 719, 653, 609, 630, 710, 791, 800, 766, 725, 686, 649, 588, 628, 757, 784, 668, 630, 676, 670, 678, 731, 789, 822, 842, 843, 832, 870, 909, 919, 877, 775, 723, 706, 619, 580, 610, 594, 598, 650, 706, 739, 777, 808, 804, 755, 758, 775, 821, 921, 1004, 1026, 989, 943, 932, 934, 905, 874, 826, 799, 834, 881, 875, 839, 843, 799, 732, 697, 716, 744, 748, 758, 826, 899, 962, 999, 1035, 1097, 1113, 1063, 960, 846, 739, 702, 716, 715, 720, 683, 638, 671, 780, 903, 949, 921, 821, 775, 819, 872, 892, 883, 862, 835, 792, 777, 792, 821, 805, 737, 615, 564, 563, 561, 569, 576, 551, 591, 660, 646, 671, 747, 799, 777, 706, 628, 570, 598, 683, 661, 517, 443, 494, 573, 639, 691, 717, 742, 732, 747, 769, 760, 767, 732, 683, 660, 648, 667, 645, 643, 687, 650, 595, 660, 730, 695, 638, 682, 788, 885, 966, 956, 860, 794, 818, 814, 741, 676, 643, 577, 522, 546, 586, 662, 815, 874, 861, 849, 794, 722, 702, 734, 746, 690, 665, 653, 591, 545, 556, 570, 643, 729, 700, 682, 705, 733, 767, 735, 624, 590, 654, 705, 658, 609, 623, 646, 649, 629, 580, 562, 546, 459, 364, 345, 386, 474, 544, 613, 683, 707, 704, 679, 572, 467, 490, 569, 570, 520, 493, 476, 439, 450, 499, 497, 508, 536, 535, 539, 572, 564, 583, 616, 595, 563, 554, 548, 520, 517, 543, 553, 567, 567, 532, 519, 489, 451, 449, 525, 552, 527, 511, 454, 429, 442, 421, 422, 426, 368, 310, 235, 256, 337, 355, 327, 265, 263, 303, 291, 260, 242, 196, 181, 188, 188, 242, 267, 189, 111, 69, 41, 51, 89, 127, 171, 217, 235, 195, 133, 164, 232, 217, 180, 151, 97, 63, 17, -84, -162, -119, -83, -130, -155, -171, -214, -229, -151, -37, -1, -27, -46, -110, -177, -198, -218, -244, -195, -162, -217, -217, -170, -168, -218, -255, -259, -293, -257, -219, -214, -258, -301, -345, -369, -392, -337, -351, -421, -433, -409, -405, -362, -334, -319, -262, -165, -65, -22, -92, -239, -427, -579, -583, -546, -513, -474, -442, -385, -310, -266, -241, -278, -369, -499, -611, -611, -511, -481, -456, -402, -375, -327, -312, -357, -380, -372, -351, -283, -238, -274, -404, -582, -608, -511, -482, -481, -412, -305, -247, -211, -191, -196, -213, -208, -181, -268, -339, -328, -337, -295, -217, -243, -296, -337, -329, -342, -324, -231, -258, -349, -282, -217, -229, -182, -82, -95, -160, -169, -192, -156, -74, -52, -92, -56, -17, -18, -24, -8, -25, -85, -81, -38, -21, 35, 104, 137, 99, 55, 79, 76, 103, 114, 57, 31, 33, 11, -37, -18, 14, 43, 40, 68, 97, 103, 37, 64, 137, 87, 8, 33, 118, 142, 69, 2, -47, -120, -124, -66, -69, -70, -36, -9, -7, -7, -9, -4, 26, -15, -87, -106, -120, -110, -61, -46, -51, -58, -89, -158};
156:               
157:               //fractional hat[6662] __attribute__((space(psv))) = {186, 238, 114, -17 -82, -173, -121, -48, -207, -1141, -2167, -3315, -3790, -2701, 213, 1875, 2372, 2238, 1599, 2599, 4745, 4546, 1617, -1717, -3467, -1918, 1438, 2260, 1559, 1261, 1213, 776, 6, -1236, -1427, -875, 422, 1186, 1208, 765, -37, 415, 1645, 2086, 877, -911, -2576, -2320, 623, 2781, 2350, 1596, 629, -216, -351, -457, -1639, -2609, -2842, -1228, 1591, 4815, 5987, 5493, 1623, -2849, -4961, -5170, -3798, -2830, -2289, -1407, -43, 449, 103, -854, -1778, -2454, -2251, -1419, -340, 543, 533, 240, 723, -428, -3227, -4912, -5025, -2784, 827, 2258, 2009, 723, -1883, -3699, -4072, -3097, -1237, 255, 2325, 3795, 3518, 2079, 379, -1351, -3091, -4068, -3733, -2217, 202, 2905, 4550, 4784, 2368, -1734, -4416, -4319, -2628, -1408, -180, 2398, 3397, 2781, 1125, -1638, -3019, -2705, -944, 1075, 2813, 4039, 4419, 3677, 1527, -931, -2467, -2293, -1040, 139, 697, 1325, 2081, 1965, 1736, 1335, 376, -683, -1207, -1455, -1126, 864, 2569, 2594, 1877, 703, 479, 1360, 1454, 487, -199, -994, -950, -383, 562, 1010, 485, -269, -498, 397, 1429, 2225, 2106, 1835, 1063, 923, 1226, 1593, 1201, -1162, -2916, -3327, -1591, 817, 2710, 4105, 4757, 4392, 2321, -984, -3725, -4181, -2906, -734, 651, 2966, 5013, 4484, 4165, 2160, -1216, -3899, -4987, -3839, -929, 1644, 2245, 2790, 2010, 180, -1236, -2485, -2167, -662, 864, 736, 89, -181, -346, -272, -566, -617, -874, -876, -523, -306, 154, 658, 1153, 58, -1442, -1719, -813, 95, 410, 905, 1108, 35, -1903, -2933, -2656, -555, 2215, 3069, 2772, 1611, 442, -288, -1735, -2769, -2600, -1462, 110, 1913, 2684, 1695, 377, -569, -934, -1202, -288, 1020, 1432, 1187, 441, 195, 1548, 1452, -960, -3081, -4089, -3448, 993, 3775, 3581, 2360, 595, -377, -1419, -3405, -4750, -4375, -2136, 2490, 4815, 5255, 2907, -399, -2444, -2071, -2012, -2666, -4074, -2246, 904, 2350, 2956, 1481, -1267, -3553, -4017, -2840, 761, 2995, 2498, 205, -3000, -3815, -2869, -3650, -3683, -2513, -101, 3013, 4471, 4333, 2072, -1770, -3428, -3162, -2805, -2269, -803, 684, 1120, 1296, 1707, 1476, -524, -2156, -3035, -2625, -615, 2333, 4066, 3946, 1062, -3203, -6151, -6440, -2439, 1592, 1949, 2048, 1170, 1386, 3088, 3920, 3256, 622, -3835, -6216, -5580, -1887, 2748, 4570, 4763, 2317, -968, -2185, -1940, -1050, 453, 2031, 3566, 3896, 3472, 1428, -602, -1102, -418, 151, 334, 1452, 2098, 1455, 1182, 546, 892, 1123, 1695, 1884, 677, -1259, -2426, -1517, 1706, 4632, 4330, 2753, -815, -3494, -3658, -990, -325, -2010, -2969, -1715, 1609, 2699, 2531, 2194, 912, -631, -2012, -1818, 328, 2124, 1988, 663, -1193, -3102, -4106, -2480, 674, 1217, 147, -174, 898, 2777, 3543, 1385, -2075, -4870, -3858, -1420, 188, 2092, 3632, 4555, 4157, 2182, -1798, -4135, -4248, -2175, -429, 814, 2350, 3737, 4706, 4809, 1947, -2715, -5635, -6362, -6101, -2825, 1687, 4302, 4962, 4408, 1678, -1885, -4340, -6235, -6043, -4410, -167, 2957, 4920, 6361, 6274, 3950, -17, -5823, -9922, -10645, -4474, 1957, 4850, 7729, 6955, 3312, -54, -3051, -4324, -3842, -2655, 906, 3863, 5867, 6151, 4350, -530, -4877, -7081, -8095, -4178, 2099, 4915, 6040, 5639, 4104, 1831, -1951, -5039, -6476, -6460, -1715, 1904, 4138, 5064, 4339, 1611, -2521, -4374, -4350, -643, 3540, 5289, 5219, 3250, 948, -2666, -4888, -5480, -4559, -2621, 911, 3568, 5116, 4468, 1095, -1859, -3103, -2600, -971, 834, 1714, 1274, -83, -628, 269, 401, -758, -1786, -2119, -1911, -1442, -534, 1034, 1474, 1212, 567, -962, -1905, -1839, -906, -362, -598, -1029, -245, 120, 9, -1038, -1220, -1612, -1689, -646, 1084, 2070, -152, -1499, -2385, -1544, -17, 209, 1137, 385, -1937, -3903, -5438, -3193, 731, 3347, 4858, 4969, 2866, -258, -3626, -3731, -1053, 1789, 2016, 417, -528, -2694, -3068, -1825, 1336, 4827, 4020, 2462, -1008, -1629, 523, 2349, 3843, 3799, 2037, -1618, -3925, -3160, 1147, 4755, 4956, 3300, -717, -3064, -2025, 839, 2424, 1756, -81, -1593, -857, 2129, 3023, 1119, -969, -2607, -913, 1262, 2584, 2289, 1228, -789, -1075, -575, 850, 1413, -232, -1648, -2419, -1311, 1835, 5004, 5529, 4619, 1505, -1900, -3617, -3968, -2668, -1425, -89, 1873, 3329, 3460, 2721, 1154, -1652, -2583, -2766, -764, 1927, 2603, 2824, 1145, -1058, -2124, -2426, -1788, -258, 2199, 3185, 2319, 1022, -133, 340, 1420, 1796, -199, -1910, -2352, -1431, -3, 889, 2226, 2458, 475, -1924, -2834, -332, 1309, 171, -747, -579, 739, 686, 392, 1490, 1761, 931, 60, -1080, -2091, -3727, -3709, -895, 2559, 3859, 3029, 140, -2867, -3281, -2214, -730, 161, 598, 74, 129, 616, 1336, 108, -2576, -4130, -5236, -3729, 144, 2987, 3319, 1286, -1037, -1627, -770, -994, -898, 130, 897, 1574, 1678, 2389, 2576, 2173, 720, -856, -1926, -2337, -937, 2138, 3841, 3063, 993, -884, -543, -154, -1758, -1913, -561, 1418, 2981, 3680, 2980, 830, -1667, -3422, -3238, -2091, -1412, -1041, 730, 2580, 1982, 497, -1271, -2088, -1755, -1547, -1669, -1119, -1134, -1409, 106, 1080, 2008, 1224, -1730, -4635, -6123, -4922, -1040, 2982, 4288, 3479, 743, -2139, -3198, -3124, -2782, -1857, -1149, -782, 616, 3090, 3931, 2436, 149, -900, -957, -1900, -2200, -1098, -455, -70, 148, 2072, 4058, 4448, 4730, 2951, -150, -3382, -5878, -3768, 529, 2520, 1951, 974, 271, -929, -1166, -794, 1908, 2048, -537, -2381, -2885, -654, 2854, 4455, 3834, 580, -2615, -4171, -2962, -622, -249, -782, 1840, 3742, 4414, 3902, -282, -3403, -3750, -2413, -950, 418, 1911, 3335, 1746, -126, -1977, -1749, 1350, 3278, 3149, 1447, -143, -224, 575, -736, -2373, -1855, -305, 1068, 1231, 2724, 3938, 3191, 918, -2187, -3752, -4381, -3655, -361, 3459, 4033, 2907, 1281, 997, 1259, -324, -2305, -3490, -2715, 845, 2883, 2885, 2433, 1768, 1291, 1737, 964, -1337, -2919, -3903, -2783, 480, 3834, 5169, 4842, 1552, -2219, -3983, -3549, -1040, 508, 1057, 1798, 1591, 2228, 2280, 241, -2187, -4057, -3716, -1547, 534, 611, 1111, 2834, 2698, 1062, -766, -1132, -954, -1920, -2907, -1749, -71, 352, 1033, 348, -1530, -3225, -3060, -1268, 1786, 3400, 3354, 2459, 721, -1030, -3099, -3564, -3942, -3258, 549, 3404, 4848, 4994, 3354, -1207, -4628, -5752, -3755, 781, 4295, 5662, 4925, 1255, -1550, -3263, -4711, -4054, -1585, 968, 1904, 3381, 4703, 4101, 1645, -1976, -5027, -5550, -3889, -2226, -1329, 593, 3200, 4604, 4697, 2711, 156, -2227, -3769, -3983, -3784, -2643, 248, 2616, 3956, 3411, 121, -2862, -3746, -3403, -1697, 1040, 2180, 1959, 589, -957, -2155, -3008, -2098, -270, 1687, 1116, -362, -1254, -638, 839, 541, -615, -1278, -2360, -3105, -3309, -1815, 1675, 3522, 2696, 561, -1635, -2789, -2661, -2161, -1629, -815, 1210, 2867, 2203, 70, -2046, -3332, -2399, 284, 1397, 1245, 1377, 1666, 1715, 1042, -1143, -2863, -3332, -2347, 14, 2172, 3012, 3117, 2185, 434, -637, -1147, -1268, -1195, -23, 1959, 2493, 2239, 1557, 615, -330, -51, 197, -534, -1904, -1913, 643, 3271, 4108, 2006, -979, -2646, -2774, -1756, 173, 1703, 1261, 337, 156, 1428, 1844, 134, -1547, -2455, -1323, 585, 1345, 563, 579, 351, 336, 526, 1294, 1526, 516, -374, -944, 199, 1372, 1692, 427, -272, -721, -1008, 28, 1352, 2533, 1447, 215, -769, -376, 814, 1747, 1936, 418, -750, -1843, -1313, 415, 1791, 1352, -21, -565, -813, -253, -128, 681, 1014, 0, -1015, -1473, 373, 2021, 1952, 65, -1877, -3120, -3182, -2102, -72, 1846, 2014, 1463, -23, -1559, -2009, -1178, -1296, -1827, -1815, -312, 1975, 2901, 2091, -490, -3053, -4400, -3907, -2075, -230, 715, 2045, 3033, 2274, 768, -733, -1510, -2418, -2940, -2158, -747, 1268, 2572, 3638, 2766, 543, -2116, -3936, -2881, -305, 272, -306, 65, 1024, 2614, 2730, 1771, 393, -1364, -2119, -2438, -1645, 288, 1838, 2817, 1677, 511, -647, -867, -674, 55, 585, -75, -315, -959, 492, 2076, 3114, 3260, 1348, -1391, -3680, -2836, 845, 2963, 2233, 504, -1148, -811, 329, -457, -1160, -749, 578, 935, -33, -467, -224, -262, -515, -3, 625, 560, 225, 740, 1566, 1796, 1205, 183, -711, -1241, -1283, -935, -620, -468, -362, -432, -1050, -1360, -881, -86, 648, 1526, 1999, 1771, 631, -456, -1612, -2425, -1870, -60, 468, -80, 173, 322, 478, 193, 429, -635, -1735, -2918, -3438, -1386, 999, 2707, 1361, -487, -1347, -1535, -409, 284, 1318, 601, -1048, -1881, -2624, -1478, 1264, 3047, 2045, 93, -1313, -1549, -635, 101, 521, 138, -1142, -1960, -1993, -567, 1258, 1607, 1536, 1614, 1157, 514, -353, -1205, -943, -439, 528, 2047, 3002, 2684, 1259, 80, -304, -514, -412, -158, 813, 1132, 889, 17, -110, 1021, 1678, 1193, -705, -1431, -1704, -1203, 576, 3146, 4302, 2477, -166, -2306, -2251, -1636, -1772, -1641, -946, -816, -745, 1353, 2875, 3304, 2688, 311, -1819, -3566, -3241, -360, 1978, 3319, 2514, 321, -1920, -3164, -1548, 717, 1680, 1517, 642, -413, -883, -528, 508, 673, -442, -1310, -1500, -735, 577, 1496, 1576, 1598, 1400, 340, -798, -1211, -789, 182, 951, 1262, 784, -511, -1513, -1414, -67, 1385, 1725, 1605, 906, -306, -1203, -1763, -1728, -1600, -1099, -130, 981, 1333, 1060, 565, 204, 4, -500, -862, -1478, -1750, -2079, -1154, 1112, 2685, 2453, 815, -708, -1700, -1517, -747, 102, 437, 435, 541, 646, 927, 1140, 717, -309, -1470, -2313, -2438, -1622, 243, 1561, 1720, 1527, 946, 240, -238, -732, -1254, -1664, -1575, -427, 1359, 2005, 1564, 891, 129, -232, -562, -1120, -1467, -1147, -153, 1095, 1634, 1550, 930, 433, 385, 839, 302, -778, -1404, -717, 1059, 2556, 2711, 1582, -248, -2173, -3099, -1994, 188, 676, 96, 123, 1346, 2719, 2253, 379, -1377, -2549, -2395, -1065, -335, -66, -38, 241, 919, 1312, 417, -1261, -2531, -2717, -1408, 524, 1238, 774, 320, -582, -1774, -2694, -2185, -596, 195, 200, 584, 906, 306, -629, -1933, -3121, -3402, -2520, -522, 1141, 2091, 2585, 2619, 1440, -655, -2595, -3550, -3093, -1636, 70, 1228, 2461, 2842, 1783, 128, -1436, -2238, -2249, -1761, -759, 1367, 2780, 2281, 1053, -392, -1292, -1608, -1583, -1042, -7, 1076, 1822, 1896, 1234, -57, -1534, -2350, -2085, -1053, -179, 444, 1814, 2570, 1130, -691, -1847, -1827, -532, 201, -106, -469, -595, -273, 600, 818, 169, -501, -580, -186, 111, 168, 51, 168, 51, -376, -463, -260, 13, 32, 341, 966, 1107, 406, -718, -1307, -1439, -1143, 46, 1425, 1572, 521, -584, -883, -636, -37, 724, 1047, 526, -350, -1097, -1451, -1049, 233, 1434, 1660, 1104, 239, -529, -992, -1042, -406, 413, 654, 425, 455, 776, 863, 247, -592, -944, -646, -23, 351, 644, 771, 682, 813, 973, 83, -1341, -2208, -2057, -372, 1597, 2148, 1814, 1293, 800, 406, -632, -1891, -2488, -2214, -990, 916, 2193, 2058, 1148, 148, -419, -597, -362, 62, 337, 277, 7, 514, 1475, 1760, 1100, 42, -642, -671, -629, -1164, -1321, -490, 1098, 2100, 2025, 1454, 665, -233, -954, -1016, -420, 86, 288, 466, 382, 47, -46, 34, -19, -62, -96, 56, 100, 39, 15, 194, 173, -414, -752, -648, -144, 474, 897, 815, 134, -645, -1169, -1239, -915, -499, -198, 122, 562, 888, 683, -86, -916, -1423, -1797, -1959, -1696, -749, 557, 1038, 541, -493, -1639, -2274, -2016, -1220, -729, -580, -214, 565, 1048, 521, -411, -1220, -1463, -1387, -1144, -1260, -1148, -564, 155, 780, 572, 304, -339, -1454, -2600, -2943, -1557, 457, 1605, 1169, 217, -912, -1731, -872, 951, 1411, 401, -590, -920, -426, 638, 730, 37, -419, -545, -21, 569, 758, 522, 84, -258, -162, 218, 596, 768, 534, 23, -389, -394, -203, -61, -77, 26, 15, -198, -133, 120, 710, 957, 617, -392, -1410, -1899, -1389, -411, 258, 355, 740, 1216, 1263, 984, -159, -1420, -2589, -2203, -447, 1616, 1770, 822, -101, -601, 300, 1773, 1374, -442, -1617, -1479, -313, 1079, 1483, 1367, 804, -327, -789, -322, 641, 851, 742, 1044, 1039, 847, 811, 769, 531, 143, -374, -646, -563, -66, 594, 760, 752, 1111, 1552, 1342, 474, -267, -561, -484, -245, 308, 800, 672, 179, -98, 378, 992, 820, 182, -137, -102, -196, -214, 14, 456, 444, 320, 599, 816, 551, 28, -232, -163, 67, 220, 145, 218, 329, 329, 197, 313, 768, 534, -171, -690, -579, -48, 59, -235, -264, -26, 134, 174, 169, 394, 560, 387, 156, -120, -147, 72, 558, 752, 350, -147, -265, 210, 576, 486, 118, -106, -221, -55, 715, 1605, 1550, 594, -600, -1537, -1769, -1006, 124, 495, 305, 283, 196, 129, 186, 104, -190, -463, -533, -474, -467, -363, -62, 76, -302, -797, -870, -516, -235, -251, -384, -303, -145, -118, -540, -953, -1030, -921, -484, -388, -374, -758, -967, -891, -297, 700, 1260, 1124, 116, -879, -1749, -1760, -860, 457, 476, -609, -1444, -1421, -38, 1852, 2271, 1254, 91, -1024, -1634, -1501, -831, -70, 219, 232, 425, 597, 450, 64, -212, -468, -752, -723, -175, 314, 188, 30, 26, 102, 53, -16, -120, -572, -1171, -1178, -230, 1166, 1335, 534, -43, -516, -764, -687, -629, -295, 355, 790, 721, 664, 677, 576, 312, -82, -223, -126, -81, -145, -193, -239, -269, 167, 1096, 1681, 1107, 173, -436, -882, -1133, -1127, -497, 448, 1023, 1169, 1128, 727, 85, -373, -641, -607, -354, -152, 5, 116, 407, 666, 800, 676, 174, -487, -892, -810, -470, 17, 461, 821, 696, 195, -430, -878, -971, -698, -9, 535, 695, 419, 160, 63, -264, -693, -1087, -1175, -632, 278, 380, -402, -903, -936, -477, 254, 739, 829, 516, -122, -686, -852, -583, -518, -827, -1071, -632, 378, 1178, 1074, 515, -315, -1019, -1218, -618, -2, 67, -3, 215, 943, 1362, 1039, 78, -679, -978, -710, 170, 1009, 1308, 722, -33, -422, -357, 223, 825, 1103, 545, -92, -355, 123, 1157, 1793, 1466, 549, -403, -982, -692, 465, 1248, 997, 487, -124, -503, -218, 716, 1115, 591, -100, -226, 441, 965, 368, -494, -889, -870, -327, 401, 647, 438, 103, 172, 534, 377, -308, -873, -790, -482, -173, 346, 931, 804, 103, -478, -680, -302, 174, 414, 463, 412, 142, -24, -70, 24, -84, -470, -614, -398, 74, 657, 1143, 1182, 589, -287, -997, -1051, -458, 85, 174, 421, 771, 751, 169, -592, -1095, -1163, -539, 510, 1112, 487, -607, -1336, -1381, -340, 947, 1120, 550, -211, -988, -1198, -788, -446, -737, -994, -890, -142, 1018, 1583, 1032, -107, -1074, -1503, -998, -200, -42, -124, -47, -127, -249, -340, -285, -155, -301, -499, -377, -5, 577, 1063, 1160, 850, 243, -420, -951, -1073, -399, 491, 604, 248, 67, 189, 465, 561, 427, 45, -473, -689, -481, -243, -93, 180, 642, 841, 491, -185, -688, -651, -4, 598, 526, 233, 11, 69, 116, -192, -533, -605, -370, 35, 438, 429, 92, -386, -542, -233, 162, 124, -244, -535, -503, 26, 548, 368, -207, -668, -911, -669, 68, 1007, 1356, 815, 248, -171, -562, -920, -1344, -876, 286, 1193, 848, 162, -462, -699, -329, 133, -17, -579, -883, -717, 325, 1519, 1689, 685, -381, -1139, -1121, -312, 402, 327, -27, -118, 47, 415, 877, 1212, 1092, 514, -159, -603, -647, -264, 384, 719, 489, -26, -240, 195, 693, 630, 172, 128, 412, 538, 409, 163, 198, 156, 146, 75, 29, -57, -212, -2, 330, 450, 295, 268, 471, 661, 574, 440, 360, -31, -497, -800, -646, -127, 398, 568, 580, 695, 688, 453, 56, -417, -743, -895, -663, -220, 228, 375, 293, 321, 431, 289, -316, -830, -952, -407, 319, 532, 372, 112, -85, -25, 292, 424, 177, -207, -542, -637, -434, -202, -159, -226, -84, 239, 506, 339, -50, -381, -428, -161, 376, 818, 787, 376, -19, -80, 136, 238, -13, -308, -495, -423, 188, 961, 1067, 572, 53, -361, -414, -175, 23, 47, 138, 418, 759, 901, 604, 183, -141, -361, -450, -428, -120, 428, 959, 1000, 582, -43, -596, -684, -402, -85, 131, 450, 743, 767, 556, 71, -480, -847, -873, -374, 329, 727, 700, 483, 194, -110, -301, -229, -52, -42, -135, -203, -28, 281, 288, -78, -460, -498, -91, 407, 538, 531, 577, 482, 178, -328, -685, -737, -649, -541, -458, -177, 258, 613, 602, 345, 14, -223, -300, -462, -563, -514, -377, -199, 92, 326, 340, 25, -442, -737, -780, -543, -371, -344, -248, -31, 135, 88, -150, -364, -602, -689, -553, -131, 231, 146, -158, -299, -222, -285, -512, -643, -502, -280, -260, -337, -315, -201, 6, 121, 8, -339, -647, -629, -324, -246, -438, -463, -237, 102, 367, 552, 388, -108, -620, -718, -464, -153, -180, -315, -385, -401, -226, -24, 11, -55, -138, -157, 55, 216, 192, -72, -353, -482, -533, -435, -376, -207, 42, 350, 540, 483, 165, -231, -583, -692, -583, -345, -67, 218, 442, 459, 266, 108, 17, -61, -50, -9, 101, 124, 157, 243, 239, 16, -344, -461, -240, 168, 435, 530, 643, 548, 270, -33, -247, -384, -497, -376, 96, 612, 720, 499, 168, -52, -192, -275, -270, 38, 486, 632, 434, 173, 81, 101, 24, -189, -388, -285, 122, 701, 1127, 1099, 597, 30, -383, -393, -243, -140, -107, -24, 89, 249, 494, 758, 678, 75, -631, -1042, -862, 32, 890, 1029, 598, 50, -181, 74, 544, 639, 382, 89, -144, -400, -476, -279, 34, 199, 133, 68, -70, -276, -439, -403, -132, 256, 529, 633, 334, -5, -127, -13, 34, -100, -196, -203, -30, 130, 154, -70, -373, -562, -443, -295, -332, -338, -183, 22, 22, -173, -453, -670, -717, -372, 167, 582, 542, 175, -120, -262, -307, -386, -456, -505, -501, -440, -132, 117, 58, -128, -213, -145, -251, -504, -545, -317, -34, 149, 223, 97, -231, -601, -760, -634, -81, 402, 451, 96, -279, -427, -480, -449, -477, -389, -299, -183, 39, 250, 234, -13, -242, -184, 32, 58, -142, -344, -374, -332, -170, 143, 394, 328, -74, -511, -802, -813, -589, -150, 372, 610, 457, 155, -145, -372, -345, -274, -207, -270, -359, -381, -299, -146, -132, -277, -293, -143, 136, 360, 389, 202, -126, -436, -682, -742, -594, -434, -236, -8, 85, 74, 2, -10, -14, -98, -310, -435, -483, -330, -61, 178, 207, 141, 71, -87, -317, -438, -361, -135, 59, 117, 154, 189, 200, 128, -46, -291, -459, -462, -175, 199, 394, 263, -30, -301, -453, -292, 22, 184, 104, 30, 177, 442, 639, 590, 264, -106, -406, -532, -539, -406, -110, 394, 746, 830, 605, 232, -120, -325, -299, -127, 95, 275, 457, 535, 452, 184, -74, -181, -231, -187, 44, 348, 510, 406, 174, 21, 24, 82, 45, -153, -340, -275, 87, 475, 547, 283, 6, -111, -41, 132, 209, 217, 209, 176, 170, 200, 238, 201, 63, -109, -176, -18, 295, 424, 252, -31, -123, 0, 190, 192, 23, -28, 125, 354, 405, 291, 157, 70, 132, 211, 158, 57, -1, 114, 182, 181, 74, -12, -104, -125, -6, 52, 71, 33, 100, 252, 477, 460, 270, -14, -214, -278, -359, -394, -333, -62, 232, 372, 279, 96, -66, -189, -210, -238, -258, -204, -49, 221, 293, 148, -146, -385, -462, -344, -135, 39, 179, 116, -21, -233, -355, -277, -50, 166, 168, 1, -119, -131, -71, 1, 17, 18, 50, 46, -12, -43, -54, 9, 95, 197, 215, 134, -18, -238, -375, -418, -262, -19, 66, -65, -240, -287, -75, 230, 359, 281, 94, -125, -248, -311, -260, -206, -204, -254, -241, -199, -153, -94, -196, -342, -368, -206, 101, 235, 138, -83, -161, -130, -29, -215, -397, -483, -364, -33, 167, 240, 59, -137, -250, -193, -88, 24, 53, -26, -200, -409, -429, -328, -230, -48, 184, 307, 273, 74, -190, -336, -332, -184, -51, -57, -152, -149, -13, 71, -38, -213, -280, -216, -88, -7, 19, 47, 118, 199, 251, 192, 4, -164, -278, -215, -68, 150, 344, 436, 284, -3, -277, -302, -137, 22, 3, 0, 32, 75, 109, 171, 158, 40, -23, 56, 206, 244, 161, -52, -243, -283, -167, 12, 107, 113, 72, 15, 27, 28, -32, -103, -45, 40, 165, 155, 74, 64, 118, 116, 107, 86, 112, 195, 314, 407, 278, 150, 60, 132, 214, 172, 37, -51, -3, 123, 235, 347, 455, 521, 470, 299, 76, -13, 45, 181, 246, 253, 273, 253, 286, 370, 384, 210, -10, -124, -115, 1, 263, 576, 699, 534, 286, 79, 75, 154, 190, 134, 86, 131, 246, 341, 338, 294, 279, 207, 146, 152, 207, 218, 132, 54, 133, 330, 584, 723, 667, 396, 5, -246, -209, 65, 335, 380, 336, 305, 341, 375, 438, 360, 205, 34, -49, 49, 188, 311, 331, 372, 438, 460, 372, 209, 56, -23, 131, 362, 515, 412, 131, -92, -186, -55, 112, 204, 152, 172, 140, 173, 223, 238, 173, 71, 3, 55, 138, 204, 145, 66, 30, 89, 158, 107, -16, -106, -72, 17, 96, 68, 3, -29, -17, -21, -23, -11, 36, 30, 32, 9, -52, -80, -66, -77, -150, -253, -320, -249, -136, -3, 35, -4, -153, -297, -301, -212, -41, 124, 140, 6, -161, -199, -209, -124, -40, -31, -12, -21, -18, 27, 54, 3, -114, -284, -454, -513, -382, -181, 25, 95, 84, 31, 112, 195, 163, 38, -122, -211, -240, -208, -136, -25, 34, 98, 163, 166, 46, -37, -70, -175, -253, -234, -67, 108, 141, 162, 161, 172, 95, -19, -96, -85, -26, 22, 47, 41, 32, 41, 137, 156, 51, -155, -268, -187, 14, 286, 478, 453, 194, -160, -366, -369, -177, -7, 142, 227, 190, 139, -21, -136, -203, -248, -230, -191, -121, 32, 114, 45, -57, -201, -154, 20, 191, 232, 148, -10, -113, -60, 42, 121, 115, 86, 44, 71, 48, -46, -98, -169, -174, -97, 54, 160, 196, 127, 70, 20, -31, 36, 123, 269, 270, 153, 18, 38, 95, 90, -61, -212, -255, -212, -96, 63, 229, 263, 153, -33, -169, -168, -30, 210, 351, 378, 254, 83, -46, -121, -115, -54, 9, 22, 11, 71, 155, 244, 271, 197, 61, -34, -8, 109, 259, 336, 201, 19, -150, -101, 77, 147, 169, 112, 42, 14, 77, 185, 282, 214, 120, 137, 133, 149, 111, 100, 168, 181, 141, 1, 2, 32, 81, 136, 80, 50, 25, 80, 91, 117, 81, 15, 7, 7, -5, -105, -117, 3, 199, 337, 366, 366, 318, 218, 47, -133, -132, -52, 90, 274, 335, 311, 202, 63, -78, -187, -181, -97, 69, 196, 282, 332, 227, 48, -175, -241, -71, 196, 325, 317, 163, -44, -141, -121, -70, -64, -84, -52, 33, 99, 84, -71, -230, -269, -191, 14, 200, 238, 138, -29, -129, -131, 25, 84, 24, -80, -144, -146, -22, 72, 12, -124, -237, -252, -204, -56, 56, 100, 99, 102, 106, 81, 46, -13, -43, -24, 14, 5, -69, -89, -96, -99, -63, 4, 51, 32, -18, -66, -29, -8, 24, 36, 99, 125, 106, 42, -81, -173, -184, -115, -7, 64, 141, 208, 161, 13, -110, -180, -163, -138, -121, -46, 33, 95, 42, -31, -105, -61, 3, -3, 0, 9, -6, -68, -118, -103, -45, -11, -76, -148, -190, -142, 12, 73, 50, -44, -110, -107, -43, 12, 7, -9, 1, 48, 89, 84, 70, 27, 29, 48, 26, -6, -49, -41, -49, -19, 36, 154, 256, 331, 322, 232, 126, 49, 81, 123, 230, 177, 180, 140, 91, 110, 132, 129, 142, 148, 224, 318, 322, 333, 258, 177, 123, 111, 167, 265, 309, 357, 342, 337, 303, 197, 226, 295, 316, 304, 208, 155, 202, 225, 248, 246, 244, 285, 306, 354, 418, 408, 364, 259, 203, 243, 283, 299, 276, 264, 246, 281, 319, 372, 363, 266, 192, 181, 177, 197, 215, 199, 196, 200, 229, 241, 223, 202, 169, 202, 197, 156, 161, 151, 172, 131, 103, 58, 21, 54, 118, 169, 178, 119, 93, 59, 21, 17, -23, -34, -7, 121, 221, 172, 69, -33, -70, -11, 61, 110, 97, 16, 2, -12, -25, -83, -138, -201, -124, -38, 37, 25, -3, -19, -1, 8, -1, -34, -81, -51, -23, 46, 103, 59, 3, -75, -164, -182, -116, -9, 96, 149, 131, 75, -9, -69, -109, -107, -63, 33, 107, 173, 182, 125, -4, -129, -165, -101, -16, 14, 35, 20, 44, 60, 101, 192, 231, 168, 74, 0, -1, -24, -29, -22, 25, 80, 135, 127, 74, 15, -1, 21, -17, -98, -125, -86, -13, 29, -46, -100, -158, -133, -8, 95, 127, 55, -78, -167, -258, -245, -220, -223, -228, -187, -104, 12, 62, 51, -79, -269, -391, -387, -206, -73, -32, -90, -118, -129, -113, -160, -247, -354, -453, -388, -287, -179, -129, -212, -342, -426, -464, -389, -281, -180, -78, -76, -129, -211, -284, -353, -362, -283, -232, -185, -154, -151, -192, -167, -243, -243, -253, -269, -193, -132, -13, 9, -11, -61, -136, -164, -183, -164, -73, -34, -9, 15, 0, -35, -31, 24, 46, 25, -30, -30, -49, -36, -27, -33, 1, 59, 139, 202, 184, 118, 37, 8, 39, 126, 174, 189, 171, 134, 49, 31, 14, 19, 38, 101, 172, 213, 170, 87, 42, 32, 72, 125, 195, 242, 242, 224, 138, 105, 74, 27, 47, 77, 127, 169, 200, 199, 212, 141, 105, 66, 46, 87, 113, 145, 187, 166, 98, 117, 129, 10, 9, 4, 41, 116, 132, 152, 115, 77, -14, -104, -71, -26, 68, 131, 114, 78, 25, -8, -37, 0, 35, 83, 111, 116, 120, 143, 116, 109, 70, 56, 2, 37, 138, 71, 49, -30, 0, -24, -5, 23, 30, 21, 31, 100, 178, 210, 187, 130, 100, 56, 118, 156, 144, 77, 9, -41, -14, 24, 31, 53, 31, 34, -4, 19, 22, 55, 88, 66, 69, 73, 57, 56, 49, 22, 1, 25, 51, 77, 70, -10, -72, -69, -19, 85, 124, 121, 60, -11, -81, -102, -45, 3, 69, 93, 99, 96, 34, -3, -65, -73, -82, 4, 58, 69, 54, -46, -93, -77, -89, -65, -81, -109, -79, -36, 13, 6, -47, -80, -120, -101, -89, -96, -138, -127, -122, -58, -83, -118, -150, -183, -100, -89, -70, -137, -138, -117, -73, -32, -62, -58, -100, -125, -155, -97, -69, 11, -64, -161, -120, -184, -128, -123, -43, -68, -82, -116, -73, -72, 19, 47, 22, -47, -143, -148, -79, -21, 7, 39, 53, 50, 36, -1, -11, -32, -42, -13, 39, 56, 63, 41, 87, 120, 121, 114, 104, 74, 77, 143, 205, 176, 87, 6, -39, -27, 37, 129, 139, 178, 131, 97, 41, -6, 21, 3, 35, 92, 113, 153, 142, 121, 89, 51, 54, 59, 85, 113, 131, 130, 110, 56, 97, 83, 90, 97, 89, 101, 97, 98, 108, 160, 179, 185, 148, 119, 61, 11, 12, 38, 113, 169, 177, 177, 138, 65, 23, -21, -26, -2, 46, 66, 57, 72, 81, 65, -6, -70, -44, 7, 106, 145, 145, 115, 45, 28, -40, -102, -134, -128, -131, -45, 45, 88, 89, 48, 31, -77, -57, -72, -64, -70, -26, 30, 56, 74, 45, 2, -64, -75, -81, -62, -46, 2, 16, 38, 9, 25, -7, -39, -42, -46, -47, -79, -109, -133, -127, -50, -35, -30, -20, 0, 8, -25, -33, -75, -39, -27, -52, -76, -127, -159, -143, -118, -71, -67, -89, -86, -116, -107, -89, -77, -62, -69, -54, -81, -107, -120, -124, -137, -181, -206, -232, -201, -123, -110, -89, -118, -156, -157, -186, -189, -213, -198, -212, -236, -246, -202, -185, -192, -154, -188, -192, -249, -226, -223, -219, -190, -191, -141, -179, -223, -229, -229, -168, -114, -107, -154, -213, -249, -249, -247, -195, -158, -174, -146, -179, -170, -199, -233, -283, -255, -271, -231, -221, -216, -214, -195, -192, -174, -185, -212, -265, -294, -317, -266, -206, -201, -167, -187, -215, -218, -229, -188, -179, -148, -185, -215, -218, -190, -169, -166, -173, -223, -248, -262, -246, -220, -195, -193, -216, -248, -251, -246, -263, -259, -236, -246, -250, -289, -273, -287, -263, -245, -240, -205, -230, -197, -195, -181, -142, -97, -152, -205, -276, -312, -284, -274, -246, -237, -234, -196, -157, -151, -123, -145, -160, -176, -247, -228, -230, -218, -153, -137, -140, -142, -201, -220, -209, -214, -180, -142, -140, -158, -165, -134, -97, -99, -107, -141, -187, -222, -175, -114, -44, -51, -48, -90, -131, -126, -110, -92, -70, -70, -44, -53, -33, -66, -73, -84, -100, -61, -33, -20, 7, -6, -40, -91, -129, -102, -51, -26, -8, 1, 15, -12, 13, 53, 20, -26, -60, -32, -34, -2, 14, 79, 106, 112, 83, 59, 1, -31, -16, 4, 41, 74, 60, 31, 34, 2, 12, 20, 30, 27, 20, 11, -4, 8, 25, 43, 64, 15, 22, -3, -21, -19, 28, 53, 57, -6, -57, -69, -50, -19, 29, 14, -12, -75, -72, -35, 18, 14, -18, -107, -158, -146, -133, -97, -39, -13, -60, -61, -81, -96, -125, -109, -142, -147, -135, -109, -51, -33, -71, -117, -150, -165, -163, -79, -48, -50, -110, -129, -178, -187, -212, -205, -173, -159, -124, -125, -76, -87, -75, -134, -207, -234, -238, -196, -163, -143, -113, -139, -162, -177, -183, -171, -185, -165, -165, -155, -138, -143, -178, -154, -176, -152, -178, -148, -152, -194, -223, -218, -197, -173, -160, -166, -177, -187, -162, -147, -106, -83, -98, -123, -198, -211, -193, -127, -79, -108, -108, -126, -73, -57, -51, -52, -103, -147, -156, -183, -193, -182, -159, -60, -75, -56, -52, -131, -140, -189, -191, -226, -173, -141, -133, -134, -156, -210, -249, -224, -210, -164, -145, -137, -154, -153, -160, -149, -161, -179, -186, -213, -202, -192, -184, -174, -158, -117, -117, -122, -123, -110, -138, -111, -129, -103, -117, -151, -143, -126, -112, -93, -64, -58, -67, -103, -135, -115, -86, -72, -75, -64, -36, -45, -41, -32, -33, 7, -28, -41, -57, -52, -35, -27, 6, -10, -41, -18, -73, -41, 3, 17, 6, 10, -13, -7, 9, -1, 4, -23, 3, 32, 36, 13, -29, -42, -18, -34, -15, -25, -17, 2, 22, -7, 31, 21, -3, -13, -52, -44, -52, -9, 4, 20, 12, 6, -51, -67, -109, -142, -98, -96, -64, -15, -7, -38, -49, -100, -137, -148, -123, -98, -105, -131, -120, -142, -128, -79, -116, -73, -112, -147, -158, -159, -151, -124, -126, -137, -129, -141, -145, -133, -130, -122, -111, -134, -110, -161, -153, -187, -179, -155, -151, -124, -136, -96, -89, -83, -144, -191, -201, -155, -121, -120, -100, -79, -101, -140, -157, -149, -144, -122, -91, -110, -98, -102, -109, -107, -115, -134, -134, -113, -81, -75, -67, -92, -98, -91, -78, -60, -68, -81, -90, -101, -67, -48, -37, -72, -28, -72, -48, -67, -94, -91, -132, -126, -106, -68, -66, -45, -70, -70, -74, -76, -63, -72, -52, -60, -73, -115, -155, -172, -139, -132, -128, -117, -118, -121, -117, -129, -146, -151, -176, -167, -169, -173, -138, -178, -152, -167, -153, -180, -199, -202, -205, -174, -147, -132, -148, -174, -180, -175, -178, -164, -194, -167, -164, -165, -226, -189, -216, -214, -221, -229, -201, -206, -201, -231, -219, -217, -207, -210, -210, -231, -233, -241, -221, -181, -175, -150, -149, -156, -180, -198, -182, -176, -185, -164, -139, -137, -117, -91, -122, -175, -195, -207, -184, -123, -123, -88, -128, -128, -156, -152, -161, -175, -141, -111, -74, -34, -30, -50, -42, -110, -116, -85, -75, -47, -56, -50, -37, -29, -38, -43, -72, -44, -14, -23, -17, -3, -10, 5, 5, -3, 19, 5, 12, -5, -35, -29, -37, 10, 39, 55, 55, 56, 29, 4, -26, -21, -15, -5, 34, 42, 42, 60, 57, 47, 32, 19, 40, 33, 56, 66, 30, 5, -17, -10, -1, 36, 25, -3, 8, 24, 32, 56, 38, -10, -30, -47, -24, -25, -26, 19, 27, 31, 23, -18, -2, -12, -19, -33, -26, 18, -7, 5, -4, -9, -16, -15, -23, -4, -10, 3, -11, 4, -8, -37, -39, -16, 3, 13, 4, -31, -6, 5, -12, -7, -17, -39, -65, -40, 3, -1, 27, 15, 52, -30, -31, -67, -69, -13, -17, -23, -25, -31, -8, -17, 9, 30, 1, -21, -55, -41, -54, -2, 1, 34, 28, -9, -7, -20, 28, -1, 26, -5, -9, -18, -48, -35, -21, -38, -36, -23, -42, -67, -54, -59, -38, -82, -91, -69, -54, -17, 3, -12, 1, -22, -50, -85, -77, -49, -37, -25, -27, -69, -66, -81, -22, 18, 22, 10, -19, -48, -69, -101, -88, -69, -53, -49, -41, -53, -66, -61, -46, -47, -71, -67, -87, -103, -83, -69, -62, -61, -70, -74, -64, -77, -91, -110, -113, -74, -92, -86, -106, -133, -115, -83, -102, -58, -50, -53, -37, -52, -81, -124, -134, -146, -106, -118, -86, -54, -52, -44, -56, -81, -99, -86, -103, -115, -108, -111, -93, -78, -71, -75, -75, -62, -66, -38, -8, -13, -47, -38, -65, -81, -47, -10, -60, -38, -34, -18, -39, -42, -27, -81, -87, -103, -76, -29, 1, -18, -38, -94, -112, -103, -81, -33, -13, -22, -5, -41, -59, -69, -72, -56, -68, -66, -68, -37, -70, -76, -72, -75, -59, -47, -40, -20, -53, -63, -104, -102, -77, -67, -48, -49, -53, -67, -75, -105, -93, -74, -66, -73, -75, -75, -110, -106, -142, -123, -122, -92, -78, -86, -51, -41, -57, -19, -68, -63, -61, -36, -17, -22, -20, -5, -36, -35, -33, -37, -29, -34, -28, -15, 20, -11, 10, -2, -15, -40, -54, -54, -52, -23, -23, -24, 18, 13, 25, 21, 8, 18, 16, 5, -23, -19, -15, 32, 2, -15, 1, -12, -26, 9, 36, 49, 42, 25, 24, 5, 53, 45, 67, 59, 59, 29, 56, 47, 100, 13, 142, -436, 219, 206, -21, 170, 21, 152, 44, 123, 53, 82, 25, 60, 40, 71, 41, 45, 51, 88, 93, 108, 106, 109, 81, 80, 78, 79, 104, 93, 131, 126, 99, 82, 74, 24, 47, 32, 46, 59, 57, 95, 69, 62, 14, 42, 56, 56, 35, 41, 76, 54, 20, 26, 16, 3, -25, -14, 23, 5, 22, 18, -2, 8, -20, -42, -71, -43, -38, 4, 40, -9, 5, -9, -17, -49, -54, -21, -21, -12, -15, -18, -19, -25, -67, -65, -77, -76, -45, -65, -30, -15, -14, -12, -27, -51, -49, -53, -69, -68, -44, -28, -52, -55, -24, -34, -32, -58, -30, -68, -44, -32, -32, -11, 4, -25, -20, 19, -7, 10, 4, 20, 23, 18, 16, 23, 28, 41, 47, 58, 56, 46, 61, 66, 49, 71, 52, 40, 69, 103, 127, 110, 107, 97, 87, 114, 147, 128, 136, 72, 74, 98, 96, 126, 130, 153, 175, 188, 175, 168, 147, 145, 131, 137, 140, 131, 129, 123, 161, 138, 169, 106, 115, 152, 142, 180, 167, 161, 134, 133, 133, 135, 122, 146, 146, 118, 127, 114, 109, 127, 127, 142, 134, 129, 141, 129, 113, 119, 126, 144, 194, 206, 207, 179, 154, 182, 156, 145, 136, 124, 141, 120, 146, 118, 147, 122, 131, 151, 146, 158, 142, 155, 117, 142, 124, 164, 152, 128, 108, 150, 146, 150, 146, 129, 120, 95, 109, 134, 140, 127, 108, 65, 118, 115, 102, 153, 135, 143, 161, 128, 131, 114, 116, 131, 120, 141, 118, 115, 114, 111, 156, 171, 184, 134, 141, 143, 148, 158, 154, 144, 130, 116, 78, 104, 158, 149, 133, 145, 118, 107, 85, 71, 65, 63, 67, 47, 35, 28, 84, 72, 79, 50, 48, 45, 52, 52, 74, 45, 10, 11, 9, 28, 20, 3, -9, 26, 45, 45, 19, 1, -32, -22, -38, -11, 11, 14, 28, 16, 9, -5, 11, -42, -19, -50, -4, -1, -4, -23, -43, -46, -57, -63, -28, -44, -39, -8, -17, 17, -13, -30, -47, -46, -27, -33, 1, -22, 5, 9, 7, -6, 13, -4, 0, -13, -42, -62, -76, -55, -60, -42, -32, -18, 5, 5, -27, -56, -48, -23, -21, -18, -34, -61, -80, -59, -56, -34, -27, -15, -34, 5, -7, -9, 4, -16, -51, -47, -44, -50, -57, -40, -21, -38, -40, -41, -24, -22, -8, -26, -23, -18, -16, 6, 30, 30, 25, -41, -43, -60, -21, -9, -6, 0, -6, -17, -26, -6, -15, -4, -14, -53, -29, -13, -17, -2, 8, 8, -31, -3, -38, -18, -12, -12, -39, -40, -32, -30, -27, -26, -40, -39, -65, -42, -43, -30, -22, 22, 14, -2, -14, -32, -47, -37, -29, -37, -31, -27, -27, 13, 3, -34, -64, -52, -9, 13, 48, 61, 29, 14, 68, 26, 10, 10, -9, -10, -4, 26, 13, 35, 29, 27, 19, 45, 49, 68, 42, 41, 46, 62, 62, 28, 47, 25, 56, 49, 47, 67, 84, 89, 125, 83, 82, 60, 76, 82, 109, 120, 122, 134, 128, 128, 134, 118, 112, 108, 105, 143, 128, 147, 160, 159, 155, 153, 143, 143, 138, 129, 152, 119, 195, 159, 159, 175, 183, 162, 156, 160, 159, 178, 168, 214, 229, 214, 174, 172, 187, 174, 198, 189, 151, 154, 200, 187, 185, 163, 154, 177, 148, 153, 177, 190, 186, 203, 193, 171, 171, 156, 151, 146, 129, 108, 129, 157, 155, 180, 151, 143, 130, 147, 133, 143, 155, 159, 155, 151, 163, 143, 140, 132, 125, 131, 135, 127, 159, 186, 183, 156, 129, 135, 124, 123, 128, 117, 111, 100, 76, 90, 77, 83, 96, 119, 104, 94, 83, 88, 55, 47, 62, 55, 56, 38, 57, 30, 34, 53, 61, 57, 41, 40, 42, 28, 47, 62, 26, 29, 20, 6, 56, 50, 47, 76, 84, 84, 76, 42, 52, 42, 35, 44, 60, 59, 71, 41, 70, 82, 68, 52, 71, 79, 83, 83, 64, 68, 68, 84, 68, 83, 82, 73, 102, 113, 95, 97, 94, 71, 87, 42, 115, 124, 114, 147, 102, 114, 102, 86, 101, 102, 102, 106, 133, 137, 129, 147, 133, 132, 147, 128, 125, 125, 104, 139, 137, 127, 142, 151, 149, 162, 164, 151, 137, 150, 174, 154, 169, 171, 159, 169, 182, 187, 167, 177, 136, 135, 132, 153, 179, 193, 192, 191, 184, 155, 139, 128, 168, 178, 170, 193, 190, 173, 188, 176, 152, 129, 131, 132, 155, 173, 160, 178, 176, 150, 130, 132, 127, 135, 156, 143, 136, 115, 102, 133, 123, 116, 120, 127, 146, 121, 106, 110, 71, 67, 62, 120, 122, 91, 95, 94, 85, 70, 67, 74, 67, 72, 70, 72, 73, 80, 86, 79, 100, 99, 100, 82, 68, 86, 60, 58, 79, 52, 38, 64, 53, 74, 70, 68, 82, 57, 68, 88, 72, 90, 61, 75, 79, 61, 28, 26, 51, 77, 80, 51, 84, 100, 82, 111, 121, 116, 98, 98, 79, 92, 85, 117, 136, 116, 98, 78, 63, 52, 83, 79, 107, 94, 76, 79, 88, 68, 30, 55, 84, 81, 89, 96, 67, 73, 82, 71, 71, 57, 48, 53, 57, 36, 52, 18, 41, 57, 25, 44, 39, 11, 35, 28, 44, -5, 14, 41, 13, -1, -31, -15, -13, -6, 24, -20, -4, -17, -29, -35, -48, -28, -30, -45, -34, 30, -72, -62, 16, -61, -16, -50, -47, -67, -60, -40, -32, -33, -23, -24, -27, -39, -34, -34, -44, -46, -11, 3, -19, -5, -42, -38, -43, -67, -41, -35, -15, -22, -6, 7, 6, -19, -17, -7, -22, -10, -15, -11, -11, -1, 16, 1, 4, 5, 11, 18, 28, 57, 37, 35, 13, 26, 34, 36, 49, 35, 54, 58, 41, 60, 53, 16, 39, 44, 88, 100, 99, 87, 116, 94, 94, 88, 50, 54, 42, 64, 56, 99, 87, 103, 104, 106, 120, 88, 98, 69, 87, 89, 94, 101, 88, 99, 107, 114, 115, 94, 83, 82, 86, 105, 108, 98, 104, 86, 83, 74, 84, 84, 103, 127, 125, 120, 122, 108, 111, 82, 113, 92, 105, 120, 117, 131, 127, 123, 101, 103, 127, 116, 106, 119, 161, 137, 143, 154, 143, 139, 137, 180, 151, 147, 165, 135, 136, 127, 112, 129, 151, 159, 159, 167, 162, 174, 169, 169, 179, 169, 151, 161, 157, 155, 147, 160, 176, 185, 195, 170, 162, 180, 159, 161, 173, 149, 178, 205, 208, 180, 157, 151, 151, 170, 162, 171, 182, 174, 170, 138, 154, 162, 166, 140, 140, 146, 119, 133, 160, 153, 160, 149, 153, 150, 107, 134, 68, 121, 116, 113, 137, 91, 117, 107, 120, 123, 124, 78, 107, 109, 121, 122, 114, 102, 63, 68, 80, 97, 95, 103, 109, 93, 90, 75, 29, 41, 19, 39, 57, 44, 101, 81, 99, 63, 52, 53, 46, 47, 51, 49, 28, 17, 13, 10, -3, 18, 34, 55, 60, 39, 33, 25, 1, -6, -36, -20, 3, -10, 13, 13, 16, 60, 52, 65, 63, 39, 23, 16, 27, 42, 49, 77, 104, 101, 128, 101, 102, 93, 117, 130, 91, 93, 88, 106, 138, 152, 134, 113, 100, 94, 90, 124, 141, 134, 155, 130, 149, 138, 153, 140, 120, 154, 133, 125, 129, 116, 139, 143, 121, 125, 120, 114, 133, 155, 151, 157, 143, 135, 128, 126, 111, 112, 123, 129, 139, 106, 136, 140, 141, 112, 129, 118, 127, 114, 72, 102, 84, 86, 94, 97, 59, 76, 87, 59, 80, 71, 85, 92, 92, 79, 83, 88, 67, 82, 51, 37, 29, 60, 73, 61, 74, 65, 78, 77, 81, 80, 68, 49, 30, 15, -7, 4, 57, 57, 39, 45, 51, 43, 51, 56, 75, 49, 47, 49, 39, 58, 62, 84, 59, 85, 100, 75, 84, 79, 70, 67, 55, 70, 103, 66, 49, 32, 26, 46, 41, 74, 74, 75, 78, 56, 49, 34, 33, 31, 44, 41, 58, 72, 47, 65, 67, 49, 44, 48, 46, 46, 47, 42, 52, 24, 41, 27, 59, 66, 38, 24, -7, 6, -10, 5, -17, -29, -26, 9, 5, 9, 21, 10, 5, 30, 0, -19, -17, -11, -21, -2, -20, 10, 14, -31, -7, -4, 1, 9, -8, 0, 3, 11, -2, -7, 0, 8, -28, -51, -46, -85, -64, -32, -74, -16, -43, -43, -48, -65, -67, -83, -74, -119, -93, -86, -68, -91, -74, -84, -71, -78, -77, -67, -76, -53, -70, -77, -98, -84, -82, -102, -84, -79, -78, -94, -68, -57, -68, -68, -53, -65, -68, -62, -78, -66, -63, -87, -48, -55, -43, -49, -52, -41, -35, -47, -43, -24, -14, -4, -2, -13, -14, -39, -12, 0, 2, 15, 9, 3, 7, 2, 10, 19, 11, 2, -15, 4, -22, -29, 2, 11, -5, 3, -3, -4, -12, -3, -5, 15, 1, 10, -18, -16, -14, -8, 7, 5, 11, 26, -1, 13, 18, 14, 37, 0, 5, -7, -19, -23, -3, 1, -6, 1, -23, -7, -4, 4, 3, 7, -7, -1, 4, 15, 38, 9, 13, 24, 6, 44, 60, 34, 76, 68, 46, 33, 45, 54, 70, 61, 50, 35, 57, 60, 60, 72, 57, 56, 42, 66, 53, 64, 75, 75, 69, 78, 68, 67, 60, 65, 64, 86, 98, 92, 100, 117, 98, 87, 110, 89, 102, 99, 119, 133, 116, 126, 141, 128, 104, 104, 111, 110, 133, 137, 117, 101, 110, 110, 129, 134, 162, 153, 140, 159, 156, 139, 143, 174, 157, 150, 166, 151, 152, 156, 138, 160, 160, 180, 168, 160, 127, 141, 155, 109, 136, 134, 136, 124, 137, 123, 90, 101, 108, 96, 72, 102, 80, 79, 84, 62, 102, 99, 104, 94, 76, 94, 91, 71, 74, 74, 76, 75, 89, 65, 61, 79, 86, 86, 85, 80, 74, 63, 38, 52, 64, 33, 48, 75, 67, 71, 66, 59, 50, 67, 78, 50, 57, 74, 54, 55, 39, 29, 31, 22, 38, 36, 33, 18, 36, 25, 15, -19, -13, 1, -2, -24, 0, -15, -17, -33, -30, -38, -33, -27, -32, -41, -1, -30, 2, -41, -38, -5, -44, -21, -42, -25, -19, -40, -43, -53, -34, -35, -19, -29, -50, -45, -15, -7, -24, -30, -27, -20, -35, -30, -61, -52, -70, -82, -80, -81, -78, -28, -40, -32, -45, -65, -71, -88, -95, -87, -58, -55, -64, -50, -44, -61, -72, -69, -76, -42, -79, -76, -82, -68, -61, -65, -93, -103, -122, -104, -98, -109, -112, -93, -96, -85, -92, -106, -109, -105, -44, -75, -63, -119, -74, -45, -82, -54, -53, -45, -78, -75, -87, -64, -71, -72, -71, -74, -108, -65, -73, -68, -40, -58, -63, -49, -89, -95, -110, -117, -81, -96, -96, -110, -88, -93, -69, -83, -96, -87, -74, -56, -32, -17, -41, -63, -39, -38, -72, -82, -77, -85, -73, -54, -44, -22, -47, -28, -39, -32, -30, -49, -55, -49};
158:               
159:               struct clip_psv sine = {.size = SINRES, .blocks=SINRES/STREAMBUF, .playing=FALSE, .flash=FALSE, .block_index=0, .start_ptr=sintab, .read_ptr=sintab};
160:               
161:               struct clip_psv kick = {.size = 5552, .blocks=5552/STREAMBUF, .playing=FALSE, .flash=FALSE, .block_index=0, .start_ptr=kicksamp, .read_ptr=kicksamp};
162:               struct clip_psv snare = {.size = 6252, .blocks=6252/STREAMBUF, .playing=FALSE, .flash=FALSE, .block_index=0, .start_ptr=snaresamp, .read_ptr=snaresamp};
---  C:/Users/ryan/Documents/seniorproject/ps-040/screens.c  --------------------------------------------
1:                 /*
2:                  * File:   screens.c
3:                  * Author: ryan
4:                  *
5:                  * Created on January 28, 2018, 11:17 PM
6:                  */
7:                 
8:                 
9:                 #include <xc.h>
10:                #include "screens.h"
11:                #include "common.h"
12:                #include "plcd.h"
13:                #include "dsp.h"
14:                #include "flash.h"
15:                
16:                #include "sounds.h"
17:                
18:                extern unsigned int process_time, flash_time;
19:                extern unsigned char btread;
20:                
21:                extern unsigned char    TxBufferA[FLASH_DMAXFER_BYTES]__attribute__((space(xmemory))), 
22:                                        RxBufferA[FLASH_DMAXFER_BYTES]__attribute__((space(xmemory)));
23:                extern fractional       RxBufferB[STREAMBUF] __attribute__((space(xmemory)));
24:                
25:                extern enum screenStruc state, laststate;
26:                extern enum fxStruct fxUnits[NUMFXUNITS];
27:                extern struct clip sine;
28:                extern struct ctrlsrfc ctrl;
29:                extern struct sflags stat;
30:                extern struct clip_flash clipmap[FLASH_NUMCHUNKS];
31:                
32:                int fxLast=0, fxNow=0;
33:                
34:                void (*fxModPointers[NUMFX])(unsigned int, fractional, fractional, fractional) = {screenNoFXmod, screenLPFmod, screenTRMmod, screenLOPmod, screenBTCmod};
35:                void (*screenPointers[SCREENS])(void) = {screenFX, screenRecord, screenDebugPots, screenDebugFlash, screenDebugBuffers, screenDebugInput, screenSHIFT};
36:                
37:                void screenDebugAudio(void){
38:                
39:                }
007F6C  060000     RETURN
40:                
41:                void screenDebugBuffers(void){
42:                    if(state!=laststate){
007C38  80B190     MOV 0x1632, W0
007C3A  E3160A     CP state
007C3C  32001B     BRA Z, 0x7C74
43:                        //setup here
44:                        lcdClearQ();
007C3E  07F88E     RCALL lcdClearQ
45:                        lcdSetCursorQ(0,0);
007C40  EB4080     CLR.B W1
007C42  784001     MOV.B W1, W0
007C44  07F896     RCALL lcdSetCursorQ
46:                        lcdWriteStringQ("Buffer Debug");
007C46  2ECE70     MOV #0xECE7, W0
007C48  07F8A8     RCALL lcdWriteStringQ
47:                        lcdSetCursorQ(0,1);
007C4A  B3C011     MOV.B #0x1, W1
007C4C  EB4000     CLR.B W0
007C4E  07F891     RCALL lcdSetCursorQ
48:                        lcdWriteStringQ("FX time:");
007C50  2ECF40     MOV #0xECF4, W0
007C52  07F8A3     RCALL lcdWriteStringQ
49:                        lcdSetCursorQ(11,1);
007C54  B3C011     MOV.B #0x1, W1
007C56  B3C0B0     MOV.B #0xB, W0
007C58  07F88C     RCALL lcdSetCursorQ
50:                        lcdWriteStringQ("/256");
007C5A  2ECFD0     MOV #0xECFD, W0
007C5C  07F89E     RCALL lcdWriteStringQ
51:                        lcdSetCursorQ(0,2);
007C5E  B3C021     MOV.B #0x2, W1
007C60  EB4000     CLR.B W0
007C62  07F887     RCALL lcdSetCursorQ
52:                        lcdWriteStringQ("Flash:");
007C64  2ED020     MOV #0xED02, W0
007C66  07F899     RCALL lcdWriteStringQ
53:                        lcdSetCursorQ(0,3);
007C68  B3C031     MOV.B #0x3, W1
007C6A  EB4000     CLR.B W0
007C6C  07F882     RCALL lcdSetCursorQ
54:                        lcdWriteStringQ("btRd:");
007C6E  2ED090     MOV #0xED09, W0
007C70  07F894     RCALL lcdWriteStringQ
007C72  370011     BRA 0x7C96
55:                    } else {
56:                        //update here
57:                        lcdSetCursorQ(8,1);
007C74  B3C011     MOV.B #0x1, W1
007C76  B3C080     MOV.B #0x8, W0
007C78  07F87C     RCALL lcdSetCursorQ
58:                        lcdWriteDecimalQ(process_time,3);
007C7A  200031     MOV #0x3, W1
007C7C  BFD606     MOV.B process_time, WREG
007C7E  07F9A8     RCALL lcdWriteDecimalQ
59:                        lcdSetCursorQ(6,2);
007C80  B3C021     MOV.B #0x2, W1
007C82  B3C060     MOV.B #0x6, W0
007C84  07F876     RCALL lcdSetCursorQ
60:                        lcdWriteDecimalQ(flash_time,3);
007C86  200031     MOV #0x3, W1
007C88  BFD608     MOV.B flash_time, WREG
007C8A  07F9A2     RCALL lcdWriteDecimalQ
61:                        lcdSetCursorQ(6,3);
007C8C  B3C031     MOV.B #0x3, W1
007C8E  B3C060     MOV.B #0x6, W0
007C90  07F870     RCALL lcdSetCursorQ
62:                        lcdWriteByteQ(btread);
007C92  BFD610     MOV.B btread, WREG
007C94  07F918     RCALL lcdWriteByteQ
63:                        //lcdWriteDecimalQ();
64:                        //lcdSetCursorQ(6,3);
65:                        //lcdWriteDecimalQ();
66:                        
67:                    }
68:                }
007C96  060000     RETURN
69:                
70:                void screenDebugPots(void){
007E1C  BE9F88     MOV.D W8, [W15++]
007E1E  BE9F8A     MOV.D W10, [W15++]
71:                    int bank=0;
007E5C  EB0480     CLR W9
72:                    
73:                    if(state!=laststate){
007E20  80B190     MOV 0x1632, W0
007E22  E3160A     CP state
007E24  320016     BRA Z, 0x7E52
74:                        // Setup here
75:                        lcdClearQ();
007E26  07F79A     RCALL lcdClearQ
76:                        lcdSetCursorQ(0,0);
007E28  EB4080     CLR.B W1
007E2A  784001     MOV.B W1, W0
007E2C  07F7A2     RCALL lcdSetCursorQ
77:                        lcdWriteStringQ("Potentiometer Debug");
007E2E  2ED180     MOV #0xED18, W0
007E30  07F7B4     RCALL lcdWriteStringQ
78:                        lcdSetCursorQ(9,1);
007E32  B3C011     MOV.B #0x1, W1
007E34  B3C090     MOV.B #0x9, W0
007E36  07F79D     RCALL lcdSetCursorQ
79:                        lcdWriteStringQ("|");
007E38  2ED2C0     MOV #0xED2C, W0
007E3A  07F7AF     RCALL lcdWriteStringQ
80:                         lcdSetCursorQ(9,2);
007E3C  B3C021     MOV.B #0x2, W1
007E3E  B3C090     MOV.B #0x9, W0
007E40  07F798     RCALL lcdSetCursorQ
81:                        lcdWriteStringQ("|");
007E42  2ED2C0     MOV #0xED2C, W0
007E44  07F7AA     RCALL lcdWriteStringQ
82:                         lcdSetCursorQ(9,3);
007E46  B3C031     MOV.B #0x3, W1
007E48  B3C090     MOV.B #0x9, W0
007E4A  07F793     RCALL lcdSetCursorQ
83:                        lcdWriteStringQ("|");
007E4C  2ED2C0     MOV #0xED2C, W0
007E4E  07F7A5     RCALL lcdWriteStringQ
007E50  37008A     BRA 0x7F66
84:                    } else {
85:                        // Update here
86:                        if(ctrl.pad[BTN_SPECIAL]>1)bank=POTS/2;
007E52  200069     MOV #0x6, W9
007E54  2164C0     MOV #0x164C, W0
007E56  B3C011     MOV.B #0x1, W1
007E58  10CF90     SUBR.B W1, [W0], [W15]
007E5A  3E0001     BRA GTU, 0x7E5E
87:                        lcdSetCursorQ(0,1);
007E5E  B3C011     MOV.B #0x1, W1
007E60  EB4000     CLR.B W0
007E62  07F787     RCALL lcdSetCursorQ
88:                        lcdWriteDecimalQ(ctrl.pots_scaled[bank], 3);
007E64  B94D61     MUL.SU W9, #1, W10
007E66  45007C     ADD W10, #0x1C, W0
007E68  4D80E0     ADDC W11, #0x0, W1
007E6A  400000     ADD W0, W0, W0
007E6C  488081     ADDC W1, W1, W1
007E6E  2163A8     MOV #0x163A, W8
007E70  440000     ADD W8, W0, W0
007E72  780010     MOV [W0], W0
007E74  200031     MOV #0x3, W1
007E76  07F8AC     RCALL lcdWriteDecimalQ
89:                        lcdWriteQ(',');
007E78  B3C2C0     MOV.B #0x2C, W0
007E7A  07F75B     RCALL lcdWriteQ
90:                        lcdWriteWordUnsignedQ(ctrl.pots[bank++]);
007E7C  E80489     INC W9, W9
007E7E  45056A     ADD W10, #0xA, W10
007E80  4D85E0     ADDC W11, #0x0, W11
007E82  45050A     ADD W10, W10, W10
007E84  4D858B     ADDC W11, W11, W11
007E86  44050A     ADD W8, W10, W10
007E88  78001A     MOV [W10], W0
007E8A  07F848     RCALL lcdWriteWordUnsignedQ
91:                        lcdSetCursorQ(11,1);
007E8C  B3C011     MOV.B #0x1, W1
007E8E  B3C0B0     MOV.B #0xB, W0
007E90  07F770     RCALL lcdSetCursorQ
92:                        lcdWriteDecimalQ(ctrl.pots_scaled[bank], 3);
007E92  B94D61     MUL.SU W9, #1, W10
007E94  45007C     ADD W10, #0x1C, W0
007E96  4D80E0     ADDC W11, #0x0, W1
007E98  400000     ADD W0, W0, W0
007E9A  488081     ADDC W1, W1, W1
007E9C  440000     ADD W8, W0, W0
007E9E  780010     MOV [W0], W0
007EA0  200031     MOV #0x3, W1
007EA2  07F896     RCALL lcdWriteDecimalQ
93:                        lcdWriteQ(',');
007EA4  B3C2C0     MOV.B #0x2C, W0
007EA6  07F745     RCALL lcdWriteQ
94:                        lcdWriteWordUnsignedQ(ctrl.pots[bank++]);
007EA8  E80489     INC W9, W9
007EAA  45056A     ADD W10, #0xA, W10
007EAC  4D85E0     ADDC W11, #0x0, W11
007EAE  45050A     ADD W10, W10, W10
007EB0  4D858B     ADDC W11, W11, W11
007EB2  44050A     ADD W8, W10, W10
007EB4  78001A     MOV [W10], W0
007EB6  07F832     RCALL lcdWriteWordUnsignedQ
95:                        lcdSetCursorQ(0,2);
007EB8  B3C021     MOV.B #0x2, W1
007EBA  EB4000     CLR.B W0
007EBC  07F75A     RCALL lcdSetCursorQ
96:                        lcdWriteDecimalQ(ctrl.pots_scaled[bank], 3);
007EBE  B94D61     MUL.SU W9, #1, W10
007EC0  45007C     ADD W10, #0x1C, W0
007EC2  4D80E0     ADDC W11, #0x0, W1
007EC4  400000     ADD W0, W0, W0
007EC6  488081     ADDC W1, W1, W1
007EC8  440000     ADD W8, W0, W0
007ECA  780010     MOV [W0], W0
007ECC  200031     MOV #0x3, W1
007ECE  07F880     RCALL lcdWriteDecimalQ
97:                        lcdWriteQ(',');
007ED0  B3C2C0     MOV.B #0x2C, W0
007ED2  07F72F     RCALL lcdWriteQ
98:                        lcdWriteWordUnsignedQ(ctrl.pots[bank++]);
007ED4  E80489     INC W9, W9
007ED6  45056A     ADD W10, #0xA, W10
007ED8  4D85E0     ADDC W11, #0x0, W11
007EDA  45050A     ADD W10, W10, W10
007EDC  4D858B     ADDC W11, W11, W11
007EDE  44050A     ADD W8, W10, W10
007EE0  78001A     MOV [W10], W0
007EE2  07F81C     RCALL lcdWriteWordUnsignedQ
99:                        lcdSetCursorQ(11,2);
007EE4  B3C021     MOV.B #0x2, W1
007EE6  B3C0B0     MOV.B #0xB, W0
007EE8  07F744     RCALL lcdSetCursorQ
100:                       lcdWriteDecimalQ(ctrl.pots_scaled[bank], 3);
007EEA  B94D61     MUL.SU W9, #1, W10
007EEC  45007C     ADD W10, #0x1C, W0
007EEE  4D80E0     ADDC W11, #0x0, W1
007EF0  400000     ADD W0, W0, W0
007EF2  488081     ADDC W1, W1, W1
007EF4  440000     ADD W8, W0, W0
007EF6  780010     MOV [W0], W0
007EF8  200031     MOV #0x3, W1
007EFA  07F86A     RCALL lcdWriteDecimalQ
101:                       lcdWriteQ(',');
007EFC  B3C2C0     MOV.B #0x2C, W0
007EFE  07F719     RCALL lcdWriteQ
102:                       lcdWriteWordUnsignedQ(ctrl.pots[bank++]);
007F00  E80489     INC W9, W9
007F02  45056A     ADD W10, #0xA, W10
007F04  4D85E0     ADDC W11, #0x0, W11
007F06  45050A     ADD W10, W10, W10
007F08  4D858B     ADDC W11, W11, W11
007F0A  44050A     ADD W8, W10, W10
007F0C  78001A     MOV [W10], W0
007F0E  07F806     RCALL lcdWriteWordUnsignedQ
103:                       lcdSetCursorQ(0,3);
007F10  B3C031     MOV.B #0x3, W1
007F12  EB4000     CLR.B W0
007F14  07F72E     RCALL lcdSetCursorQ
104:                       lcdWriteDecimalQ(ctrl.pots_scaled[bank], 3);
007F16  B94D61     MUL.SU W9, #1, W10
007F18  45007C     ADD W10, #0x1C, W0
007F1A  4D80E0     ADDC W11, #0x0, W1
007F1C  400000     ADD W0, W0, W0
007F1E  488081     ADDC W1, W1, W1
007F20  440000     ADD W8, W0, W0
007F22  780010     MOV [W0], W0
007F24  200031     MOV #0x3, W1
007F26  07F854     RCALL lcdWriteDecimalQ
105:                       lcdWriteQ(',');
007F28  B3C2C0     MOV.B #0x2C, W0
007F2A  07F703     RCALL lcdWriteQ
106:                       lcdWriteWordUnsignedQ(ctrl.pots[bank++]);
007F2C  E80489     INC W9, W9
007F2E  45056A     ADD W10, #0xA, W10
007F30  4D85E0     ADDC W11, #0x0, W11
007F32  45050A     ADD W10, W10, W10
007F34  4D858B     ADDC W11, W11, W11
007F36  44050A     ADD W8, W10, W10
007F38  78001A     MOV [W10], W0
007F3A  07F7F0     RCALL lcdWriteWordUnsignedQ
107:                       lcdSetCursorQ(11,3);
007F3C  B3C031     MOV.B #0x3, W1
007F3E  B3C0B0     MOV.B #0xB, W0
007F40  07F718     RCALL lcdSetCursorQ
108:                       lcdWriteDecimalQ(ctrl.pots_scaled[bank], 3);
007F42  B94D61     MUL.SU W9, #1, W10
007F44  45007C     ADD W10, #0x1C, W0
007F46  4D80E0     ADDC W11, #0x0, W1
007F48  400000     ADD W0, W0, W0
007F4A  488081     ADDC W1, W1, W1
007F4C  440000     ADD W8, W0, W0
007F4E  780010     MOV [W0], W0
007F50  200031     MOV #0x3, W1
007F52  07F83E     RCALL lcdWriteDecimalQ
109:                       lcdWriteQ(',');
007F54  B3C2C0     MOV.B #0x2C, W0
007F56  07F6ED     RCALL lcdWriteQ
110:                       lcdWriteWordUnsignedQ(ctrl.pots[bank++]);
007F58  45056A     ADD W10, #0xA, W10
007F5A  4D85E0     ADDC W11, #0x0, W11
007F5C  45050A     ADD W10, W10, W10
007F5E  4D858B     ADDC W11, W11, W11
007F60  44040A     ADD W8, W10, W8
007F62  780018     MOV [W8], W0
007F64  07F7DB     RCALL lcdWriteWordUnsignedQ
111:                   }
112:               }
007F66  BE054F     MOV.D [--W15], W10
007F68  BE044F     MOV.D [--W15], W8
007F6A  060000     RETURN
113:               
114:               void screenDebugFlash(void){
115:                       if(state!=laststate){
007C98  80B190     MOV 0x1632, W0
007C9A  E3160A     CP state
007C9C  32005B     BRA Z, 0x7D54
116:                       //setup here
117:                       lcdClearQ();
007C9E  07F85E     RCALL lcdClearQ
118:                       lcdSetCursorQ(0,0);
007CA0  EB4080     CLR.B W1
007CA2  784001     MOV.B W1, W0
007CA4  07F866     RCALL lcdSetCursorQ
119:                       lcdWriteByteQ(RxBufferA[0]);
007CA6  212000     MOV #0x1200, W0
007CA8  784010     MOV.B [W0], W0
007CAA  07F90D     RCALL lcdWriteByteQ
120:                        lcdSetCursorQ(3,0);
007CAC  EB4080     CLR.B W1
007CAE  B3C030     MOV.B #0x3, W0
007CB0  07F860     RCALL lcdSetCursorQ
121:                       lcdWriteByteQ(RxBufferA[1]);
007CB2  212010     MOV #0x1201, W0
007CB4  784010     MOV.B [W0], W0
007CB6  07F907     RCALL lcdWriteByteQ
122:                        lcdSetCursorQ(6,0);
007CB8  EB4080     CLR.B W1
007CBA  B3C060     MOV.B #0x6, W0
007CBC  07F85A     RCALL lcdSetCursorQ
123:                       lcdWriteByteQ(RxBufferA[2]);
007CBE  212020     MOV #0x1202, W0
007CC0  784010     MOV.B [W0], W0
007CC2  07F901     RCALL lcdWriteByteQ
124:                        lcdSetCursorQ(9,0);
007CC4  EB4080     CLR.B W1
007CC6  B3C090     MOV.B #0x9, W0
007CC8  07F854     RCALL lcdSetCursorQ
125:                       lcdWriteByteQ(RxBufferA[3]);
007CCA  212030     MOV #0x1203, W0
007CCC  784010     MOV.B [W0], W0
007CCE  07F8FB     RCALL lcdWriteByteQ
126:                       lcdSetCursorQ(12,0);
007CD0  EB4080     CLR.B W1
007CD2  B3C0C0     MOV.B #0xC, W0
007CD4  07F84E     RCALL lcdSetCursorQ
127:                       lcdWriteByteQ(RxBufferA[4]);
007CD6  212040     MOV #0x1204, W0
007CD8  784010     MOV.B [W0], W0
007CDA  07F8F5     RCALL lcdWriteByteQ
128:                       lcdSetCursorQ(15,0);
007CDC  EB4080     CLR.B W1
007CDE  B3C0F0     MOV.B #0xF, W0
007CE0  07F848     RCALL lcdSetCursorQ
129:                       lcdWriteByteQ(RxBufferA[5]);
007CE2  212050     MOV #0x1205, W0
007CE4  784010     MOV.B [W0], W0
007CE6  07F8EF     RCALL lcdWriteByteQ
130:                       lcdSetCursorQ(18,0);
007CE8  EB4080     CLR.B W1
007CEA  B3C120     MOV.B #0x12, W0
007CEC  07F842     RCALL lcdSetCursorQ
131:                       lcdWriteByteQ(RxBufferA[6]);
007CEE  212060     MOV #0x1206, W0
007CF0  784010     MOV.B [W0], W0
007CF2  07F8E9     RCALL lcdWriteByteQ
132:                       lcdSetCursorQ(0,1);
007CF4  B3C011     MOV.B #0x1, W1
007CF6  EB4000     CLR.B W0
007CF8  07F83C     RCALL lcdSetCursorQ
133:                       lcdWriteByteQ(RxBufferA[7]);
007CFA  212070     MOV #0x1207, W0
007CFC  784010     MOV.B [W0], W0
007CFE  07F8E3     RCALL lcdWriteByteQ
134:                        lcdSetCursorQ(3,1);
007D00  B3C011     MOV.B #0x1, W1
007D02  B3C030     MOV.B #0x3, W0
007D04  07F836     RCALL lcdSetCursorQ
135:                       lcdWriteByteQ(RxBufferA[8]);
007D06  212080     MOV #0x1208, W0
007D08  784010     MOV.B [W0], W0
007D0A  07F8DD     RCALL lcdWriteByteQ
136:                        lcdSetCursorQ(6,1);
007D0C  B3C011     MOV.B #0x1, W1
007D0E  B3C060     MOV.B #0x6, W0
007D10  07F830     RCALL lcdSetCursorQ
137:                       lcdWriteByteQ(RxBufferA[9]);
007D12  212090     MOV #0x1209, W0
007D14  784010     MOV.B [W0], W0
007D16  07F8D7     RCALL lcdWriteByteQ
138:                        lcdSetCursorQ(9,1);
007D18  B3C011     MOV.B #0x1, W1
007D1A  B3C090     MOV.B #0x9, W0
007D1C  07F82A     RCALL lcdSetCursorQ
139:                       lcdWriteByteQ(RxBufferA[10]);
007D1E  2120A0     MOV #0x120A, W0
007D20  784010     MOV.B [W0], W0
007D22  07F8D1     RCALL lcdWriteByteQ
140:                       lcdSetCursorQ(12,1);
007D24  B3C011     MOV.B #0x1, W1
007D26  B3C0C0     MOV.B #0xC, W0
007D28  07F824     RCALL lcdSetCursorQ
141:                       lcdWriteByteQ(RxBufferA[11]);
007D2A  2120B0     MOV #0x120B, W0
007D2C  784010     MOV.B [W0], W0
007D2E  07F8CB     RCALL lcdWriteByteQ
142:                       lcdSetCursorQ(15,1);
007D30  B3C011     MOV.B #0x1, W1
007D32  B3C0F0     MOV.B #0xF, W0
007D34  07F81E     RCALL lcdSetCursorQ
143:                       lcdWriteByteQ(RxBufferA[12]);
007D36  2120C0     MOV #0x120C, W0
007D38  784010     MOV.B [W0], W0
007D3A  07F8C5     RCALL lcdWriteByteQ
144:                       lcdSetCursorQ(18,1);
007D3C  B3C011     MOV.B #0x1, W1
007D3E  B3C120     MOV.B #0x12, W0
007D40  07F818     RCALL lcdSetCursorQ
145:                       lcdWriteByteQ(RxBufferA[13]);
007D42  2120D0     MOV #0x120D, W0
007D44  784010     MOV.B [W0], W0
007D46  07F8BF     RCALL lcdWriteByteQ
146:                       lcdSetCursorQ(0,3);
007D48  B3C031     MOV.B #0x3, W1
007D4A  EB4000     CLR.B W0
007D4C  07F812     RCALL lcdSetCursorQ
147:                       lcdWriteStringQ("Stat:");
007D4E  2ED0F0     MOV #0xED0F, W0
007D50  07F824     RCALL lcdWriteStringQ
007D52  370063     BRA 0x7E1A
148:                   } else {
149:                       //update here
150:                       lcdSetCursorQ(0,0);
007D54  EB4080     CLR.B W1
007D56  784001     MOV.B W1, W0
007D58  07F80C     RCALL lcdSetCursorQ
151:                       lcdWriteByteQ(RxBufferA[0]);
007D5A  212000     MOV #0x1200, W0
007D5C  784010     MOV.B [W0], W0
007D5E  07F8B3     RCALL lcdWriteByteQ
152:                        lcdSetCursorQ(3,0);
007D60  EB4080     CLR.B W1
007D62  B3C030     MOV.B #0x3, W0
007D64  07F806     RCALL lcdSetCursorQ
153:                       lcdWriteByteQ(RxBufferA[1]);
007D66  212010     MOV #0x1201, W0
007D68  784010     MOV.B [W0], W0
007D6A  07F8AD     RCALL lcdWriteByteQ
154:                        lcdSetCursorQ(6,0);
007D6C  EB4080     CLR.B W1
007D6E  B3C060     MOV.B #0x6, W0
007D70  07F800     RCALL lcdSetCursorQ
155:                       lcdWriteByteQ(RxBufferA[2]);
007D72  212020     MOV #0x1202, W0
007D74  784010     MOV.B [W0], W0
007D76  07F8A7     RCALL lcdWriteByteQ
156:                        lcdSetCursorQ(9,0);
007D78  EB4080     CLR.B W1
007D7A  B3C090     MOV.B #0x9, W0
007D7C  07F7FA     RCALL lcdSetCursorQ
157:                       lcdWriteByteQ(RxBufferA[3]);
007D7E  212030     MOV #0x1203, W0
007D80  784010     MOV.B [W0], W0
007D82  07F8A1     RCALL lcdWriteByteQ
158:                       lcdSetCursorQ(12,0);
007D84  EB4080     CLR.B W1
007D86  B3C0C0     MOV.B #0xC, W0
007D88  07F7F4     RCALL lcdSetCursorQ
159:                       lcdWriteByteQ(RxBufferA[4]);
007D8A  212040     MOV #0x1204, W0
007D8C  784010     MOV.B [W0], W0
007D8E  07F89B     RCALL lcdWriteByteQ
160:                       lcdSetCursorQ(15,0);
007D90  EB4080     CLR.B W1
007D92  B3C0F0     MOV.B #0xF, W0
007D94  07F7EE     RCALL lcdSetCursorQ
161:                       lcdWriteByteQ(RxBufferA[5]);
007D96  212050     MOV #0x1205, W0
007D98  784010     MOV.B [W0], W0
007D9A  07F895     RCALL lcdWriteByteQ
162:                       lcdSetCursorQ(18,0);
007D9C  EB4080     CLR.B W1
007D9E  B3C120     MOV.B #0x12, W0
007DA0  07F7E8     RCALL lcdSetCursorQ
163:                       lcdWriteByteQ(RxBufferA[6]);
007DA2  212060     MOV #0x1206, W0
007DA4  784010     MOV.B [W0], W0
007DA6  07F88F     RCALL lcdWriteByteQ
164:                       lcdSetCursorQ(0,1);
007DA8  B3C011     MOV.B #0x1, W1
007DAA  EB4000     CLR.B W0
007DAC  07F7E2     RCALL lcdSetCursorQ
165:                       lcdWriteByteQ(RxBufferA[7]);
007DAE  212070     MOV #0x1207, W0
007DB0  784010     MOV.B [W0], W0
007DB2  07F889     RCALL lcdWriteByteQ
166:                        lcdSetCursorQ(3,1);
007DB4  B3C011     MOV.B #0x1, W1
007DB6  B3C030     MOV.B #0x3, W0
007DB8  07F7DC     RCALL lcdSetCursorQ
167:                       lcdWriteByteQ(RxBufferA[8]);
007DBA  212080     MOV #0x1208, W0
007DBC  784010     MOV.B [W0], W0
007DBE  07F883     RCALL lcdWriteByteQ
168:                        lcdSetCursorQ(6,1);
007DC0  B3C011     MOV.B #0x1, W1
007DC2  B3C060     MOV.B #0x6, W0
007DC4  07F7D6     RCALL lcdSetCursorQ
169:                       lcdWriteByteQ(RxBufferA[9]);
007DC6  212090     MOV #0x1209, W0
007DC8  784010     MOV.B [W0], W0
007DCA  07F87D     RCALL lcdWriteByteQ
170:                        lcdSetCursorQ(9,1);
007DCC  B3C011     MOV.B #0x1, W1
007DCE  B3C090     MOV.B #0x9, W0
007DD0  07F7D0     RCALL lcdSetCursorQ
171:                       lcdWriteByteQ(RxBufferA[10]);
007DD2  2120A0     MOV #0x120A, W0
007DD4  784010     MOV.B [W0], W0
007DD6  07F877     RCALL lcdWriteByteQ
172:                       lcdSetCursorQ(12,1);
007DD8  B3C011     MOV.B #0x1, W1
007DDA  B3C0C0     MOV.B #0xC, W0
007DDC  07F7CA     RCALL lcdSetCursorQ
173:                       lcdWriteByteQ(RxBufferA[11]);
007DDE  2120B0     MOV #0x120B, W0
007DE0  784010     MOV.B [W0], W0
007DE2  07F871     RCALL lcdWriteByteQ
174:                       lcdSetCursorQ(15,1);
007DE4  B3C011     MOV.B #0x1, W1
007DE6  B3C0F0     MOV.B #0xF, W0
007DE8  07F7C4     RCALL lcdSetCursorQ
175:                       lcdWriteByteQ(RxBufferA[12]);
007DEA  2120C0     MOV #0x120C, W0
007DEC  784010     MOV.B [W0], W0
007DEE  07F86B     RCALL lcdWriteByteQ
176:                       lcdSetCursorQ(18,1);
007DF0  B3C011     MOV.B #0x1, W1
007DF2  B3C120     MOV.B #0x12, W0
007DF4  07F7BE     RCALL lcdSetCursorQ
177:                       lcdWriteByteQ(RxBufferA[13]);
007DF6  2120D0     MOV #0x120D, W0
007DF8  784010     MOV.B [W0], W0
007DFA  07F865     RCALL lcdWriteByteQ
178:               
179:                       lcdSetCursorQ(0,3);
007DFC  B3C031     MOV.B #0x3, W1
007DFE  EB4000     CLR.B W0
007E00  07F7B8     RCALL lcdSetCursorQ
180:                       lcdWriteStringQ("Stat:");
007E02  2ED0F0     MOV #0xED0F, W0
007E04  07F7CA     RCALL lcdWriteStringQ
181:                       lcdWriteWordUnsignedQ(flashStatusCheck(FLASH_RDSR1));
007E06  B3C050     MOV.B #0x5, W0
007E08  0704FA     RCALL flashStatusCheck
007E0A  FB0000     SE W0, W0
007E0C  07F887     RCALL lcdWriteWordUnsignedQ
182:                       lcdWriteStringQ(", ");
007E0E  2ED150     MOV #0xED15, W0
007E10  07F7C4     RCALL lcdWriteStringQ
183:                       lcdWriteWordUnsignedQ(flashStatusCheck(FLASH_BRRD));
007E12  B3C160     MOV.B #0x16, W0
007E14  0704F4     RCALL flashStatusCheck
007E16  FB0000     SE W0, W0
007E18  07F881     RCALL lcdWriteWordUnsignedQ
184:                       
185:                   }
186:               }
007E1A  060000     RETURN
187:               
188:               void screenDebugInput(void){
189:                   if(state!=laststate){
007BDE  80B190     MOV 0x1632, W0
007BE0  E3160A     CP state
007BE2  320016     BRA Z, 0x7C10
190:                       //setup here
191:                       lcdClearQ();
007BE4  07F8BB     RCALL lcdClearQ
192:                       lcdSetCursorQ(0,0);
007BE6  EB4080     CLR.B W1
007BE8  784001     MOV.B W1, W0
007BEA  07F8C3     RCALL lcdSetCursorQ
193:                       lcdWriteStringQ("Input Debug");
007BEC  2ECC40     MOV #0xECC4, W0
007BEE  07F8D5     RCALL lcdWriteStringQ
194:                       lcdSetCursorQ(0,1);
007BF0  B3C011     MOV.B #0x1, W1
007BF2  EB4000     CLR.B W0
007BF4  07F8BE     RCALL lcdSetCursorQ
195:                       lcdWriteStringQ("Size:");
007BF6  2ECD00     MOV #0xECD0, W0
007BF8  07F8D0     RCALL lcdWriteStringQ
196:                       lcdSetCursorQ(0,2);
007BFA  B3C021     MOV.B #0x2, W1
007BFC  EB4000     CLR.B W0
007BFE  07F8B9     RCALL lcdSetCursorQ
197:                       lcdWriteStringQ("Playing:");
007C00  2ECD60     MOV #0xECD6, W0
007C02  07F8CB     RCALL lcdWriteStringQ
198:                       lcdSetCursorQ(0,3);
007C04  B3C031     MOV.B #0x3, W1
007C06  EB4000     CLR.B W0
007C08  07F8B4     RCALL lcdSetCursorQ
199:                       lcdWriteStringQ("Blocks:");
007C0A  2ECDF0     MOV #0xECDF, W0
007C0C  07F8C6     RCALL lcdWriteStringQ
007C0E  370013     BRA 0x7C36
200:                   } else {
201:                       //update here
202:                       lcdSetCursorQ(5,1);
007C10  B3C011     MOV.B #0x1, W1
007C12  B3C050     MOV.B #0x5, W0
007C14  07F8AE     RCALL lcdSetCursorQ
203:                       lcdWriteWordUnsignedQ(sine.size);
007C16  812770     MOV 0x24EE, W0
007C18  07F981     RCALL lcdWriteWordUnsignedQ
204:                       lcdSetCursorQ(8,2);
007C1A  B3C021     MOV.B #0x2, W1
007C1C  B3C080     MOV.B #0x8, W0
007C1E  07F8A9     RCALL lcdSetCursorQ
205:                       lcdWriteWordUnsignedQ(sine.playing);
007C20  224F20     MOV #0x24F2, W0
007C22  FB8010     ZE [W0], W0
007C24  07F97B     RCALL lcdWriteWordUnsignedQ
206:                       lcdSetCursorQ(7,3);
007C26  B3C031     MOV.B #0x3, W1
007C28  B3C070     MOV.B #0x7, W0
007C2A  07F8A3     RCALL lcdSetCursorQ
207:                       lcdWriteDecimalQ(sine.block_index, 3);
007C2C  200031     MOV #0x3, W1
007C2E  8127A0     MOV 0x24F4, W0
007C30  07F9CF     RCALL lcdWriteDecimalQ
208:                       
209:                       lcdDrawPads(16);
007C32  B3C100     MOV.B #0x10, W0
007C34  07F9FF     RCALL lcdDrawPads
210:                   }
211:               }
007C36  060000     RETURN
212:               
213:               void screenNoFXmod(unsigned int col, fractional param1, fractional param2, fractional param3){
0078A8  781F88     MOV W8, [W15++]
0078AA  780400     MOV W0, W8
214:                       if(fxNow!=fxLast || state!=laststate){
0078AC  80B170     MOV fxLast, W0
0078AE  E31630     CP fxNow
0078B0  3A0003     BRA NZ, 0x78B8
0078B2  80B190     MOV 0x1632, W0
0078B4  E3160A     CP state
0078B6  320015     BRA Z, 0x78E2
215:                       // Setup here
216:                           
217:                       lcdSetCursorQ(col+5,0);
0078B8  444065     ADD.B W8, #0x5, W0
0078BA  EB4080     CLR.B W1
0078BC  07FA5A     RCALL lcdSetCursorQ
218:                       lcdWriteStringQ("OFF");
0078BE  2EC560     MOV #0xEC56, W0
0078C0  07FA6C     RCALL lcdWriteStringQ
219:                       lcdSetCursorQ(col,1);
0078C2  B3C011     MOV.B #0x1, W1
0078C4  784008     MOV.B W8, W0
0078C6  07FA55     RCALL lcdSetCursorQ
220:                       lcdWriteStringQ("        ");
0078C8  2EC5A0     MOV #0xEC5A, W0
0078CA  07FA67     RCALL lcdWriteStringQ
221:                       lcdSetCursorQ(col,2);
0078CC  B3C021     MOV.B #0x2, W1
0078CE  784008     MOV.B W8, W0
0078D0  07FA50     RCALL lcdSetCursorQ
222:                       lcdWriteStringQ("        ");
0078D2  2EC5A0     MOV #0xEC5A, W0
0078D4  07FA62     RCALL lcdWriteStringQ
223:                       lcdSetCursorQ(col,3);
0078D6  B3C031     MOV.B #0x3, W1
0078D8  784008     MOV.B W8, W0
0078DA  07FA4B     RCALL lcdSetCursorQ
224:                       lcdWriteStringQ("        ");
0078DC  2EC5A0     MOV #0xEC5A, W0
0078DE  07FA5D     RCALL lcdWriteStringQ
0078E0  370005     BRA 0x78EC
225:               
226:                   } else {
227:                       // Update here
228:                       lcdSetCursorQ(col+5,0);
0078E2  444065     ADD.B W8, #0x5, W0
0078E4  EB4080     CLR.B W1
0078E6  07FA45     RCALL lcdSetCursorQ
229:                       lcdWriteStringQ("OFF");
0078E8  2EC560     MOV #0xEC56, W0
0078EA  07FA57     RCALL lcdWriteStringQ
230:                   }
231:               }
0078EC  78044F     MOV [--W15], W8
0078EE  060000     RETURN
232:               
233:               void screenLPFmod(unsigned int col, fractional param1, fractional param2, fractional param3){
007A92  BE9F88     MOV.D W8, [W15++]
007A94  BE9F8A     MOV.D W10, [W15++]
007A96  780400     MOV W0, W8
007A98  780501     MOV W1, W10
007A9A  780582     MOV W2, W11
007A9C  780483     MOV W3, W9
234:                   if(fxNow!=fxLast || state!=laststate){
007A9E  80B170     MOV fxLast, W0
007AA0  E31630     CP fxNow
007AA2  3A0003     BRA NZ, 0x7AAA
007AA4  80B190     MOV 0x1632, W0
007AA6  E3160A     CP state
007AA8  320015     BRA Z, 0x7AD4
235:                       // Setup here
236:                       lcdSetCursorQ(col+5,0);
007AAA  444065     ADD.B W8, #0x5, W0
007AAC  EB4080     CLR.B W1
007AAE  07F961     RCALL lcdSetCursorQ
237:                       lcdWriteStringQ("LPF");
007AB0  2EC960     MOV #0xEC96, W0
007AB2  07F973     RCALL lcdWriteStringQ
238:                       lcdSetCursorQ(col,1);
007AB4  B3C011     MOV.B #0x1, W1
007AB6  784008     MOV.B W8, W0
007AB8  07F95C     RCALL lcdSetCursorQ
239:                       lcdWriteStringQ("frq");
007ABA  2EC9A0     MOV #0xEC9A, W0
007ABC  07F96E     RCALL lcdWriteStringQ
240:                       lcdSetCursorQ(col,2);
007ABE  B3C021     MOV.B #0x2, W1
007AC0  784008     MOV.B W8, W0
007AC2  07F957     RCALL lcdSetCursorQ
241:                       lcdWriteStringQ("d/w");
007AC4  2EC7A0     MOV #0xEC7A, W0
007AC6  07F969     RCALL lcdWriteStringQ
242:                       lcdSetCursorQ(col,3);
007AC8  B3C031     MOV.B #0x3, W1
007ACA  784008     MOV.B W8, W0
007ACC  07F952     RCALL lcdSetCursorQ
243:                       lcdWriteStringQ("pwr");
007ACE  2EC7E0     MOV #0xEC7E, W0
007AD0  07F964     RCALL lcdWriteStringQ
007AD2  370018     BRA 0x7B04
244:                   } else {
245:                       // Update here
246:                       lcdSetCursorQ(col+5,1);
007AD4  444465     ADD.B W8, #0x5, W8
007AD6  B3C011     MOV.B #0x1, W1
007AD8  784008     MOV.B W8, W0
007ADA  07F94B     RCALL lcdSetCursorQ
247:                       lcdWriteDecimalQ(param1, 3);
007ADC  200031     MOV #0x3, W1
007ADE  78400A     MOV.B W10, W0
007AE0  07FA77     RCALL lcdWriteDecimalQ
248:                       lcdSetCursorQ(col+5,2);
007AE2  B3C021     MOV.B #0x2, W1
007AE4  784008     MOV.B W8, W0
007AE6  07F945     RCALL lcdSetCursorQ
249:                       lcdWriteDecimalQ(param2, 3);
007AE8  200031     MOV #0x3, W1
007AEA  78400B     MOV.B W11, W0
007AEC  07FA71     RCALL lcdWriteDecimalQ
250:                       lcdSetCursorQ(col+5,3);
007AEE  B3C031     MOV.B #0x3, W1
007AF0  784008     MOV.B W8, W0
007AF2  07F93F     RCALL lcdSetCursorQ
251:                       if(param3>=50)
007AF4  200310     MOV #0x31, W0
007AF6  548F80     SUB W9, W0, [W15]
007AF8  340003     BRA LE, 0x7B00
252:                           lcdWriteStringQ(" ON");
007AFA  2EC820     MOV #0xEC82, W0
007AFC  07F94E     RCALL lcdWriteStringQ
007AFE  370002     BRA 0x7B04
253:                       else lcdWriteStringQ("OFF");
007B00  2EC560     MOV #0xEC56, W0
007B02  07F94B     RCALL lcdWriteStringQ
254:                   }
255:               }
007B04  BE054F     MOV.D [--W15], W10
007B06  BE044F     MOV.D [--W15], W8
007B08  060000     RETURN
256:               
257:               void screenTRMmod(unsigned int col, fractional param1, fractional param2, fractional param3){
007A1A  BE9F88     MOV.D W8, [W15++]
007A1C  BE9F8A     MOV.D W10, [W15++]
007A1E  780400     MOV W0, W8
007A20  780501     MOV W1, W10
007A22  780582     MOV W2, W11
007A24  780483     MOV W3, W9
258:                   if(fxNow!=fxLast || state!=laststate){
007A26  80B170     MOV fxLast, W0
007A28  E31630     CP fxNow
007A2A  3A0003     BRA NZ, 0x7A32
007A2C  80B190     MOV 0x1632, W0
007A2E  E3160A     CP state
007A30  320015     BRA Z, 0x7A5C
259:                       // Setup here
260:                       lcdSetCursorQ(col+5,0);
007A32  444065     ADD.B W8, #0x5, W0
007A34  EB4080     CLR.B W1
007A36  07F99D     RCALL lcdSetCursorQ
261:                       lcdWriteStringQ("TRM");
007A38  2EC8A0     MOV #0xEC8A, W0
007A3A  07F9AF     RCALL lcdWriteStringQ
262:                       lcdSetCursorQ(col,1);
007A3C  B3C011     MOV.B #0x1, W1
007A3E  784008     MOV.B W8, W0
007A40  07F998     RCALL lcdSetCursorQ
263:                       lcdWriteStringQ("rat");
007A42  2EC8E0     MOV #0xEC8E, W0
007A44  07F9AA     RCALL lcdWriteStringQ
264:                       lcdSetCursorQ(col,2);
007A46  B3C021     MOV.B #0x2, W1
007A48  784008     MOV.B W8, W0
007A4A  07F993     RCALL lcdSetCursorQ
265:                       lcdWriteStringQ("dep");
007A4C  2EC920     MOV #0xEC92, W0
007A4E  07F9A5     RCALL lcdWriteStringQ
266:                       lcdSetCursorQ(col,3);
007A50  B3C031     MOV.B #0x3, W1
007A52  784008     MOV.B W8, W0
007A54  07F98E     RCALL lcdSetCursorQ
267:                       lcdWriteStringQ("pwr");
007A56  2EC7E0     MOV #0xEC7E, W0
007A58  07F9A0     RCALL lcdWriteStringQ
007A5A  370018     BRA 0x7A8C
268:                   } else {
269:                       // Update here
270:                       lcdSetCursorQ(col+5,1);
007A5C  444465     ADD.B W8, #0x5, W8
007A5E  B3C011     MOV.B #0x1, W1
007A60  784008     MOV.B W8, W0
007A62  07F987     RCALL lcdSetCursorQ
271:                       lcdWriteDecimalQ(param1, 3);
007A64  200031     MOV #0x3, W1
007A66  78400A     MOV.B W10, W0
007A68  07FAB3     RCALL lcdWriteDecimalQ
272:                       lcdSetCursorQ(col+5,2);
007A6A  B3C021     MOV.B #0x2, W1
007A6C  784008     MOV.B W8, W0
007A6E  07F981     RCALL lcdSetCursorQ
273:                       lcdWriteDecimalQ(param2, 3);
007A70  200031     MOV #0x3, W1
007A72  78400B     MOV.B W11, W0
007A74  07FAAD     RCALL lcdWriteDecimalQ
274:                       lcdSetCursorQ(col+5,3);
007A76  B3C031     MOV.B #0x3, W1
007A78  784008     MOV.B W8, W0
007A7A  07F97B     RCALL lcdSetCursorQ
275:                       if(param3>=50)
007A7C  200310     MOV #0x31, W0
007A7E  548F80     SUB W9, W0, [W15]
007A80  340003     BRA LE, 0x7A88
276:                           lcdWriteStringQ(" ON");
007A82  2EC820     MOV #0xEC82, W0
007A84  07F98A     RCALL lcdWriteStringQ
007A86  370002     BRA 0x7A8C
277:                       else lcdWriteStringQ("OFF");
007A88  2EC560     MOV #0xEC56, W0
007A8A  07F987     RCALL lcdWriteStringQ
278:                   }
279:               }
007A8C  BE054F     MOV.D [--W15], W10
007A8E  BE044F     MOV.D [--W15], W8
007A90  060000     RETURN
280:               
281:               void screenLOPmod(unsigned int col, fractional param1, fractional param2, fractional param3){
0079A2  BE9F88     MOV.D W8, [W15++]
0079A4  BE9F8A     MOV.D W10, [W15++]
0079A6  780400     MOV W0, W8
0079A8  780501     MOV W1, W10
0079AA  780582     MOV W2, W11
0079AC  780483     MOV W3, W9
282:                   if(fxNow!=fxLast || state!=laststate){
0079AE  80B170     MOV fxLast, W0
0079B0  E31630     CP fxNow
0079B2  3A0003     BRA NZ, 0x79BA
0079B4  80B190     MOV 0x1632, W0
0079B6  E3160A     CP state
0079B8  320015     BRA Z, 0x79E4
283:                       // Setup here
284:                       lcdSetCursorQ(col+5,0);
0079BA  444065     ADD.B W8, #0x5, W0
0079BC  EB4080     CLR.B W1
0079BE  07F9D9     RCALL lcdSetCursorQ
285:                       lcdWriteStringQ("LOP");
0079C0  2EC860     MOV #0xEC86, W0
0079C2  07F9EB     RCALL lcdWriteStringQ
286:                       lcdSetCursorQ(col,1);
0079C4  B3C011     MOV.B #0x1, W1
0079C6  784008     MOV.B W8, W0
0079C8  07F9D4     RCALL lcdSetCursorQ
287:                       lcdWriteStringQ("siz");
0079CA  2EC760     MOV #0xEC76, W0
0079CC  07F9E6     RCALL lcdWriteStringQ
288:                       lcdSetCursorQ(col,2);
0079CE  B3C021     MOV.B #0x2, W1
0079D0  784008     MOV.B W8, W0
0079D2  07F9CF     RCALL lcdSetCursorQ
289:                       lcdWriteStringQ("d/w");
0079D4  2EC7A0     MOV #0xEC7A, W0
0079D6  07F9E1     RCALL lcdWriteStringQ
290:                       lcdSetCursorQ(col,3);
0079D8  B3C031     MOV.B #0x3, W1
0079DA  784008     MOV.B W8, W0
0079DC  07F9CA     RCALL lcdSetCursorQ
291:                       lcdWriteStringQ("pwr");
0079DE  2EC7E0     MOV #0xEC7E, W0
0079E0  07F9DC     RCALL lcdWriteStringQ
0079E2  370018     BRA 0x7A14
292:                   } else {
293:                       // Update here
294:                       lcdSetCursorQ(col+5,1);
0079E4  444465     ADD.B W8, #0x5, W8
0079E6  B3C011     MOV.B #0x1, W1
0079E8  784008     MOV.B W8, W0
0079EA  07F9C3     RCALL lcdSetCursorQ
295:                       lcdWriteDecimalQ(param1, 3);
0079EC  200031     MOV #0x3, W1
0079EE  78400A     MOV.B W10, W0
0079F0  07FAEF     RCALL lcdWriteDecimalQ
296:                       lcdSetCursorQ(col+5,2);
0079F2  B3C021     MOV.B #0x2, W1
0079F4  784008     MOV.B W8, W0
0079F6  07F9BD     RCALL lcdSetCursorQ
297:                       lcdWriteDecimalQ(param2, 3);
0079F8  200031     MOV #0x3, W1
0079FA  78400B     MOV.B W11, W0
0079FC  07FAE9     RCALL lcdWriteDecimalQ
298:                       lcdSetCursorQ(col+5,3);
0079FE  B3C031     MOV.B #0x3, W1
007A00  784008     MOV.B W8, W0
007A02  07F9B7     RCALL lcdSetCursorQ
299:                       if(param3>=50)
007A04  200310     MOV #0x31, W0
007A06  548F80     SUB W9, W0, [W15]
007A08  340003     BRA LE, 0x7A10
300:                           lcdWriteStringQ(" ON");
007A0A  2EC820     MOV #0xEC82, W0
007A0C  07F9C6     RCALL lcdWriteStringQ
007A0E  370002     BRA 0x7A14
301:                       else lcdWriteStringQ("OFF");
007A10  2EC560     MOV #0xEC56, W0
007A12  07F9C3     RCALL lcdWriteStringQ
302:                   }
303:               }
007A14  BE054F     MOV.D [--W15], W10
007A16  BE044F     MOV.D [--W15], W8
007A18  060000     RETURN
304:               
305:               void screenBTCmod(unsigned int col, fractional param1, fractional param2, fractional param3){
00792A  BE9F88     MOV.D W8, [W15++]
00792C  BE9F8A     MOV.D W10, [W15++]
00792E  780400     MOV W0, W8
007930  780501     MOV W1, W10
007932  780582     MOV W2, W11
007934  780483     MOV W3, W9
306:                   if(fxNow!=fxLast || state!=laststate){
007936  80B170     MOV fxLast, W0
007938  E31630     CP fxNow
00793A  3A0003     BRA NZ, 0x7942
00793C  80B190     MOV 0x1632, W0
00793E  E3160A     CP state
007940  320015     BRA Z, 0x796C
307:                       // Setup here
308:                       lcdSetCursorQ(col+5,0);
007942  444065     ADD.B W8, #0x5, W0
007944  EB4080     CLR.B W1
007946  07FA15     RCALL lcdSetCursorQ
309:                       lcdWriteStringQ("BIT");
007948  2EC720     MOV #0xEC72, W0
00794A  07FA27     RCALL lcdWriteStringQ
310:                       lcdSetCursorQ(col,1);
00794C  B3C011     MOV.B #0x1, W1
00794E  784008     MOV.B W8, W0
007950  07FA10     RCALL lcdSetCursorQ
311:                       lcdWriteStringQ("siz");
007952  2EC760     MOV #0xEC76, W0
007954  07FA22     RCALL lcdWriteStringQ
312:                       lcdSetCursorQ(col,2);
007956  B3C021     MOV.B #0x2, W1
007958  784008     MOV.B W8, W0
00795A  07FA0B     RCALL lcdSetCursorQ
313:                       lcdWriteStringQ("d/w");
00795C  2EC7A0     MOV #0xEC7A, W0
00795E  07FA1D     RCALL lcdWriteStringQ
314:                       lcdSetCursorQ(col,3);
007960  B3C031     MOV.B #0x3, W1
007962  784008     MOV.B W8, W0
007964  07FA06     RCALL lcdSetCursorQ
315:                       lcdWriteStringQ("pwr");
007966  2EC7E0     MOV #0xEC7E, W0
007968  07FA18     RCALL lcdWriteStringQ
00796A  370018     BRA 0x799C
316:                   } else {
317:                       // Update here
318:                       lcdSetCursorQ(col+5,1);
00796C  444465     ADD.B W8, #0x5, W8
00796E  B3C011     MOV.B #0x1, W1
007970  784008     MOV.B W8, W0
007972  07F9FF     RCALL lcdSetCursorQ
319:                       lcdWriteDecimalQ(param1, 3);
007974  200031     MOV #0x3, W1
007976  78400A     MOV.B W10, W0
007978  07FB2B     RCALL lcdWriteDecimalQ
320:                       lcdSetCursorQ(col+5,2);
00797A  B3C021     MOV.B #0x2, W1
00797C  784008     MOV.B W8, W0
00797E  07F9F9     RCALL lcdSetCursorQ
321:                       lcdWriteDecimalQ(param2, 3);
007980  200031     MOV #0x3, W1
007982  78400B     MOV.B W11, W0
007984  07FB25     RCALL lcdWriteDecimalQ
322:                       lcdSetCursorQ(col+5,3);
007986  B3C031     MOV.B #0x3, W1
007988  784008     MOV.B W8, W0
00798A  07F9F3     RCALL lcdSetCursorQ
323:                       if(param3>=50)
00798C  200310     MOV #0x31, W0
00798E  548F80     SUB W9, W0, [W15]
007990  340003     BRA LE, 0x7998
324:                           lcdWriteStringQ(" ON");
007992  2EC820     MOV #0xEC82, W0
007994  07FA02     RCALL lcdWriteStringQ
007996  370002     BRA 0x799C
325:                       else lcdWriteStringQ("OFF");
007998  2EC560     MOV #0xEC56, W0
00799A  07F9FF     RCALL lcdWriteStringQ
326:                   }
327:               }
00799C  BE054F     MOV.D [--W15], W10
00799E  BE044F     MOV.D [--W15], W8
0079A0  060000     RETURN
328:               
329:               void screenFX(void){
007840  781F88     MOV W8, [W15++]
330:                   if(state!=laststate){
007842  80B190     MOV 0x1632, W0
007844  E3160A     CP state
007846  32001D     BRA Z, 0x7882
331:                       //setup here
332:                       lcdClearQ();
007848  07FA89     RCALL lcdClearQ
333:                       lcdSetCursorQ(0,0);
00784A  EB4080     CLR.B W1
00784C  784001     MOV.B W1, W0
00784E  07FA91     RCALL lcdSetCursorQ
334:                       lcdWriteStringQ("Fx1:");
007850  2EC4C0     MOV #0xEC4C, W0
007852  07FAA3     RCALL lcdWriteStringQ
335:                       lcdSetCursorQ(10,0);
007854  EB4080     CLR.B W1
007856  B3C0A0     MOV.B #0xA, W0
007858  07FA8C     RCALL lcdSetCursorQ
336:                       lcdWriteStringQ("Fx2:");
00785A  2EC510     MOV #0xEC51, W0
00785C  07FA9E     RCALL lcdWriteStringQ
337:                       fxModPointers[fxUnits[0]](0,  ctrl.pots_scaled[FX_1], ctrl.pots_scaled[FX_2], ctrl.pots_scaled[FX_3]);
00785E  D4160C     SL fxUnits, WREG
007860  225628     MOV #0x2562, W8
007862  400008     ADD W0, W8, W0
007864  780210     MOV [W0], W4
007866  80B3D3     MOV 0x167A, W3
007868  80B3B2     MOV 0x1676, W2
00786A  80B391     MOV 0x1672, W1
00786C  EB0000     CLR W0
00786E  010004     CALL W4
338:                       fxModPointers[fxUnits[1]](10, ctrl.pots_scaled[FX_4], ctrl.pots_scaled[FX_5], ctrl.pots_scaled[FX_6]);
007870  D4160E     SL 0x160E, WREG
007872  400408     ADD W0, W8, W8
007874  780218     MOV [W8], W4
007876  80B3E3     MOV 0x167C, W3
007878  80B3C2     MOV 0x1678, W2
00787A  80B3A1     MOV 0x1674, W1
00787C  2000A0     MOV #0xA, W0
00787E  010004     CALL W4
007880  370011     BRA 0x78A4
339:                       
340:                   } else {
341:                       //update here 
342:                       fxModPointers[fxUnits[0]](0,  ctrl.pots_scaled[FX_1], ctrl.pots_scaled[FX_2], ctrl.pots_scaled[FX_3]);
007882  D4160C     SL fxUnits, WREG
007884  225628     MOV #0x2562, W8
007886  400008     ADD W0, W8, W0
007888  780210     MOV [W0], W4
00788A  80B3D3     MOV 0x167A, W3
00788C  80B3B2     MOV 0x1676, W2
00788E  80B391     MOV 0x1672, W1
007890  EB0000     CLR W0
007892  010004     CALL W4
343:                       fxModPointers[fxUnits[1]](10, ctrl.pots_scaled[FX_4], ctrl.pots_scaled[FX_5], ctrl.pots_scaled[FX_6]);
007894  D4160E     SL 0x160E, WREG
007896  400408     ADD W0, W8, W8
007898  780218     MOV [W8], W4
00789A  80B3E3     MOV 0x167C, W3
00789C  80B3C2     MOV 0x1678, W2
00789E  80B3A1     MOV 0x1674, W1
0078A0  2000A0     MOV #0xA, W0
0078A2  010004     CALL W4
344:                   }
345:                        
346:               }
0078A4  78044F     MOV [--W15], W8
0078A6  060000     RETURN
347:               
348:               void screenSHIFT(void){
349:                   if(state!=laststate){
0078F0  80B190     MOV 0x1632, W0
0078F2  E3160A     CP state
0078F4  32000C     BRA Z, 0x790E
350:                       //setup here
351:                       lcdClearQ();
0078F6  07FA32     RCALL lcdClearQ
352:                       lcdSetCursorQ(0,0);
0078F8  EB4080     CLR.B W1
0078FA  784001     MOV.B W1, W0
0078FC  07FA3A     RCALL lcdSetCursorQ
353:                       lcdWriteStringQ("SHIFT");
0078FE  2EC630     MOV #0xEC63, W0
007900  07FA4C     RCALL lcdWriteStringQ
354:                       lcdSetCursorQ(0,1);
007902  B3C011     MOV.B #0x1, W1
007904  EB4000     CLR.B W0
007906  07FA35     RCALL lcdSetCursorQ
355:                       lcdWriteStringQ("Volume: ");
007908  2EC690     MOV #0xEC69, W0
00790A  07FA47     RCALL lcdWriteStringQ
00790C  37000D     BRA 0x7928
356:                   } else {
357:                       //update here 
358:                       lcdSetCursorQ(8,1);
00790E  B3C011     MOV.B #0x1, W1
007910  B3C080     MOV.B #0x8, W0
007912  07FA2F     RCALL lcdSetCursorQ
359:                       lcdWriteDecimalQ(ctrl.pots_scaled[POT_VOLUME], 3);
007914  200031     MOV #0x3, W1
007916  80B400     MOV 0x1680, W0
007918  07FB5B     RCALL lcdWriteDecimalQ
360:                       lcdSetCursorQ(0,3);
00791A  B3C031     MOV.B #0x3, W1
00791C  EB4000     CLR.B W0
00791E  07FA29     RCALL lcdSetCursorQ
361:                       lcdWriteDecimalQ(ctrl.pad[BTN_SPECIAL], 1);
007920  200011     MOV #0x1, W1
007922  2164C0     MOV #0x164C, W0
007924  784010     MOV.B [W0], W0
007926  07FB54     RCALL lcdWriteDecimalQ
362:                   }
363:               }
007928  060000     RETURN
364:               
365:               void screenRecord(void){
007B0A  FA0010     LNK #0x10
007B0C  781F88     MOV W8, [W15++]
007B14  5780F2     SUB W15, #0x12, W1
007B16  B80A61     MUL.UU W1, #1, W4
366:                   int i;
367:                   char grid[16];
368:                   for(i=0; i<16; i++){
007B12  EB0000     CLR W0
007B2C  E80000     INC W0, W0
007B2E  500FF0     SUB W0, #0x10, [W15]
007B30  3AFFF6     BRA NZ, 0x7B1E
369:                       if(ctrl.last_pressed==i)
007B0E  2164D0     MOV #0x164D, W0
007B10  FB8110     ZE [W0], W2
007B1E  510F80     SUB W2, W0, [W15]
007B20  3A0003     BRA NZ, 0x7B28
370:                           grid[i]=1;
007B1A  780382     MOV W2, W7
007B1C  B3C016     MOV.B #0x1, W6
007B22  538472     SUB W7, #0x12, W8
007B24  7C7786     MOV.B W6, [W15+W8]
007B26  370002     BRA 0x7B2C
371:                       else grid[i]=0;
007B18  EB4180     CLR.B W3
007B28  400084     ADD W0, W4, W1
007B2A  784883     MOV.B W3, [W1]
372:                   }
373:                   
374:                   if(state!=laststate){
007B32  80B190     MOV 0x1632, W0
007B34  E3160A     CP state
007B36  320016     BRA Z, 0x7B64
375:                       //setup here
376:                       lcdClearQ();
007B38  07F911     RCALL lcdClearQ
377:                       lcdSetCursorQ(0,0);
007B3A  EB4080     CLR.B W1
007B3C  784001     MOV.B W1, W0
007B3E  07F919     RCALL lcdSetCursorQ
378:                       lcdWriteStringQ("EDIT SAMPLE:");
007B40  2EC9E0     MOV #0xEC9E, W0
007B42  07F92B     RCALL lcdWriteStringQ
379:                       lcdSetCursorQ(0,1);
007B44  B3C011     MOV.B #0x1, W1
007B46  EB4000     CLR.B W0
007B48  07F914     RCALL lcdSetCursorQ
380:                       lcdWriteStringQ("LOOP :");
007B4A  2ECAB0     MOV #0xECAB, W0
007B4C  07F926     RCALL lcdWriteStringQ
381:                       lcdSetCursorQ(0,2);
007B4E  B3C021     MOV.B #0x2, W1
007B50  EB4000     CLR.B W0
007B52  07F90F     RCALL lcdSetCursorQ
382:                       lcdWriteStringQ("GATE :");
007B54  2ECB20     MOV #0xECB2, W0
007B56  07F921     RCALL lcdWriteStringQ
383:                       lcdSetCursorQ(0,3);
007B58  B3C031     MOV.B #0x3, W1
007B5A  EB4000     CLR.B W0
007B5C  07F90A     RCALL lcdSetCursorQ
384:                       lcdWriteStringQ("CHOKE:");
007B5E  2ECB90     MOV #0xECB9, W0
007B60  07F91C     RCALL lcdWriteStringQ
007B62  37003A     BRA 0x7BD8
385:                   } else {
386:                       //update here 
387:                       lcdSetCursorQ(13,0);
007B64  EB4080     CLR.B W1
007B66  B3C0D0     MOV.B #0xD, W0
007B68  07F904     RCALL lcdSetCursorQ
388:                       lcdWriteDecimalQ((ctrl.last_pressed+1), 2);
007B6A  2164D8     MOV #0x164D, W8
007B6C  E84018     INC.B [W8], W0
007B6E  200021     MOV #0x2, W1
007B70  07FA2F     RCALL lcdWriteDecimalQ
389:                       
390:                       lcdSetCursorQ(7,1);
007B72  B3C011     MOV.B #0x1, W1
007B74  B3C070     MOV.B #0x7, W0
007B76  07F8FD     RCALL lcdSetCursorQ
391:                       if(clipmap[ctrl.last_pressed].loop==TRUE) 
007B78  FB8018     ZE [W8], W0
007B7A  DE80CF     ASR W0, #15, W1
007B7C  B8007C     MUL.UU W0, #28, W0
007B7E  222BC2     MOV #0x22BC, W2
007B80  400002     ADD W0, W2, W0
007B82  904010     MOV.B [W0+1], W0
007B84  404FE1     ADD.B W0, #0x1, [W15]
007B86  3A0003     BRA NZ, 0x7B8E
392:                           lcdWriteStringQ("y");
007B88  2ECC00     MOV #0xECC0, W0
007B8A  07F907     RCALL lcdWriteStringQ
007B8C  370002     BRA 0x7B92
393:                       else
394:                           lcdWriteStringQ("n");
007B8E  2ECC20     MOV #0xECC2, W0
007B90  07F904     RCALL lcdWriteStringQ
395:                       lcdSetCursorQ(7,2);
007B92  B3C021     MOV.B #0x2, W1
007B94  B3C070     MOV.B #0x7, W0
007B96  07F8ED     RCALL lcdSetCursorQ
396:                               if(clipmap[ctrl.last_pressed].gate) 
007B98  2164D0     MOV #0x164D, W0
007B9A  FB8010     ZE [W0], W0
007B9C  DE80CF     ASR W0, #15, W1
007B9E  B8007C     MUL.UU W0, #28, W0
007BA0  222BC2     MOV #0x22BC, W2
007BA2  400002     ADD W0, W2, W0
007BA4  E00410     CP0.B [W0]
007BA6  320003     BRA Z, 0x7BAE
397:                           lcdWriteStringQ("y");
007BA8  2ECC00     MOV #0xECC0, W0
007BAA  07F8F7     RCALL lcdWriteStringQ
007BAC  370002     BRA 0x7BB2
398:                       else
399:                           lcdWriteStringQ("n");
007BAE  2ECC20     MOV #0xECC2, W0
007BB0  07F8F4     RCALL lcdWriteStringQ
400:                       lcdSetCursorQ(7,3);
007BB2  B3C031     MOV.B #0x3, W1
007BB4  B3C070     MOV.B #0x7, W0
007BB6  07F8DD     RCALL lcdSetCursorQ
401:                       if(clipmap[ctrl.last_pressed].choke) 
007BB8  2164D0     MOV #0x164D, W0
007BBA  FB8010     ZE [W0], W0
007BBC  DE80CF     ASR W0, #15, W1
007BBE  B8007C     MUL.UU W0, #28, W0
007BC0  222BE2     MOV #0x22BE, W2
007BC2  400002     ADD W0, W2, W0
007BC4  E00410     CP0.B [W0]
007BC6  320003     BRA Z, 0x7BCE
402:                           lcdWriteStringQ("y");
007BC8  2ECC00     MOV #0xECC0, W0
007BCA  07F8E7     RCALL lcdWriteStringQ
007BCC  370002     BRA 0x7BD2
403:                       else
404:                           lcdWriteStringQ("n");
007BCE  2ECC20     MOV #0xECC2, W0
007BD0  07F8E4     RCALL lcdWriteStringQ
405:                       lcdDrawSlots(16, grid);
007BD2  5780F2     SUB W15, #0x12, W1
007BD4  B3C100     MOV.B #0x10, W0
007BD6  07FBD7     RCALL lcdDrawSlots
406:                   }
407:               }
007BD8  78044F     MOV [--W15], W8
007BDA  FA8000     ULNK
007BDC  060000     RETURN
408:               
409:               void screenUpdate(void){
410:                   fxNow=fxUnits[0]+fxUnits[1];
007F6E  80B060     MOV fxUnits, W0
007F70  B4160E     ADD 0x160E, WREG
007F72  88B180     MOV W0, fxNow
411:                   
412:                   screenPointers[state]();
007F74  80B051     MOV state, W1
007F76  D00081     SL W1, W1
007F78  2256C0     MOV #0x256C, W0
007F7A  408000     ADD W1, W0, W0
007F7C  780010     MOV [W0], W0
007F7E  010000     CALL W0
413:                   
414:                   laststate=state;
007F80  F8160A     PUSH state
007F82  F91632     POP 0x1632
415:                   fxLast=fxUnits[0]+fxUnits[1];
007F84  80B060     MOV fxUnits, W0
007F86  B4160E     ADD 0x160E, WREG
007F88  88B170     MOV W0, fxLast
416:               }
007F8A  060000     RETURN
---  C:/Users/ryan/Documents/seniorproject/ps-040/routines.c  -------------------------------------------
1:                 #include <xc.h>
2:                 #include <p33EP512GM310.h>
3:                 #include <dsp.h>
4:                 #include "common.h"
5:                 #include "routines.h"
6:                 
7:                 extern fractional   outputA[STREAMBUF], outputB[STREAMBUF],
8:                                     streamA[STREAMBUF], streamB[STREAMBUF];
9:                 extern unsigned int write_ptr, rw, frameReady;
10:                
11:                extern unsigned char    TxBufferA[FLASH_DMAXFER_BYTES]__attribute__((space(xmemory))), 
12:                                        RxBufferA[FLASH_DMAXFER_BYTES]__attribute__((space(xmemory)));
13:                
14:                extern struct sflags stat;
15:                
16:                extern unsigned char btread;
17:                
18:                //Description: This interrupt triggers at the completion of DCI output
19:                //Dependancies: initSPI2(); 
20:                void __attribute__ ((interrupt, auto_psv)) _DCIInterrupt(void){
00033A  BE9F80     MOV.D W0, [W15++]
00033C  BE9F82     MOV.D W2, [W15++]
00033E  BE9F84     MOV.D W4, [W15++]
000340  F80032     PUSH DSRPAG
000342  F80034     PUSH DSWPAG
000344  200010     MOV #0x1, W0
000346  8801A0     MOV W0, DSWPAG
000348  202000     MOV #0x200, W0
00034A  880190     MOV W0, DSRPAG
00034C  000000     NOP
00034E  FA0004     LNK #0x4
21:                    static fractional sampoutA=0, sampoutB=0;
22:                    fractional sampinA=0, sampinB=0;
23:                    
24:                    int trashA=RXBUF0;
000350  801480     MOV RXBUF0, W0
25:                    sampinA=RXBUF1;
000352  801490     MOV RXBUF1, W0
000354  9FBFE0     MOV W0, [W15-4]
26:                    int trashB=RXBUF2;
000356  8014A0     MOV RXBUF2, W0
27:                    sampinB=RXBUF3;
000358  8014B5     MOV RXBUF3, W5
00035A  9FBFF5     MOV W5, [W15-2]
28:                    TXBUF0=TXBUF1=sampoutA;                                    //output buffered sample to DAC
00035C  F81624     PUSH sampoutA
00035E  F9029A     POP TXBUF1
000360  F8029A     PUSH TXBUF1
000362  F90298     POP TXBUF0
29:                    TXBUF2=TXBUF3=sampoutB;
000364  F81622     PUSH sampoutB
000366  F9029E     POP TXBUF3
000368  F8029E     PUSH TXBUF3
00036A  F9029C     POP TXBUF2
30:                
31:                    __builtin_btg(&sampinA, 15);                             //convert to Q1.15 compatible format
00036C  97B86F     MOV [W15-4], W0
00036E  A2F000     BTG W0, #15
000370  9FBFE0     MOV W0, [W15-4]
32:                    __builtin_btg(&sampinB, 15);                             //convert to Q1.15 compatible format
000372  A2F005     BTG W5, #15
000374  9FBFF5     MOV W5, [W15-2]
33:                    
34:                    if(write_ptr== STREAMBUF){                       //reset pointer when out of bounds
000376  201000     MOV #0x100, W0
000378  E31600     CP write_ptr
00037A  3A0004     BRA NZ, 0x384
35:                        write_ptr=0;
00037C  EF3600     CLR write_ptr
36:                        __builtin_btg(&rw,0);
00037E  AA1602     BTG rw, #0
37:                        frameReady=1;
000380  200010     MOV #0x1, W0
000382  88B020     MOV W0, frameReady
38:                    }
39:                   
40:                    if(rw){
000384  E21602     CP0 rw
000386  320019     BRA Z, 0x3BA
41:                        streamB[write_ptr]=sampinA;
000388  80B000     MOV write_ptr, W0
00038A  B80161     MUL.UU W0, #1, W2
00038C  410102     ADD W2, W2, W2
00038E  498183     ADDC W3, W3, W3
000390  21CA24     MOV #0x1CA2, W4
000392  420082     ADD W4, W2, W1
000394  97BAEF     MOV [W15-4], W5
000396  780885     MOV W5, [W1]
42:                        sampoutA=outputA[write_ptr++]; 
000398  216A21     MOV #0x16A2, W1
00039A  408102     ADD W1, W2, W2
00039C  780112     MOV [W2], W2
00039E  88B122     MOV W2, sampoutA
0003A0  E80000     INC W0, W0
43:                        streamB[write_ptr]=sampinB;
0003A2  B80161     MUL.UU W0, #1, W2
0003A4  410102     ADD W2, W2, W2
0003A6  498183     ADDC W3, W3, W3
0003A8  420202     ADD W4, W2, W4
0003AA  97BAFF     MOV [W15-2], W5
0003AC  780A05     MOV W5, [W4]
44:                        sampoutB=outputA[write_ptr++];  
0003AE  408102     ADD W1, W2, W2
0003B0  780112     MOV [W2], W2
0003B2  88B112     MOV W2, sampoutB
0003B4  E80000     INC W0, W0
0003B6  88B000     MOV W0, write_ptr
0003B8  370018     BRA 0x3EA
45:                    } else {
46:                        streamA[write_ptr]=sampinA; 
0003BA  80B000     MOV write_ptr, W0
0003BC  B80161     MUL.UU W0, #1, W2
0003BE  410102     ADD W2, W2, W2
0003C0  498183     ADDC W3, W3, W3
0003C2  21AA24     MOV #0x1AA2, W4
0003C4  420082     ADD W4, W2, W1
0003C6  97BAEF     MOV [W15-4], W5
0003C8  780885     MOV W5, [W1]
47:                        sampoutA=outputB[write_ptr++];  
0003CA  218A21     MOV #0x18A2, W1
0003CC  408102     ADD W1, W2, W2
0003CE  780112     MOV [W2], W2
0003D0  88B122     MOV W2, sampoutA
0003D2  E80000     INC W0, W0
48:                        streamA[write_ptr]=sampinB; 
0003D4  B80161     MUL.UU W0, #1, W2
0003D6  410102     ADD W2, W2, W2
0003D8  498183     ADDC W3, W3, W3
0003DA  420202     ADD W4, W2, W4
0003DC  97BAFF     MOV [W15-2], W5
0003DE  780A05     MOV W5, [W4]
49:                        sampoutB=outputB[write_ptr++];  
0003E0  408102     ADD W1, W2, W2
0003E2  780112     MOV [W2], W2
0003E4  88B112     MOV W2, sampoutB
0003E6  E80000     INC W0, W0
0003E8  88B000     MOV W0, write_ptr
50:                    } 
51:                    _DCIIF=0;
0003EA  A98807     BCLR 0x807, #4
52:                }
0003EC  FA8000     ULNK
0003EE  F90034     POP DSWPAG
0003F0  F90032     POP DSRPAG
0003F2  BE024F     MOV.D [--W15], W4
0003F4  BE014F     MOV.D [--W15], W2
0003F6  BE004F     MOV.D [--W15], W0
0003F8  064000     RETFIE
53:                
54:                void __attribute__((interrupt, auto_psv)) _DMA0Interrupt(void) {
0003FA  F80032     PUSH DSRPAG
0003FC  F80034     PUSH DSWPAG
0003FE  781F88     MOV W8, [W15++]
000400  200018     MOV #0x1, W8
000402  8801A8     MOV W8, DSWPAG
000404  202008     MOV #0x200, W8
000406  880198     MOV W8, DSRPAG
000408  000000     NOP
00040A  78044F     MOV [--W15], W8
55:                    //DMA1CONbits.CHEN = 0;
56:                    //DMA0CONbits.CHEN = 0;
57:                    /*
58:                    SS3a=SS3b=1;
59:                    stat.FLASH_DMA=FALSE;
60:                    
61:                    if(stat.DMA_READING==TRUE){
62:                        stat.DMA_READING=FALSE;
63:                        stat.DMA_JUSTREAD=TRUE;
64:                    }
65:                    
66:                    DMA1CONbits.CHEN = 0;
67:                    DMA0CONbits.CHEN = 0;
68:                    
69:                    IFS5bits.SPI3IF = 0;        // Clear the Interrupt flag
70:                     */ 
71:                    //SS3a=SS3b=1;
72:                    //SPI3STATbits.SPIROV = 0;    // Clear SPI1 receive overflow flag if set
73:                    //IFS5bits.SPI3IF = 0;        // Clear the Interrupt flag
74:                    IFS0bits.DMA0IF = 0; // Clear the DMA0 Interrupt flag
00040C  A98800     BCLR IFS0, #4
75:                }
00040E  F90034     POP DSWPAG
000410  F90032     POP DSRPAG
000412  064000     RETFIE
76:                
77:                void __attribute__((interrupt, auto_psv)) _DMA1Interrupt(void){
000414  BE9F80     MOV.D W0, [W15++]
000416  F80032     PUSH DSRPAG
000418  F80034     PUSH DSWPAG
00041A  200010     MOV #0x1, W0
00041C  8801A0     MOV W0, DSWPAG
00041E  202000     MOV #0x200, W0
000420  880190     MOV W0, DSRPAG
000422  000000     NOP
78:                    //static unsigned int BufferCount = 0; // Keep record of the buffer that contains RX data
79:                    //if(BufferCount == 0) ;
80:                        //ProcessRxData(TxBufferA); // Process received SPI data in DMA RAM Primary buffer
81:                    //else;
82:                        //ProcessRxData(TxBufferB); // Process received SPI data in DMA RAM Secondary buffer
83:                 
84:                    //BufferCount ^= 1;
85:                    
86:                    //BufferCount ^= 1;
87:                    IFS0bits.DMA1IF = 0;        // Clear the DMA1 Interrupt flag
000424  A9C801     BCLR 0x801, #6
88:                    SS3a=SS3b=1;
000426  A8EE35     BSET 0xE35, #7
000428  8071A0     MOV LATD, W0
00042A  DE004F     LSR W0, #15, W0
00042C  400000     ADD W0, W0, W0
00042E  8072A1     MOV LATF, W1
000430  A11001     BCLR W1, #1
000432  700081     IOR W0, W1, W1
000434  8872A1     MOV W1, LATF
89:                    
90:                    if(stat.DMA_READING==TRUE){
000436  216370     MOV #0x1637, W0
000438  EBC080     SETM.B W1
00043A  10CF90     SUBR.B W1, [W0], [W15]
00043C  3A0003     BRA NZ, 0x444
91:                        stat.DMA_READING=FALSE;
00043E  EB4800     CLR.B [W0]
92:                        stat.DMA_JUSTREAD=TRUE;
000440  E90000     DEC W0, W0
000442  EBC800     SETM.B [W0]
93:                    }
94:                    
95:                    DMA1CONbits.CHEN = 0;
000444  A9EB11     BCLR 0xB11, #7
96:                    DMA0CONbits.CHEN = 0;
000446  A9EB01     BCLR 0xB01, #7
97:                    SPI3STATbits.SPIROV = 0;    // Clear SPI1 receive overflow flag if set
000448  A9C2A0     BCLR SPI3STAT, #6
98:                    IFS5bits.SPI3IF = 0;        // Clear the Interrupt flag
00044A  A9680B     BCLR 0x80B, #3
99:                    
100:               }
00044C  F90034     POP DSWPAG
00044E  F90032     POP DSRPAG
000450  BE004F     MOV.D [--W15], W0
000452  064000     RETFIE
101:               
102:               //Description: This interrupt handles UART reception
103:               //Dependencies: initUART1();
104:               void __attribute__ ((interrupt, auto_psv)) _U1RXInterrupt(void){
000454  781F80     MOV W0, [W15++]
000456  F80032     PUSH DSRPAG
000458  F80034     PUSH DSWPAG
00045A  200010     MOV #0x1, W0
00045C  8801A0     MOV W0, DSWPAG
00045E  202000     MOV #0x200, W0
000460  880190     MOV W0, DSRPAG
000462  000000     NOP
105:                   //unsigned char trash;
106:                   btread=U1RXREG;
000464  801130     MOV U1RXREG, W0
000466  B7F610     MOV.B WREG, btread
107:                   IFS0bits.U1RXIF = 0;            //clear flag, restart
000468  A96801     BCLR 0x801, #3
108:               }
00046A  F90034     POP DSWPAG
00046C  F90032     POP DSRPAG
00046E  78004F     MOV [--W15], W0
000470  064000     RETFIE
109:               
110:               //Description: This interrupt handles UART transmission
111:               //Dependencies: initUART1();
112:               void __attribute__ ((interrupt, auto_psv)) _U1TXInterrupt(void){
000472  F80032     PUSH DSRPAG
000474  F80034     PUSH DSWPAG
000476  781F88     MOV W8, [W15++]
000478  200018     MOV #0x1, W8
00047A  8801A8     MOV W8, DSWPAG
00047C  202008     MOV #0x200, W8
00047E  880198     MOV W8, DSRPAG
000480  000000     NOP
000482  78044F     MOV [--W15], W8
113:                   IFS0bits.U1TXIF = 0;            //clear flag, restart
000484  A98801     BCLR 0x801, #4
114:               } 
000486  F90034     POP DSWPAG
000488  F90032     POP DSRPAG
00048A  064000     RETFIE
---  C:/Users/ryan/Documents/seniorproject/ps-040/plcd.c  -----------------------------------------------
1:                 /*
2:                  * File:   plcd.c
3:                  */
4:                 #include <xc.h>
5:                 #include <stdlib.h> // For splash rand
6:                 #include "plcd.h"
7:                 #include "common.h"
8:                 #include "screens.h"
9:                 #include "utilities.h"
10:                
11:                extern struct ctrlsrfc ctrl;
12:                
13:                int lcdBuf[LCDBUF+1]={0};
14:                int *lcdWritePtr=lcdBuf;
15:                int *lcdReadPtr=lcdBuf;
16:                
17:                // There are write and command macros in the header, make sure these match.
18:                void lcdWriteQ(unsigned char data){
19:                    *lcdWritePtr++=data|0x0000;
006D32  FB8000     ZE W0, W0
006D34  80B151     MOV 0x162A, W1
006D36  781880     MOV W0, [W1++]
006D38  88B151     MOV W1, 0x162A
20:                    if(lcdWritePtr==&lcdBuf[LCDBUF])
006D3A  220A20     MOV #0x20A2, W0
006D3C  508F80     SUB W1, W0, [W15]
006D3E  3A0002     BRA NZ, 0x6D44
21:                        lcdWritePtr=lcdBuf;
006D40  B12000     SUB #0x200, W0
006D42  88B150     MOV W0, 0x162A
22:                }
006D44  060000     RETURN
23:                
24:                // There are write and command macros in the header, make sure these match.
25:                void lcdCommandQ(unsigned char data){
26:                    *lcdWritePtr++=data|0x0100;     //flag for rs=1
006D46  FB8000     ZE W0, W0
006D48  80B151     MOV 0x162A, W1
006D4A  A08000     BSET W0, #8
006D4C  781880     MOV W0, [W1++]
006D4E  88B151     MOV W1, 0x162A
27:                    if(lcdWritePtr==&lcdBuf[LCDBUF])
006D50  220A20     MOV #0x20A2, W0
006D52  508F80     SUB W1, W0, [W15]
006D54  3A0002     BRA NZ, 0x6D5A
28:                        lcdWritePtr=lcdBuf;
006D56  B12000     SUB #0x200, W0
006D58  88B150     MOV W0, 0x162A
29:                }
006D5A  060000     RETURN
30:                
31:                void lcdClearQ(void){
32:                    *lcdWritePtr++=LCD_CLEARDISPLAY|0x0300;     //flag for rs=1 & long delay
006D5C  80B150     MOV 0x162A, W0
006D5E  203011     MOV #0x301, W1
006D60  781801     MOV W1, [W0++]
006D62  88B150     MOV W0, 0x162A
33:                    if(lcdWritePtr==&lcdBuf[LCDBUF])
006D64  220A21     MOV #0x20A2, W1
006D66  500F81     SUB W0, W1, [W15]
006D68  3A0003     BRA NZ, 0x6D70
34:                        lcdWritePtr=lcdBuf;
006D6A  2FE000     MOV #0xFE00, W0
006D6C  400001     ADD W0, W1, W0
006D6E  88B150     MOV W0, 0x162A
35:                }
006D70  060000     RETURN
36:                
37:                void lcdSetCursorQ(unsigned char col, unsigned char row) {
006D72  784101     MOV.B W1, W2
38:                  static unsigned char offsets[] = { 0x00, 0x40, 0x14, 0x54 };
39:                  if (row > 3) {
40:                    row = 3;
41:                  }
42:                  *lcdWritePtr++=(LCD_SETDDRAMADDR | (col + offsets[row]))|0x0100;  //flag for rs=0 
006D74  80B151     MOV 0x162A, W1
006D76  514FE3     SUB.B W2, #0x3, [W15]
006D78  360001     BRA LEU, 0x6D7C
006D7A  B3C032     MOV.B #0x3, W2
006D7C  FB8102     ZE W2, W2
006D7E  2ED2E3     MOV #0xED2E, W3
006D80  418102     ADD W3, W2, W2
006D82  FB8112     ZE [W2], W2
006D84  FB8000     ZE W0, W0
006D86  410000     ADD W2, W0, W0
006D88  201802     MOV #0x180, W2
006D8A  701882     IOR W0, W2, [W1++]
006D8C  88B151     MOV W1, 0x162A
43:                    if(lcdWritePtr==&lcdBuf[LCDBUF]) 
006D8E  220A20     MOV #0x20A2, W0
006D90  508F80     SUB W1, W0, [W15]
006D92  3A0002     BRA NZ, 0x6D98
44:                        lcdWritePtr=lcdBuf; 
006D94  B12000     SUB #0x200, W0
006D96  88B150     MOV W0, 0x162A
45:                }
006D98  060000     RETURN
46:                
47:                void lcdWriteStringQ(char *string) {
006DA8  B80361     MUL.UU W0, #1, W6
48:                    const int limit = 20;
49:                    char *it = string;
50:                    int i=0;
51:                    
52:                    for (; *it; it++) {
006D9A  784090     MOV.B [W0], W1
006D9C  E00401     CP0.B W1
006D9E  320013     BRA Z, 0x6DC6
006DA0  200012     MOV #0x1, W2
006DBC  410086     ADD W2, W6, W1
006DBE  784091     MOV.B [W1], W1
006DC0  E80102     INC W2, W2
006DC2  E00401     CP0.B W1
006DC4  3AFFF2     BRA NZ, 0x6DAA
53:                        lcdWriteQMac(*it);
006DA2  220A24     MOV #0x20A2, W4
006DA4  2FE005     MOV #0xFE00, W5
006DA6  428284     ADD W5, W4, W5
006DAA  FB0181     SE W1, W3
006DAC  80B151     MOV 0x162A, W1
006DAE  781883     MOV W3, [W1++]
006DB0  88B151     MOV W1, 0x162A
006DB2  508F84     SUB W1, W4, [W15]
006DB4  3A0001     BRA NZ, 0x6DB8
006DB6  88B155     MOV W5, 0x162A
54:                        if(i++==(limit-1)) return;
006DB8  510FF4     SUB W2, #0x14, [W15]
006DBA  320005     BRA Z, 0x6DC6
55:                        
56:                  }
57:                }
006DC6  060000     RETURN
58:                
59:                void lcdCustomSymbols(void){
60:                    int i=0;
61:                    lcdCommandQMac(0x40);
006DC8  80B150     MOV 0x162A, W0
006DCA  201401     MOV #0x140, W1
006DCC  781801     MOV W1, [W0++]
006DCE  88B150     MOV W0, 0x162A
006DD0  220A21     MOV #0x20A2, W1
006DD2  500F81     SUB W0, W1, [W15]
006DD4  3A0003     BRA NZ, 0x6DDC
006DD6  2FE000     MOV #0xFE00, W0
006DD8  400001     ADD W0, W1, W0
006DDA  88B150     MOV W0, 0x162A
62:                    Delay_us(200);
006DDC  200C80     MOV #0xC8, W0
006DDE  070AD0     RCALL Delay_us
63:                   // for(; i<8; i++)lcdWriteString(loadingOne[i]);
64:                    //lcdWriteString(loadingTwo);
65:                    //lcdWriteString(loadingThree);
66:                    //lcdWriteString(loadingFour);
67:                }
006DE0  060000     RETURN
68:                
69:                void lcdWriteWordQ(int word){
006DE2  FA0004     LNK #0x4
006E24  200011     MOV #0x1, W1
006E26  578164     SUB W15, #0x4, W2
006E28  B81361     MUL.UU W2, #1, W6
006E2A  DD0942     SL W1, #2, W2
006E30  DE89CF     ASR W1, #15, W3
006E32  408206     ADD W1, W6, W4
006E34  498287     ADDC W3, W7, W5
70:                    int i;
71:                    char inchar[4];
72:                    
73:                    if(word<0) {
006DE4  E00000     CP0 W0
006DE6  3D000C     BRA GE, 0x6E00
74:                        lcdWriteQMac('-');
006DE8  80B151     MOV 0x162A, W1
006DEA  2002D2     MOV #0x2D, W2
006DEC  781882     MOV W2, [W1++]
006DEE  88B151     MOV W1, 0x162A
006DF0  220A22     MOV #0x20A2, W2
006DF2  508F82     SUB W1, W2, [W15]
006DF4  3A0003     BRA NZ, 0x6DFC
006DF6  2FE001     MOV #0xFE00, W1
006DF8  408082     ADD W1, W2, W1
006DFA  88B151     MOV W1, 0x162A
75:                        word=~word+1;
006DFC  EA0000     NEG W0, W0
006DFE  37000A     BRA 0x6E14
76:                    }else lcdWriteQMac(' ');
006E00  80B151     MOV 0x162A, W1
006E02  200202     MOV #0x20, W2
006E04  781882     MOV W2, [W1++]
006E06  88B151     MOV W1, 0x162A
006E08  220A22     MOV #0x20A2, W2
006E0A  508F82     SUB W1, W2, [W15]
006E0C  3A0003     BRA NZ, 0x6E14
006E0E  2FE001     MOV #0xFE00, W1
006E10  408082     ADD W1, W2, W1
006E12  88B151     MOV W1, 0x162A
77:                   
78:                   inchar[0] = word&0x000F; 
006E14  6040EF     AND.B W0, #0xF, W1
79:                   if (inchar[0] > 9) 
006E16  50CFE9     SUB.B W1, #0x9, [W15]
006E18  340003     BRA LE, 0x6E20
80:                       inchar[0]+=55;
006E1A  B04371     ADD.B #0x37, W1
006E1C  9FFFC1     MOV.B W1, [W15-4]
006E1E  370002     BRA 0x6E24
81:                   else inchar[0]+=48;
006E20  B04301     ADD.B #0x30, W1
006E22  9FFFC1     MOV.B W1, [W15-4]
82:                   
83:                   for(i=1; i<4; i++){ 
006E46  E80081     INC W1, W1
006E48  508FE4     SUB W1, #0x4, [W15]
006E4A  3AFFEF     BRA NZ, 0x6E2A
84:                      inchar[i] = ((word>>(i*4))&0x0000F); 
006E2C  DE8102     ASR W0, W2, W2
006E2E  61416F     AND.B W2, #0xF, W2
006E36  784A02     MOV.B W2, [W4]
85:                      if (inchar[i] > 9) 
006E38  514FE9     SUB.B W2, #0x9, [W15]
006E3A  340003     BRA LE, 0x6E42
86:                          inchar[i]+=55;
006E3C  B3C373     MOV.B #0x37, W3
006E3E  414A03     ADD.B W2, W3, [W4]
006E40  370002     BRA 0x6E46
87:                      else inchar[i]+=48;
006E42  B3C303     MOV.B #0x30, W3
006E44  414A03     ADD.B W2, W3, [W4]
88:                   } 
89:                   lcdWriteQMac(inchar[3]);
006E4C  97F8FF     MOV.B [W15-1], W1
006E4E  FB0081     SE W1, W1
006E50  80B150     MOV 0x162A, W0
006E52  781801     MOV W1, [W0++]
006E54  220A21     MOV #0x20A2, W1
006E56  500F81     SUB W0, W1, [W15]
006E58  3A000A     BRA NZ, 0x6E6E
90:                   lcdWriteQMac(inchar[2]);
006E5A  97F86F     MOV.B [W15-2], W0
006E5C  FB0000     SE W0, W0
006E5E  88F510     MOV W0, lcdBuf
006E6E  97F8EF     MOV.B [W15-2], W1
006E70  FB0081     SE W1, W1
006E72  781801     MOV W1, [W0++]
006E74  88B150     MOV W0, 0x162A
006E76  220A21     MOV #0x20A2, W1
006E78  500F81     SUB W0, W1, [W15]
006E7A  3A0009     BRA NZ, 0x6E8E
91:                   lcdWriteQMac(inchar[1]);
006E60  97F85F     MOV.B [W15-3], W0
006E62  FB0000     SE W0, W0
006E64  88F520     MOV W0, 0x1EA4
006E66  2FE040     MOV #0xFE04, W0
006E68  400001     ADD W0, W1, W0
006E6A  88B150     MOV W0, 0x162A
006E6C  37001F     BRA 0x6EAC
006E7C  97F85F     MOV.B [W15-3], W0
006E7E  FB0000     SE W0, W0
006E80  88F510     MOV W0, lcdBuf
006E8E  97F8DF     MOV.B [W15-3], W1
006E90  FB0081     SE W1, W1
006E92  80B150     MOV 0x162A, W0
006E94  781801     MOV W1, [W0++]
006E96  88B150     MOV W0, 0x162A
006E98  220A21     MOV #0x20A2, W1
006E9A  500F81     SUB W0, W1, [W15]
006E9C  3A0007     BRA NZ, 0x6EAC
92:                   lcdWriteQMac(inchar[0]);
006E82  97F8CF     MOV.B [W15-4], W1
006E84  FB0001     SE W1, W0
006E86  88F520     MOV W0, 0x1EA4
006E88  21EA60     MOV #0x1EA6, W0
006E8A  88B150     MOV W0, 0x162A
006E8C  37001A     BRA 0x6EC2
006E9E  97F94F     MOV.B [W15-4], W2
006EA0  FB0002     SE W2, W0
006EA2  88F510     MOV W0, lcdBuf
006EA4  2FE020     MOV #0xFE02, W0
006EA6  400001     ADD W0, W1, W0
006EA8  88B150     MOV W0, 0x162A
006EAA  37000B     BRA 0x6EC2
006EAC  97F9CF     MOV.B [W15-4], W3
006EAE  FB0083     SE W3, W1
006EB0  80B150     MOV 0x162A, W0
006EB2  781801     MOV W1, [W0++]
006EB4  88B150     MOV W0, 0x162A
006EB6  220A21     MOV #0x20A2, W1
006EB8  500F81     SUB W0, W1, [W15]
006EBA  3A0003     BRA NZ, 0x6EC2
006EBC  2FE000     MOV #0xFE00, W0
006EBE  400001     ADD W0, W1, W0
006EC0  88B150     MOV W0, 0x162A
93:                }
006EC2  FA8000     ULNK
006EC4  060000     RETURN
94:                
95:                void lcdWriteByteQ(char word){
006EC6  FA0002     LNK #0x2
96:                    int i;
97:                    char inchar[2];
98:                     
99:                   inchar[0] = word&0x0F; 
006EC8  6040EF     AND.B W0, #0xF, W1
100:                  if (inchar[0] > 9) 
006ECA  50CFE9     SUB.B W1, #0x9, [W15]
006ECC  340003     BRA LE, 0x6ED4
101:                      inchar[0]+=55;
006ECE  B04371     ADD.B #0x37, W1
006ED0  9FFFE1     MOV.B W1, [W15-2]
006ED2  370002     BRA 0x6ED8
102:                  else inchar[0]+=48;
006ED4  B04301     ADD.B #0x30, W1
006ED6  9FFFE1     MOV.B W1, [W15-2]
103:                  
104:                  for(i=1; i<2; i++){ 
105:                     inchar[i] = ((word>>(i*4))&0x0000F); 
006ED8  DE0044     LSR W0, #4, W0
006EDA  60006F     AND W0, #0xF, W0
106:                     if (inchar[i] > 9) 
006EDC  504FE9     SUB.B W0, #0x9, [W15]
006EDE  340003     BRA LE, 0x6EE6
107:                         inchar[i]+=55;
006EE0  B04370     ADD.B #0x37, W0
006EE2  9FFFF0     MOV.B W0, [W15-1]
006EE4  370002     BRA 0x6EEA
108:                     else inchar[i]+=48;
006EE6  B04300     ADD.B #0x30, W0
006EE8  9FFFF0     MOV.B W0, [W15-1]
109:                  } 
110:                  lcdWriteQMac(inchar[1]);
006EEA  97F8FF     MOV.B [W15-1], W1
006EEC  FB0081     SE W1, W1
006EEE  80B150     MOV 0x162A, W0
006EF0  781801     MOV W1, [W0++]
006EF2  220A21     MOV #0x20A2, W1
006EF4  500F81     SUB W0, W1, [W15]
006EF6  3A0006     BRA NZ, 0x6F04
111:                  lcdWriteQMac(inchar[0]);
006EF8  97F8EF     MOV.B [W15-2], W1
006EFA  FB0001     SE W1, W0
006EFC  88F510     MOV W0, lcdBuf
006EFE  21EA40     MOV #0x1EA4, W0
006F00  88B150     MOV W0, 0x162A
006F02  37000A     BRA 0x6F18
006F04  97F96F     MOV.B [W15-2], W2
006F06  FB0082     SE W2, W1
006F08  781801     MOV W1, [W0++]
006F0A  88B150     MOV W0, 0x162A
006F0C  220A21     MOV #0x20A2, W1
006F0E  500F81     SUB W0, W1, [W15]
006F10  3A0003     BRA NZ, 0x6F18
006F12  2FE000     MOV #0xFE00, W0
006F14  400001     ADD W0, W1, W0
006F16  88B150     MOV W0, 0x162A
112:               }
006F18  FA8000     ULNK
006F1A  060000     RETURN
113:               
114:               void lcdWriteWordUnsignedQ(unsigned int word){
006F1C  FA0004     LNK #0x4
006F2E  200011     MOV #0x1, W1
006F30  578164     SUB W15, #0x4, W2
006F32  B81361     MUL.UU W2, #1, W6
006F34  DD0942     SL W1, #2, W2
006F3A  DE89CF     ASR W1, #15, W3
006F3C  408206     ADD W1, W6, W4
006F3E  498287     ADDC W3, W7, W5
115:                   int i;
116:                   char inchar[4];
117:                   
118:                  inchar[0] = word&0x000F; 
006F1E  6040EF     AND.B W0, #0xF, W1
119:                  if (inchar[0] > 9) 
006F20  50CFE9     SUB.B W1, #0x9, [W15]
006F22  340003     BRA LE, 0x6F2A
120:                      inchar[0]+=55;
006F24  B04371     ADD.B #0x37, W1
006F26  9FFFC1     MOV.B W1, [W15-4]
006F28  370002     BRA 0x6F2E
121:                  else inchar[0]+=48;
006F2A  B04301     ADD.B #0x30, W1
006F2C  9FFFC1     MOV.B W1, [W15-4]
122:                  
123:                  for(i=1; i<4; i++){ 
006F50  E80081     INC W1, W1
006F52  508FE4     SUB W1, #0x4, [W15]
006F54  3AFFEF     BRA NZ, 0x6F34
124:                     inchar[i] = ((word>>(i*4))&0x0000F); 
006F36  DE0102     LSR W0, W2, W2
006F38  61416F     AND.B W2, #0xF, W2
006F40  784A02     MOV.B W2, [W4]
125:                     if (inchar[i] > 9) 
006F42  514FE9     SUB.B W2, #0x9, [W15]
006F44  340003     BRA LE, 0x6F4C
126:                         inchar[i]+=55;
006F46  B3C373     MOV.B #0x37, W3
006F48  414A03     ADD.B W2, W3, [W4]
006F4A  370002     BRA 0x6F50
127:                     else inchar[i]+=48;
006F4C  B3C303     MOV.B #0x30, W3
006F4E  414A03     ADD.B W2, W3, [W4]
128:                  } 
129:                  lcdWriteQMac(inchar[3]);
006F56  97F8FF     MOV.B [W15-1], W1
006F58  FB0081     SE W1, W1
006F5A  80B150     MOV 0x162A, W0
006F5C  781801     MOV W1, [W0++]
006F5E  220A21     MOV #0x20A2, W1
006F60  500F81     SUB W0, W1, [W15]
006F62  3A000A     BRA NZ, 0x6F78
130:                  lcdWriteQMac(inchar[2]);
006F64  97F86F     MOV.B [W15-2], W0
006F66  FB0000     SE W0, W0
006F68  88F510     MOV W0, lcdBuf
006F78  97F8EF     MOV.B [W15-2], W1
006F7A  FB0081     SE W1, W1
006F7C  781801     MOV W1, [W0++]
006F7E  88B150     MOV W0, 0x162A
006F80  220A21     MOV #0x20A2, W1
006F82  500F81     SUB W0, W1, [W15]
006F84  3A0009     BRA NZ, 0x6F98
131:                  lcdWriteQMac(inchar[1]);
006F6A  97F85F     MOV.B [W15-3], W0
006F6C  FB0000     SE W0, W0
006F6E  88F520     MOV W0, 0x1EA4
006F70  2FE040     MOV #0xFE04, W0
006F72  400001     ADD W0, W1, W0
006F74  88B150     MOV W0, 0x162A
006F76  37001F     BRA 0x6FB6
006F86  97F85F     MOV.B [W15-3], W0
006F88  FB0000     SE W0, W0
006F8A  88F510     MOV W0, lcdBuf
006F98  97F8DF     MOV.B [W15-3], W1
006F9A  FB0081     SE W1, W1
006F9C  80B150     MOV 0x162A, W0
006F9E  781801     MOV W1, [W0++]
006FA0  88B150     MOV W0, 0x162A
006FA2  220A21     MOV #0x20A2, W1
006FA4  500F81     SUB W0, W1, [W15]
006FA6  3A0007     BRA NZ, 0x6FB6
132:                  lcdWriteQMac(inchar[0]);
006F8C  97F8CF     MOV.B [W15-4], W1
006F8E  FB0001     SE W1, W0
006F90  88F520     MOV W0, 0x1EA4
006F92  21EA60     MOV #0x1EA6, W0
006F94  88B150     MOV W0, 0x162A
006F96  37001A     BRA 0x6FCC
006FA8  97F94F     MOV.B [W15-4], W2
006FAA  FB0002     SE W2, W0
006FAC  88F510     MOV W0, lcdBuf
006FAE  2FE020     MOV #0xFE02, W0
006FB0  400001     ADD W0, W1, W0
006FB2  88B150     MOV W0, 0x162A
006FB4  37000B     BRA 0x6FCC
006FB6  97F9CF     MOV.B [W15-4], W3
006FB8  FB0083     SE W3, W1
006FBA  80B150     MOV 0x162A, W0
006FBC  781801     MOV W1, [W0++]
006FBE  88B150     MOV W0, 0x162A
006FC0  220A21     MOV #0x20A2, W1
006FC2  500F81     SUB W0, W1, [W15]
006FC4  3A0003     BRA NZ, 0x6FCC
006FC6  2FE000     MOV #0xFE00, W0
006FC8  400001     ADD W0, W1, W0
006FCA  88B150     MOV W0, 0x162A
133:               }
006FCC  FA8000     ULNK
006FCE  060000     RETURN
134:               
135:               void lcdWriteDecimalQ(char word, int digits){
006FD0  FA0000     LNK #0x0
006FD2  781F88     MOV W8, [W15++]
006FD4  780381     MOV W1, W7
136:                   const char maxdigits = 4;
137:                   char result[maxdigits];
006FD8  4787E6     ADD W15, #0x6, W15
006FDA  780186     MOV W6, W3
138:                   char i = 3;
006FDC  B3C032     MOV.B #0x3, W2
139:                   do {
140:                       result[i] = '0' + word % 10;
006FDE  2000A4     MOV #0xA, W4
006FE0  FB0282     SE W2, W5
006FE2  418285     ADD W3, W5, W5
006FE4  FB0000     SE W0, W0
006FE6  090011     REPEAT #0x11
006FE8  D80004     DIV.SW W0, W4
006FEA  B3C308     MOV.B #0x30, W8
006FEC  40CA88     ADD.B W1, W8, [W5]
141:                       word /= 10;
142:                       i--;
006FEE  E94102     DEC.B W2, W2
143:                   }
144:                   while (word > 0);
006FF0  E00400     CP0.B W0
006FF2  3CFFF6     BRA GT, 0x6FE0
145:                   while (i>=0) result[i--] = ' '; 
006FF4  E00402     CP0.B W2
006FF6  350007     BRA LT, 0x7006
006FF8  B3C204     MOV.B #0x20, W4
006FFA  FB0002     SE W2, W0
006FFC  418000     ADD W3, W0, W0
006FFE  784804     MOV.B W4, [W0]
007000  E94102     DEC.B W2, W2
007002  414FE1     ADD.B W2, #0x1, [W15]
007004  3AFFFA     BRA NZ, 0x6FFA
146:                 
147:                   for (i=maxdigits-digits; i<maxdigits; i++) {
007006  B3C041     MOV.B #0x4, W1
007008  50C087     SUB.B W1, W7, W1
00700A  50CFE3     SUB.B W1, #0x3, [W15]
00700C  3C000F     BRA GT, 0x702C
007026  E84081     INC.B W1, W1
007028  50CFE4     SUB.B W1, #0x4, [W15]
00702A  3AFFF4     BRA NZ, 0x7014
148:                       lcdWriteQMac(result[i]);
00700E  220A24     MOV #0x20A2, W4
007010  2FE005     MOV #0xFE00, W5
007012  428284     ADD W5, W4, W5
007014  FB0001     SE W1, W0
007016  418000     ADD W3, W0, W0
007018  FB0110     SE [W0], W2
00701A  80B150     MOV 0x162A, W0
00701C  781802     MOV W2, [W0++]
00701E  88B150     MOV W0, 0x162A
007020  500F84     SUB W0, W4, [W15]
007022  3A0001     BRA NZ, 0x7026
007024  88B155     MOV W5, 0x162A
149:                   }
150:               }
006FD6  78030F     MOV W15, W6
00702C  780786     MOV W6, W15
00702E  78044F     MOV [--W15], W8
007030  FA8000     ULNK
007032  060000     RETURN
151:               
152:               //4x4 pad debug
153:               void lcdDrawPads(unsigned char col){
007034  BE9F88     MOV.D W8, [W15++]
007036  784480     MOV.B W0, W9
154:                   unsigned char block=0xFF;
007048  EBC400     SETM.B W8
155:                   if(ctrl.pad[BTN_SPECIAL]>1||ctrl.pad[BTN_ENC]>1) block='*';
007038  B3C2A8     MOV.B #0x2A, W8
00703A  2164C0     MOV #0x164C, W0
00703C  B3C011     MOV.B #0x1, W1
00703E  10CF90     SUBR.B W1, [W0], [W15]
007040  3E0004     BRA GTU, 0x704A
007042  E98000     DEC2 W0, W0
007044  10CF90     SUBR.B W1, [W0], [W15]
007046  3E0001     BRA GTU, 0x704A
156:                   
157:                   lcdSetCursorQ(col, 0);
00704A  EB4080     CLR.B W1
00704C  784009     MOV.B W9, W0
00704E  07FE91     RCALL lcdSetCursorQ
158:                   if(ctrl.pad[12]>1){lcdWriteQMac(' ');} else lcdWriteQMac(block);
007050  216460     MOV #0x1646, W0
007052  B3C011     MOV.B #0x1, W1
007054  10CF90     SUBR.B W1, [W0], [W15]
007056  36000B     BRA LEU, 0x706E
007058  80B150     MOV 0x162A, W0
00705A  200201     MOV #0x20, W1
00705C  781801     MOV W1, [W0++]
00705E  88B150     MOV W0, 0x162A
007060  220A21     MOV #0x20A2, W1
007062  500F81     SUB W0, W1, [W15]
007064  3A000E     BRA NZ, 0x7082
007066  2FE000     MOV #0xFE00, W0
007068  400001     ADD W0, W1, W0
00706A  88B150     MOV W0, 0x162A
00706C  37000A     BRA 0x7082
00706E  FB8088     ZE W8, W1
007070  80B150     MOV 0x162A, W0
007072  781801     MOV W1, [W0++]
007074  88B150     MOV W0, 0x162A
007076  220A21     MOV #0x20A2, W1
007078  500F81     SUB W0, W1, [W15]
00707A  3A0003     BRA NZ, 0x7082
00707C  2FE000     MOV #0xFE00, W0
00707E  400001     ADD W0, W1, W0
007080  88B150     MOV W0, 0x162A
159:                   if(ctrl.pad[13]>1){lcdWriteQMac(' ');} else lcdWriteQMac(block);
007082  216470     MOV #0x1647, W0
007084  B3C011     MOV.B #0x1, W1
007086  10CF90     SUBR.B W1, [W0], [W15]
007088  36000B     BRA LEU, 0x70A0
00708A  80B150     MOV 0x162A, W0
00708C  200201     MOV #0x20, W1
00708E  781801     MOV W1, [W0++]
007090  88B150     MOV W0, 0x162A
007092  220A21     MOV #0x20A2, W1
007094  500F81     SUB W0, W1, [W15]
007096  3A000E     BRA NZ, 0x70B4
007098  2FE000     MOV #0xFE00, W0
00709A  400001     ADD W0, W1, W0
00709C  88B150     MOV W0, 0x162A
00709E  37000A     BRA 0x70B4
0070A0  FB8088     ZE W8, W1
0070A2  80B150     MOV 0x162A, W0
0070A4  781801     MOV W1, [W0++]
0070A6  88B150     MOV W0, 0x162A
0070A8  220A21     MOV #0x20A2, W1
0070AA  500F81     SUB W0, W1, [W15]
0070AC  3A0003     BRA NZ, 0x70B4
0070AE  2FE000     MOV #0xFE00, W0
0070B0  400001     ADD W0, W1, W0
0070B2  88B150     MOV W0, 0x162A
160:                   if(ctrl.pad[14]>1){lcdWriteQMac(' ');} else lcdWriteQMac(block);
0070B4  216480     MOV #0x1648, W0
0070B6  B3C011     MOV.B #0x1, W1
0070B8  10CF90     SUBR.B W1, [W0], [W15]
0070BA  36000B     BRA LEU, 0x70D2
0070BC  80B150     MOV 0x162A, W0
0070BE  200201     MOV #0x20, W1
0070C0  781801     MOV W1, [W0++]
0070C2  88B150     MOV W0, 0x162A
0070C4  220A21     MOV #0x20A2, W1
0070C6  500F81     SUB W0, W1, [W15]
0070C8  3A000E     BRA NZ, 0x70E6
0070CA  2FE000     MOV #0xFE00, W0
0070CC  400001     ADD W0, W1, W0
0070CE  88B150     MOV W0, 0x162A
0070D0  37000A     BRA 0x70E6
0070D2  FB8088     ZE W8, W1
0070D4  80B150     MOV 0x162A, W0
0070D6  781801     MOV W1, [W0++]
0070D8  88B150     MOV W0, 0x162A
0070DA  220A21     MOV #0x20A2, W1
0070DC  500F81     SUB W0, W1, [W15]
0070DE  3A0003     BRA NZ, 0x70E6
0070E0  2FE000     MOV #0xFE00, W0
0070E2  400001     ADD W0, W1, W0
0070E4  88B150     MOV W0, 0x162A
161:                   if(ctrl.pad[15]>1){lcdWriteQMac(' ');} else lcdWriteQMac(block);
0070E6  216490     MOV #0x1649, W0
0070E8  B3C011     MOV.B #0x1, W1
0070EA  10CF90     SUBR.B W1, [W0], [W15]
0070EC  36000B     BRA LEU, 0x7104
0070EE  80B150     MOV 0x162A, W0
0070F0  200201     MOV #0x20, W1
0070F2  781801     MOV W1, [W0++]
0070F4  88B150     MOV W0, 0x162A
0070F6  220A21     MOV #0x20A2, W1
0070F8  500F81     SUB W0, W1, [W15]
0070FA  3A000E     BRA NZ, 0x7118
0070FC  2FE000     MOV #0xFE00, W0
0070FE  400001     ADD W0, W1, W0
007100  88B150     MOV W0, 0x162A
007102  37000A     BRA 0x7118
007104  FB8088     ZE W8, W1
007106  80B150     MOV 0x162A, W0
007108  781801     MOV W1, [W0++]
00710A  88B150     MOV W0, 0x162A
00710C  220A21     MOV #0x20A2, W1
00710E  500F81     SUB W0, W1, [W15]
007110  3A0003     BRA NZ, 0x7118
007112  2FE000     MOV #0xFE00, W0
007114  400001     ADD W0, W1, W0
007116  88B150     MOV W0, 0x162A
162:                   lcdSetCursorQ(col, 1);
007118  B3C011     MOV.B #0x1, W1
00711A  784009     MOV.B W9, W0
00711C  07FE2A     RCALL lcdSetCursorQ
163:                   if(ctrl.pad[8]>1){lcdWriteQMac(' ');} else lcdWriteQMac(block);
00711E  216420     MOV #0x1642, W0
007120  B3C011     MOV.B #0x1, W1
007122  10CF90     SUBR.B W1, [W0], [W15]
007124  36000B     BRA LEU, 0x713C
007126  80B150     MOV 0x162A, W0
007128  200201     MOV #0x20, W1
00712A  781801     MOV W1, [W0++]
00712C  88B150     MOV W0, 0x162A
00712E  220A21     MOV #0x20A2, W1
007130  500F81     SUB W0, W1, [W15]
007132  3A000E     BRA NZ, 0x7150
007134  2FE000     MOV #0xFE00, W0
007136  400001     ADD W0, W1, W0
007138  88B150     MOV W0, 0x162A
00713A  37000A     BRA 0x7150
00713C  FB8088     ZE W8, W1
00713E  80B150     MOV 0x162A, W0
007140  781801     MOV W1, [W0++]
007142  88B150     MOV W0, 0x162A
007144  220A21     MOV #0x20A2, W1
007146  500F81     SUB W0, W1, [W15]
007148  3A0003     BRA NZ, 0x7150
00714A  2FE000     MOV #0xFE00, W0
00714C  400001     ADD W0, W1, W0
00714E  88B150     MOV W0, 0x162A
164:                   if(ctrl.pad[9]>1){lcdWriteQMac(' ');} else lcdWriteQMac(block);
007150  216430     MOV #0x1643, W0
007152  B3C011     MOV.B #0x1, W1
007154  10CF90     SUBR.B W1, [W0], [W15]
007156  36000B     BRA LEU, 0x716E
007158  80B150     MOV 0x162A, W0
00715A  200201     MOV #0x20, W1
00715C  781801     MOV W1, [W0++]
00715E  88B150     MOV W0, 0x162A
007160  220A21     MOV #0x20A2, W1
007162  500F81     SUB W0, W1, [W15]
007164  3A000E     BRA NZ, 0x7182
007166  2FE000     MOV #0xFE00, W0
007168  400001     ADD W0, W1, W0
00716A  88B150     MOV W0, 0x162A
00716C  37000A     BRA 0x7182
00716E  FB8088     ZE W8, W1
007170  80B150     MOV 0x162A, W0
007172  781801     MOV W1, [W0++]
007174  88B150     MOV W0, 0x162A
007176  220A21     MOV #0x20A2, W1
007178  500F81     SUB W0, W1, [W15]
00717A  3A0003     BRA NZ, 0x7182
00717C  2FE000     MOV #0xFE00, W0
00717E  400001     ADD W0, W1, W0
007180  88B150     MOV W0, 0x162A
165:                   if(ctrl.pad[10]>1){lcdWriteQMac(' ');} else lcdWriteQMac(block);
007182  216440     MOV #0x1644, W0
007184  B3C011     MOV.B #0x1, W1
007186  10CF90     SUBR.B W1, [W0], [W15]
007188  36000B     BRA LEU, 0x71A0
00718A  80B150     MOV 0x162A, W0
00718C  200201     MOV #0x20, W1
00718E  781801     MOV W1, [W0++]
007190  88B150     MOV W0, 0x162A
007192  220A21     MOV #0x20A2, W1
007194  500F81     SUB W0, W1, [W15]
007196  3A000E     BRA NZ, 0x71B4
007198  2FE000     MOV #0xFE00, W0
00719A  400001     ADD W0, W1, W0
00719C  88B150     MOV W0, 0x162A
00719E  37000A     BRA 0x71B4
0071A0  FB8088     ZE W8, W1
0071A2  80B150     MOV 0x162A, W0
0071A4  781801     MOV W1, [W0++]
0071A6  88B150     MOV W0, 0x162A
0071A8  220A21     MOV #0x20A2, W1
0071AA  500F81     SUB W0, W1, [W15]
0071AC  3A0003     BRA NZ, 0x71B4
0071AE  2FE000     MOV #0xFE00, W0
0071B0  400001     ADD W0, W1, W0
0071B2  88B150     MOV W0, 0x162A
166:                   if(ctrl.pad[11]>1){lcdWriteQMac(' ');} else lcdWriteQMac(block);
0071B4  216450     MOV #0x1645, W0
0071B6  B3C011     MOV.B #0x1, W1
0071B8  10CF90     SUBR.B W1, [W0], [W15]
0071BA  36000B     BRA LEU, 0x71D2
0071BC  80B150     MOV 0x162A, W0
0071BE  200201     MOV #0x20, W1
0071C0  781801     MOV W1, [W0++]
0071C2  88B150     MOV W0, 0x162A
0071C4  220A21     MOV #0x20A2, W1
0071C6  500F81     SUB W0, W1, [W15]
0071C8  3A000E     BRA NZ, 0x71E6
0071CA  2FE000     MOV #0xFE00, W0
0071CC  400001     ADD W0, W1, W0
0071CE  88B150     MOV W0, 0x162A
0071D0  37000A     BRA 0x71E6
0071D2  FB8088     ZE W8, W1
0071D4  80B150     MOV 0x162A, W0
0071D6  781801     MOV W1, [W0++]
0071D8  88B150     MOV W0, 0x162A
0071DA  220A21     MOV #0x20A2, W1
0071DC  500F81     SUB W0, W1, [W15]
0071DE  3A0003     BRA NZ, 0x71E6
0071E0  2FE000     MOV #0xFE00, W0
0071E2  400001     ADD W0, W1, W0
0071E4  88B150     MOV W0, 0x162A
167:                   lcdSetCursorQ(col, 2);
0071E6  B3C021     MOV.B #0x2, W1
0071E8  784009     MOV.B W9, W0
0071EA  07FDC3     RCALL lcdSetCursorQ
168:                   if(ctrl.pad[4]>1){lcdWriteQMac(' ');} else lcdWriteQMac(block);
0071EC  2163E0     MOV #0x163E, W0
0071EE  B3C011     MOV.B #0x1, W1
0071F0  10CF90     SUBR.B W1, [W0], [W15]
0071F2  36000B     BRA LEU, 0x720A
0071F4  80B150     MOV 0x162A, W0
0071F6  200201     MOV #0x20, W1
0071F8  781801     MOV W1, [W0++]
0071FA  88B150     MOV W0, 0x162A
0071FC  220A21     MOV #0x20A2, W1
0071FE  500F81     SUB W0, W1, [W15]
007200  3A000E     BRA NZ, 0x721E
007202  2FE000     MOV #0xFE00, W0
007204  400001     ADD W0, W1, W0
007206  88B150     MOV W0, 0x162A
007208  37000A     BRA 0x721E
00720A  FB8088     ZE W8, W1
00720C  80B150     MOV 0x162A, W0
00720E  781801     MOV W1, [W0++]
007210  88B150     MOV W0, 0x162A
007212  220A21     MOV #0x20A2, W1
007214  500F81     SUB W0, W1, [W15]
007216  3A0003     BRA NZ, 0x721E
007218  2FE000     MOV #0xFE00, W0
00721A  400001     ADD W0, W1, W0
00721C  88B150     MOV W0, 0x162A
169:                   if(ctrl.pad[5]>1){lcdWriteQMac(' ');} else lcdWriteQMac(block);
00721E  2163F0     MOV #0x163F, W0
007220  B3C011     MOV.B #0x1, W1
007222  10CF90     SUBR.B W1, [W0], [W15]
007224  36000B     BRA LEU, 0x723C
007226  80B150     MOV 0x162A, W0
007228  200201     MOV #0x20, W1
00722A  781801     MOV W1, [W0++]
00722C  88B150     MOV W0, 0x162A
00722E  220A21     MOV #0x20A2, W1
007230  500F81     SUB W0, W1, [W15]
007232  3A000E     BRA NZ, 0x7250
007234  2FE000     MOV #0xFE00, W0
007236  400001     ADD W0, W1, W0
007238  88B150     MOV W0, 0x162A
00723A  37000A     BRA 0x7250
00723C  FB8088     ZE W8, W1
00723E  80B150     MOV 0x162A, W0
007240  781801     MOV W1, [W0++]
007242  88B150     MOV W0, 0x162A
007244  220A21     MOV #0x20A2, W1
007246  500F81     SUB W0, W1, [W15]
007248  3A0003     BRA NZ, 0x7250
00724A  2FE000     MOV #0xFE00, W0
00724C  400001     ADD W0, W1, W0
00724E  88B150     MOV W0, 0x162A
170:                   if(ctrl.pad[6]>1){lcdWriteQMac(' ');} else lcdWriteQMac(block);
007250  216400     MOV #0x1640, W0
007252  B3C011     MOV.B #0x1, W1
007254  10CF90     SUBR.B W1, [W0], [W15]
007256  36000B     BRA LEU, 0x726E
007258  80B150     MOV 0x162A, W0
00725A  200201     MOV #0x20, W1
00725C  781801     MOV W1, [W0++]
00725E  88B150     MOV W0, 0x162A
007260  220A21     MOV #0x20A2, W1
007262  500F81     SUB W0, W1, [W15]
007264  3A000E     BRA NZ, 0x7282
007266  2FE000     MOV #0xFE00, W0
007268  400001     ADD W0, W1, W0
00726A  88B150     MOV W0, 0x162A
00726C  37000A     BRA 0x7282
00726E  FB8088     ZE W8, W1
007270  80B150     MOV 0x162A, W0
007272  781801     MOV W1, [W0++]
007274  88B150     MOV W0, 0x162A
007276  220A21     MOV #0x20A2, W1
007278  500F81     SUB W0, W1, [W15]
00727A  3A0003     BRA NZ, 0x7282
00727C  2FE000     MOV #0xFE00, W0
00727E  400001     ADD W0, W1, W0
007280  88B150     MOV W0, 0x162A
171:                   if(ctrl.pad[7]>1){lcdWriteQMac(' ');} else lcdWriteQMac(block);
007282  216410     MOV #0x1641, W0
007284  B3C011     MOV.B #0x1, W1
007286  10CF90     SUBR.B W1, [W0], [W15]
007288  36000B     BRA LEU, 0x72A0
00728A  80B150     MOV 0x162A, W0
00728C  200201     MOV #0x20, W1
00728E  781801     MOV W1, [W0++]
007290  88B150     MOV W0, 0x162A
007292  220A21     MOV #0x20A2, W1
007294  500F81     SUB W0, W1, [W15]
007296  3A000E     BRA NZ, 0x72B4
007298  2FE000     MOV #0xFE00, W0
00729A  400001     ADD W0, W1, W0
00729C  88B150     MOV W0, 0x162A
00729E  37000A     BRA 0x72B4
0072A0  FB8088     ZE W8, W1
0072A2  80B150     MOV 0x162A, W0
0072A4  781801     MOV W1, [W0++]
0072A6  88B150     MOV W0, 0x162A
0072A8  220A21     MOV #0x20A2, W1
0072AA  500F81     SUB W0, W1, [W15]
0072AC  3A0003     BRA NZ, 0x72B4
0072AE  2FE000     MOV #0xFE00, W0
0072B0  400001     ADD W0, W1, W0
0072B2  88B150     MOV W0, 0x162A
172:                   lcdSetCursorQ(col, 3);
0072B4  B3C031     MOV.B #0x3, W1
0072B6  784009     MOV.B W9, W0
0072B8  07FD5C     RCALL lcdSetCursorQ
173:                   if(ctrl.pad[0]>1){lcdWriteQMac(' ');} else lcdWriteQMac(block);
0072BA  2163A0     MOV #0x163A, W0
0072BC  B3C011     MOV.B #0x1, W1
0072BE  10CF90     SUBR.B W1, [W0], [W15]
0072C0  36000B     BRA LEU, 0x72D8
0072C2  80B150     MOV 0x162A, W0
0072C4  200201     MOV #0x20, W1
0072C6  781801     MOV W1, [W0++]
0072C8  88B150     MOV W0, 0x162A
0072CA  220A21     MOV #0x20A2, W1
0072CC  500F81     SUB W0, W1, [W15]
0072CE  3A000E     BRA NZ, 0x72EC
0072D0  2FE000     MOV #0xFE00, W0
0072D2  400001     ADD W0, W1, W0
0072D4  88B150     MOV W0, 0x162A
0072D6  37000A     BRA 0x72EC
0072D8  FB8088     ZE W8, W1
0072DA  80B150     MOV 0x162A, W0
0072DC  781801     MOV W1, [W0++]
0072DE  88B150     MOV W0, 0x162A
0072E0  220A21     MOV #0x20A2, W1
0072E2  500F81     SUB W0, W1, [W15]
0072E4  3A0003     BRA NZ, 0x72EC
0072E6  2FE000     MOV #0xFE00, W0
0072E8  400001     ADD W0, W1, W0
0072EA  88B150     MOV W0, 0x162A
174:                   if(ctrl.pad[1]>1){lcdWriteQMac(' ');} else lcdWriteQMac(block);
0072EC  2163B0     MOV #0x163B, W0
0072EE  B3C011     MOV.B #0x1, W1
0072F0  10CF90     SUBR.B W1, [W0], [W15]
0072F2  36000B     BRA LEU, 0x730A
0072F4  80B150     MOV 0x162A, W0
0072F6  200201     MOV #0x20, W1
0072F8  781801     MOV W1, [W0++]
0072FA  88B150     MOV W0, 0x162A
0072FC  220A21     MOV #0x20A2, W1
0072FE  500F81     SUB W0, W1, [W15]
007300  3A000E     BRA NZ, 0x731E
007302  2FE000     MOV #0xFE00, W0
007304  400001     ADD W0, W1, W0
007306  88B150     MOV W0, 0x162A
007308  37000A     BRA 0x731E
00730A  FB8088     ZE W8, W1
00730C  80B150     MOV 0x162A, W0
00730E  781801     MOV W1, [W0++]
007310  88B150     MOV W0, 0x162A
007312  220A21     MOV #0x20A2, W1
007314  500F81     SUB W0, W1, [W15]
007316  3A0003     BRA NZ, 0x731E
007318  2FE000     MOV #0xFE00, W0
00731A  400001     ADD W0, W1, W0
00731C  88B150     MOV W0, 0x162A
175:                   if(ctrl.pad[2]>1){lcdWriteQMac(' ');} else lcdWriteQMac(block);
00731E  2163C0     MOV #0x163C, W0
007320  B3C011     MOV.B #0x1, W1
007322  10CF90     SUBR.B W1, [W0], [W15]
007324  36000B     BRA LEU, 0x733C
007326  80B150     MOV 0x162A, W0
007328  200201     MOV #0x20, W1
00732A  781801     MOV W1, [W0++]
00732C  88B150     MOV W0, 0x162A
00732E  220A21     MOV #0x20A2, W1
007330  500F81     SUB W0, W1, [W15]
007332  3A000E     BRA NZ, 0x7350
007334  2FE000     MOV #0xFE00, W0
007336  400001     ADD W0, W1, W0
007338  88B150     MOV W0, 0x162A
00733A  37000A     BRA 0x7350
00733C  FB8088     ZE W8, W1
00733E  80B150     MOV 0x162A, W0
007340  781801     MOV W1, [W0++]
007342  88B150     MOV W0, 0x162A
007344  220A21     MOV #0x20A2, W1
007346  500F81     SUB W0, W1, [W15]
007348  3A0003     BRA NZ, 0x7350
00734A  2FE000     MOV #0xFE00, W0
00734C  400001     ADD W0, W1, W0
00734E  88B150     MOV W0, 0x162A
176:                   if(ctrl.pad[3]>1){lcdWriteQMac(' ');} else lcdWriteQMac(block);
007350  2163D0     MOV #0x163D, W0
007352  B3C011     MOV.B #0x1, W1
007354  10CF90     SUBR.B W1, [W0], [W15]
007356  36000B     BRA LEU, 0x736E
007358  80B150     MOV 0x162A, W0
00735A  200201     MOV #0x20, W1
00735C  781801     MOV W1, [W0++]
00735E  88B150     MOV W0, 0x162A
007360  220A21     MOV #0x20A2, W1
007362  500F81     SUB W0, W1, [W15]
007364  3A000E     BRA NZ, 0x7382
007366  2FE000     MOV #0xFE00, W0
007368  400001     ADD W0, W1, W0
00736A  88B150     MOV W0, 0x162A
00736C  37000A     BRA 0x7382
00736E  FB8408     ZE W8, W8
007370  80B150     MOV 0x162A, W0
007372  781808     MOV W8, [W0++]
007374  88B150     MOV W0, 0x162A
007376  220A21     MOV #0x20A2, W1
007378  500F81     SUB W0, W1, [W15]
00737A  3A0003     BRA NZ, 0x7382
00737C  2FE000     MOV #0xFE00, W0
00737E  400001     ADD W0, W1, W0
007380  88B150     MOV W0, 0x162A
177:               }
007382  BE044F     MOV.D [--W15], W8
007384  060000     RETURN
178:               
179:               void lcdDrawSlots(unsigned char col, unsigned char grid[16]){
007386  BE9F88     MOV.D W8, [W15++]
007388  784480     MOV.B W0, W9
00738A  780401     MOV W1, W8
180:                   
181:                   lcdSetCursorQ(col, 0);
00738C  EB4080     CLR.B W1
00738E  784009     MOV.B W9, W0
007390  07FCF0     RCALL lcdSetCursorQ
182:                   if(grid[12]){lcdWriteQMac('*');} else lcdWriteQMac(0xFF);
007392  904848     MOV.B [W8+12], W0
007394  E00400     CP0.B W0
007396  32000B     BRA Z, 0x73AE
007398  80B150     MOV 0x162A, W0
00739A  2002A1     MOV #0x2A, W1
00739C  781801     MOV W1, [W0++]
00739E  88B150     MOV W0, 0x162A
0073A0  220A21     MOV #0x20A2, W1
0073A2  500F81     SUB W0, W1, [W15]
0073A4  3A000E     BRA NZ, 0x73C2
0073A6  2FE000     MOV #0xFE00, W0
0073A8  400001     ADD W0, W1, W0
0073AA  88B150     MOV W0, 0x162A
0073AC  37000A     BRA 0x73C2
0073AE  80B150     MOV 0x162A, W0
0073B0  200FF1     MOV #0xFF, W1
0073B2  781801     MOV W1, [W0++]
0073B4  88B150     MOV W0, 0x162A
0073B6  220A21     MOV #0x20A2, W1
0073B8  500F81     SUB W0, W1, [W15]
0073BA  3A0003     BRA NZ, 0x73C2
0073BC  2FE000     MOV #0xFE00, W0
0073BE  400001     ADD W0, W1, W0
0073C0  88B150     MOV W0, 0x162A
183:                   if(grid[13]){lcdWriteQMac('*');} else lcdWriteQMac(0xFF);
0073C2  904858     MOV.B [W8+13], W0
0073C4  E00400     CP0.B W0
0073C6  32000B     BRA Z, 0x73DE
0073C8  80B150     MOV 0x162A, W0
0073CA  2002A1     MOV #0x2A, W1
0073CC  781801     MOV W1, [W0++]
0073CE  88B150     MOV W0, 0x162A
0073D0  220A21     MOV #0x20A2, W1
0073D2  500F81     SUB W0, W1, [W15]
0073D4  3A000E     BRA NZ, 0x73F2
0073D6  2FE000     MOV #0xFE00, W0
0073D8  400001     ADD W0, W1, W0
0073DA  88B150     MOV W0, 0x162A
0073DC  37000A     BRA 0x73F2
0073DE  80B150     MOV 0x162A, W0
0073E0  200FF1     MOV #0xFF, W1
0073E2  781801     MOV W1, [W0++]
0073E4  88B150     MOV W0, 0x162A
0073E6  220A21     MOV #0x20A2, W1
0073E8  500F81     SUB W0, W1, [W15]
0073EA  3A0003     BRA NZ, 0x73F2
0073EC  2FE000     MOV #0xFE00, W0
0073EE  400001     ADD W0, W1, W0
0073F0  88B150     MOV W0, 0x162A
184:                   if(grid[14]){lcdWriteQMac('*');} else lcdWriteQMac(0xFF);
0073F2  904868     MOV.B [W8+14], W0
0073F4  E00400     CP0.B W0
0073F6  32000B     BRA Z, 0x740E
0073F8  80B150     MOV 0x162A, W0
0073FA  2002A1     MOV #0x2A, W1
0073FC  781801     MOV W1, [W0++]
0073FE  88B150     MOV W0, 0x162A
007400  220A21     MOV #0x20A2, W1
007402  500F81     SUB W0, W1, [W15]
007404  3A000E     BRA NZ, 0x7422
007406  2FE000     MOV #0xFE00, W0
007408  400001     ADD W0, W1, W0
00740A  88B150     MOV W0, 0x162A
00740C  37000A     BRA 0x7422
00740E  80B150     MOV 0x162A, W0
007410  200FF1     MOV #0xFF, W1
007412  781801     MOV W1, [W0++]
007414  88B150     MOV W0, 0x162A
007416  220A21     MOV #0x20A2, W1
007418  500F81     SUB W0, W1, [W15]
00741A  3A0003     BRA NZ, 0x7422
00741C  2FE000     MOV #0xFE00, W0
00741E  400001     ADD W0, W1, W0
007420  88B150     MOV W0, 0x162A
185:                   if(grid[15]){lcdWriteQMac('*');} else lcdWriteQMac(0xFF);
007422  904878     MOV.B [W8+15], W0
007424  E00400     CP0.B W0
007426  32000B     BRA Z, 0x743E
007428  80B150     MOV 0x162A, W0
00742A  2002A1     MOV #0x2A, W1
00742C  781801     MOV W1, [W0++]
00742E  88B150     MOV W0, 0x162A
007430  220A21     MOV #0x20A2, W1
007432  500F81     SUB W0, W1, [W15]
007434  3A000E     BRA NZ, 0x7452
007436  2FE000     MOV #0xFE00, W0
007438  400001     ADD W0, W1, W0
00743A  88B150     MOV W0, 0x162A
00743C  37000A     BRA 0x7452
00743E  80B150     MOV 0x162A, W0
007440  200FF1     MOV #0xFF, W1
007442  781801     MOV W1, [W0++]
007444  88B150     MOV W0, 0x162A
007446  220A21     MOV #0x20A2, W1
007448  500F81     SUB W0, W1, [W15]
00744A  3A0003     BRA NZ, 0x7452
00744C  2FE000     MOV #0xFE00, W0
00744E  400001     ADD W0, W1, W0
007450  88B150     MOV W0, 0x162A
186:                   lcdSetCursorQ(col, 1);
007452  B3C011     MOV.B #0x1, W1
007454  784009     MOV.B W9, W0
007456  07FC8D     RCALL lcdSetCursorQ
187:                   if(grid[8]){lcdWriteQMac('*');} else lcdWriteQMac(0xFF);
007458  904808     MOV.B [W8+8], W0
00745A  E00400     CP0.B W0
00745C  32000B     BRA Z, 0x7474
00745E  80B150     MOV 0x162A, W0
007460  2002A1     MOV #0x2A, W1
007462  781801     MOV W1, [W0++]
007464  88B150     MOV W0, 0x162A
007466  220A21     MOV #0x20A2, W1
007468  500F81     SUB W0, W1, [W15]
00746A  3A000E     BRA NZ, 0x7488
00746C  2FE000     MOV #0xFE00, W0
00746E  400001     ADD W0, W1, W0
007470  88B150     MOV W0, 0x162A
007472  37000A     BRA 0x7488
007474  80B150     MOV 0x162A, W0
007476  200FF1     MOV #0xFF, W1
007478  781801     MOV W1, [W0++]
00747A  88B150     MOV W0, 0x162A
00747C  220A21     MOV #0x20A2, W1
00747E  500F81     SUB W0, W1, [W15]
007480  3A0003     BRA NZ, 0x7488
007482  2FE000     MOV #0xFE00, W0
007484  400001     ADD W0, W1, W0
007486  88B150     MOV W0, 0x162A
188:                   if(grid[9]){lcdWriteQMac('*');} else lcdWriteQMac(0xFF);
007488  904818     MOV.B [W8+9], W0
00748A  E00400     CP0.B W0
00748C  32000B     BRA Z, 0x74A4
00748E  80B150     MOV 0x162A, W0
007490  2002A1     MOV #0x2A, W1
007492  781801     MOV W1, [W0++]
007494  88B150     MOV W0, 0x162A
007496  220A21     MOV #0x20A2, W1
007498  500F81     SUB W0, W1, [W15]
00749A  3A000E     BRA NZ, 0x74B8
00749C  2FE000     MOV #0xFE00, W0
00749E  400001     ADD W0, W1, W0
0074A0  88B150     MOV W0, 0x162A
0074A2  37000A     BRA 0x74B8
0074A4  80B150     MOV 0x162A, W0
0074A6  200FF1     MOV #0xFF, W1
0074A8  781801     MOV W1, [W0++]
0074AA  88B150     MOV W0, 0x162A
0074AC  220A21     MOV #0x20A2, W1
0074AE  500F81     SUB W0, W1, [W15]
0074B0  3A0003     BRA NZ, 0x74B8
0074B2  2FE000     MOV #0xFE00, W0
0074B4  400001     ADD W0, W1, W0
0074B6  88B150     MOV W0, 0x162A
189:                   if(grid[10]){lcdWriteQMac('*');} else lcdWriteQMac(0xFF);
0074B8  904828     MOV.B [W8+10], W0
0074BA  E00400     CP0.B W0
0074BC  32000B     BRA Z, 0x74D4
0074BE  80B150     MOV 0x162A, W0
0074C0  2002A1     MOV #0x2A, W1
0074C2  781801     MOV W1, [W0++]
0074C4  88B150     MOV W0, 0x162A
0074C6  220A21     MOV #0x20A2, W1
0074C8  500F81     SUB W0, W1, [W15]
0074CA  3A000E     BRA NZ, 0x74E8
0074CC  2FE000     MOV #0xFE00, W0
0074CE  400001     ADD W0, W1, W0
0074D0  88B150     MOV W0, 0x162A
0074D2  37000A     BRA 0x74E8
0074D4  80B150     MOV 0x162A, W0
0074D6  200FF1     MOV #0xFF, W1
0074D8  781801     MOV W1, [W0++]
0074DA  88B150     MOV W0, 0x162A
0074DC  220A21     MOV #0x20A2, W1
0074DE  500F81     SUB W0, W1, [W15]
0074E0  3A0003     BRA NZ, 0x74E8
0074E2  2FE000     MOV #0xFE00, W0
0074E4  400001     ADD W0, W1, W0
0074E6  88B150     MOV W0, 0x162A
190:                   if(grid[11]){lcdWriteQMac('*');} else lcdWriteQMac(0xFF);
0074E8  904838     MOV.B [W8+11], W0
0074EA  E00400     CP0.B W0
0074EC  32000B     BRA Z, 0x7504
0074EE  80B150     MOV 0x162A, W0
0074F0  2002A1     MOV #0x2A, W1
0074F2  781801     MOV W1, [W0++]
0074F4  88B150     MOV W0, 0x162A
0074F6  220A21     MOV #0x20A2, W1
0074F8  500F81     SUB W0, W1, [W15]
0074FA  3A000E     BRA NZ, 0x7518
0074FC  2FE000     MOV #0xFE00, W0
0074FE  400001     ADD W0, W1, W0
007500  88B150     MOV W0, 0x162A
007502  37000A     BRA 0x7518
007504  80B150     MOV 0x162A, W0
007506  200FF1     MOV #0xFF, W1
007508  781801     MOV W1, [W0++]
00750A  88B150     MOV W0, 0x162A
00750C  220A21     MOV #0x20A2, W1
00750E  500F81     SUB W0, W1, [W15]
007510  3A0003     BRA NZ, 0x7518
007512  2FE000     MOV #0xFE00, W0
007514  400001     ADD W0, W1, W0
007516  88B150     MOV W0, 0x162A
191:                   lcdSetCursorQ(col, 2);
007518  B3C021     MOV.B #0x2, W1
00751A  784009     MOV.B W9, W0
00751C  07FC2A     RCALL lcdSetCursorQ
192:                   if(grid[4]){lcdWriteQMac('*');} else lcdWriteQMac(0xFF);
00751E  904048     MOV.B [W8+4], W0
007520  E00400     CP0.B W0
007522  32000B     BRA Z, 0x753A
007524  80B150     MOV 0x162A, W0
007526  2002A1     MOV #0x2A, W1
007528  781801     MOV W1, [W0++]
00752A  88B150     MOV W0, 0x162A
00752C  220A21     MOV #0x20A2, W1
00752E  500F81     SUB W0, W1, [W15]
007530  3A000E     BRA NZ, 0x754E
007532  2FE000     MOV #0xFE00, W0
007534  400001     ADD W0, W1, W0
007536  88B150     MOV W0, 0x162A
007538  37000A     BRA 0x754E
00753A  80B150     MOV 0x162A, W0
00753C  200FF1     MOV #0xFF, W1
00753E  781801     MOV W1, [W0++]
007540  88B150     MOV W0, 0x162A
007542  220A21     MOV #0x20A2, W1
007544  500F81     SUB W0, W1, [W15]
007546  3A0003     BRA NZ, 0x754E
007548  2FE000     MOV #0xFE00, W0
00754A  400001     ADD W0, W1, W0
00754C  88B150     MOV W0, 0x162A
193:                   if(grid[5]){lcdWriteQMac('*');} else lcdWriteQMac(0xFF);
00754E  904058     MOV.B [W8+5], W0
007550  E00400     CP0.B W0
007552  32000B     BRA Z, 0x756A
007554  80B150     MOV 0x162A, W0
007556  2002A1     MOV #0x2A, W1
007558  781801     MOV W1, [W0++]
00755A  88B150     MOV W0, 0x162A
00755C  220A21     MOV #0x20A2, W1
00755E  500F81     SUB W0, W1, [W15]
007560  3A000E     BRA NZ, 0x757E
007562  2FE000     MOV #0xFE00, W0
007564  400001     ADD W0, W1, W0
007566  88B150     MOV W0, 0x162A
007568  37000A     BRA 0x757E
00756A  80B150     MOV 0x162A, W0
00756C  200FF1     MOV #0xFF, W1
00756E  781801     MOV W1, [W0++]
007570  88B150     MOV W0, 0x162A
007572  220A21     MOV #0x20A2, W1
007574  500F81     SUB W0, W1, [W15]
007576  3A0003     BRA NZ, 0x757E
007578  2FE000     MOV #0xFE00, W0
00757A  400001     ADD W0, W1, W0
00757C  88B150     MOV W0, 0x162A
194:                   if(grid[6]){lcdWriteQMac('*');} else lcdWriteQMac(0xFF);
00757E  904068     MOV.B [W8+6], W0
007580  E00400     CP0.B W0
007582  32000B     BRA Z, 0x759A
007584  80B150     MOV 0x162A, W0
007586  2002A1     MOV #0x2A, W1
007588  781801     MOV W1, [W0++]
00758A  88B150     MOV W0, 0x162A
00758C  220A21     MOV #0x20A2, W1
00758E  500F81     SUB W0, W1, [W15]
007590  3A000E     BRA NZ, 0x75AE
007592  2FE000     MOV #0xFE00, W0
007594  400001     ADD W0, W1, W0
007596  88B150     MOV W0, 0x162A
007598  37000A     BRA 0x75AE
00759A  80B150     MOV 0x162A, W0
00759C  200FF1     MOV #0xFF, W1
00759E  781801     MOV W1, [W0++]
0075A0  88B150     MOV W0, 0x162A
0075A2  220A21     MOV #0x20A2, W1
0075A4  500F81     SUB W0, W1, [W15]
0075A6  3A0003     BRA NZ, 0x75AE
0075A8  2FE000     MOV #0xFE00, W0
0075AA  400001     ADD W0, W1, W0
0075AC  88B150     MOV W0, 0x162A
195:                   if(grid[7]){lcdWriteQMac('*');} else lcdWriteQMac(0xFF);
0075AE  904078     MOV.B [W8+7], W0
0075B0  E00400     CP0.B W0
0075B2  32000B     BRA Z, 0x75CA
0075B4  80B150     MOV 0x162A, W0
0075B6  2002A1     MOV #0x2A, W1
0075B8  781801     MOV W1, [W0++]
0075BA  88B150     MOV W0, 0x162A
0075BC  220A21     MOV #0x20A2, W1
0075BE  500F81     SUB W0, W1, [W15]
0075C0  3A000E     BRA NZ, 0x75DE
0075C2  2FE000     MOV #0xFE00, W0
0075C4  400001     ADD W0, W1, W0
0075C6  88B150     MOV W0, 0x162A
0075C8  37000A     BRA 0x75DE
0075CA  80B150     MOV 0x162A, W0
0075CC  200FF1     MOV #0xFF, W1
0075CE  781801     MOV W1, [W0++]
0075D0  88B150     MOV W0, 0x162A
0075D2  220A21     MOV #0x20A2, W1
0075D4  500F81     SUB W0, W1, [W15]
0075D6  3A0003     BRA NZ, 0x75DE
0075D8  2FE000     MOV #0xFE00, W0
0075DA  400001     ADD W0, W1, W0
0075DC  88B150     MOV W0, 0x162A
196:                   lcdSetCursorQ(col, 3);
0075DE  B3C031     MOV.B #0x3, W1
0075E0  784009     MOV.B W9, W0
0075E2  07FBC7     RCALL lcdSetCursorQ
197:                   if(grid[0]){lcdWriteQMac('*');} else lcdWriteQMac(0xFF);
0075E4  E00418     CP0.B [W8]
0075E6  32000B     BRA Z, 0x75FE
0075E8  80B150     MOV 0x162A, W0
0075EA  2002A1     MOV #0x2A, W1
0075EC  781801     MOV W1, [W0++]
0075EE  88B150     MOV W0, 0x162A
0075F0  220A21     MOV #0x20A2, W1
0075F2  500F81     SUB W0, W1, [W15]
0075F4  3A000E     BRA NZ, 0x7612
0075F6  2FE000     MOV #0xFE00, W0
0075F8  400001     ADD W0, W1, W0
0075FA  88B150     MOV W0, 0x162A
0075FC  37000A     BRA 0x7612
0075FE  80B150     MOV 0x162A, W0
007600  200FF1     MOV #0xFF, W1
007602  781801     MOV W1, [W0++]
007604  88B150     MOV W0, 0x162A
007606  220A21     MOV #0x20A2, W1
007608  500F81     SUB W0, W1, [W15]
00760A  3A0003     BRA NZ, 0x7612
00760C  2FE000     MOV #0xFE00, W0
00760E  400001     ADD W0, W1, W0
007610  88B150     MOV W0, 0x162A
198:                   if(grid[1]){lcdWriteQMac('*');} else lcdWriteQMac(0xFF);
007612  904018     MOV.B [W8+1], W0
007614  E00400     CP0.B W0
007616  32000B     BRA Z, 0x762E
007618  80B150     MOV 0x162A, W0
00761A  2002A1     MOV #0x2A, W1
00761C  781801     MOV W1, [W0++]
00761E  88B150     MOV W0, 0x162A
007620  220A21     MOV #0x20A2, W1
007622  500F81     SUB W0, W1, [W15]
007624  3A000E     BRA NZ, 0x7642
007626  2FE000     MOV #0xFE00, W0
007628  400001     ADD W0, W1, W0
00762A  88B150     MOV W0, 0x162A
00762C  37000A     BRA 0x7642
00762E  80B150     MOV 0x162A, W0
007630  200FF1     MOV #0xFF, W1
007632  781801     MOV W1, [W0++]
007634  88B150     MOV W0, 0x162A
007636  220A21     MOV #0x20A2, W1
007638  500F81     SUB W0, W1, [W15]
00763A  3A0003     BRA NZ, 0x7642
00763C  2FE000     MOV #0xFE00, W0
00763E  400001     ADD W0, W1, W0
007640  88B150     MOV W0, 0x162A
199:                   if(grid[2]){lcdWriteQMac('*');} else lcdWriteQMac(0xFF);
007642  904028     MOV.B [W8+2], W0
007644  E00400     CP0.B W0
007646  32000B     BRA Z, 0x765E
007648  80B150     MOV 0x162A, W0
00764A  2002A1     MOV #0x2A, W1
00764C  781801     MOV W1, [W0++]
00764E  88B150     MOV W0, 0x162A
007650  220A21     MOV #0x20A2, W1
007652  500F81     SUB W0, W1, [W15]
007654  3A000E     BRA NZ, 0x7672
007656  2FE000     MOV #0xFE00, W0
007658  400001     ADD W0, W1, W0
00765A  88B150     MOV W0, 0x162A
00765C  37000A     BRA 0x7672
00765E  80B150     MOV 0x162A, W0
007660  200FF1     MOV #0xFF, W1
007662  781801     MOV W1, [W0++]
007664  88B150     MOV W0, 0x162A
007666  220A21     MOV #0x20A2, W1
007668  500F81     SUB W0, W1, [W15]
00766A  3A0003     BRA NZ, 0x7672
00766C  2FE000     MOV #0xFE00, W0
00766E  400001     ADD W0, W1, W0
007670  88B150     MOV W0, 0x162A
200:                   if(grid[3]){lcdWriteQMac('*');} else lcdWriteQMac(0xFF);
007672  904038     MOV.B [W8+3], W0
007674  E00400     CP0.B W0
007676  32000B     BRA Z, 0x768E
007678  80B150     MOV 0x162A, W0
00767A  2002A1     MOV #0x2A, W1
00767C  781801     MOV W1, [W0++]
00767E  88B150     MOV W0, 0x162A
007680  220A21     MOV #0x20A2, W1
007682  500F81     SUB W0, W1, [W15]
007684  3A000E     BRA NZ, 0x76A2
007686  2FE000     MOV #0xFE00, W0
007688  400001     ADD W0, W1, W0
00768A  88B150     MOV W0, 0x162A
00768C  37000A     BRA 0x76A2
00768E  80B150     MOV 0x162A, W0
007690  200FF1     MOV #0xFF, W1
007692  781801     MOV W1, [W0++]
007694  88B150     MOV W0, 0x162A
007696  220A21     MOV #0x20A2, W1
007698  500F81     SUB W0, W1, [W15]
00769A  3A0003     BRA NZ, 0x76A2
00769C  2FE000     MOV #0xFE00, W0
00769E  400001     ADD W0, W1, W0
0076A0  88B150     MOV W0, 0x162A
201:               }
0076A2  BE044F     MOV.D [--W15], W8
0076A4  060000     RETURN
202:               
203:               void lcdDrawSplash(void){
0076E0  FA0010     LNK #0x10
0076E2  BE9F88     MOV.D W8, [W15++]
0076E4  BE9F8A     MOV.D W10, [W15++]
0076E6  BE9F8C     MOV.D W12, [W15++]
007710  90004E     MOV [W14+8], W0
007712  9000FE     MOV [W14+14], W1
007714  500601     SUB W0, W1, W12
00771A  4081F4     ADD W1, #0x14, W3
00771C  980763     MOV W3, [W14+12]
00771E  37001B     BRA 0x7756
007756  9001FE     MOV [W14+14], W3
007758  448403     ADD W9, W3, W8
00775A  90006E     MOV [W14+12], W0
00775C  400509     ADD W0, W9, W10
00775E  37FFE0     BRA 0x7720
204:                   int i, j, k, size=20;
205:                   int frames = 6;
206:                   unsigned char splash[4][size];
0076EC  B0052F     ADD #0x52, W15
0076EE  780080     MOV W0, W1
0076F0  980741     MOV W1, [W14+8]
0076F2  780181     MOV W1, W3
0076F4  980751     MOV W1, [W14+10]
207:                   //unsigned char* ptrA = splash;
208:                   
209:                   i=0;
0076F6  EB0000     CLR W0
0076F8  980770     MOV W0, [W14+14]
210:                   while(i<frames){
00779C  9001FE     MOV [W14+14], W3
00779E  518FE5     SUB W3, #0x5, [W15]
0077A0  34FFB4     BRA LE, 0x770A
211:                       if(_T1IF){    
00770A  AB6800     BTST IFS0, #3
00770C  320041     BRA Z, 0x7790
212:                           _T1IF=0;
00770E  A96800     BCLR IFS0, #3
007716  EB0680     CLR W13
213:                           for(j=0; j<4; j++){
007718  EB0480     CLR W9
00774C  E80489     INC W9, W9
00774E  460673     ADD W12, #0x13, W12
007750  4E86E0     ADDC W13, #0x0, W13
007752  548FE4     SUB W9, #0x4, [W15]
007754  320005     BRA Z, 0x7760
214:                               for(k=0; k<size; k++){
007748  540F8A     SUB W8, W10, [W15]
00774A  3AFFEA     BRA NZ, 0x7720
215:                                   if(j>=0 && j<size){
007720  E00009     CP0 W9
007722  35000F     BRA LT, 0x7742
007724  548FF3     SUB W9, #0x13, [W15]
007726  3C000D     BRA GT, 0x7742
007740  370002     BRA 0x7746
216:                                       srand(i+j+k+TMR1);
007728  780008     MOV W8, W0
00772A  B40100     ADD TMR1, WREG
00772C  780000     MOV W0, W0
00772E  07C85B     RCALL _srand
217:                                       unsigned char randchar = (unsigned char)(rand() % 93 + 33);
007730  07C813     RCALL _rand
007734  2005D3     MOV #0x5D, W3
007736  090011     REPEAT #0x11
007738  D80003     DIV.SW W0, W3
00773A  FD0080     EXCH W0, W1
00773C  B3C211     MOV.B #0x21, W1
00773E  404A01     ADD.B W0, W1, [W4]
218:                                       splash[j][k]=randchar;
007732  44020C     ADD W8, W12, W4
219:                                   }
220:                                   else splash[j][k] = ' ';
0076FA  B3C20B     MOV.B #0x20, W11
007742  44000C     ADD W8, W12, W0
007744  78480B     MOV.B W11, [W0]
007746  E80408     INC W8, W8
221:                               }
222:                           }
223:                           lcdClearQ(); 
007760  07FAFD     RCALL lcdClearQ
224:                           lcdSetCursorQ(0,0);
007762  EB4080     CLR.B W1
007764  784001     MOV.B W1, W0
007766  07FB05     RCALL lcdSetCursorQ
225:                           lcdWriteStringQ(&splash[3][0]);
0076FC  B003C3     ADD #0x3C, W3
0076FE  980733     MOV W3, [W14+6]
007768  90003E     MOV [W14+6], W0
00776A  07FB17     RCALL lcdWriteStringQ
226:                           lcdSetCursorQ(0,1);
00776C  B3C011     MOV.B #0x1, W1
00776E  EB4000     CLR.B W0
007770  07FB00     RCALL lcdSetCursorQ
227:                           lcdWriteStringQ(&splash[2][0]);
007700  B00281     ADD #0x28, W1
007702  980721     MOV W1, [W14+4]
007772  90002E     MOV [W14+4], W0
007774  07FB12     RCALL lcdWriteStringQ
228:                           lcdSetCursorQ(0,2);
007776  B3C021     MOV.B #0x2, W1
007778  EB4000     CLR.B W0
00777A  07FAFB     RCALL lcdSetCursorQ
229:                           lcdWriteStringQ(&splash[1][0]);
007704  9001DE     MOV [W14+10], W3
007706  4181F4     ADD W3, #0x14, W3
007708  980713     MOV W3, [W14+2]
00777C  90001E     MOV [W14+2], W0
00777E  07FB0D     RCALL lcdWriteStringQ
230:                           lcdSetCursorQ(0,3);
007780  B3C031     MOV.B #0x3, W1
007782  EB4000     CLR.B W0
007784  07FAF6     RCALL lcdSetCursorQ
231:                           lcdWriteStringQ(&splash[0][0]);
007786  90005E     MOV [W14+10], W0
007788  07FB08     RCALL lcdWriteStringQ
232:                           //ptrA++;
233:                           i++;
00778A  9000FE     MOV [W14+14], W1
00778C  E80081     INC W1, W1
00778E  980771     MOV W1, [W14+14]
234:                       }
235:                       if(_T3IF) {
007790  AB0801     BTST 0x801, #0
007792  320002     BRA Z, 0x7798
236:                           lcdPoll();
007794  07FF88     RCALL lcdPoll
237:                           _T3IF=0;
007796  A90801     BCLR 0x801, #0
238:                       }
239:                       Delay_us(50);
007798  200320     MOV #0x32, W0
00779A  0705F2     RCALL Delay_us
240:                   }
241:               }
0076E8  78000F     MOV W15, W0
0076EA  780F0F     MOV W15, [W14]
0077A2  78079E     MOV [W14], W15
0077A4  BE064F     MOV.D [--W15], W12
0077A6  BE054F     MOV.D [--W15], W10
0077A8  BE044F     MOV.D [--W15], W8
0077AA  FA8000     ULNK
0077AC  060000     RETURN
242:               
243:               void lcdPoll(void){  
244:                   if(lcdWritePtr!=lcdReadPtr){   
0076A6  80B160     MOV 0x162C, W0
0076A8  E3162A     CP 0x162A
0076AA  320018     BRA Z, 0x76DC
245:                       if((*lcdReadPtr>>8)&1) LCD_RS=0;
0076AC  201001     MOV #0x100, W1
0076AE  608090     AND W1, [W0], W1
0076B0  320002     BRA Z, 0x76B6
0076B2  A9EE45     BCLR 0xE45, #7
0076B4  370001     BRA 0x76B8
246:                       else LCD_RS=1;
0076B6  A8EE45     BSET 0xE45, #7
247:                       if((*lcdReadPtr>>9)&1) PR3=0x2DF0; //2DF0 for ~1.3mS
0076B8  202001     MOV #0x200, W1
0076BA  608090     AND W1, [W0], W1
0076BC  320003     BRA Z, 0x76C4
0076BE  22DF01     MOV #0x2DF0, W1
0076C0  880871     MOV W1, PR3
0076C2  370002     BRA 0x76C8
248:                       else PR3=0x0120; //120 for ~40uS
0076C4  201201     MOV #0x120, W1
0076C6  880871     MOV W1, PR3
249:                       PMDIN1=(*lcdReadPtr++)&0x00FF;
0076C8  200FF1     MOV #0xFF, W1
0076CA  6080B0     AND W1, [W0++], W1
0076CC  883041     MOV W1, PMDIN1
0076CE  88B160     MOV W0, 0x162C
250:                       if(lcdReadPtr==&lcdBuf[LCDBUF]) lcdReadPtr=lcdBuf;
0076D0  220A21     MOV #0x20A2, W1
0076D2  500F81     SUB W0, W1, [W15]
0076D4  3A0003     BRA NZ, 0x76DC
0076D6  2FE000     MOV #0xFE00, W0
0076D8  400001     ADD W0, W1, W0
0076DA  88B160     MOV W0, 0x162C
251:                   } 
252:                   TMR3=0x0000; 
0076DC  EF210A     CLR TMR3
253:               }
0076DE  060000     RETURN
254:               
255:               //ALWAYS SENDS, blocks program
256:               void lcdBlockingSend(unsigned char data){
0077AE  BE9F88     MOV.D W8, [W15++]
0077B0  781F8A     MOV W10, [W15++]
0077B2  784500     MOV.B W0, W10
257:                   while(PMMODEbits.BUSY)Delay_us(2);
0077B4  E20602     CP0 PMMODE
0077B6  3D0007     BRA GE, 0x77C6
0077B8  200028     MOV #0x2, W8
0077BA  280009     MOV #0x8000, W9
0077BC  780008     MOV W8, W0
0077BE  0705E0     RCALL Delay_us
0077C0  803011     MOV PMMODE, W1
0077C2  648001     AND W9, W1, W0
0077C4  3AFFFB     BRA NZ, 0x77BC
258:                   PMDIN1=data; 
0077C6  FB850A     ZE W10, W10
0077C8  88304A     MOV W10, PMDIN1
259:               }
0077CA  78054F     MOV [--W15], W10
0077CC  BE044F     MOV.D [--W15], W8
0077CE  060000     RETURN
260:               //ALWAYS SENDS, blocks program
261:               void lcdBlockingClear(void){
0077D0  BE9F88     MOV.D W8, [W15++]
262:                   while(PMMODEbits.BUSY)Delay_us(2);
0077D2  E20602     CP0 PMMODE
0077D4  3D0007     BRA GE, 0x77E4
0077D6  200028     MOV #0x2, W8
0077D8  280009     MOV #0x8000, W9
0077DA  780008     MOV W8, W0
0077DC  0705D1     RCALL Delay_us
0077DE  803011     MOV PMMODE, W1
0077E0  648001     AND W9, W1, W0
0077E2  3AFFFB     BRA NZ, 0x77DA
263:                   PMDIN1=LCD_CLEARDISPLAY; 
0077E4  200010     MOV #0x1, W0
0077E6  883040     MOV W0, PMDIN1
264:               }
0077E8  BE044F     MOV.D [--W15], W8
0077EA  060000     RETURN
265:               
266:               //ALWAYS SENDS, blocks program
267:               void lcdBlockingReturn(void){
0077EC  BE9F88     MOV.D W8, [W15++]
268:                   while(PMMODEbits.BUSY)Delay_us(2);
0077EE  E20602     CP0 PMMODE
0077F0  3D0007     BRA GE, 0x7800
0077F2  200028     MOV #0x2, W8
0077F4  280009     MOV #0x8000, W9
0077F6  780008     MOV W8, W0
0077F8  0705C3     RCALL Delay_us
0077FA  803011     MOV PMMODE, W1
0077FC  648001     AND W9, W1, W0
0077FE  3AFFFB     BRA NZ, 0x77F6
269:                   PMDIN1=LCD_RETURNHOME;
007800  200020     MOV #0x2, W0
007802  883040     MOV W0, PMDIN1
270:               }
007804  BE044F     MOV.D [--W15], W8
007806  060000     RETURN
271:               
272:               void lcdInit(void){
273:                   LCD_RS=0;
007808  A9EE45     BCLR 0xE45, #7
274:                   lcdBlockingSend(0x38);              //function set, 8 bits, 2 line disp, 5x8
00780A  B3C380     MOV.B #0x38, W0
00780C  07FFD0     RCALL lcdBlockingSend
275:                   Delay_us(4500);                //>4.1 mS required
00780E  211940     MOV #0x1194, W0
007810  0705B7     RCALL Delay_us
276:                   lcdBlockingSend(0x0C);              //display on, cursor on, blink on   (0f for blink+cursor)
007812  B3C0C0     MOV.B #0xC, W0
007814  07FFCC     RCALL lcdBlockingSend
277:                   Delay_us(4500);
007816  211940     MOV #0x1194, W0
007818  0705B3     RCALL Delay_us
278:                   lcdBlockingClear();                    //Display Clear  
00781A  07FFDA     RCALL lcdBlockingClear
279:                   Delay_us(1800);                //>1.64mS required
00781C  207080     MOV #0x708, W0
00781E  0705B0     RCALL Delay_us
280:                   lcdBlockingSend(0x06);               // entry Mode Set
007820  B3C060     MOV.B #0x6, W0
007822  07FFC5     RCALL lcdBlockingSend
281:                   Delay_us(200);
007824  200C80     MOV #0xC8, W0
007826  0705AC     RCALL Delay_us
282:                   lcdBlockingReturn();
007828  07FFE1     RCALL lcdBlockingReturn
283:                   Delay_us(1500);
00782A  205DC0     MOV #0x5DC, W0
00782C  0705A9     RCALL Delay_us
284:                   
285:                   //lcdCustomSymbols();
286:                   Delay_us(200);
00782E  200C80     MOV #0xC8, W0
007830  0705A7     RCALL Delay_us
287:                   lcdBlockingClear();                         //Display Clear  
007832  07FFCE     RCALL lcdBlockingClear
288:                   Delay_us(1500);
007834  205DC0     MOV #0x5DC, W0
007836  0705A4     RCALL Delay_us
289:                   lcdBlockingReturn();
007838  07FFD9     RCALL lcdBlockingReturn
290:                   Delay_us(200);
00783A  200C80     MOV #0xC8, W0
00783C  0705A1     RCALL Delay_us
291:               }
00783E  060000     RETURN
---  C:/Users/ryan/Documents/seniorproject/ps-040/main.c  -----------------------------------------------
1:                 #include <xc.h>
2:                 #include <p33EP512GM310.h>
3:                 #include <dsp.h>
4:                 #include "common.h"
5:                 #include "devInits.h"
6:                 #include "utilities.h"
7:                 #include "audio.h"
8:                 #include "sounds.h"
9:                 #include "flash.h"
10:                #include "plcd.h"
11:                #include "cons.h"
12:                
13:                #pragma config ICS = PGD1       //pgeDC 1 is used
14:                #pragma config JTAGEN = OFF     //disable jtag
15:                #pragma config BOREN = OFF      //disable brown out (FYI possible erratta case in 33eMU810)
16:                #pragma config FWDTEN = OFF     //disable watchdog timer 
17:                #pragma config GCP = OFF        //disable general segment code protect
18:                #pragma config PLLKEN = ON      //wait for PLL lock
19:                #pragma config POSCMD = NONE    //no external oscillator
20:                #pragma config OSCIOFNC = OFF   //OSC2 is clock output
21:                #pragma config FNOSC = FRCPLL   //clock source
22:                
23:                /* Data Buffers & index variables */
24:                fractional  outputA[STREAMBUF], outputB[STREAMBUF],
25:                            streamA[STREAMBUF], streamB[STREAMBUF];
26:                unsigned int write_ptr=0, rw=0, frameReady=0;
27:                
28:                unsigned char   TxBufferA[FLASH_DMAXFER_BYTES] __attribute__((space(xmemory))),
29:                                RxBufferA[FLASH_DMAXFER_BYTES] __attribute__((space(xmemory)));
30:                fractional      RxBufferB[STREAMBUF] __attribute__((space(xmemory)));
31:                
32:                /* Debug Variables */
33:                unsigned int process_time=0, flash_time = 0;
34:                
35:                struct sflags stat = {  .UART_ON = FALSE,
36:                                        .TEST_SIN = FALSE,
37:                                        .DMA_JUSTREAD = FALSE,
38:                                        .DMA_READING = FALSE,
39:                                        .hard_clipped = FALSE};
40:                
41:                
42:                /* Screen state variables */
43:                enum screenStruc state = scrnFX;
44:                enum screenStruc laststate = invalid;
45:                enum fxStruct fxUnits[NUMFXUNITS]={0,0};
46:                
47:                /* Buttons & Potentiometers */
48:                struct ctrlsrfc ctrl = {0};
49:                
50:                unsigned char btread;
51:                
52:                void initBuffers(void){
0090A4  BE9F88     MOV.D W8, [W15++]
0090A8  21AA28     MOV #0x1AA2, W8
0090AA  EB0480     CLR W9
0090AE  21CA26     MOV #0x1CA2, W6
0090B0  EB0380     CLR W7
0090B4  B90161     MUL.SU W0, #1, W2
0090B6  410102     ADD W2, W2, W2
0090B8  498183     ADDC W3, W3, W3
0090CA  2163A4     MOV #0x163A, W4
0090CC  EB0280     CLR W5
0090DC  210008     MOV #0x1000, W8
0090DE  EB0480     CLR W9
0090E2  212006     MOV #0x1200, W6
0090E4  EB0380     CLR W7
0090E8  B90161     MUL.SU W0, #1, W2
53:                    int i;
54:                    
55:                    for(i=0; i<STREAMBUF; i++){
0090A6  EB0000     CLR W0
0090B2  201005     MOV #0x100, W5
0090C2  E80000     INC W0, W0
0090C4  500F85     SUB W0, W5, [W15]
0090C6  3AFFF6     BRA NZ, 0x90B4
0090C8  EB0000     CLR W0
56:                        streamA[i]=0;
0090AC  EB0080     CLR W1
0090BA  410208     ADD W2, W8, W4
0090BC  780A01     MOV W1, [W4]
57:                        streamB[i]=0;
0090BE  410106     ADD W2, W6, W2
0090C0  780901     MOV W1, [W2]
58:                    }
59:                    
60:                    for(i=0; i<BUTTONS; i++)
0090D4  E80000     INC W0, W0
0090D6  500FF3     SUB W0, #0x13, [W15]
0090D8  3AFFFB     BRA NZ, 0x90D0
0090DA  EB0000     CLR W0
61:                        ctrl.pad[i]=0;
0090CE  EB4100     CLR.B W2
0090D0  400084     ADD W0, W4, W1
0090D2  784882     MOV.B W2, [W1]
62:                    
63:                    for(i=0; i<FLASH_DMAXFER_BYTES; i++){
0090E6  202005     MOV #0x200, W5
0090F2  E80000     INC W0, W0
0090F4  500F85     SUB W0, W5, [W15]
0090F6  3AFFF8     BRA NZ, 0x90E8
64:                        TxBufferA[i]=0;
0090E0  EB4080     CLR.B W1
0090EA  410208     ADD W2, W8, W4
0090EC  784A01     MOV.B W1, [W4]
65:                        RxBufferA[i]=0;
0090EE  410106     ADD W2, W6, W2
0090F0  784901     MOV.B W1, [W2]
66:                    }
67:                }
0090F8  BE044F     MOV.D [--W15], W8
0090FA  060000     RETURN
68:                
69:                int main(void) {
0090FC  BE9F88     MOV.D W8, [W15++]
0090FE  BE9F8A     MOV.D W10, [W15++]
009100  BE9F8C     MOV.D W12, [W15++]
009102  781F8E     MOV W14, [W15++]
70:                    initPorts();                    // Configure io device & adc 
009104  07F946     RCALL initPorts
71:                    initBuffers();
009106  07FFCE     RCALL initBuffers
72:                    initDMA();
009108  07FA93     RCALL initDMA
73:                    initSPI3_MEM();                 // Start flash 
00910A  07FABF     RCALL initSPI3_MEM
74:                    initDCI_DAC();                  // Configure & enable DAC
00910C  07FA6B     RCALL initDCI_DAC
75:                    //genSine(STREAMBUF);
76:                    initADC1();                     // Configure & enable internal ADC
00910E  07FA0F     RCALL initADC1
77:                    initPMP();
009110  07FA2A     RCALL initPMP
78:                    initQEI_ENC();
009112  07FADD     RCALL initQEI_ENC
79:                    if(stat.UART_ON) initUART1();       // Configure & enable UART
009114  216340     MOV #0x1634, W0
009116  E00410     CP0.B [W0]
009118  320001     BRA Z, 0x911C
00911A  07F9F6     RCALL initUART1
80:                    
81:                    initT1();                           // Configure & start T1 display
00911C  07FA38     RCALL initT1
82:                    //initT2();                         // Configure & start T2 btns & pots
83:                    initT3();                           // Configure & start T3 for lcd
00911E  07FA4C     RCALL initT3
84:                    //initT5();
85:                    lcdDrawSplash();
009120  07F2DF     RCALL lcdDrawSplash
86:                    fractional *ping, *pong;
87:                    
88:                    while(1){    
89:                        if(frameReady) {
00912C  E21604     CP0 frameReady
00912E  320025     BRA Z, 0x917A
90:                            scanButtons();                  // Read button matrix
009130  07F72D     RCALL scanButtons
91:                            if(_AD1IF) readPots();          // Check potentiometers
009122  22000B     MOV #0x2000, W11
009132  804001     MOV IFS0, W1
009134  658001     AND W11, W1, W0
009136  320001     BRA Z, 0x913A
009138  07F7BF     RCALL readPots
92:                            
93:                            if(rw){
00913A  E21602     CP0 rw
00913C  320003     BRA Z, 0x9144
94:                                ping = streamA;
009140  21AA28     MOV #0x1AA2, W8
009142  370002     BRA 0x9148
95:                                pong = outputB;
00912A  218A2E     MOV #0x18A2, W14
00913E  78048E     MOV W14, W9
96:                            }else{
97:                                ping = streamB;
009128  21CA2D     MOV #0x1CA2, W13
009146  78040D     MOV W13, W8
98:                                pong = outputA;
009126  216A2C     MOV #0x16A2, W12
009144  78048C     MOV W12, W9
99:                            }
100:               
101:                           if(stat.DMA_JUSTREAD==TRUE){    
009124  21636A     MOV #0x1636, W10
009148  EBC000     SETM.B W0
00914A  104F9A     SUBR.B W0, [W10], [W15]
00914C  3A0006     BRA NZ, 0x915A
102:                               flashProcessRead();                             // Process DMA requested read data
00914E  07FC0E     RCALL flashProcessRead
103:                               stat.DMA_JUSTREAD=FALSE;
009150  EB4D00     CLR.B [W10]
104:                               VectorCopy(STREAMBUF, ping, RxBufferB);
009152  214002     MOV #0x1400, W2
009154  780088     MOV W8, W1
009156  201000     MOV #0x100, W0
009158  07B9AD     RCALL _VectorCopy
105:                               //VectorAdd(STREAMBUF, ping, ping, RxBufferB);
106:                           }
107:                           
108:                           consPADops(ping);
00915A  780008     MOV W8, W0
00915C  07FDD9     RCALL consPADops
109:                           
110:                           /* State dependent controls*/
111:                           if(state==scrnEDITone || state== debugscrnBUFFERS) consEDITops();
00915E  80B050     MOV state, W0
009160  500FE1     SUB W0, #0x1, [W15]
009162  320002     BRA Z, 0x9168
009164  500FE4     SUB W0, #0x4, [W15]
009166  3A0001     BRA NZ, 0x916A
009168  07FEDF     RCALL consEDITops
112:                           
113:                           
114:                           processAudio(ping, pong);
00916A  BE0008     MOV.D W8, W0
00916C  07FD6D     RCALL processAudio
115:                           process_time=write_ptr;    //DEBUG
00916E  80B000     MOV write_ptr, W0
009170  88B030     MOV W0, process_time
116:                           while(!SS3a);               //wait for flash transmissions to complete
009172  AB2E54     BTST LATF, #1
009174  32FFFE     BRA Z, 0x9172
117:                           flash_time=write_ptr;
009176  88B040     MOV W0, flash_time
118:                           frameReady=0;
009178  EF3604     CLR frameReady
119:                       }
120:                       if(_T1IF){
00917A  AB6800     BTST IFS0, #3
00917C  320002     BRA Z, 0x9182
121:                           display();
00917E  07F880     RCALL display
122:                           _T1IF=0;
009180  A96800     BCLR IFS0, #3
123:                       }
124:                       if(_T3IF) {
009182  AB0801     BTST 0x801, #0
009184  32FFD3     BRA Z, 0x912C
125:                           lcdPoll();
009186  07F28F     RCALL lcdPoll
126:                           _T3IF=0;
009188  A90801     BCLR 0x801, #0
00918A  37FFD0     BRA 0x912C
127:                       }
128:                   }
129:                   return 0;
130:               }
---  C:/Users/ryan/Documents/seniorproject/ps-040/flash.c  ----------------------------------------------
1:                 /*
2:                  This file has hardware routines for flash writing and DMA read/writes
3:                  */
4:                 #include <xc.h>
5:                 #include <dsp.h>
6:                 #include "flash.h"
7:                 #include "common.h"
8:                 
9:                 char receive;
10:                unsigned long  eraseAddr=0;
11:                struct clip_flash clipmap[FLASH_NUMCHUNKS];
12:                
13:                
14:                extern unsigned char    TxBufferA[FLASH_DMAXFER_BYTES]__attribute__((space(xmemory))), 
15:                                        RxBufferA[FLASH_DMAXFER_BYTES]__attribute__((space(xmemory)));
16:                extern fractional       RxBufferB[STREAMBUF] __attribute__((space(xmemory)));
17:                
18:                extern struct sflags stat;
19:                extern struct ctrlsrfc ctrl;
20:                
21:                void flashSoftSetup(void){
0086DC  FA001C     LNK #0x1C
0086DE  BE9F88     MOV.D W8, [W15++]
0086E0  BE9F8A     MOV.D W10, [W15++]
0086E2  BE9F8C     MOV.D W12, [W15++]
008712  50847B     SUB W1, #0x1B, W8
008714  44006C     ADD W8, #0xC, W0
008716  B80361     MUL.UU W0, #1, W6
008718  9FBF86     MOV W6, [W15-16]
00871A  9FBF97     MOV W7, [W15-14]
00871C  440670     ADD W8, #0x10, W12
00871E  EB0680     CLR W13
008720  440574     ADD W8, #0x14, W10
008722  EB0580     CLR W11
008724  440068     ADD W8, #0x8, W0
008726  B80361     MUL.UU W0, #1, W6
008728  9FB7E6     MOV W6, [W15-20]
00872A  9FB7F7     MOV W7, [W15-18]
00872C  440078     ADD W8, #0x18, W0
00872E  B80361     MUL.UU W0, #1, W6
008730  9FB7C6     MOV W6, [W15-24]
008732  9FB7D7     MOV W7, [W15-22]
008734  440079     ADD W8, #0x19, W0
008736  B80361     MUL.UU W0, #1, W6
008738  9FB7A6     MOV W6, [W15-28]
00873A  9FB7B7     MOV W7, [W15-26]
00873C  44007A     ADD W8, #0x1A, W0
00873E  B80361     MUL.UU W0, #1, W6
008740  9FB786     MOV W6, [W15-32]
008742  9FB797     MOV W7, [W15-30]
008744  44007B     ADD W8, #0x1B, W0
008746  B80361     MUL.UU W0, #1, W6
008748  9FAFE6     MOV W6, [W15-36]
00874A  9FAFF7     MOV W7, [W15-34]
00874C  540078     SUB W8, #0x18, W0
00874E  B80361     MUL.UU W0, #1, W6
008750  9FAFC6     MOV W6, [W15-40]
008752  9FAFD7     MOV W7, [W15-38]
008754  B9187C     MUL.SU W3, #28, W0
22:                    int i=1;
008710  200013     MOV #0x1, W3
23:                    unsigned long chunksize = (FLASH_MAX/FLASH_NUMCHUNKS);
24:                    
25:                    clipmap[0].start_address=0;
0086E4  B80060     MUL.UU W0, #0, W0
0086E6  891520     MOV W0, clipmap
0086E8  891531     MOV W1, 0x22A6
26:                    clipmap[0].read_index=clipmap[0].start_address;
0086EA  891580     MOV W0, 0x22B0
0086EC  891591     MOV W1, 0x22B2
27:                    clipmap[0].write_index=clipmap[0].start_address;
0086EE  8915A0     MOV W0, 0x22B4
0086F0  8915B1     MOV W1, 0x22B6
28:                    clipmap[0].erase_index=clipmap[0].start_address;
0086F2  8915C0     MOV W0, 0x22B8
0086F4  8915D1     MOV W1, 0x22BA
29:                    clipmap[0].end_address=clipmap[0].start_address;
0086F6  891560     MOV W0, 0x22AC
0086F8  891571     MOV W1, 0x22AE
30:                    clipmap[0].gate=TRUE;
0086FA  222BC0     MOV #0x22BC, W0
0086FC  EBC800     SETM.B [W0]
31:                    clipmap[i].loop=FALSE;
0086FE  EB4000     CLR.B W0
008700  222D91     MOV #0x22D9, W1
008702  784880     MOV.B W0, [W1]
32:                    clipmap[0].choke=FALSE;
008704  5080FB     SUB W1, #0x1B, W1
008706  784880     MOV.B W0, [W1]
33:                    clipmap[0].action=0;
008708  E80081     INC W1, W1
00870A  784880     MOV.B W0, [W1]
00870C  200004     MOV #0x0, W4
00870E  200405     MOV #0x40, W5
34:                    
35:                    for(; i<FLASH_NUMCHUNKS; i++){
008796  E80183     INC W3, W3
008798  200000     MOV #0x0, W0
00879A  200401     MOV #0x40, W1
00879C  400204     ADD W0, W4, W4
00879E  488285     ADDC W1, W5, W5
0087A0  518FF0     SUB W3, #0x10, [W15]
0087A2  3AFFD8     BRA NZ, 0x8754
36:                        clipmap[i].start_address=chunksize*i;
008756  440100     ADD W8, W0, W2
008758  BE8904     MOV.D W4, [W2]
37:                        clipmap[i].read_index=clipmap[i].start_address;
00875A  97BB8F     MOV [W15-16], W7
00875C  400307     ADD W0, W7, W6
00875E  BE8B04     MOV.D W4, [W6]
38:                        clipmap[i].write_index=clipmap[i].start_address;
008760  40030C     ADD W0, W12, W6
008762  781B32     MOV [W2++], [W6++]
008764  781322     MOV [W2--], [W6--]
39:                        clipmap[i].erase_index=clipmap[i].start_address;
008766  40030A     ADD W0, W10, W6
008768  781B32     MOV [W2++], [W6++]
00876A  781322     MOV [W2--], [W6--]
40:                        clipmap[i].end_address=clipmap[i].start_address;
00876C  97B4EF     MOV [W15-20], W9
00876E  400309     ADD W0, W9, W6
008770  781B32     MOV [W2++], [W6++]
008772  781322     MOV [W2--], [W6--]
41:                        clipmap[i].gate=TRUE;
008774  97B3CF     MOV [W15-24], W7
008776  400307     ADD W0, W7, W6
008778  EBCB00     SETM.B [W6]
42:                        clipmap[i].loop=FALSE;
00877A  97B4AF     MOV [W15-28], W9
00877C  400389     ADD W0, W9, W7
00877E  EB4300     CLR.B W6
008780  784B86     MOV.B W6, [W7]
43:                        clipmap[i].choke=FALSE;
008782  97B48F     MOV [W15-32], W9
008784  400389     ADD W0, W9, W7
008786  784B86     MOV.B W6, [W7]
44:                        clipmap[i].action=0;
008788  97ACEF     MOV [W15-36], W9
00878A  400389     ADD W0, W9, W7
00878C  784B86     MOV.B W6, [W7]
45:                        
46:                        clipmap[i-1].end_limit=clipmap[i].start_address;
00878E  97AB4F     MOV [W15-40], W6
008790  400006     ADD W0, W6, W0
008792  781832     MOV [W2++], [W0++]
008794  781022     MOV [W2--], [W0--]
47:                    }
48:                    clipmap[FLASH_NUMCHUNKS-1].end_limit=FLASH_MAX;
0087A4  200000     MOV #0x0, W0
0087A6  204001     MOV #0x400, W1
0087A8  892260     MOV W0, 0x244C
0087AA  892271     MOV W1, 0x244E
49:                }
0087AC  BE064F     MOV.D [--W15], W12
0087AE  BE054F     MOV.D [--W15], W10
0087B0  BE044F     MOV.D [--W15], W8
0087B2  FA8000     ULNK
0087B4  060000     RETURN
50:                
51:                void flashWriteReg(char command) {
52:                    if(SS3a){
0087B6  AB2E54     BTST LATF, #1
0087B8  32000B     BRA Z, 0x87D0
53:                        SS3a=0;
0087BA  A92E54     BCLR LATF, #1
54:                        SPI3BUF=command;               //WEL=1 for write enable
0087BC  FB0000     SE W0, W0
0087BE  881540     MOV W0, SPI3BUF
55:                        while(!_SPI3IF);
0087C0  208001     MOV #0x800, W1
0087C2  804052     MOV IFS5, W2
0087C4  608002     AND W1, W2, W0
0087C6  32FFFD     BRA Z, 0x87C2
56:                        SS3a=1;
0087C8  A82E54     BSET LATF, #1
57:                        _SPI3IF=0;
0087CA  A9680B     BCLR 0x80B, #3
58:                        receive=SPI3BUF;
0087CC  801540     MOV SPI3BUF, W0
0087CE  B7F61C     MOV.B WREG, receive
59:                    }
60:                }
0087D0  060000     RETURN
61:                
62:                void flashWriteBreg(char newreg){
63:                    if(SS3a){
0087D2  AB2E54     BTST LATF, #1
0087D4  320013     BRA Z, 0x87FC
64:                        //flashWriteReg(FLASH_WREN);
65:                        SS3a=0;
0087D6  A92E54     BCLR LATF, #1
66:                        SPI3BUF=FLASH_BRWR;               //WEL=1 for write enable
0087D8  200171     MOV #0x17, W1
0087DA  881541     MOV W1, SPI3BUF
67:                        while(!_SPI3IF); _SPI3IF=0;
0087DC  208002     MOV #0x800, W2
0087DE  804053     MOV IFS5, W3
0087E0  610083     AND W2, W3, W1
0087E2  32FFFD     BRA Z, 0x87DE
0087E4  A9680B     BCLR 0x80B, #3
68:                        receive=SPI3BUF;
0087E6  801541     MOV SPI3BUF, W1
69:                        SPI3BUF=newreg;               //WEL=1 for write enable
0087E8  FB0000     SE W0, W0
0087EA  881540     MOV W0, SPI3BUF
70:                        while(!_SPI3IF); 
0087EC  208001     MOV #0x800, W1
0087EE  804052     MOV IFS5, W2
0087F0  608002     AND W1, W2, W0
0087F2  32FFFD     BRA Z, 0x87EE
71:                        SS3a=1;
0087F4  A82E54     BSET LATF, #1
72:                        _SPI3IF=0;
0087F6  A9680B     BCLR 0x80B, #3
73:                        receive=SPI3BUF;
0087F8  801540     MOV SPI3BUF, W0
0087FA  B7F61C     MOV.B WREG, receive
74:                        
75:                    }
76:                }
0087FC  060000     RETURN
77:                
78:                char flashStatusCheck(char command){
0087FE  784080     MOV.B W0, W1
79:                    if(SS3a){
008802  AB2E54     BTST LATF, #1
008804  320015     BRA Z, 0x8830
80:                        SS3a=0;
008806  A92E54     BCLR LATF, #1
81:                        SPI3BUF=command;               //WEL=1 for write enable
008808  FB0081     SE W1, W1
00880A  881541     MOV W1, SPI3BUF
82:                        while(!_SPI3IF); _SPI3IF=0;
00880C  208001     MOV #0x800, W1
00880E  804052     MOV IFS5, W2
008810  608002     AND W1, W2, W0
008812  32FFFD     BRA Z, 0x880E
008814  A9680B     BCLR 0x80B, #3
83:                        receive=SPI3BUF;
008816  801540     MOV SPI3BUF, W0
84:                        SPI3BUF=0x00;               //WEL=1 for write enable
008818  EF22A8     CLR SPI3BUF
85:                        while(!_SPI3IF); 
00881A  208001     MOV #0x800, W1
00881C  804053     MOV IFS5, W3
00881E  608003     AND W1, W3, W0
008820  32FFFD     BRA Z, 0x881C
86:                        SS3a=1;
008822  A82E54     BSET LATF, #1
87:                        _SPI3IF=0;
008824  A9680B     BCLR 0x80B, #3
88:                        receive=SPI3BUF;
008826  801541     MOV SPI3BUF, W1
008828  784001     MOV.B W1, W0
00882A  784181     MOV.B W1, W3
00882C  2161C2     MOV #0x161C, W2
00882E  784903     MOV.B W3, [W2]
89:                        
90:                        return receive;
91:                    }else return 0xFF;
008800  EBC000     SETM.B W0
92:                }
008830  060000     RETURN
93:                
94:                void flashWritePage(fractional* source, unsigned long address){
008832  BE9F88     MOV.D W8, [W15++]
008834  BE9F8A     MOV.D W10, [W15++]
008836  BE9F8C     MOV.D W12, [W15++]
008838  781F8E     MOV W14, [W15++]
00883A  780500     MOV W0, W10
00883C  BE0402     MOV.D W2, W8
008848  B85661     MUL.UU W10, #1, W12
00884A  210001     MOV #0x1000, W1
00884C  B80D61     MUL.UU W1, #1, W10
00884E  E80081     INC W1, W1
008850  B80B61     MUL.UU W1, #1, W6
008854  B90161     MUL.SU W0, #1, W2
008864  E88000     INC2 W0, W0
95:                    if(SS3a){
00883E  AB2E54     BTST LATF, #1
008840  320048     BRA Z, 0x88D2
96:                        int i;
97:                        fractional sample;
98:                        
99:                        flashWriteReg(FLASH_WREN);
008842  B3C060     MOV.B #0x6, W0
008844  07FFB8     RCALL flashWriteReg
100:                       
101:                       for(i=0; i<FLASH_DMAXFER_BYTES; i++){
008846  EB0000     CLR W0
008852  202005     MOV #0x200, W5
008866  500F85     SUB W0, W5, [W15]
008868  3AFFF5     BRA NZ, 0x8854
102:                           sample=*source++;
008856  41008C     ADD W2, W12, W1
008858  780091     MOV [W1], W1
103:                           TxBufferA[i++]=(sample>>8)&0xFF;
00885A  450202     ADD W10, W2, W4
00885C  DE0F48     LSR W1, #8, W14
00885E  784A0E     MOV.B W14, [W4]
104:                           TxBufferA[i]=sample&0xFF;
008860  410106     ADD W2, W6, W2
008862  784901     MOV.B W1, [W2]
105:                       }
106:                       SS3a=0;
00886A  A92E54     BCLR LATF, #1
107:               
108:                       SPI3BUF=FLASH_PP;
00886C  200020     MOV #0x2, W0
00886E  881540     MOV W0, SPI3BUF
109:                       while(!_SPI3IF); _SPI3IF=0;
008870  208001     MOV #0x800, W1
008872  804052     MOV IFS5, W2
008874  608002     AND W1, W2, W0
008876  32FFFD     BRA Z, 0x8872
008878  A9680B     BCLR 0x80B, #3
110:                       receive=SPI3BUF;
00887A  801540     MOV SPI3BUF, W0
111:                       
112:                       SPI3BUF=(address & 0xff000000UL) >> 24;                 
00887C  DE4848     LSR W9, #8, W0
00887E  200001     MOV #0x0, W1
008880  881540     MOV W0, SPI3BUF
113:                       while(!_SPI3IF); _SPI3IF=0;
008882  208001     MOV #0x800, W1
008884  804052     MOV IFS5, W2
008886  608002     AND W1, W2, W0
008888  32FFFD     BRA Z, 0x8884
00888A  A9680B     BCLR 0x80B, #3
114:                       receive=SPI3BUF;
00888C  801540     MOV SPI3BUF, W0
115:                       SPI3BUF=(address & 0x00ff0000UL) >> 16;                 
00888E  FB8009     ZE W9, W0
008890  881540     MOV W0, SPI3BUF
116:                       while(!_SPI3IF); _SPI3IF=0;
008892  208001     MOV #0x800, W1
008894  804052     MOV IFS5, W2
008896  608002     AND W1, W2, W0
008898  32FFFD     BRA Z, 0x8894
00889A  A9680B     BCLR 0x80B, #3
117:                       receive=SPI3BUF;
00889C  801540     MOV SPI3BUF, W0
118:                       SPI3BUF=(address & 0x0000ff00UL) >>  8;                 
00889E  2FF000     MOV #0xFF00, W0
0088A0  600008     AND W0, W8, W0
0088A2  EB0080     CLR W1
0088A4  DD0948     SL W1, #8, W2
0088A6  DE0048     LSR W0, #8, W0
0088A8  710000     IOR W2, W0, W0
0088AA  DE08C8     LSR W1, #8, W1
0088AC  881540     MOV W0, SPI3BUF
119:                       while(!_SPI3IF); _SPI3IF=0;
0088AE  208001     MOV #0x800, W1
0088B0  804052     MOV IFS5, W2
0088B2  608002     AND W1, W2, W0
0088B4  32FFFD     BRA Z, 0x88B0
0088B6  A9680B     BCLR 0x80B, #3
120:                       receive=SPI3BUF;
0088B8  801540     MOV SPI3BUF, W0
121:                       SPI3BUF=(address & 0x000000ffUL);            
0088BA  FB8408     ZE W8, W8
0088BC  881548     MOV W8, SPI3BUF
122:                       while(!_SPI3IF); _SPI3IF=0;
0088BE  208001     MOV #0x800, W1
0088C0  804052     MOV IFS5, W2
0088C2  608002     AND W1, W2, W0
0088C4  32FFFD     BRA Z, 0x88C0
0088C6  A9680B     BCLR 0x80B, #3
123:                       receive=SPI3BUF;
0088C8  801540     MOV SPI3BUF, W0
0088CA  B7F61C     MOV.B WREG, receive
124:                       
125:                       //SPI3STATbits.SPIROV = 0;    // Clear SPI1 receive overflow flag if set
126:                       //DMA1CONbits.NULLW=0;                          // NULL WRITE (debug))
127:                       DMA0CONbits.CHEN = 1;
0088CC  A8EB01     BSET 0xB01, #7
128:                       DMA1CONbits.CHEN = 1;
0088CE  A8EB11     BSET 0xB11, #7
129:                       DMA0REQbits.FORCE = 1; // Manual mode: Kick-start the 1st transfer 
0088D0  A8EB03     BSET 0xB03, #7
130:                       //SPI3BUF = 0x00;
131:                       //while (DMA0REQbits.FORCE == 1);
132:                       //DMA1REQbits.FORCE = 1; // Manual mode: Kick-start the 1st transfer  
133:                   }
134:               }
0088D2  78074F     MOV [--W15], W14
0088D4  BE064F     MOV.D [--W15], W12
0088D6  BE054F     MOV.D [--W15], W10
0088D8  BE044F     MOV.D [--W15], W8
0088DA  060000     RETURN
135:               
136:               void flashStartRead(unsigned long address){
0088DC  BE9F88     MOV.D W8, [W15++]
0088DE  BE0400     MOV.D W0, W8
0088E6  210006     MOV #0x1000, W6
0088E8  EB0380     CLR W7
137:                   if(SS3a){
0088E0  AB2E54     BTST LATF, #1
0088E2  320042     BRA Z, 0x8968
0088E4  EB0080     CLR W1
138:                       int i;
139:               
140:                       for(i=0; i<FLASH_DMAXFER_BYTES; i++){
0088EC  202003     MOV #0x200, W3
0088F2  E80081     INC W1, W1
0088F4  508F83     SUB W1, W3, [W15]
0088F6  3AFFFB     BRA NZ, 0x88EE
141:                           TxBufferA[i]=0;
0088EA  EB4200     CLR.B W4
0088EE  408106     ADD W1, W6, W2
0088F0  784904     MOV.B W4, [W2]
142:                       }
143:               
144:                       stat.DMA_READING=TRUE;
0088F8  216370     MOV #0x1637, W0
0088FA  EBC800     SETM.B [W0]
145:                       stat.DMA_JUSTREAD=FALSE;
0088FC  E90000     DEC W0, W0
0088FE  EB4800     CLR.B [W0]
146:                       
147:                       SS3a=0;
008900  A92E54     BCLR LATF, #1
148:                       SPI3BUF=FLASH_READ;
008902  200030     MOV #0x3, W0
008904  881540     MOV W0, SPI3BUF
149:                       while(!_SPI3IF); _SPI3IF=0;
008906  208000     MOV #0x800, W0
008908  804052     MOV IFS5, W2
00890A  600082     AND W0, W2, W1
00890C  32FFFD     BRA Z, 0x8908
00890E  A9680B     BCLR 0x80B, #3
150:                       receive=SPI3BUF;
008910  801540     MOV SPI3BUF, W0
151:                       
152:                       SPI3BUF=(address & 0xff000000UL) >> 24;                 
008912  DE4848     LSR W9, #8, W0
008914  200001     MOV #0x0, W1
008916  881540     MOV W0, SPI3BUF
153:                       while(!_SPI3IF); _SPI3IF=0;
008918  208002     MOV #0x800, W2
00891A  804050     MOV IFS5, W0
00891C  610080     AND W2, W0, W1
00891E  32FFFD     BRA Z, 0x891A
008920  A9680B     BCLR 0x80B, #3
154:                       receive=SPI3BUF;
008922  801540     MOV SPI3BUF, W0
155:                       SPI3BUF=(address & 0x00ff0000UL) >> 16;                 
008924  FB8009     ZE W9, W0
008926  881540     MOV W0, SPI3BUF
156:                       while(!_SPI3IF); _SPI3IF=0;
008928  208002     MOV #0x800, W2
00892A  804050     MOV IFS5, W0
00892C  610080     AND W2, W0, W1
00892E  32FFFD     BRA Z, 0x892A
008930  A9680B     BCLR 0x80B, #3
157:                       receive=SPI3BUF;
008932  801540     MOV SPI3BUF, W0
158:                       SPI3BUF=(address & 0x0000ff00UL) >>  8;                 
008934  2FF000     MOV #0xFF00, W0
008936  600008     AND W0, W8, W0
008938  EB0080     CLR W1
00893A  DD0948     SL W1, #8, W2
00893C  DE0048     LSR W0, #8, W0
00893E  710000     IOR W2, W0, W0
008940  DE08C8     LSR W1, #8, W1
008942  881540     MOV W0, SPI3BUF
159:                       while(!_SPI3IF); _SPI3IF=0;
008944  208002     MOV #0x800, W2
008946  804050     MOV IFS5, W0
008948  610080     AND W2, W0, W1
00894A  32FFFD     BRA Z, 0x8946
00894C  A9680B     BCLR 0x80B, #3
160:                       receive=SPI3BUF;
00894E  801540     MOV SPI3BUF, W0
161:                       SPI3BUF=(address & 0x000000ffUL);            
008950  FB8408     ZE W8, W8
008952  881548     MOV W8, SPI3BUF
162:                       while(!_SPI3IF); _SPI3IF=0;
008954  208001     MOV #0x800, W1
008956  804052     MOV IFS5, W2
008958  608002     AND W1, W2, W0
00895A  32FFFD     BRA Z, 0x8956
00895C  A9680B     BCLR 0x80B, #3
163:                       receive=SPI3BUF;
00895E  801540     MOV SPI3BUF, W0
008960  B7F61C     MOV.B WREG, receive
164:               
165:                       /* Kick off dma read here */
166:                       //SPI3STATbits.SPIROV = 0;    // Clear SPI1 receive overflow flag if set
167:                       //DMA1CONbits.NULLW=1;                          // NULL WRITE (debug))
168:                       DMA0CONbits.CHEN = 1;
008962  A8EB01     BSET 0xB01, #7
169:                       DMA1CONbits.CHEN = 1;
008964  A8EB11     BSET 0xB11, #7
170:                       DMA0REQbits.FORCE = 1; // Manual mode: Kick-start the 1st transfer
008966  A8EB03     BSET 0xB03, #7
171:                       //SPI3BUF = 0x00;
172:                       //while (DMA0REQbits.FORCE == 1);
173:                       //DMA1REQbits.FORCE = 1; // Manual mode: Kick-start the 1st transfer
174:                   }
175:               }
008968  BE044F     MOV.D [--W15], W8
00896A  060000     RETURN
176:               
177:               void flashProcessRead(void){
00896C  BE9F88     MOV.D W8, [W15++]
00896E  BE9F8A     MOV.D W10, [W15++]
008972  212001     MOV #0x1200, W1
008974  21400A     MOV #0x1400, W10
008976  EB0580     CLR W11
008978  B80C61     MUL.UU W1, #1, W8
00897A  E80081     INC W1, W1
00897C  B80B61     MUL.UU W1, #1, W6
008980  B90161     MUL.SU W0, #1, W2
008990  E88000     INC2 W0, W0
178:                   int i,j; 
179:                   
180:                   for(i=j=0; i<STREAMBUF; i++){
008970  EB0000     CLR W0
00897E  202005     MOV #0x200, W5
008992  500F85     SUB W0, W5, [W15]
008994  3AFFF5     BRA NZ, 0x8980
181:                       unsigned int temp = (RxBufferA[j++]<<8)&0xFF00;
008984  410208     ADD W2, W8, W4
008986  FB8214     ZE [W4], W4
008988  DD2248     SL W4, #8, W4
182:                       RxBufferB[i]=(temp|RxBufferA[j++]);
008982  41008A     ADD W2, W10, W1
00898A  410106     ADD W2, W6, W2
00898C  FB8112     ZE [W2], W2
00898E  720882     IOR W4, W2, [W1]
183:                   }    
184:               }
008996  BE054F     MOV.D [--W15], W10
008998  BE044F     MOV.D [--W15], W8
00899A  060000     RETURN
185:               
186:               void flashEraseSector(unsigned long address){
00899C  BE9F88     MOV.D W8, [W15++]
00899E  BE0400     MOV.D W0, W8
187:                   if(SS3a){
0089A0  AB2E54     BTST LATF, #1
0089A2  320034     BRA Z, 0x8A0C
188:                       flashWriteReg(FLASH_WREN);
0089A4  B3C060     MOV.B #0x6, W0
0089A6  07FF07     RCALL flashWriteReg
189:                       SS3a=0;
0089A8  A92E54     BCLR LATF, #1
190:                       SPI3BUF=FLASH_SE;                 
0089AA  200D80     MOV #0xD8, W0
0089AC  881540     MOV W0, SPI3BUF
191:                       while(!_SPI3IF); _SPI3IF=0;
0089AE  208001     MOV #0x800, W1
0089B0  804052     MOV IFS5, W2
0089B2  608002     AND W1, W2, W0
0089B4  32FFFD     BRA Z, 0x89B0
0089B6  A9680B     BCLR 0x80B, #3
192:                       receive=SPI3BUF;
0089B8  801540     MOV SPI3BUF, W0
193:                       SPI3BUF=(address & 0xff000000UL) >> 24;                 
0089BA  DE4848     LSR W9, #8, W0
0089BC  200001     MOV #0x0, W1
0089BE  881540     MOV W0, SPI3BUF
194:                       while(!_SPI3IF); _SPI3IF=0;
0089C0  208001     MOV #0x800, W1
0089C2  804052     MOV IFS5, W2
0089C4  608002     AND W1, W2, W0
0089C6  32FFFD     BRA Z, 0x89C2
0089C8  A9680B     BCLR 0x80B, #3
195:                       receive=SPI3BUF;
0089CA  801540     MOV SPI3BUF, W0
196:                       SPI3BUF=(address & 0x00ff0000UL) >> 16;                 
0089CC  FB8009     ZE W9, W0
0089CE  881540     MOV W0, SPI3BUF
197:                       while(!_SPI3IF); _SPI3IF=0;
0089D0  208001     MOV #0x800, W1
0089D2  804052     MOV IFS5, W2
0089D4  608002     AND W1, W2, W0
0089D6  32FFFD     BRA Z, 0x89D2
0089D8  A9680B     BCLR 0x80B, #3
198:                       receive=SPI3BUF;
0089DA  801540     MOV SPI3BUF, W0
199:                       SPI3BUF=(address & 0x0000ff00UL) >>  8;                 
0089DC  2FF000     MOV #0xFF00, W0
0089DE  600008     AND W0, W8, W0
0089E0  EB0080     CLR W1
0089E2  DD0948     SL W1, #8, W2
0089E4  DE0048     LSR W0, #8, W0
0089E6  710000     IOR W2, W0, W0
0089E8  DE08C8     LSR W1, #8, W1
0089EA  881540     MOV W0, SPI3BUF
200:                       while(!_SPI3IF); _SPI3IF=0;
0089EC  208001     MOV #0x800, W1
0089EE  804052     MOV IFS5, W2
0089F0  608002     AND W1, W2, W0
0089F2  32FFFD     BRA Z, 0x89EE
0089F4  A9680B     BCLR 0x80B, #3
201:                       receive=SPI3BUF;
0089F6  801540     MOV SPI3BUF, W0
202:                       SPI3BUF=(address & 0x000000ffUL);            
0089F8  FB8408     ZE W8, W8
0089FA  881548     MOV W8, SPI3BUF
203:                       while(!_SPI3IF); 
0089FC  208001     MOV #0x800, W1
0089FE  804052     MOV IFS5, W2
008A00  608002     AND W1, W2, W0
008A02  32FFFD     BRA Z, 0x89FE
204:                       SS3a=1;
008A04  A82E54     BSET LATF, #1
205:                       _SPI3IF=0;
008A06  A9680B     BCLR 0x80B, #3
206:                       receive=SPI3BUF;
008A08  801540     MOV SPI3BUF, W0
008A0A  B7F61C     MOV.B WREG, receive
207:                       
208:                   }
209:               }
008A0C  BE044F     MOV.D [--W15], W8
008A0E  060000     RETURN
210:               
211:               void flashBulkErase(void) {
212:                   flashWriteReg(FLASH_WREN);
008A10  B3C060     MOV.B #0x6, W0
008A12  07FED1     RCALL flashWriteReg
213:                   flashWriteReg(FLASH_FRMT);
008A14  B3C600     MOV.B #0x60, W0
008A16  07FECF     RCALL flashWriteReg
214:               }
008A18  060000     RETURN
215:               
---  C:/Users/ryan/Documents/seniorproject/ps-040/devInits.c  -------------------------------------------
1:                 /*
2:                  ** This file contains functions to initialize various peripheral devices
3:                  */
4:                 #include <xc.h>
5:                 #include <p33EP512GM310.h>
6:                 #include "common.h"
7:                 #include "devInits.h"
8:                 #include "utilities.h"
9:                 #include "plcd.h"
10:                #include "screens.h"
11:                #include "flash.h"
12:                #include "dsp.h"
13:                
14:                extern unsigned char    TxBufferA[FLASH_DMAXFER_BYTES]__attribute__((space(xmemory))), 
15:                                        RxBufferA[FLASH_DMAXFER_BYTES]__attribute__((space(xmemory)));
16:                extern fractional       RxBufferB[STREAMBUF] __attribute__((space(xmemory)));
17:                
18:                void initPorts(void){
19:                    /* Clock Setup */
20:                    CLKDIVbits.PLLPOST=0;
008392  2FF3F0     MOV #0xFF3F, W0
008394  B62744     AND CLKDIV
21:                    CLKDIVbits.PLLPRE=0;
008396  2FFE00     MOV #0xFFE0, W0
008398  B62744     AND CLKDIV
22:                    PLLFBDbits.PLLDIV = 0x49;       //d_73 for ~140Mhz
00839A  2FE000     MOV #0xFE00, W0
00839C  B60746     AND PLLFBD, WREG
00839E  B30490     IOR #0x49, W0
0083A0  883A30     MOV W0, PLLFBD
23:                    while(OSCCONbits.LOCK!=1) {};   //wait for PLL to lock
0083A2  200201     MOV #0x20, W1
0083A4  803A12     MOV OSCCON, W2
0083A6  608002     AND W1, W2, W0
0083A8  32FFFD     BRA Z, 0x83A4
24:                    
25:                    /* Digital IO DIRECTION (1 = input) */ 
26:                    TRISA=TRISB=TRISC=TRISD=TRISE=TRISF=TRISG=0x0000; 
0083AA  EF2E60     CLR TRISG
0083AC  F80E60     PUSH TRISG
0083AE  F90E50     POP TRISF
0083B0  F80E50     PUSH TRISF
0083B2  F90E40     POP TRISE
0083B4  F80E40     PUSH TRISE
0083B6  F90E30     POP TRISD
0083B8  F80E30     PUSH TRISD
0083BA  F90E20     POP TRISC
0083BC  F80E20     PUSH TRISC
0083BE  F90E10     POP TRISB
0083C0  F80E10     PUSH TRISB
0083C2  F90E00     POP TRISA
27:                    TRISA=0x1E01; CNPUA=0x0801; 
0083C4  21E010     MOV #0x1E01, W0
0083C6  887000     MOV W0, TRISA
0083C8  208010     MOV #0x801, W0
0083CA  887050     MOV W0, CNPUA
28:                    TRISB=0x0000; CNPUB=0x0000; 
0083CC  EF2E10     CLR TRISB
0083CE  EF2E1A     CLR CNPUB
29:                    TRISC=0x2087; 
0083D0  220870     MOV #0x2087, W0
0083D2  887100     MOV W0, TRISC
30:                    TRISD=0x111E; CNPUD=0x801E; 
0083D4  2111E0     MOV #0x111E, W0
0083D6  887180     MOV W0, TRISD
0083D8  2801E0     MOV #0x801E, W0
0083DA  8871D0     MOV W0, CNPUD
31:                    TRISE=0x7300; 
0083DC  273000     MOV #0x7300, W0
0083DE  887200     MOV W0, TRISE
32:                    TRISF=0x00F0; CNPUF=0x00F2; 
0083E0  200F00     MOV #0xF0, W0
0083E2  887280     MOV W0, TRISF
0083E4  E88000     INC2 W0, W0
0083E6  8872D0     MOV W0, CNPUF
33:                    TRISG=CNPUG=0xFFFF;   //PORTG all inputs, weak pull ups on all of G 
0083E8  EB8100     SETM W2
0083EA  887352     MOV W2, CNPUG
0083EC  F80E6A     PUSH CNPUG
0083EE  F90E60     POP TRISG
34:                     
35:                    /* DIGITAL OUTPUT LATCH */ 
36:                    LATA=LATB=LATC=LATD=LATE=LATF=LATG=0x0000; 
0083F0  EF2E64     CLR LATG
0083F2  F80E64     PUSH LATG
0083F4  F90E54     POP LATF
0083F6  F80E54     PUSH LATF
0083F8  F90E44     POP LATE
0083FA  F80E44     PUSH LATE
0083FC  F90E34     POP LATD
0083FE  F80E34     PUSH LATD
008400  F90E24     POP LATC
008402  F80E24     PUSH LATC
008404  F90E14     POP LATB
008406  F80E14     PUSH LATB
008408  F90E04     POP LATA
37:                    LATA=0x0040; 
00840A  200400     MOV #0x40, W0
00840C  887020     MOV W0, LATA
38:                    SS3a=SS3b=1; 
00840E  A8EE35     BSET 0xE35, #7
008410  8071A0     MOV LATD, W0
008412  DE004F     LSR W0, #15, W0
008414  400000     ADD W0, W0, W0
008416  8072A1     MOV LATF, W1
008418  A11001     BCLR W1, #1
00841A  700081     IOR W0, W1, W1
00841C  8872A1     MOV W1, LATF
39:                    FLASHCLK=0;            // Keep SPI CS & CLK asserted 
00841E  A92E25     BCLR 0xE25, #1
40:                    
41:                     
42:                    /* ANALOG PINS (1 = analog) */ 
43:                    ANSELA=ANSELB=ANSELC=ANSELD=ANSELE=ANSELF=ANSELG=0x0000; 
008420  EF2E6E     CLR ANSELG
008422  F80E6E     PUSH ANSELG
008424  F90E5E     POP ANSELF
008426  F80E5E     PUSH ANSELF
008428  F90E4E     POP ANSELE
00842A  F80E4E     PUSH ANSELE
00842C  F90E3E     POP ANSELD
00842E  F80E3E     PUSH ANSELD
008430  F90E2E     POP ANSELC
008432  F80E2E     PUSH ANSELC
008434  F90E1E     POP ANSELB
008436  F80E1E     PUSH ANSELB
008438  F90E0E     POP ANSELA
44:                    ANSELCbits.ANSC0=1;     //AN6 
00843A  A80E2E     BSET ANSELC, #0
45:                    ANSELCbits.ANSC1=1;     //AN7 
00843C  A82E2E     BSET ANSELC, #1
46:                    ANSELCbits.ANSC2=1;     //AN8 
00843E  A84E2E     BSET ANSELC, #2
47:                    ANSELAbits.ANSA12=1;    //AN10  
008440  A88E0F     BSET 0xE0F, #4
48:                    ANSELEbits.ANSE8=1;     //AN21 
008442  A80E4F     BSET 0xE4F, #0
49:                    ANSELEbits.ANSE9=1;     //AN20
008444  A82E4F     BSET 0xE4F, #1
50:                    
51:                    /* Remappable Pins*/
52:                	__builtin_write_OSCCONL(OSCCON & ~(1<<6));      // Unlock Registers
008446  803A10     MOV OSCCON, W0
008448  A16000     BCLR W0, #6
00844A  200463     MOV #0x46, W3
00844C  200574     MOV #0x57, W4
00844E  207421     MOV #0x742, W1
008450  784883     MOV.B W3, [W1]
008452  784884     MOV.B W4, [W1]
008454  784880     MOV.B W0, [W1]
53:                        RPINR18bits.U1RXR = 0x48;       // U1 rx on RPI72
008456  2FF800     MOV #0xFF80, W0
008458  803625     MOV RPINR18, W5
00845A  600085     AND W0, W5, W1
00845C  B30481     IOR #0x48, W1
00845E  883621     MOV W1, RPINR18
54:                        RPOR1bits.RP37R = 0x01;         // Pin 70, RP37 U1 tx
008460  2C0FF1     MOV #0xC0FF, W1
008462  803416     MOV RPOR1, W6
008464  608286     AND W1, W6, W5
008466  A08005     BSET W5, #8
008468  883415     MOV W5, RPOR1
55:                        RPINR24bits.CSDIR=0x3D;         //DCI IN on RPI61           
00846A  803687     MOV RPINR24, W7
00846C  600287     AND W0, W7, W5
00846E  B303D5     IOR #0x3D, W5
008470  883685     MOV W5, RPINR24
56:                        RPOR3bits.RP40R=0x0C;           //DCI clock
008472  2FFC05     MOV #0xFFC0, W5
008474  803437     MOV RPOR3, W7
008476  628307     AND W5, W7, W6
008478  B300C6     IOR #0xC, W6
00847A  883436     MOV W6, RPOR3
57:                        RPOR2bits.RP39R=0x0D;           //DCI frame sync
00847C  803426     MOV RPOR2, W6
00847E  608386     AND W1, W6, W7
008480  20D006     MOV #0xD00, W6
008482  730307     IOR W6, W7, W6
008484  883426     MOV W6, RPOR2
58:                        RPOR3bits.RP41R=0x0B;           //DCI output
008486  803436     MOV RPOR3, W6
008488  608386     AND W1, W6, W7
00848A  20B006     MOV #0xB00, W6
00848C  730307     IOR W6, W7, W6
00848E  883436     MOV W6, RPOR3
59:                        RPOR6bits.RP54R=0x20;           //SCK3 output on pin 77
008490  803467     MOV RPOR6, W7
008492  628287     AND W5, W7, W5
008494  A05005     BSET W5, #5
008496  883465     MOV W5, RPOR6
60:                        RPINR29bits.SCK3R=0x36;         //SCK3 input on pin 77
008498  280FF5     MOV #0x80FF, W5
00849A  8036D6     MOV RPINR29, W6
00849C  628386     AND W5, W6, W7
00849E  236006     MOV #0x3600, W6
0084A0  730307     IOR W6, W7, W6
0084A2  8836D6     MOV W6, RPINR29
61:                        RPOR8bits.RP70R=0x1F;           //SDO3 on pin 83
0084A4  803487     MOV RPOR8, W7
0084A6  608087     AND W1, W7, W1
0084A8  21F006     MOV #0x1F00, W6
0084AA  730301     IOR W6, W1, W6
0084AC  883486     MOV W6, RPOR8
62:                        RPINR29bits.SDI3R=0x4C;         //SDI on pin 79, RPI76
0084AE  8036D6     MOV RPINR29, W6
0084B0  600086     AND W0, W6, W1
0084B2  B304C1     IOR #0x4C, W1
0084B4  8836D1     MOV W1, RPINR29
63:                        RPINR14bits.QEA1R=0x10;         //QEA on pin 22, RPI16
0084B6  B606BC     AND RPINR14, WREG
0084B8  A04000     BSET W0, #4
0084BA  8835E0     MOV W0, RPINR14
64:                        RPINR14bits.QEB1R=0x1B;         //QEB on pin 21, RPI27
0084BC  8035E7     MOV RPINR14, W7
0084BE  628287     AND W5, W7, W5
0084C0  21B000     MOV #0x1B00, W0
0084C2  700005     IOR W0, W5, W0
0084C4  8835E0     MOV W0, RPINR14
65:                	__builtin_write_OSCCONL(OSCCON | (1<<6));       // Lock Registers
0084C6  803A10     MOV OSCCON, W0
0084C8  A06000     BSET W0, #6
0084CA  207421     MOV #0x742, W1
0084CC  784883     MOV.B W3, [W1]
0084CE  784884     MOV.B W4, [W1]
0084D0  784880     MOV.B W0, [W1]
66:                    
67:                    /* PERIPHERAL ENABLE (0) - DISABLE (1) */
68:                    PMD1=PMD2=PMD3=PMD4=PMD6=PMD7=0xFFFF;
0084D2  883B62     MOV W2, PMD7
0084D4  F8076C     PUSH PMD7
0084D6  F9076A     POP PMD6
0084D8  F8076A     PUSH PMD6
0084DA  F90766     POP PMD4
0084DC  F80766     PUSH PMD4
0084DE  F90764     POP PMD3
0084E0  F80764     PUSH PMD3
0084E2  F90762     POP PMD2
0084E4  F80762     PUSH PMD2
0084E6  F90760     POP PMD1
69:                    PMD1bits.AD1MD=0;
0084E8  A90760     BCLR PMD1, #0
70:                    PMD1bits.SPI1MD=0;
0084EA  A96760     BCLR PMD1, #3
71:                    PMD1bits.SPI2MD=0;
0084EC  A98760     BCLR PMD1, #4
72:                    PMD1bits.U1MD=0;
0084EE  A9A760     BCLR PMD1, #5
73:                    PMD1bits.U2MD=0;
0084F0  A9C760     BCLR PMD1, #6
74:                    PMD1bits.DCIMD=0;
0084F2  A90761     BCLR 0x761, #0
75:                    PMD1bits.T1MD=0;
0084F4  A96761     BCLR 0x761, #3
76:                    PMD1bits.T2MD=0;
0084F6  A98761     BCLR 0x761, #4
77:                    PMD1bits.T3MD=0;
0084F8  A9A761     BCLR 0x761, #5
78:                    PMD1bits.T4MD=0;
0084FA  A9C761     BCLR 0x761, #6
79:                    PMD1bits.T5MD=0;
0084FC  A9E761     BCLR 0x761, #7
80:                    PMD3bits.PMPMD=0;
0084FE  A90765     BCLR 0x765, #0
81:                    PMD3bits.CMPMD=0;
008500  A94765     BCLR 0x765, #2
82:                    PMD6bits.SPI3MD=0;
008502  A9076A     BCLR PMD6, #0
83:                    PMD7bits.DMA0MD=0;  
008504  A9876C     BCLR PMD7, #4
84:                }
008506  060000     RETURN
85:                
86:                void initUART1(void){
87:                    IFS0bits.U1TXIF = 0;        //clear flag
008508  A98801     BCLR 0x801, #4
88:                    IFS0bits.U1RXIF = 0;        //clear flag
00850A  A96801     BCLR 0x801, #3
89:                    U1STA=0x1510;               //enable tx & rx
00850C  215100     MOV #0x1510, W0
00850E  881110     MOV W0, U1STA
90:                    
91:                    U1BRG=BRGVAL;               //baud rate
008510  201C10     MOV #0x1C1, W0
008512  881140     MOV W0, U1BRG
92:                    //U1MODEbits.PDSEL=0;         //8 bit data, even parity
93:                    IPC2bits.U1RXIP = 4;        //interrupt priority 3 (low)
008514  28FFF0     MOV #0x8FFF, W0
008516  B60844     AND IPC2, WREG
008518  A0E000     BSET W0, #14
00851A  884220     MOV W0, IPC2
94:                    IPC3bits.U1TXIP = 4;        //interrupt priority 3 (low)
00851C  2FFF80     MOV #0xFFF8, W0
00851E  B60846     AND IPC3, WREG
008520  A02000     BSET W0, #2
008522  884230     MOV W0, IPC3
95:                    IEC0bits.U1TXIE = 1;        //enable tx interrupt
008524  A88821     BSET 0x821, #4
96:                    IEC0bits.U1RXIE = 1;        //enable rx interrupt
008526  A86821     BSET 0x821, #3
97:                    U1MODEbits.UARTEN = 1;      //start uart
008528  A8E221     BSET 0x221, #7
98:                    U1STAbits.UTXEN = 1;
00852A  A84223     BSET 0x223, #2
99:                }
00852C  060000     RETURN
100:               
101:               void initADC1(void){ 
102:               
103:                   /* Assign MUXA inputs */
104:                   AD1CON1 = 0x04E4;               // Enable 12-bit mode, auto-sample and auto-conversion
00852E  204E40     MOV #0x4E4, W0
008530  881900     MOV W0, AD1CON1
105:                   AD1CON2 = 0x0408;               // Sample alternately using channel scanning
008532  B10DC0     SUB #0xDC, W0
008534  881910     MOV W0, AD1CON2
106:                   AD1CON2bits.SMPI=(POTS/2)-1;    // Sample 6 channels
008536  2FF830     MOV #0xFF83, W0
008538  B60322     AND AD1CON2, WREG
00853A  B30140     IOR #0x14, W0
00853C  881910     MOV W0, AD1CON2
107:                   AD1CON3 = 0x0F0F;               // Sample for n*TAD before converting
00853E  20F0F0     MOV #0xF0F, W0
008540  881920     MOV W0, AD1CON3
108:                   AD1CON1bits.FORM=2;             // Signed fractional format 
008542  2FCFF0     MOV #0xFCFF, W0
008544  B60320     AND AD1CON1, WREG
008546  A09000     BSET W0, #9
008548  881900     MOV W0, AD1CON1
109:                   AD1CON3bits.ADCS=0x07;
00854A  B3C070     MOV.B #0x7, W0
00854C  B7E324     MOV.B WREG, AD1CON3
110:                   AD1CON3bits.SAMC=0x1F;
00854E  21F000     MOV #0x1F00, W0
008550  B72324     IOR AD1CON3
111:                   AD1CSSLbits.CSS6=1;             //AN6 in channel scan
008552  A8C330     BSET AD1CSSL, #6
112:                   AD1CSSLbits.CSS7=1;             //AN7 in channel scan
008554  A8E330     BSET AD1CSSL, #7
113:                   AD1CSSLbits.CSS8=1;             //AN8 in channel scan
008556  A80331     BSET 0x331, #0
114:                   AD1CSSLbits.CSS10=1;            //AN10 in channel scan
008558  A84331     BSET 0x331, #2
115:                   AD1CSSHbits.CSS20=1;            //AN20 in channel scan
00855A  A8832E     BSET AD1CSSH, #4
116:                   AD1CSSHbits.CSS21=1;            //AN21 in channel scan
00855C  A8A32E     BSET AD1CSSH, #5
117:                   
118:                   /* Enable ADC module and provide ADC stabilization delay */
119:                   AD1CON1bits.ADON = 1;
00855E  A8E321     BSET 0x321, #7
120:                   Delay_us(30);
008560  2001E0     MOV #0x1E, W0
008562  07FF0E     RCALL Delay_us
121:               }
008564  060000     RETURN
122:               
123:               void initPMP(void){
124:                   /*
125:                    Data is clocked on falling edge of E
126:                    *  RS = 44 = PMAO (H = display data, L = display instruction)
127:                    *  E = 81 = PMWR (pulse width 450ns MIN, data triggers from H to L) 
128:                    */
129:                   PMMODEbits.MODE=3;              // Master mode 1 
008566  203000     MOV #0x300, W0
008568  B72602     IOR PMMODE
130:                   PMCONbits.PTWREN = 1;
00856A  A82601     BSET 0x601, #1
131:                   PMCONbits.PTRDEN = 1;
00856C  A80601     BSET 0x601, #0
132:                   PMCONbits.WRSP=1;               // Write strobe active high
00856E  A82600     BSET PMCON, #1
133:                   PMCONbits.RDSP=1;               // Read strobe active high
008570  A80600     BSET PMCON, #0
134:               
135:                   PMMODEbits.WAITB = 0;
008572  2FF3F0     MOV #0xFF3F, W0
008574  B62602     AND PMMODE
136:                   PMMODEbits.WAITM = 0xC;
008576  2FFC30     MOV #0xFFC3, W0
008578  B60602     AND PMMODE, WREG
00857A  B30300     IOR #0x30, W0
00857C  883010     MOV W0, PMMODE
137:                   PMMODEbits.WAITE = 0;
00857E  2FFFC0     MOV #0xFFFC, W0
008580  B62602     AND PMMODE
138:                   LCD_RS=0;
008582  A9EE45     BCLR 0xE45, #7
139:                   PMCONbits.PMPEN = 1;
008584  A8E601     BSET 0x601, #7
140:                   
141:                   /* INIT DEVICE */
142:                   Delay_us(40000);
008586  29C400     MOV #0x9C40, W0
008588  07FEFB     RCALL Delay_us
143:                   lcdInit();
00858A  07F93E     RCALL lcdInit
144:               }
00858C  060000     RETURN
145:               
146:               
147:               //Description: Initializes timer for LED's UART and display
148:               //Prereq: initUART1()
149:               //Frequency: 15Hz
150:               void initT1(void){          //16 bit timer
151:                   TMR1 = 0x0000;          //clear timer 4
00858E  EF2100     CLR TMR1
152:                   T1CONbits.TCKPS = 3;    //prescale 1:256
008590  200300     MOV #0x30, W0
008592  B72104     IOR T1CON
153:                   T1CONbits.TCS = 0;      //use internal clock
008594  A92104     BCLR T1CON, #1
154:                   T1CONbits.TGATE = 0;    //gate accumulation disabled
008596  A9C104     BCLR T1CON, #6
155:                   PR1 = Fcy/(256*Fdisp);    //period register
008598  269780     MOV #0x6978, W0
00859A  880810     MOV W0, PR1
156:                   //PR1=0x7FFF;
157:               
158:                   T1CONbits.TON = 1;      //start timer
00859C  A8E105     BSET 0x105, #7
159:               }
00859E  060000     RETURN
160:               
161:               //Description:  Initializes timer handles polling button input
162:               //Prereq: initADC1() 
163:               //Frequency: 512Hz
164:               void initT2(void){          //16/32 bit timer
165:                   TMR2 = 0x0000;          //clear timer 4
0085A0  EF2106     CLR TMR2
166:                   T2CONbits.T32 = 0;      //16 bit mode
0085A2  A96110     BCLR T2CON, #3
167:                   T2CONbits.TCKPS = 1;    //prescale 1:8
0085A4  2FFCF0     MOV #0xFFCF, W0
0085A6  B60110     AND T2CON, WREG
0085A8  A04000     BSET W0, #4
0085AA  880880     MOV W0, T2CON
168:                   T2CONbits.TCS = 0;      //use internal clock
0085AC  A92110     BCLR T2CON, #1
169:                   T2CONbits.TGATE = 0;    //gate accumulation disabled
0085AE  A9C110     BCLR T2CON, #6
170:                   PR2 = Fcy/(8*Fscan);      //period register about 512hz, PR2 = 0x3938 
0085B0  2A8C00     MOV #0xA8C0, W0
0085B2  880860     MOV W0, PR2
171:               
172:                   T2CONbits.TON = 1;      //start timer
0085B4  A8E111     BSET 0x111, #7
173:               }
0085B6  060000     RETURN
174:               
175:               //Description: Initialize timer handling LCD sending
176:               //Frequency: variable depending on lcd latency values in datasheet
177:               void initT3(void){          //16/32 bit timer
178:                   TMR3 = 0x0000;          //clear timer 3
0085B8  EF210A     CLR TMR3
179:                   T3CONbits.TCKPS = 1;    //prescale 8:1
0085BA  2FFCF0     MOV #0xFFCF, W0
0085BC  B60112     AND T3CON, WREG
0085BE  A04000     BSET W0, #4
0085C0  880890     MOV W0, T3CON
180:                   T3CONbits.TCS = 0;      //use internal clock
0085C2  A92112     BCLR T3CON, #1
181:                   T3CONbits.TGATE = 0;    //gate accumulation disabled
0085C4  A9C112     BCLR T3CON, #6
182:                   //PR3 = Fcy/(256*T3freq);           //period register
183:                   PR3 = 0x01D0;           //45uS initial delay
0085C6  201D00     MOV #0x1D0, W0
0085C8  880870     MOV W0, PR3
184:                   
185:                   T3CONbits.TON = 1;
0085CA  A8E113     BSET 0x113, #7
186:                   
187:               }
0085CC  060000     RETURN
188:               
189:               void initT5() 
190:               {
191:                       TMR5 = 0x0000;
0085CE  EF2118     CLR TMR5
192:                       PR5 = 4999;
0085D0  213870     MOV #0x1387, W0
0085D2  8808E0     MOV W0, PR5
193:                       T5CONbits.TCKPS = 2;    //prescale 8:1
0085D4  2FFCF0     MOV #0xFFCF, W0
0085D6  B60120     AND T5CON, WREG
0085D8  A05000     BSET W0, #5
0085DA  880900     MOV W0, T5CON
194:                       IFS1bits.T5IF = 0;
0085DC  A98803     BCLR 0x803, #4
195:                       IEC1bits.T5IE = 0;
0085DE  A98823     BCLR 0x823, #4
196:               
197:                       //Start Timer 3
198:                       T5CONbits.TON = 1;
0085E0  A8E121     BSET 0x121, #7
199:               
200:               }
0085E2  060000     RETURN
201:               
202:               //Description: Initializes & starts 16 bit DCI I2S DAC
203:               //Prereq: initSPI_ADC(void)
204:               void initDCI_DAC(void){
205:                   DCICON3bits.BCG=(Fcy/(64*Fout)-1);  // Calculate baud rate (WILL TRUNCATE)
0085E4  2F0000     MOV #0xF000, W0
0085E6  B60284     AND DCICON3, WREG
0085E8  B30170     IOR #0x17, W0
0085EA  881420     MOV W0, DCICON3
206:                   DCICON1bits.COFSM=1;                // I2S mode
0085EC  2FFFC0     MOV #0xFFFC, W0
0085EE  B60280     AND DCICON1, WREG
0085F0  A00000     BSET W0, #0
0085F2  881400     MOV W0, DCICON1
207:                   DCICON1bits.CSCKE=1;                // Sample on rising edge
0085F4  A82281     BSET 0x281, #1
208:                   DCICON2bits.WS=0xF;                 // 16 bit data word
0085F6  2000F0     MOV #0xF, W0
0085F8  B72282     IOR DCICON2
209:                   DCICON2bits.COFSG=0;                // Data frame has 1 word (per frame)
0085FA  2FE1F0     MOV #0xFE1F, W0
0085FC  B62282     AND DCICON2
210:                   DCICON1bits.DJST=0;                 // Align data
0085FE  A9A280     BCLR DCICON1, #5
211:                   DCICON2bits.BLEN=3;                 // 4 words buffer btwn interrupts
008600  20C000     MOV #0xC00, W0
008602  B72282     IOR DCICON2
212:                   
213:                   TSCONbits.TSE0 = 1;                 // Transmit on Time Slot 0     
008604  A80288     BSET TSCON, #0
214:                   TSCONbits.TSE1 = 1;                 // Transmit on Time Slot 1   
008606  A82288     BSET TSCON, #1
215:                   TSCONbits.TSE2 = 1;                 // Transmit on Time Slot 2     
008608  A84288     BSET TSCON, #2
216:                   TSCONbits.TSE3 = 1;                 // Transmit on Time Slot 3   
00860A  A86288     BSET TSCON, #3
217:                   RSCONbits.RSE0 = 1;                 // Rcv on Time Slot 0     
00860C  A8028C     BSET RSCON, #0
218:                   RSCONbits.RSE1 = 1;                 // Rcv on Time Slot 1 
00860E  A8228C     BSET RSCON, #1
219:                   RSCONbits.RSE2 = 1;                 // Rcv on Time Slot 2     
008610  A8428C     BSET RSCON, #2
220:                   RSCONbits.RSE3 = 1;                 // Rcv on Time Slot 3 
008612  A8628C     BSET RSCON, #3
221:                   
222:                   IPC15bits.DCIIP = 5;                // Interrput priority
008614  2FFF80     MOV #0xFFF8, W0
008616  B6085E     AND IPC15, WREG
008618  B30050     IOR #0x5, W0
00861A  8842F0     MOV W0, IPC15
223:                   IFS3bits.DCIIF=0;
00861C  A98807     BCLR 0x807, #4
224:                   IEC3bits.DCIIE=1;                   // =0 if letting dma handle interrupt
00861E  A88827     BSET 0x827, #4
225:                   
226:                   TXBUF0=0;                           // Pre-load send registers.
008620  EF2298     CLR TXBUF0
227:                   TXBUF1=0;   
008622  EF229A     CLR TXBUF1
228:                   TXBUF2=0;
008624  EF229C     CLR TXBUF2
229:                   TXBUF3=0;
008626  EF229E     CLR TXBUF3
230:                   DCICON1bits.DCIEN=1;                // ENABLE
008628  A8E281     BSET 0x281, #7
231:                   Delay_us(20);                       // Stabilization delay
00862A  200140     MOV #0x14, W0
00862C  07FEA9     RCALL Delay_us
232:               }
00862E  060000     RETURN
233:               
234:               void initDMA(void){
235:                   /* RX */
236:                   IFS0bits.DMA1IF = 0;
008630  A9C801     BCLR 0x801, #6
237:                   IEC0bits.DMA1IE = 1;
008632  A8C821     BSET 0x821, #6
238:                   IPC3bits.DMA1IP = 6;
008634  2F8FF1     MOV #0xF8FF, W1
008636  804230     MOV IPC3, W0
008638  608080     AND W1, W0, W1
00863A  206000     MOV #0x600, W0
00863C  700001     IOR W0, W1, W0
00863E  884230     MOV W0, IPC3
239:                   DMA1CONbits.SIZE=1;                             // Byte size
008640  A8CB11     BSET 0xB11, #6
240:                   DMA1CONbits.DIR=0;                              // Read from flash
008642  A9AB11     BCLR 0xB11, #5
241:                   DMA1CONbits.MODE=1;                             // One shot, ping pong
008644  2FFFC3     MOV #0xFFFC, W3
008646  805881     MOV DMA1CON, W1
008648  618001     AND W3, W1, W0
00864A  A00000     BSET W0, #0
00864C  885880     MOV W0, DMA1CON
242:                   //DMA1CONbits.NULLW=1;                          // NULL WRITE (debug))
243:                   DMA1STAL = (unsigned int)(&RxBufferA);
00864E  212000     MOV #0x1200, W0
008650  8858A0     MOV W0, DMA1STAL
244:                   //DMA1STAH = (unsigned int)(&RxBufferB);
245:                   DMA1PAD = (volatile unsigned int) &SPI3BUF;
008652  202A82     MOV #0x2A8, W2
008654  8858E2     MOV W2, DMA1PAD
246:                   DMA1CNT = (unsigned int)(FLASH_DMAXFER_BYTES-1);
008656  201FF1     MOV #0x1FF, W1
008658  8858F1     MOV W1, DMA1CNT
247:                   DMA1REQbits.IRQSEL = 0x5B;
00865A  B3C5B0     MOV.B #0x5B, W0
00865C  B7EB12     MOV.B WREG, DMA1REQ
248:                   DMA1CONbits.CHEN = 0;
00865E  A9EB11     BCLR 0xB11, #7
249:                   
250:                   
251:                   /* TX */
252:                   IFS0bits.DMA0IF = 0;
008660  A98800     BCLR IFS0, #4
253:                   IEC0bits.DMA0IE = 1;
008662  A88820     BSET IEC0, #4
254:                   IPC1bits.DMA0IP = 6;
008664  2FFF84     MOV #0xFFF8, W4
008666  804215     MOV IPC1, W5
008668  620205     AND W4, W5, W4
00866A  B30064     IOR #0x6, W4
00866C  884214     MOV W4, IPC1
255:                   DMAPWC = 0;
00866E  EF2BF0     CLR DMAPWC
256:                   DMA0CONbits.SIZE=1;                             // Byte size
008670  A8CB01     BSET 0xB01, #6
257:                   DMA0CONbits.DIR=1;                              // Write to flash
008672  A8AB01     BSET 0xB01, #5
258:                   DMA0CONbits.MODE=1;                             // One shot, ping pong
008674  805804     MOV DMA0CON, W4
008676  618184     AND W3, W4, W3
008678  A00003     BSET W3, #0
00867A  885803     MOV W3, DMA0CON
259:                   DMA0STAL = (unsigned int)(&TxBufferA);
00867C  210003     MOV #0x1000, W3
00867E  885823     MOV W3, DMA0STAL
260:                   //DMA0STAH = (unsigned int)(&TxBufferB);
261:                   DMA0PAD = (volatile unsigned int) &SPI3BUF;
008680  885862     MOV W2, DMA0PAD
262:                   DMA0CNT = (unsigned int)(FLASH_DMAXFER_BYTES-1);
008682  885871     MOV W1, DMA0CNT
263:                   DMA0REQbits.IRQSEL = 0x5B;
008684  B7EB02     MOV.B WREG, DMA0REQ
264:                   DMA0CONbits.CHEN = 0;
008686  A9EB01     BCLR 0xB01, #7
265:               }
008688  060000     RETURN
266:               
267:               void initSPI3_MEM(void){
268:                   SS3a=SS3b=1;
00868A  A8EE35     BSET 0xE35, #7
00868C  8071A0     MOV LATD, W0
00868E  DE004F     LSR W0, #15, W0
008690  400000     ADD W0, W0, W0
008692  8072A1     MOV LATF, W1
008694  A11001     BCLR W1, #1
008696  700081     IOR W0, W1, W1
008698  8872A1     MOV W1, LATF
269:                   FLASHCLK=0;
00869A  A92E25     BCLR 0xE25, #1
270:                   
271:                   IFS5bits.SPI3IF = 0;        // Clear the Interrupt flag
00869C  A9680B     BCLR 0x80B, #3
272:                   IEC5bits.SPI3IE = 0;        // Disable the interrupt
00869E  A9682B     BCLR 0x82B, #3
273:                   SPI3CON1bits.MSTEN=1;       // Master mode
0086A0  A8A2A2     BSET SPI3CON1, #5
274:                   SPI3CON1bits.DISSCK = 0;    // Internal serial clock is enabled
0086A2  A982A3     BCLR 0x2A3, #4
275:                   SPI3CON1bits.MODE16=0;      // 8 bitBuffer
0086A4  A942A3     BCLR 0x2A3, #2
276:                   SPI3CON1bits.DISSDO=0;      // Enable SDO 
0086A6  A962A3     BCLR 0x2A3, #3
277:                   SPI3CON2bits.FRMEN=0;       // No enable framed mode
0086A8  A9E2A5     BCLR 0x2A5, #7
278:                   SPI3CON2bits.SPIBEN=0;      // Enhanced buffer mode
0086AA  A902A4     BCLR SPI3CON2, #0
279:                   
280:                   SPI3CON1bits.SMP=1;         // Data sampled at end of output time
0086AC  A822A3     BSET 0x2A3, #1
281:                   SPI3CON1bits.CKP=0;         // Idle clock is high
0086AE  A9C2A2     BCLR SPI3CON1, #6
282:                   SPI3CON1bits.CKE=1;         // Data changes from H to L
0086B0  A802A3     BSET 0x2A3, #0
283:                   
284:                   SPI3CON1bits.PPRE=2;        // 1:1 primary prescale (3) (1))
0086B2  2FFFC0     MOV #0xFFFC, W0
0086B4  B602A2     AND SPI3CON1, WREG
0086B6  A01000     BSET W0, #1
0086B8  881510     MOV W0, SPI3CON1
285:                   SPI3CON1bits.SPRE=6;        // 2:1 secondary (6) (6)) )
0086BA  2FFE30     MOV #0xFFE3, W0
0086BC  B602A2     AND SPI3CON1, WREG
0086BE  B30180     IOR #0x18, W0
0086C0  881510     MOV W0, SPI3CON1
286:                   
287:                   SPI3STATbits.SPIROV = 0;    // Clear SPI1 receive overflow flag if set
0086C2  A9C2A0     BCLR SPI3STAT, #6
288:                   SPI3STATbits.SPIEN = 1;     // Start SPI module
0086C4  A8E2A1     BSET 0x2A1, #7
289:                   //IEC5bits.SPI3IE = 0;      // Enable the Interrupt   
290:                   
291:                   flashSoftSetup();           // Set up flash memory map
0086C6  07000A     RCALL flashSoftSetup
292:                   
293:                   flashWriteBreg(0x80);            // 4 byte addressing
0086C8  B3C800     MOV.B #0x80, W0
0086CA  070083     RCALL flashWriteBreg
294:               }
0086CC  060000     RETURN
295:               
296:               /* Quadradure Encoder */
297:               void initQEI_ENC(void){
298:                   QEI1CONbits.INTDIV=6;       // 1:64 prescaler
0086CE  2FF8F0     MOV #0xFF8F, W0
0086D0  B601C0     AND QEI1CON, WREG
0086D2  B30600     IOR #0x60, W0
0086D4  880E00     MOV W0, QEI1CON
299:                   QEI1IOCbits.FLTREN=1;       // Enable input filter
0086D6  A8C1C3     BSET 0x1C3, #6
300:                   QEI1CONbits.QEIEN=1;        // Enable Quad encoder inteface
0086D8  A8E1C1     BSET 0x1C1, #7
301:               }
0086DA  060000     RETURN
302:               
---  C:/Users/ryan/Documents/seniorproject/ps-040/cons.c  -----------------------------------------------
1:                 #include <xc.h>
2:                 #include <dsp.h>
3:                 #include "cons.h"
4:                 #include "common.h"
5:                 #include "flash.h"
6:                 
7:                 extern struct clip_flash clipmap[FLASH_NUMCHUNKS];
8:                 extern enum fxStruct fxUnits[NUMFXUNITS];
9:                 extern struct ctrlsrfc ctrl;
10:                
11:                //enum action_states;
12:                
13:                void consPADops(fractional* stream){
008D10  FA000C     LNK #0xC
008D12  BE9F88     MOV.D W8, [W15++]
008D14  BE9F8A     MOV.D W10, [W15++]
008D16  BE9F8C     MOV.D W12, [W15++]
008D18  780580     MOV W0, W11
008D24  EB0480     CLR W9
008D26  222A4C     MOV #0x22A4, W12
008D28  EB0680     CLR W13
008D2A  78050C     MOV W12, W10
008D2C  460070     ADD W12, #0x10, W0
008D2E  B80161     MUL.UU W0, #1, W2
008D30  9FB7C2     MOV W2, [W15-24]
008D32  9FB7D3     MOV W3, [W15-22]
008D46  B9487C     MUL.SU W9, #28, W0
008D54  B9487C     MUL.SU W9, #28, W0
008D56  46017B     ADD W12, #0x1B, W2
008D6E  B9487C     MUL.SU W9, #28, W0
008D70  46017B     ADD W12, #0x1B, W2
008D72  410100     ADD W2, W0, W2
008D74  4881E0     ADDC W1, #0x0, W3
008D8A  B9487C     MUL.SU W9, #28, W0
008D94  B9487C     MUL.SU W9, #28, W0
008D96  9FBF80     MOV W0, [W15-16]
008D98  9FBF91     MOV W1, [W15-14]
008D9A  97B14F     MOV [W15-24], W2
008D9C  97B1DF     MOV [W15-22], W3
008D9E  410100     ADD W2, W0, W2
008DA0  498181     ADDC W3, W1, W3
008DA2  9FB7E2     MOV W2, [W15-20]
008DA4  9FB7F3     MOV W3, [W15-18]
008DB0  450164     ADD W10, #0x4, W2
008DDA  B9487C     MUL.SU W9, #28, W0
008DE4  B9487C     MUL.SU W9, #28, W0
008DF6  B9497C     MUL.SU W9, #28, W2
008DF8  9FBF82     MOV W2, [W15-16]
008DFA  9FBF93     MOV W3, [W15-14]
008DFC  450074     ADD W10, #0x14, W0
008DFE  400202     ADD W0, W2, W4
008E00  4982E0     ADDC W3, #0x0, W5
008E02  9FB7E4     MOV W4, [W15-20]
008E04  9FB7F5     MOV W5, [W15-18]
008E0E  450264     ADD W10, #0x4, W4
008E30  46007B     ADD W12, #0x1B, W0
008E64  B9487C     MUL.SU W9, #28, W0
008E78  45017B     ADD W10, #0x1B, W2
008E7A  410000     ADD W2, W0, W0
008E7C  4880E0     ADDC W1, #0x0, W1
008E9A  B9487C     MUL.SU W9, #28, W0
008EA4  45017B     ADD W10, #0x1B, W2
008EAC  B9487C     MUL.SU W9, #28, W0
008EB6  B9487C     MUL.SU W9, #28, W0
008EB8  9FBF80     MOV W0, [W15-16]
008EBA  9FBF91     MOV W1, [W15-14]
008EBC  45006C     ADD W10, #0xC, W0
008EBE  97B90F     MOV [W15-16], W2
008EC0  97B99F     MOV [W15-14], W3
008EC2  400102     ADD W0, W2, W2
008EC4  4981E0     ADDC W3, #0x0, W3
008EC6  9FB7E2     MOV W2, [W15-20]
008EC8  9FB7F3     MOV W3, [W15-18]
008ED2  450168     ADD W10, #0x8, W2
008F04  45007B     ADD W10, #0x1B, W0
008F0E  B9487C     MUL.SU W9, #28, W0
14:                    int i;
15:                    
16:                    if(ctrl.pad[BTN_ENCSPEC]==2){
008D1A  2164B0     MOV #0x164B, W0
008D1C  B3C021     MOV.B #0x2, W1
008D1E  10CF90     SUBR.B W1, [W0], [W15]
008D20  3A0001     BRA NZ, 0x8D24
17:                        flashBulkErase();
008D22  07FE76     RCALL flashBulkErase
18:                    }
19:                    
20:                    //check write triggers
21:                    for(i=0; i<FLASH_NUMCHUNKS; i++){
008F18  E80489     INC W9, W9
008F1A  548FF0     SUB W9, #0x10, [W15]
008F1C  3AFF0B     BRA NZ, 0x8D34
22:                        /* Check for records */
23:                        if(ctrl.pad[BTN_SPECIAL]==3){
008D34  2164C0     MOV #0x164C, W0
008D36  784010     MOV.B [W0], W0
008D38  504FE3     SUB.B W0, #0x3, [W15]
008D3A  3A0017     BRA NZ, 0x8D6A
24:                            if(ctrl.pad[i]==2){
008D3C  2163A0     MOV #0x163A, W0
008D3E  400009     ADD W0, W9, W0
008D40  784010     MOV.B [W0], W0
008D42  504FE2     SUB.B W0, #0x2, [W15]
008D44  3A0005     BRA NZ, 0x8D50
25:                                clipmap[i].action=2;            // Record
008D48  460000     ADD W12, W0, W0
008D4A  B3C021     MOV.B #0x2, W1
008D4C  985831     MOV.B W1, [W0+27]
008D4E  370022     BRA 0x8D94
26:                            }
27:                            else if(ctrl.pad[i]==1){
008D50  504FE1     SUB.B W0, #0x1, [W15]
008D52  3A001B     BRA NZ, 0x8D8A
28:                                clipmap[i].action=0;            // off
008D58  410100     ADD W2, W0, W2
008D5A  EB4900     CLR.B [W2]
29:                                clipmap[i].end_address=clipmap[i].write_index;
008D5C  450100     ADD W10, W0, W2
008D5E  97B1CF     MOV [W15-24], W3
008D60  400003     ADD W0, W3, W0
008D62  BE0210     MOV.D [W0], W4
008D64  980144     MOV W4, [W2+8]
008D66  980155     MOV W5, [W2+10]
008D68  370010     BRA 0x8D8A
30:                            }
31:                        }
32:                        else if(ctrl.pad[BTN_SPECIAL]==1 && clipmap[i].action==2){
008D6A  504FE1     SUB.B W0, #0x1, [W15]
008D6C  3A000E     BRA NZ, 0x8D8A
008D76  784212     MOV.B [W2], W4
008D78  524FE2     SUB.B W4, #0x2, [W15]
008D7A  3A0026     BRA NZ, 0x8DC8
33:                            clipmap[i].action=0;                // off
008D7C  EB4900     CLR.B [W2]
34:                            clipmap[i].end_address=clipmap[i].write_index;
008D7E  450100     ADD W10, W0, W2
008D80  97B2CF     MOV [W15-24], W5
008D82  400005     ADD W0, W5, W0
008D84  BE0310     MOV.D [W0], W6
008D86  980146     MOV W6, [W2+8]
008D88  980157     MOV W7, [W2+10]
35:                        }
36:                        
37:                        
38:                        if(clipmap[i].action==2){
008D8C  460000     ADD W12, W0, W0
008D8E  905830     MOV.B [W0+27], W0
008D90  504FE2     SUB.B W0, #0x2, [W15]
008D92  3A001A     BRA NZ, 0x8DC8
39:                            flashWritePage(stream, clipmap[i].write_index);
008DA6  780402     MOV W2, W8
008DA8  BE0118     MOV.D [W8], W2
008DAA  78000B     MOV W11, W0
008DAC  07FD42     RCALL flashWritePage
40:                            if(clipmap[i].write_index<clipmap[i].end_limit)
008DAE  BE0018     MOV.D [W8], W0
008DB2  97B98F     MOV [W15-16], W3
008DB4  410103     ADD W2, W3, W2
008DB6  500FB2     SUB W0, [W2++], [W15]
008DB8  588FA2     SUBB W1, [W2--], [W15]
008DBA  310006     BRA C, 0x8DC8
41:                                clipmap[i].write_index+=FLASH_PAGE;
008DBC  202006     MOV #0x200, W6
008DBE  200007     MOV #0x0, W7
008DC0  97B26F     MOV [W15-20], W4
008DC2  97B2FF     MOV [W15-18], W5
008DC4  401A06     ADD W0, W6, [W4++]
008DC6  489207     ADDC W1, W7, [W4--]
42:                        }
43:                        
44:                        /* Check for erase */
45:                        if(ctrl.pad[BTN_ENC]==3){
008DC8  2164A0     MOV #0x164A, W0
008DCA  B3C037     MOV.B #0x3, W7
008DCC  13CF90     SUBR.B W7, [W0], [W15]
008DCE  3A000A     BRA NZ, 0x8DE4
46:                            if(ctrl.pad[i]==2){
008DD0  500070     SUB W0, #0x10, W0
008DD2  400009     ADD W0, W9, W0
008DD4  B3C021     MOV.B #0x2, W1
008DD6  10CF90     SUBR.B W1, [W0], [W15]
008DD8  3A0005     BRA NZ, 0x8DE4
47:                                clipmap[i].action=3;            // Erase
008DDC  460000     ADD W12, W0, W0
008DDE  784087     MOV.B W7, W1
008DE0  985831     MOV.B W1, [W0+27]
008DE2  370005     BRA 0x8DEE
48:                            }
49:                        }
50:                        
51:                        if(clipmap[i].action==3){
008DE6  460000     ADD W12, W0, W0
008DE8  905830     MOV.B [W0+27], W0
008DEA  504FE3     SUB.B W0, #0x3, [W15]
008DEC  3A0033     BRA NZ, 0x8E54
52:                            if(flashStatusCheck(FLASH_RDSR1)&&0x04);
008DEE  B3C050     MOV.B #0x5, W0
008DF0  07FD06     RCALL flashStatusCheck
008DF2  E00400     CP0.B W0
008DF4  3A002F     BRA NZ, 0x8E54
53:                            else{
54:                                flashEraseSector(clipmap[i].erase_index);
008E06  780404     MOV W4, W8
008E08  BE0018     MOV.D [W8], W0
008E0A  07FDC8     RCALL flashEraseSector
55:                                if(clipmap[i].erase_index<(clipmap[i].end_limit-FLASH_SECTOR))
008E0C  BE0018     MOV.D [W8], W0
008E10  97BA8F     MOV [W15-16], W5
008E12  420205     ADD W4, W5, W4
008E14  218002     MOV #0x1800, W2
008E16  2FFFC3     MOV #0xFFFC, W3
008E18  410334     ADD W2, [W4++], W6
008E1A  4983A4     ADDC W3, [W4--], W7
008E1C  500F86     SUB W0, W6, [W15]
008E1E  588F87     SUBB W1, W7, [W15]
008E20  310007     BRA C, 0x8E30
56:                                    clipmap[i].erase_index+=FLASH_SECTOR;
008E22  2E8002     MOV #0xE800, W2
008E24  200033     MOV #0x3, W3
008E26  97B26F     MOV [W15-20], W4
008E28  97B2FF     MOV [W15-18], W5
008E2A  401A02     ADD W0, W2, [W4++]
008E2C  489203     ADDC W1, W3, [W4--]
008E2E  370012     BRA 0x8E54
57:                                else {
58:                                    clipmap[i].action=0; 
008E32  97BA8F     MOV [W15-16], W5
008E34  400005     ADD W0, W5, W0
008E36  EB4800     CLR.B [W0]
59:                                    clipmap[i].write_index=clipmap[i].start_address;
008E38  97B34F     MOV [W15-24], W6
008E3A  97BB8F     MOV [W15-16], W7
008E3C  430087     ADD W6, W7, W1
008E3E  780107     MOV W7, W2
008E40  450002     ADD W10, W2, W0
008E42  7818B0     MOV [W0++], [W1++]
008E44  7810A0     MOV [W0--], [W1--]
60:                                    clipmap[i].erase_index=clipmap[i].start_address;
008E46  97B26F     MOV [W15-20], W4
008E48  97B2FF     MOV [W15-18], W5
008E4A  781A30     MOV [W0++], [W4++]
008E4C  781220     MOV [W0--], [W4--]
61:                                    clipmap[i].end_address=clipmap[i].start_address;
008E4E  BE0310     MOV.D [W0], W6
008E50  980046     MOV W6, [W0+8]
008E52  980057     MOV W7, [W0+10]
62:                                }
63:                            }
64:                        } 
65:                        
66:                        /* Check for read */
67:                        if(ctrl.pad[BTN_ENC]==0){
008E54  2164A0     MOV #0x164A, W0
008E56  E00410     CP0.B [W0]
008E58  3A005F     BRA NZ, 0x8F18
68:                            if(ctrl.pad[i]==2){                             // Pressed
008E5A  500070     SUB W0, #0x10, W0
008E5C  400009     ADD W0, W9, W0
008E5E  784010     MOV.B [W0], W0
008E60  504FE2     SUB.B W0, #0x2, [W15]
008E62  3A0019     BRA NZ, 0x8E96
69:                                if(clipmap[i].end_address!=clipmap[i].start_address){
008E66  450180     ADD W10, W0, W3
008E68  900243     MOV [W3+8], W4
008E6A  9002D3     MOV [W3+10], W5
008E6C  520FB3     SUB W4, [W3++], [W15]
008E6E  5A8FA3     SUBB W5, [W3--], [W15]
008E70  32001D     BRA Z, 0x8EAC
70:                                    if(!clipmap[i].gate){
008E72  905903     MOV.B [W3+24], W2
008E74  E00402     CP0.B W2
008E76  3A000B     BRA NZ, 0x8E8E
71:                                        if(clipmap[i].action==0)
008E7E  784110     MOV.B [W0], W2
008E80  E00402     CP0.B W2
008E82  3A0003     BRA NZ, 0x8E8A
72:                                            clipmap[i].action=1;
008E84  B3C012     MOV.B #0x1, W2
008E86  784802     MOV.B W2, [W0]
008E88  370016     BRA 0x8EB6
73:                                        else 
74:                                            clipmap[i].action=0;
008E8A  EB4800     CLR.B [W0]
008E8C  370040     BRA 0x8F0E
75:                                    }
76:                                    else 
77:                                        clipmap[i].action=1;
008E8E  450000     ADD W10, W0, W0
008E90  B3C011     MOV.B #0x1, W1
008E92  985831     MOV.B W1, [W0+27]
008E94  370010     BRA 0x8EB6
78:                                }
79:                            }
80:                            else if (ctrl.pad[i]==1){                       // Depressed
008E96  504FE1     SUB.B W0, #0x1, [W15]
008E98  3A0009     BRA NZ, 0x8EAC
81:                                if(clipmap[i].gate)
008E9C  450100     ADD W10, W0, W2
008E9E  905902     MOV.B [W2+24], W2
008EA0  E00402     CP0.B W2
008EA2  320004     BRA Z, 0x8EAC
82:                                    clipmap[i].action=0;
008EA6  410000     ADD W2, W0, W0
008EA8  EB4800     CLR.B [W0]
008EAA  370031     BRA 0x8F0E
83:                            }
84:                            if(clipmap[i].action==1){
008EAE  460000     ADD W12, W0, W0
008EB0  905830     MOV.B [W0+27], W0
008EB2  504FE1     SUB.B W0, #0x1, [W15]
008EB4  3A002C     BRA NZ, 0x8F0E
85:                                flashStartRead(clipmap[i].read_index);      // READBACK
008ECA  780402     MOV W2, W8
008ECC  BE0018     MOV.D [W8], W0
008ECE  07FD06     RCALL flashStartRead
86:                                if(clipmap[i].read_index<clipmap[i].end_address)
008ED0  BE0018     MOV.D [W8], W0
008ED4  97B98F     MOV [W15-16], W3
008ED6  410103     ADD W2, W3, W2
008ED8  500FB2     SUB W0, [W2++], [W15]
008EDA  588FA2     SUBB W1, [W2--], [W15]
008EDC  310007     BRA C, 0x8EEC
87:                                    clipmap[i].read_index+=FLASH_PAGE;
008EDE  202006     MOV #0x200, W6
008EE0  200007     MOV #0x0, W7
008EE2  97B26F     MOV [W15-20], W4
008EE4  97B2FF     MOV [W15-18], W5
008EE6  401A06     ADD W0, W6, [W4++]
008EE8  489207     ADDC W1, W7, [W4--]
008EEA  370016     BRA 0x8F18
88:                                else if(clipmap[i].loop) 
008EEC  97BB8F     MOV [W15-16], W7
008EEE  450007     ADD W10, W7, W0
008EF0  905810     MOV.B [W0+25], W0
008EF2  E00400     CP0.B W0
008EF4  320007     BRA Z, 0x8F04
89:                                    clipmap[i].read_index=clipmap[i].start_address;    // Loop-back
008EF6  780087     MOV W7, W1
008EF8  450001     ADD W10, W1, W0
008EFA  97B16F     MOV [W15-20], W2
008EFC  97B1FF     MOV [W15-18], W3
008EFE  781930     MOV [W0++], [W2++]
008F00  781120     MOV [W0--], [W2--]
008F02  37000A     BRA 0x8F18
90:                                else 
91:                                    clipmap[i].action=0;
008F06  97B98F     MOV [W15-16], W3
008F08  400003     ADD W0, W3, W0
008F0A  EB4800     CLR.B [W0]
008F0C  370005     BRA 0x8F18
92:                            } 
93:                            else {
94:                                clipmap[i].read_index=clipmap[i].start_address;
008F10  450100     ADD W10, W0, W2
008F12  BE0212     MOV.D [W2], W4
008F14  980164     MOV W4, [W2+12]
008F16  980175     MOV W5, [W2+14]
95:                            }
96:                        }
97:                    }
98:                }
008F1E  BE064F     MOV.D [--W15], W12
008F20  BE054F     MOV.D [--W15], W10
008F22  BE044F     MOV.D [--W15], W8
008F24  FA8000     ULNK
008F26  060000     RETURN
99:                
100:               void consEDITops(void){    
101:                   // loop
102:                   if(ctrl.pot_moved[0]){
008F28  216660     MOV #0x1666, W0
008F2A  E00410     CP0.B [W0]
008F2C  320015     BRA Z, 0x8F58
103:                       if(ctrl.pots[0]>=0x3FFF) 
008F2E  80B271     MOV 0x164E, W1
008F30  23FFE0     MOV #0x3FFE, W0
008F32  508F80     SUB W1, W0, [W15]
008F34  340009     BRA LE, 0x8F48
104:                           clipmap[ctrl.last_pressed].loop = TRUE;
008F36  2164D0     MOV #0x164D, W0
008F38  FB8010     ZE [W0], W0
008F3A  DE80CF     ASR W0, #15, W1
008F3C  B8007C     MUL.UU W0, #28, W0
008F3E  222BC2     MOV #0x22BC, W2
008F40  400002     ADD W0, W2, W0
008F42  EBC080     SETM.B W1
008F44  984011     MOV.B W1, [W0+1]
008F46  370008     BRA 0x8F58
105:                       else 
106:                           clipmap[ctrl.last_pressed].loop = FALSE;
008F48  2164D0     MOV #0x164D, W0
008F4A  FB8010     ZE [W0], W0
008F4C  DE80CF     ASR W0, #15, W1
008F4E  B8007C     MUL.UU W0, #28, W0
008F50  222BC2     MOV #0x22BC, W2
008F52  400002     ADD W0, W2, W0
008F54  EB0080     CLR W1
008F56  984011     MOV.B W1, [W0+1]
107:                   }
108:                   // gate
109:                   if(ctrl.pot_moved[2]){
008F58  216680     MOV #0x1668, W0
008F5A  E00410     CP0.B [W0]
008F5C  320013     BRA Z, 0x8F84
110:                       if(ctrl.pots[2]>=0x3FFF) 
008F5E  80B291     MOV 0x1652, W1
008F60  23FFE0     MOV #0x3FFE, W0
008F62  508F80     SUB W1, W0, [W15]
008F64  340008     BRA LE, 0x8F76
111:                           clipmap[ctrl.last_pressed].gate = TRUE;
008F66  2164D0     MOV #0x164D, W0
008F68  FB8010     ZE [W0], W0
008F6A  DE80CF     ASR W0, #15, W1
008F6C  B8007C     MUL.UU W0, #28, W0
008F6E  222BC2     MOV #0x22BC, W2
008F70  400002     ADD W0, W2, W0
008F72  EBC800     SETM.B [W0]
008F74  370007     BRA 0x8F84
112:                       else 
113:                           clipmap[ctrl.last_pressed].gate = FALSE;
008F76  2164D0     MOV #0x164D, W0
008F78  FB8010     ZE [W0], W0
008F7A  DE80CF     ASR W0, #15, W1
008F7C  B8007C     MUL.UU W0, #28, W0
008F7E  222BC2     MOV #0x22BC, W2
008F80  400002     ADD W0, W2, W0
008F82  EB4800     CLR.B [W0]
114:                   }
115:                   // choke
116:                   if(ctrl.pot_moved[4]){
008F84  2166A0     MOV #0x166A, W0
008F86  E00410     CP0.B [W0]
008F88  320013     BRA Z, 0x8FB0
117:                       if(ctrl.pots[4]>=0x3FFF) 
008F8A  80B2B1     MOV 0x1656, W1
008F8C  23FFE0     MOV #0x3FFE, W0
008F8E  508F80     SUB W1, W0, [W15]
008F90  340008     BRA LE, 0x8FA2
118:                           clipmap[ctrl.last_pressed].choke = TRUE;
008F92  2164D0     MOV #0x164D, W0
008F94  FB8010     ZE [W0], W0
008F96  DE80CF     ASR W0, #15, W1
008F98  B8007C     MUL.UU W0, #28, W0
008F9A  222BE2     MOV #0x22BE, W2
008F9C  400002     ADD W0, W2, W0
008F9E  EBC800     SETM.B [W0]
008FA0  370007     BRA 0x8FB0
119:                       else 
120:                           clipmap[ctrl.last_pressed].choke = FALSE;
008FA2  2164D0     MOV #0x164D, W0
008FA4  FB8010     ZE [W0], W0
008FA6  DE80CF     ASR W0, #15, W1
008FA8  B8007C     MUL.UU W0, #28, W0
008FAA  222BE2     MOV #0x22BE, W2
008FAC  400002     ADD W0, W2, W0
008FAE  EB4800     CLR.B [W0]
121:                   }
122:               }
008FB0  060000     RETURN
123:               
124:               
125:                   
126:                   
---  C:/Users/ryan/Documents/seniorproject/ps-040/audio.c  ----------------------------------------------
1:                 #include "xc.h"
2:                 #include "audio.h"
3:                 #include "common.h"
4:                 #include "sounds.h"
5:                 #include <dsp.h>
6:                 #include "utilities.h"
7:                 #include "flash.h"
8:                 
9:                 extern unsigned char    TxBufferA[FLASH_DMAXFER_BYTES]__attribute__((space(xmemory))), 
10:                                        RxBufferA[FLASH_DMAXFER_BYTES]__attribute__((space(xmemory)));
11:                extern fractional       RxBufferB[STREAMBUF] __attribute__((space(xmemory)));
12:                
13:                extern fractional sintab[SINRES];
14:                static fractional loopbuf[LOOP_BUF_SIZE] __attribute__ ((eds)) = {0};
15:                static fractional psvbuf[STREAMBUF]={0};
16:                
17:                extern enum fxStruct fxUnits[NUMFXUNITS];
18:                extern enum screenStruc state;
19:                extern struct clip_psv sine, kick, snare;
20:                extern struct sflags stat;
21:                extern struct ctrlsrfc ctrl;
22:                struct clip_eds history = { .size = LOOP_BUF_SIZE,
23:                                            .blocks=LOOP_BUF_SIZE/STREAMBUF, 
24:                                            .playing=FALSE, .flash=FALSE, 
25:                                            .block_index=0, 
26:                                            .start_ptr=loopbuf, 
27:                                            .end_ptr=&loopbuf[LOOP_BUF_SIZE-1], 
28:                                            .read_ptr=loopbuf};
29:                
30:                
31:                void (*fxFuncPointers[NUMFX])(fractional *, fractional *, fractional, fractional, fractional) = {NULL, runLPF, runTRM, runLOP, runBTC};
32:                
33:                void runBufferLooper(fractional *source){
008C0A  FA0002     LNK #0x2
008C0C  BE9F88     MOV.D W8, [W15++]
008C10  BE0300     MOV.D W0, W6
008C12  B02006     ADD #0x200, W6
008C14  B08007     ADDC #0x0, W7
34:                    volatile fractional sample;
35:                    unsigned int loop_ptr = 0;
008C16  EB0100     CLR W2
36:                    
37:                    int *readPTR=source;
38:                    
39:                    int counter=0;
40:                    for(; counter<STREAMBUF; counter++){
008C3C  500F86     SUB W0, W6, [W15]
008C3E  588F87     SUBB W1, W7, [W15]
008C40  3AFFEE     BRA NZ, 0x8C1E
41:                        sample=*readPTR++; //!rw
008C1E  780290     MOV [W0], W5
008C20  9FBFD5     MOV W5, [W15-6]
42:                        if(loop_ptr<LOOP_BUF_SIZE)
008C18  243FF4     MOV #0x43FF, W4
008C22  510F84     SUB W2, W4, [W15]
008C24  3E0006     BRA GTU, 0x8C32
43:                            loopbuf[loop_ptr++]=sample;
008C26  D00282     SL W2, W5
008C28  428283     ADD W5, W3, W5
008C2A  97BCDF     MOV [W15-6], W9
008C2C  780A89     MOV W9, [W5]
008C2E  E80102     INC W2, W2
008C30  370003     BRA 0x8C38
44:                        else {
45:                            loop_ptr=0;
46:                            loopbuf[loop_ptr++]=sample;
008C0E  EB0080     CLR W1
008C1A  248003     MOV #0x4800, W3
008C1C  200018     MOV #0x1, W8
008C32  97B95F     MOV [W15-6], W2
008C34  780982     MOV W2, [W3]
008C36  780108     MOV W8, W2
008C38  400062     ADD W0, #0x2, W0
008C3A  4880E0     ADDC W1, #0x0, W1
47:                        }
48:                    }
49:                }
008C42  BE044F     MOV.D [--W15], W8
008C44  FA8000     ULNK
008C46  060000     RETURN
50:                
51:                void runLPF(fractional *source, fractional *destination, fractional param1, fractional param2, fractional param3){
008BB2  FA0002     LNK #0x2
008BB4  F80022     PUSH ACCA
008BB6  F80024     PUSH ACCAH
008BB8  F80026     PUSH ACCAU
008BD2  BE0302     MOV.D W2, W6
008BD4  B02006     ADD #0x200, W6
008BD6  B08007     ADDC #0x0, W7
52:                    volatile register int result asm("A");
53:                    static fractional lpf_alpha=Q15(0.5), lpf_inv_alpha=Q15(0.5);
54:                    
55:                    static fractional delayed_sample;
56:                    volatile fractional sample;
57:                    if(param3>=0x3FFF){     //LPF CONTROL
008BBA  23FFE3     MOV #0x3FFE, W3
008BBC  520F83     SUB W4, W3, [W15]
008BBE  340020     BRA LE, 0x8C00
58:                        if(param1>=310){                      
008BC0  201353     MOV #0x135, W3
008BC2  510F83     SUB W2, W3, [W15]
008BC4  340004     BRA LE, 0x8BCE
59:                            lpf_alpha=param1;
008BC6  88B142     MOV W2, 0x1628
60:                            lpf_inv_alpha=(32767-lpf_alpha); 
008BC8  27FFF3     MOV #0x7FFF, W3
008BCA  518102     SUB W3, W2, W2
008BCC  88B132     MOV W2, 0x1626
008BCE  B80161     MUL.UU W0, #1, W2
008BD0  B80861     MUL.UU W1, #1, W0
61:                        }
62:                
63:                
64:                        int *readPTR=source;
65:                        int *rewritePTR=destination;
66:                
67:                
68:                        int counter=0;
69:                        for(; counter<STREAMBUF; counter++){
008BFA  510F86     SUB W2, W6, [W15]
008BFC  598F87     SUBB W3, W7, [W15]
008BFE  3AFFEC     BRA NZ, 0x8BD8
70:                            sample=*readPTR++; //!rw
008BD8  780212     MOV [W2], W4
008BDA  9FBFC4     MOV W4, [W15-8]
71:                
72:                            //LPF-EMA//   y(i)= ??x(i)+(1-?)?y(i-1)
73:                            result =__builtin_mpy(sample,lpf_alpha, NULL, NULL, 0, NULL, NULL, 0);
008BDC  97BA4F     MOV [W15-8], W4
008BDE  80B145     MOV 0x1628, W5
008BE0  C00113     MPY W4*W5, A
74:                            result =__builtin_mac(result, delayed_sample, lpf_inv_alpha, NULL, NULL, 0, NULL, NULL, 0, 0, result);
008BE2  80B134     MOV 0x1626, W4
008BE4  80B0B5     MOV delayed_sample, W5
008BE6  C00112     MAC W4*W5, A
75:                            delayed_sample=__builtin_sac(result, 0);
008BE8  CC0004     SAC A, W4
008BEA  88B0B4     MOV W4, delayed_sample
76:                            sample=delayed_sample;
008BEC  9FBFC4     MOV W4, [W15-8]
77:                
78:                            *rewritePTR++=sample; //rw
008BEE  97BA4F     MOV [W15-8], W4
008BF0  780804     MOV W4, [W0]
008BF2  410162     ADD W2, #0x2, W2
008BF4  4981E0     ADDC W3, #0x0, W3
008BF6  400062     ADD W0, #0x2, W0
008BF8  4880E0     ADDC W1, #0x0, W1
79:                        }
80:                    }
81:                    
82:                }
008C00  F90026     POP ACCAU
008C02  F90024     POP ACCAH
008C04  F90022     POP ACCA
008C06  FA8000     ULNK
008C08  060000     RETURN
83:                
84:                void runTRM(fractional *source, fractional *destination, fractional param1, fractional param2, fractional param3){
008A1A  4787E6     ADD W15, #0x6, W15
008A1C  BE9F88     MOV.D W8, [W15++]
008A1E  BE9F8A     MOV.D W10, [W15++]
008A20  BE9F8C     MOV.D W12, [W15++]
008A22  781F8E     MOV W14, [W15++]
008A24  F80022     PUSH ACCA
008A26  F80024     PUSH ACCAH
008A28  F80026     PUSH ACCAU
008A2A  F80028     PUSH ACCB
008A2C  F8002A     PUSH ACCBH
008A2E  F8002C     PUSH ACCBU
008A30  780283     MOV W3, W5
008A4A  BE0402     MOV.D W2, W8
008A4C  B02008     ADD #0x200, W8
008A4E  B08009     ADDC #0x0, W9
85:                    volatile register int result1 asm("A");
86:                    volatile register int result2 asm("B");
87:                    volatile fractional sample, trem_mod;
88:                    int *readPTR=source;
89:                    int *rewritePTR=destination;
90:                    int counter=0;
91:                    static unsigned int trem_delay=0, tremelo_ptr=0;
92:                    const int pot_offset = 5;
93:                    
94:                    if(param3>=0x3FFF){     // TREM CONTROL
008A32  23FFE3     MOV #0x3FFE, W3
008A34  520F83     SUB W4, W3, [W15]
008A36  34004A     BRA LE, 0x8ACC
95:                        result1 =__builtin_mpy(param1,Q15(0.0006), NULL, NULL, 0, NULL, NULL, 0);
008A38  780202     MOV W2, W4
008A3A  200146     MOV #0x14, W6
008A3C  C10113     MPY W4*W6, A
96:                        param1=__builtin_sac(result1, 0);
008A3E  CC0006     SAC A, W6
97:                        if(param2<-0x7) param2=0;
008A40  428FE7     ADD W5, #0x7, [W15]
008A42  3D0001     BRA GE, 0x8A46
008A44  EB0280     CLR W5
008A46  B80961     MUL.UU W1, #1, W2
008A48  EB0080     CLR W1
98:                        
99:                        for(; counter<STREAMBUF; counter++){
008AC6  510F88     SUB W2, W8, [W15]
008AC8  598F89     SUBB W3, W9, [W15]
008ACA  3AFFC7     BRA NZ, 0x8A5A
100:                           sample=*readPTR++; //!rw
008A5A  780390     MOV [W0], W7
008A5C  9FB797     MOV W7, [W15-30]
101:                                                                          //TREMELO//
102:                           if (trem_delay<=param1+pot_offset){
008A50  430365     ADD W6, #0x5, W6
008A5E  80B0A4     MOV trem_delay, W4
008A60  530F84     SUB W6, W4, [W15]
008A62  390013     BRA NC, 0x8A8A
103:                               trem_delay++;
008A64  E80204     INC W4, W4
008A66  88B0A4     MOV W4, trem_delay
104:                               result1 =__builtin_mpy(param2,sintab[tremelo_ptr], NULL, NULL, 0, NULL, NULL, 0);
008A68  80B094     MOV tremelo_ptr, W4
008A6A  D00204     SL W4, W4
008A6C  42020A     ADD W4, W10, W4
008A6E  780214     MOV [W4], W4
008A70  C00113     MPY W4*W5, A
105:                               trem_mod=__builtin_sac(result1, 0);
008A72  CC0004     SAC A, W4
008A74  9FB7A4     MOV W4, [W15-28]
106:                               trem_mod=0x7FF0-trem_mod;
008A76  97B22F     MOV [W15-28], W4
008A78  570204     SUB W14, W4, W4
008A7A  9FB7A4     MOV W4, [W15-28]
107:                               result2 =__builtin_mpy(trem_mod,sample, NULL, NULL, 0, NULL, NULL, 0);
008A7C  97B69F     MOV [W15-30], W13
008A7E  97B3AF     MOV [W15-28], W7
008A80  78020D     MOV W13, W4
008A82  C28113     MPY W4*W7, B
108:                               sample=__builtin_sac(result2, 0);
008A84  CC8007     SAC B, W7
008A86  9FB797     MOV W7, [W15-30]
008A88  370018     BRA 0x8ABA
109:                           }
110:                           else{
111:                               trem_delay=0;
008A52  EB0580     CLR W11
008A8A  88B0AB     MOV W11, trem_delay
112:                               if(tremelo_ptr==1024)
008A54  20400C     MOV #0x400, W12
008A8C  80B094     MOV tremelo_ptr, W4
008A8E  520F8C     SUB W4, W12, [W15]
008A90  3A0002     BRA NZ, 0x8A96
113:                                   tremelo_ptr=0;
008A92  88B09B     MOV W11, tremelo_ptr
008A94  370002     BRA 0x8A9A
114:                               else tremelo_ptr++;
008A96  E80204     INC W4, W4
008A98  88B094     MOV W4, tremelo_ptr
115:                               
116:                               result1 =__builtin_mpy(param2,sintab[tremelo_ptr], NULL, NULL, 0, NULL, NULL, 0);
008A56  2E44CA     MOV #0xE44C, W10
008A9A  80B094     MOV tremelo_ptr, W4
008A9C  D00204     SL W4, W4
008A9E  42020A     ADD W4, W10, W4
008AA0  780214     MOV [W4], W4
008AA2  C00113     MPY W4*W5, A
117:                               trem_mod=__builtin_sac(result1, 0);
008AA4  CC0004     SAC A, W4
008AA6  9FB7A4     MOV W4, [W15-28]
118:                               trem_mod=0x7FF0-trem_mod;
008A58  27FF0E     MOV #0x7FF0, W14
008AA8  97B22F     MOV [W15-28], W4
008AAA  570204     SUB W14, W4, W4
008AAC  9FB7A4     MOV W4, [W15-28]
119:                               result2 =__builtin_mpy(trem_mod,sample, NULL, NULL, 0, NULL, NULL, 0);
008AAE  97B69F     MOV [W15-30], W13
008AB0  97B22F     MOV [W15-28], W4
008AB2  78038D     MOV W13, W7
008AB4  C28113     MPY W4*W7, B
120:                               sample=__builtin_sac(result2, 0);
008AB6  CC8004     SAC B, W4
008AB8  9FB794     MOV W4, [W15-30]
121:                           }
122:               
123:                           *rewritePTR++=sample; //rw
008ABA  97B39F     MOV [W15-30], W7
008ABC  780907     MOV W7, [W2]
008ABE  410162     ADD W2, #0x2, W2
008AC0  4981E0     ADDC W3, #0x0, W3
008AC2  400062     ADD W0, #0x2, W0
008AC4  4880E0     ADDC W1, #0x0, W1
124:                       }
125:                   }
126:               }
008ACC  F9002C     POP ACCBU
008ACE  F9002A     POP ACCBH
008AD0  F90028     POP ACCB
008AD2  F90026     POP ACCAU
008AD4  F90024     POP ACCAH
008AD6  F90022     POP ACCA
008AD8  78074F     MOV [--W15], W14
008ADA  BE064F     MOV.D [--W15], W12
008ADC  BE054F     MOV.D [--W15], W10
008ADE  BE044F     MOV.D [--W15], W8
008AE0  B1006F     SUB #0x6, W15
008AE2  060000     RETURN
127:               
128:               void runBTC(fractional *source, fractional *destination, fractional param1, fractional param2, fractional param3){
008B64  FA0002     LNK #0x2
008B66  BE9F88     MOV.D W8, [W15++]
008B68  BE9F8A     MOV.D W10, [W15++]
008B6A  780480     MOV W0, W9
008B6C  780501     MOV W1, W10
008B6E  780082     MOV W2, W1
008B70  780404     MOV W4, W8
008B80  BE0200     MOV.D W0, W4
008B82  B02004     ADD #0x200, W4
008B84  B08005     ADDC #0x0, W5
129:                   volatile fractional sample;
130:                   
131:                   int *readPTR=source;
132:                   int *rewritePTR=destination;
133:                   int counter=0;
134:                   int shift = scalePotsCustom(14, param1);
008B72  2000E0     MOV #0xE, W0
008B74  07FB65     RCALL scalePotsCustom
135:                   fractional sign;
136:                   
137:                   for(; counter<STREAMBUF; counter++){
008BA4  500F84     SUB W0, W4, [W15]
008BA6  588F85     SUBB W1, W5, [W15]
008BA8  3AFFEF     BRA NZ, 0x8B88
138:                       sample=*readPTR++; //!rw
008B88  780310     MOV [W0], W6
008B8A  9FBFB6     MOV W6, [W15-10]
139:                       
140:                       if(param3>=0x3FFF){     // BIT CONTROL
008B86  23FFE2     MOV #0x3FFE, W2
008B8C  540F82     SUB W8, W2, [W15]
008B8E  340004     BRA LE, 0x8B98
141:                           sign = sample&0x8000;
008B90  97BB3F     MOV [W15-10], W6
142:                           sample=sample&(-1<<(16-shift));
008B76  100070     SUBR W0, #0x10, W0
008B78  EB8180     SETM W3
008B7A  DD1980     SL W3, W0, W3
008B7C  B84861     MUL.UU W9, #1, W0
008B7E  EB0580     CLR W11
008B92  97BB3F     MOV [W15-10], W6
008B94  618306     AND W3, W6, W6
008B96  9FBFB6     MOV W6, [W15-10]
143:                       }
144:               
145:                       *rewritePTR++=sample; //rw
008B98  97BB3F     MOV [W15-10], W6
008B9A  780D06     MOV W6, [W10]
008B9C  400062     ADD W0, #0x2, W0
008B9E  4880E0     ADDC W1, #0x0, W1
008BA0  450562     ADD W10, #0x2, W10
008BA2  4D85E0     ADDC W11, #0x0, W11
146:                   }
147:               }
008BAA  BE054F     MOV.D [--W15], W10
008BAC  BE044F     MOV.D [--W15], W8
008BAE  FA8000     ULNK
008BB0  060000     RETURN
148:               
149:               void runLOP(fractional *source, fractional *destination, fractional param1, fractional param2, fractional param3){
008AE4  F80022     PUSH ACCA
008AE6  F80024     PUSH ACCAH
008AE8  F80026     PUSH ACCAU
150:                   volatile register int result asm("A");
151:                   
152:                   result =__builtin_mpy(param1, POT_LOOP, NULL, NULL, 0, NULL, NULL, 0);
008AEA  780282     MOV W2, W5
008AEC  244006     MOV #0x4400, W6
008AEE  C40113     MPY W5*W6, A
153:                   int loop_lim = __builtin_sac(result, 0);
008AF0  CC0002     SAC A, W2
154:                   
155:                   __eds__ fractional *ptrr = history.start_ptr;
008AF2  812A66     MOV 0x254C, W6
008AF4  812A77     MOV 0x254E, W7
156:                   ptrr+=loop_lim;
008AF6  DE91CF     ASR W2, #15, W3
008AF8  410102     ADD W2, W2, W2
008AFA  498183     ADDC W3, W3, W3
008AFC  D28F82     RLC W2, [W15]
008AFE  D28183     RLC W3, W3
008B00  780102     MOV W2, W2
008B02  A1F002     BCLR W2, #15
008B04  D00006     SL W6, W0
008B06  D00282     SL W2, W5
008B08  400105     ADD W0, W5, W2
008B0A  A82042     BSET SR, #1
008B0C  4B8183     ADDC W7, W3, W3
008B0E  A90042     BCLR SR, #0
008B10  AE2042     BTSS SR, #1
008B12  A80042     BSET SR, #0
008B14  D38102     RRC W2, W2
157:                   
158:                   //Run looper Buffer
159:                   if(history.read_ptr>=(ptrr)) {
008B16  225540     MOV #0x2554, W0
008B18  900290     MOV [W0+2], W5
008B1A  528F83     SUB W5, W3, [W15]
008B1C  390005     BRA NC, 0x8B28
008B1E  3A0002     BRA NZ, 0x8B24
008B20  110F90     SUBR W2, [W0], [W15]
008B22  390002     BRA NC, 0x8B28
160:                       history.read_ptr=history.start_ptr;
008B24  892AA6     MOV W6, 0x2554
008B26  892AB7     MOV W7, 0x2556
161:                   }
162:                   if(param3<0x3FFF){
008B28  23FFE0     MOV #0x3FFE, W0
008B2A  520F80     SUB W4, W0, [W15]
008B2C  3C0005     BRA GT, 0x8B38
163:                       ClipCopy_toeds(STREAMBUF, history.read_ptr, destination);
008B2E  812AA2     MOV 0x2554, W2
008B30  812AB3     MOV 0x2556, W3
008B32  201000     MOV #0x100, W0
008B34  07FC0E     RCALL ClipCopy_toeds
008B36  370004     BRA 0x8B40
164:                   }
165:                   
166:                   else {
167:                       ClipCopy_eds(STREAMBUF, destination, history.read_ptr);
008B38  812AA2     MOV 0x2554, W2
008B3A  812AB3     MOV 0x2556, W3
008B3C  201000     MOV #0x100, W0
008B3E  07FBF0     RCALL ClipCopy_eds
168:                   }
169:                   history.read_ptr+=STREAMBUF;
008B40  225540     MOV #0x2554, W0
008B42  BE0210     MOV.D [W0], W4
008B44  202002     MOV #0x200, W2
008B46  200003     MOV #0x0, W3
008B48  D00304     SL W4, W6
008B4A  D00082     SL W2, W1
008B4C  430101     ADD W6, W1, W2
008B4E  A82042     BSET SR, #1
008B50  4A8183     ADDC W5, W3, W3
008B52  A90042     BCLR SR, #0
008B54  AE2042     BTSS SR, #1
008B56  A80042     BSET SR, #0
008B58  D38102     RRC W2, W2
008B5A  BE8802     MOV.D W2, [W0]
170:               }
008B5C  F90026     POP ACCAU
008B5E  F90024     POP ACCAH
008B60  F90022     POP ACCA
008B62  060000     RETURN
171:               
172:               void processAudio(fractional *source, fractional *destination){
008C48  BE9F88     MOV.D W8, [W15++]
008C4A  BE0400     MOV.D W0, W8
173:                   volatile register int result1 asm("A");
174:                   
175:                   if(state==scrnFX){
008C4C  E2160A     CP0 state
008C4E  3A001A     BRA NZ, 0x8C84
176:                       if(fxUnits[0]==0); else fxFuncPointers[fxUnits[0]](source, source, ctrl.pots[FX_1], ctrl.pots[FX_2], ctrl.pots[FX_3]);
008C50  80B060     MOV fxUnits, W0
008C52  E00000     CP0 W0
008C54  32000A     BRA Z, 0x8C6A
008C56  D00000     SL W0, W0
008C58  225581     MOV #0x2558, W1
008C5A  400001     ADD W0, W1, W0
008C5C  780290     MOV [W0], W5
008C5E  80B2B4     MOV 0x1656, W4
008C60  80B293     MOV 0x1652, W3
008C62  80B272     MOV 0x164E, W2
008C64  780088     MOV W8, W1
008C66  780008     MOV W8, W0
008C68  010005     CALL W5
177:                       if(fxUnits[1]==0); else fxFuncPointers[fxUnits[1]](source, source, ctrl.pots[FX_4], ctrl.pots[FX_5], ctrl.pots[FX_6]);
008C6A  80B070     MOV 0x160E, W0
008C6C  E00000     CP0 W0
008C6E  32000A     BRA Z, 0x8C84
008C70  D00000     SL W0, W0
008C72  225581     MOV #0x2558, W1
008C74  400001     ADD W0, W1, W0
008C76  780290     MOV [W0], W5
008C78  80B2C4     MOV 0x1658, W4
008C7A  80B2A3     MOV 0x1654, W3
008C7C  80B282     MOV 0x1650, W2
008C7E  780088     MOV W8, W1
008C80  780008     MOV W8, W0
008C82  010005     CALL W5
178:                   }
179:               
180:                   if(kick.playing==TRUE){
008C84  225020     MOV #0x2502, W0
008C86  EBC080     SETM.B W1
008C88  10CF90     SUBR.B W1, [W0], [W15]
008C8A  3A001F     BRA NZ, 0x8CCA
181:                       ClipCopy_psv(STREAMBUF, psvbuf, kick.read_ptr);
008C8C  812852     MOV 0x250A, W2
008C8E  812863     MOV 0x250C, W3
008C90  220A41     MOV #0x20A4, W1
008C92  201000     MOV #0x100, W0
008C94  07FB2A     RCALL ClipCopy_psv
182:                          
183:                       //ClipCopy_psv(STREAMBUF, source, sine.read_ptr);
184:                       kick.block_index++;
008C96  225041     MOV #0x2504, W1
008C98  E80011     INC [W1], W0
008C9A  780880     MOV W0, [W1]
185:                       if(kick.block_index==kick.blocks) {
008C9C  5080E4     SUB W1, #0x4, W1
008C9E  500F91     SUB W0, [W1], [W15]
008CA0  3A0009     BRA NZ, 0x8CB4
186:                           kick.read_ptr=kick.start_ptr;
008CA2  812834     MOV 0x2506, W4
008CA4  812845     MOV 0x2508, W5
008CA6  892854     MOV W4, 0x250A
008CA8  892865     MOV W5, 0x250C
187:                           kick.block_index=0;
008CAA  EB0000     CLR W0
008CAC  892820     MOV W0, 0x2504
188:                           kick.playing=FALSE;
008CAE  E88081     INC2 W1, W1
008CB0  784880     MOV.B W0, [W1]
008CB2  370006     BRA 0x8CC0
189:                       }
190:                       else kick.read_ptr+=STREAMBUF;
008CB4  2250A0     MOV #0x250A, W0
008CB6  BE0110     MOV.D [W0], W2
008CB8  BE0202     MOV.D W2, W4
008CBA  B02004     ADD #0x200, W4
008CBC  B08005     ADDC #0x0, W5
008CBE  BE8804     MOV.D W4, [W0]
191:                               
192:                       //VectorScale(STREAMBUF, psvbuf, psvbuf, Q15(0.9));
193:                       VectorAdd(STREAMBUF, source, source, psvbuf);
008CC0  220A43     MOV #0x20A4, W3
008CC2  780108     MOV W8, W2
008CC4  780088     MOV W8, W1
008CC6  201000     MOV #0x100, W0
008CC8  07BBE3     RCALL _VectorAdd
194:                               
195:                       //result1 =__builtin_mpy(sample,Q15(0.85), NULL, NULL, 0, NULL, NULL, 0);
196:                       //result1 = __builtin_add(result1,kick[kick_ptr++],0);
197:                       //sample=__builtin_sac(result1, 0);
198:                   }
199:                   /*
200:                   else if (pad[0]==1&&kick_playing==TRUE&&kick_ptr==kick_max){
201:                       kick_playing=FALSE;
202:                       kick_ptr=0;
203:                   }
204:               
205:                   if(snare.playing==TRUE){
206:                       result1 =__builtin_mpy(sample,Q15(0.85), NULL, NULL, 0, NULL, NULL, 0);
207:               
208:                       result1 = __builtin_add(result1,snare[snare_ptr++],0);
209:                       sample=__builtin_sac(result1, 0);
210:               
211:                       snare_playing=FALSE;
212:                   }
213:                   */
214:               
215:                   if (stat.TEST_SIN==TRUE){
008CCA  216350     MOV #0x1635, W0
008CCC  EBC280     SETM.B W5
008CCE  12CF90     SUBR.B W5, [W0], [W15]
008CD0  3A0011     BRA NZ, 0x8CF4
216:                       ClipCopy_psv(STREAMBUF, source, sine.read_ptr);
008CD2  8127D2     MOV 0x24FA, W2
008CD4  8127E3     MOV 0x24FC, W3
008CD6  780088     MOV W8, W1
008CD8  201000     MOV #0x100, W0
008CDA  07FB07     RCALL ClipCopy_psv
217:                       sine.block_index++;
008CDC  224F41     MOV #0x24F4, W1
008CDE  E80011     INC [W1], W0
008CE0  780880     MOV W0, [W1]
218:                       if(sine.block_index==sine.blocks) {
008CE2  5080E4     SUB W1, #0x4, W1
008CE4  500F91     SUB W0, [W1], [W15]
008CE6  3A0006     BRA NZ, 0x8CF4
219:                           sine.read_ptr=sine.start_ptr;
008CE8  8127B0     MOV 0x24F6, W0
008CEA  8127C1     MOV 0x24F8, W1
008CEC  8927D0     MOV W0, 0x24FA
008CEE  8927E1     MOV W1, 0x24FC
220:                           sine.block_index=0;
008CF0  224F40     MOV #0x24F4, W0
008CF2  EB0800     CLR [W0]
221:                       }
222:                       //else sine.read_ptr+=STREAMBUF;
223:                   }
224:                       
225:                   VectorCopy(STREAMBUF, destination, source);     //copy from ping to pong buffer
008CF4  780108     MOV W8, W2
008CF6  780089     MOV W9, W1
008CF8  201000     MOV #0x100, W0
008CFA  07BBDC     RCALL _VectorCopy
226:                   
227:                   //VOLUME CONTROL
228:                   //if(pots[POT_VOLUME]<=0x000F); 
229:                   if(ctrl.pots[POT_VOLUME]>=0x7FF7);
008CFC  80B2E3     MOV 0x165C, W3
008CFE  27FF60     MOV #0x7FF6, W0
008D00  518F80     SUB W3, W0, [W15]
008D02  3C0004     BRA GT, 0x8D0C
230:                   else{
231:                       VectorScale(STREAMBUF, destination, destination, ctrl.pots[POT_VOLUME]);
008D04  780109     MOV W9, W2
008D06  780089     MOV W9, W1
008D08  201000     MOV #0x100, W0
008D0A  07BBDD     RCALL _VectorScale
232:                   }
233:               }
008D0C  BE044F     MOV.D [--W15], W8
008D0E  060000     RETURN
