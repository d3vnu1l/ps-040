Disassembly Listing for sampler_0.49.2
Generated From:
/home/fbuga/Documents/ps-040/dist/default/production/ps-040.production.elf
Feb 5, 2018 11:54:42 AM

---  /home/fbuga/Documents/ps-040/utilitites.c  ---------------------------------------------------------
1:                 #include <xc.h>
2:                 #include <p33EP512GM310.h>
3:                 #include <dsp.h>
4:                 #include <stdio.h>
5:                 #include <stdlib.h>
6:                 #include <math.h>
7:                 #include "common.h"
8:                 #include "sounds.h"
9:                 #include "audio.h"
10:                #include "flash.h"
11:                #include "screens.h"
12:                #include "utilities.h"
13:                
14:                fractional FXSCALE = Q15(NUMFX*0.000030518509476);
15:                
16:                //CONTROL VARIABLES//
17:                extern unsigned char pad[BUTTONS];
18:                extern fractional pots[POTS];
19:                extern fractional pots_scaled[POTS];
20:                extern fractional pots_custom[POTS];
21:                extern unsigned char UART_ON; 
22:                
23:                //STATUS VARIABLES//
24:                extern unsigned char hard_clipped;
25:                extern unsigned char UART_EN;
26:                extern unsigned char TEST_SIN;
27:                
28:                extern enum fxStruct fxUnits[NUMFXUNITS];
29:                extern enum screenStruc state;
30:                extern struct clip_psv sine, kick, snare;
31:                
32:                void scanButtons(void){
33:                    
34:                    static unsigned char pad_last[BUTTONS]={1};
35:                    int portrdG, portrdD, portrdF;
36:                
37:                    portrdG = PORTG;
0085F2  807313     MOV PORTG, W3
38:                    portrdD = PORTD;
0085F4  807191     MOV PORTD, W1
39:                    portrdF = PORTF;
0085F6  807292     MOV PORTF, W2
40:                    
41:                    pad[34]=(portrdF>>7)&1;     // Special function button
0085F8  DE9247     ASR W2, #7, W4
0085FA  624261     AND.B W4, #0x1, W4
0085FC  21AE65     MOV #0x1AE6, W5
0085FE  784A84     MOV.B W4, [W5]
42:                    
43:                    if(pad[34]){
008600  320033     BRA Z, 0x8668
44:                        pad[6]=(portrdF>>6)&1;
008602  DE92C6     ASR W2, #6, W5
008604  21ACA4     MOV #0x1ACA, W4
008606  62CA61     AND.B W5, #0x1, [W4]
45:                        pad[5]=(portrdF>>5)&1;
008608  DE92C5     ASR W2, #5, W5
00860A  E90204     DEC W4, W4
00860C  62CA61     AND.B W5, #0x1, [W4]
46:                        pad[4]=(portrdF>>4)&1;
00860E  DE9144     ASR W2, #4, W2
008610  E90204     DEC W4, W4
008612  614A61     AND.B W2, #0x1, [W4]
47:                        pad[0]=(portrdG)&1;
008614  520164     SUB W4, #0x4, W2
008616  61C961     AND.B W3, #0x1, [W2]
48:                        pad[1]=(portrdG>>1)&1;
008618  D18203     ASR W3, W4
00861A  E80102     INC W2, W2
00861C  624961     AND.B W4, #0x1, [W2]
49:                        pad[2]=(portrdG>>2)&1;
00861E  DE9A42     ASR W3, #2, W4
008620  E80102     INC W2, W2
008622  624961     AND.B W4, #0x1, [W2]
50:                        pad[3]=(portrdG>>3)&1;
008624  DE9A43     ASR W3, #3, W4
008626  E80102     INC W2, W2
008628  624961     AND.B W4, #0x1, [W2]
51:                        pad[16]=(portrdG>>10)&1;    // Encoder button
00862A  DE9A4A     ASR W3, #10, W4
00862C  41016D     ADD W2, #0xD, W2
00862E  624961     AND.B W4, #0x1, [W2]
52:                        pad[11]=(portrdG>>11)&1;
008630  DE9A4B     ASR W3, #11, W4
008632  510165     SUB W2, #0x5, W2
008634  624961     AND.B W4, #0x1, [W2]
53:                        pad[12]=(portrdG>>12)&1;
008636  DE9A4C     ASR W3, #12, W4
008638  E80102     INC W2, W2
00863A  624961     AND.B W4, #0x1, [W2]
54:                        pad[13]=(portrdG>>13)&1;
00863C  DE9A4D     ASR W3, #13, W4
00863E  E80102     INC W2, W2
008640  624961     AND.B W4, #0x1, [W2]
55:                        pad[14]=(portrdG>>14)&1;
008642  DE984E     ASR W3, #14, W0
008644  E80102     INC W2, W2
008646  604961     AND.B W0, #0x1, [W2]
56:                        pad[15]=(portrdG>>15)&1;
008648  DE19CF     LSR W3, #15, W3
00864A  E80002     INC W2, W0
00864C  784803     MOV.B W3, [W0]
57:                        pad[7]=(portrdD>>1)&1;
00864E  D18101     ASR W1, W2
008650  500068     SUB W0, #0x8, W0
008652  614861     AND.B W2, #0x1, [W0]
58:                        pad[8]=(portrdD>>2)&1;
008654  DE8942     ASR W1, #2, W2
008656  E80000     INC W0, W0
008658  614861     AND.B W2, #0x1, [W0]
59:                        pad[9]=(portrdD>>3)&1;
00865A  DE8943     ASR W1, #3, W2
00865C  E80000     INC W0, W0
00865E  614861     AND.B W2, #0x1, [W0]
60:                        pad[10]=(portrdD>>4)&1;
008660  DE88C4     ASR W1, #4, W1
008662  E80000     INC W0, W0
008664  60C861     AND.B W1, #0x1, [W0]
008666  370032     BRA 0x86CC
61:                    } else {
62:                        pad[23]=(portrdF>>6)&1;
008668  DE92C6     ASR W2, #6, W5
00866A  21ADB4     MOV #0x1ADB, W4
00866C  62CA61     AND.B W5, #0x1, [W4]
63:                        pad[22]=(portrdF>>5)&1;
00866E  DE92C5     ASR W2, #5, W5
008670  E90204     DEC W4, W4
008672  62CA61     AND.B W5, #0x1, [W4]
64:                        pad[21]=(portrdF>>4)&1;
008674  DE9144     ASR W2, #4, W2
008676  E90204     DEC W4, W4
008678  614A61     AND.B W2, #0x1, [W4]
65:                        pad[17]=(portrdG)&1;
00867A  520164     SUB W4, #0x4, W2
00867C  61C961     AND.B W3, #0x1, [W2]
66:                        pad[18]=(portrdG>>1)&1;
00867E  D18203     ASR W3, W4
008680  E80102     INC W2, W2
008682  624961     AND.B W4, #0x1, [W2]
67:                        pad[19]=(portrdG>>2)&1;
008684  DE9A42     ASR W3, #2, W4
008686  E80102     INC W2, W2
008688  624961     AND.B W4, #0x1, [W2]
68:                        pad[20]=(portrdG>>3)&1;
00868A  DE9A43     ASR W3, #3, W4
00868C  E80102     INC W2, W2
00868E  624961     AND.B W4, #0x1, [W2]
69:                        pad[33]=(portrdG>>10)&1;    // Encoder button
008690  DE9A4A     ASR W3, #10, W4
008692  41016D     ADD W2, #0xD, W2
008694  624961     AND.B W4, #0x1, [W2]
70:                        pad[28]=(portrdG>>11)&1;
008696  DE9A4B     ASR W3, #11, W4
008698  510165     SUB W2, #0x5, W2
00869A  624961     AND.B W4, #0x1, [W2]
71:                        pad[29]=(portrdG>>12)&1;
00869C  DE9A4C     ASR W3, #12, W4
00869E  E80102     INC W2, W2
0086A0  624961     AND.B W4, #0x1, [W2]
72:                        pad[30]=(portrdG>>13)&1;
0086A2  DE9A4D     ASR W3, #13, W4
0086A4  E80102     INC W2, W2
0086A6  624961     AND.B W4, #0x1, [W2]
73:                        pad[31]=(portrdG>>14)&1;
0086A8  DE984E     ASR W3, #14, W0
0086AA  E80102     INC W2, W2
0086AC  604961     AND.B W0, #0x1, [W2]
74:                        pad[32]=(portrdG>>15)&1;
0086AE  DE19CF     LSR W3, #15, W3
0086B0  E80002     INC W2, W0
0086B2  784803     MOV.B W3, [W0]
75:                        pad[24]=(portrdD>>1)&1;
0086B4  D18101     ASR W1, W2
0086B6  500068     SUB W0, #0x8, W0
0086B8  614861     AND.B W2, #0x1, [W0]
76:                        pad[25]=(portrdD>>2)&1;
0086BA  DE8942     ASR W1, #2, W2
0086BC  E80000     INC W0, W0
0086BE  614861     AND.B W2, #0x1, [W0]
77:                        pad[26]=(portrdD>>3)&1;
0086C0  DE8943     ASR W1, #3, W2
0086C2  E80000     INC W0, W0
0086C4  614861     AND.B W2, #0x1, [W0]
78:                        pad[27]=(portrdD>>4)&1;
0086C6  DE88C4     ASR W1, #4, W1
0086C8  E80000     INC W0, W0
0086CA  60C861     AND.B W1, #0x1, [W0]
79:                    }
80:                    
81:                    // SAMPLE TRIGGERS 
82:                    if(pad[0]==0){                                         //kick
0086CC  21AC40     MOV #0x1AC4, W0
0086CE  E00410     CP0.B [W0]
0086D0  3A0002     BRA NZ, 0x86D6
83:                        kick.playing=TRUE;
0086D2  225860     MOV #0x2586, W0
0086D4  EBC800     SETM.B [W0]
84:                    }
85:                    /*
86:                    if(pad[2]==0&&hat_playing==FALSE){                                          //hat
87:                        hat_playing=TRUE;
88:                    }
89:                    */
90:                    if(pad[1]==0&&snare.playing==FALSE){                                        //snare
0086D6  21AC50     MOV #0x1AC5, W0
0086D8  E00410     CP0.B [W0]
0086DA  3A0004     BRA NZ, 0x86E4
0086DC  225960     MOV #0x2596, W0
0086DE  E00410     CP0.B [W0]
0086E0  3A0001     BRA NZ, 0x86E4
91:                        snare.playing=TRUE;
0086E2  EBC800     SETM.B [W0]
92:                    }
93:                }
0086E4  060000     RETURN
94:                
95:                void readPots(void){
0086E6  4787F2     ADD W15, #0x12, W15
0086E8  BE9F88     MOV.D W8, [W15++]
0086EA  BE9F8A     MOV.D W10, [W15++]
0086EC  BE9F8C     MOV.D W12, [W15++]
0086EE  781F8E     MOV W14, [W15++]
0086F0  F80022     PUSH ACCA
0086F2  F80024     PUSH ACCAH
0086F4  F80026     PUSH ACCAU
96:                    volatile register int result asm("A");
97:                    fractional pots_buf[POTS/2]; 
98:                    fractional pots_last[POTS/2];
99:                    static fractional pots_smoothed[POTS/2];
100:                   const fractional pot_alpha = 0x0F80;    //larger = rougher, lower = more latency
101:                   const fractional pot_alpha_inv = 32767-pot_alpha;
102:                   const unsigned int shift = 0xFE00;
103:                   int i;
104:                   _AD1IF = 0; // Clear conversion done status bit
0086F6  A9A801     BCLR 0x801, #5
105:                   if(pad[34])i=0;
0086FA  21AE60     MOV #0x1AE6, W0
0086FC  E00410     CP0.B [W0]
0086FE  320001     BRA Z, 0x8702
008700  EB0080     CLR W1
106:                   else i=POTS/2;
0086F8  200061     MOV #0x6, W1
107:                   pots_buf[0]=(ADC1BUF5>>1)|0x7;
008702  D5030A     LSR ADC1BUF5, WREG
008704  780680     MOV W0, W13
008706  B3007D     IOR #0x7, W13
108:                   pots_buf[1]=(ADC1BUF2>>1)|0x7;
008708  D50304     LSR ADC1BUF2, WREG
00870A  780600     MOV W0, W12
00870C  B3007C     IOR #0x7, W12
109:                   pots_buf[2]=(ADC1BUF4>>1)|0x7;
00870E  D50308     LSR ADC1BUF4, WREG
008710  780580     MOV W0, W11
008712  B3007B     IOR #0x7, W11
110:                   pots_buf[3]=(ADC1BUF1>>1)|0x7;
008714  D50302     LSR ADC1BUF1, WREG
008716  780200     MOV W0, W4
008718  B30074     IOR #0x7, W4
00871A  9FB7D4     MOV W4, [W15-22]
111:                   pots_buf[4]=(ADC1BUF3>>1)|0x7;
00871C  D50306     LSR ADC1BUF3, WREG
00871E  780280     MOV W0, W5
008720  B30075     IOR #0x7, W5
008722  9FB7C5     MOV W5, [W15-24]
112:                   pots_buf[5]=(ADC1BUF0>>1)|0x7;
008724  D50300     LSR ADC1BUF0, WREG
008726  780500     MOV W0, W10
008728  B3007A     IOR #0x7, W10
113:                   
114:                   pots_last[0]=(pots_smoothed[0]&shift);
00872A  225FC2     MOV #0x25FC, W2
00872C  2FE000     MOV #0xFE00, W0
00872E  600312     AND W0, [W2], W6
008730  9FB7B6     MOV W6, [W15-26]
115:                   pots_last[1]=(pots_smoothed[1]&shift);
008732  E88482     INC2 W2, W9
008734  600199     AND W0, [W9], W3
008736  9FB7A3     MOV W3, [W15-28]
116:                   pots_last[2]=(pots_smoothed[2]&shift);
008738  410464     ADD W2, #0x4, W8
00873A  600218     AND W0, [W8], W4
00873C  9FB794     MOV W4, [W15-30]
117:                   pots_last[3]=(pots_smoothed[3]&shift);
00873E  4103E6     ADD W2, #0x6, W7
008740  600297     AND W0, [W7], W5
008742  9FB785     MOV W5, [W15-32]
118:                   pots_last[4]=(pots_smoothed[4]&shift);
008744  410368     ADD W2, #0x8, W6
008746  600316     AND W0, [W6], W6
008748  9FAFF6     MOV W6, [W15-34]
119:                   pots_last[5]=(pots_smoothed[5]&shift);
00874A  4101EA     ADD W2, #0xA, W3
00874C  600213     AND W0, [W3], W4
00874E  9FAFE4     MOV W4, [W15-36]
120:                   
121:                   result =__builtin_mpy(pots_buf[0],pot_alpha, NULL, NULL, 0, NULL, NULL, 0);
008750  20F805     MOV #0xF80, W5
008752  78030D     MOV W13, W6
008754  C40113     MPY W5*W6, A
122:                   result =__builtin_mac(result, pots_smoothed[0], pot_alpha_inv, NULL, NULL, 0, NULL, NULL, 0, 0, result);
008756  780712     MOV [W2], W14
008758  2707F4     MOV #0x707F, W4
00875A  78030E     MOV W14, W6
00875C  C10112     MAC W4*W6, A
123:                   pots_smoothed[0]=__builtin_sac(result, 0);
00875E  CC0012     SAC A, [W2]
124:                   result =__builtin_mpy(pots_buf[1],pot_alpha, NULL, NULL, 0, NULL, NULL, 0);
008760  78030C     MOV W12, W6
008762  C40113     MPY W5*W6, A
125:                   result =__builtin_mac(result, pots_smoothed[1], pot_alpha_inv, NULL, NULL, 0, NULL, NULL, 0, 0, result);
008764  780319     MOV [W9], W6
008766  C10112     MAC W4*W6, A
126:                   pots_smoothed[1]=__builtin_sac(result, 0);
008768  CC0019     SAC A, [W9]
127:                   result =__builtin_mpy(pots_buf[2],pot_alpha, NULL, NULL, 0, NULL, NULL, 0);
00876A  78030B     MOV W11, W6
00876C  C40113     MPY W5*W6, A
128:                   result =__builtin_mac(result, pots_smoothed[2], pot_alpha_inv, NULL, NULL, 0, NULL, NULL, 0, 0, result);
00876E  780318     MOV [W8], W6
008770  C10112     MAC W4*W6, A
129:                   pots_smoothed[2]=__builtin_sac(result, 0);
008772  CC0018     SAC A, [W8]
130:                   result =__builtin_mpy(pots_buf[3],pot_alpha, NULL, NULL, 0, NULL, NULL, 0);
008774  97B35F     MOV [W15-22], W6
008776  C40113     MPY W5*W6, A
131:                   result =__builtin_mac(result, pots_smoothed[3], pot_alpha_inv, NULL, NULL, 0, NULL, NULL, 0, 0, result);
008778  780317     MOV [W7], W6
00877A  C10112     MAC W4*W6, A
132:                   pots_smoothed[3]=__builtin_sac(result, 0);
00877C  CC0017     SAC A, [W7]
133:                   result =__builtin_mpy(pots_buf[4],pot_alpha, NULL, NULL, 0, NULL, NULL, 0);
00877E  97B34F     MOV [W15-24], W6
008780  C40113     MPY W5*W6, A
134:                   result =__builtin_mac(result, pots_smoothed[4], pot_alpha_inv, NULL, NULL, 0, NULL, NULL, 0, 0, result);
008782  410368     ADD W2, #0x8, W6
008784  780396     MOV [W6], W7
008786  C20112     MAC W4*W7, A
135:                   pots_smoothed[4]=__builtin_sac(result, 0);
008788  CC0016     SAC A, [W6]
136:                   result =__builtin_mpy(pots_buf[5],pot_alpha, NULL, NULL, 0, NULL, NULL, 0);
00878A  78030A     MOV W10, W6
00878C  C40113     MPY W5*W6, A
137:                   result =__builtin_mac(result, pots_smoothed[5], pot_alpha_inv, NULL, NULL, 0, NULL, NULL, 0, 0, result);
00878E  780293     MOV [W3], W5
008790  C00112     MAC W4*W5, A
138:                   pots_smoothed[5]=__builtin_sac(result, 0);
008792  CC0004     SAC A, W4
008794  780984     MOV W4, [W3]
139:                   
140:                   if((pots_smoothed[0]&shift)!=pots_last[0]) 
008796  600012     AND W0, [W2], W0
008798  97B13F     MOV [W15-26], W2
00879A  500F82     SUB W0, W2, [W15]
00879C  320004     BRA Z, 0x87A6
141:                       pots[i]=pots_buf[0];
00879E  D00101     SL W1, W2
0087A0  2127C0     MOV #0x127C, W0
0087A2  410000     ADD W2, W0, W0
0087A4  78080D     MOV W13, [W0]
142:                   if((pots_smoothed[1]&shift)!=pots_last[1]) 
0087A6  2FE000     MOV #0xFE00, W0
0087A8  225FE2     MOV #0x25FE, W2
0087AA  600012     AND W0, [W2], W0
0087AC  97B1AF     MOV [W15-28], W3
0087AE  500F83     SUB W0, W3, [W15]
0087B0  320005     BRA Z, 0x87BC
143:                       pots[i+1]=pots_buf[1];
0087B2  E80001     INC W1, W0
0087B4  D00000     SL W0, W0
0087B6  2127C2     MOV #0x127C, W2
0087B8  400002     ADD W0, W2, W0
0087BA  78080C     MOV W12, [W0]
144:                   if((pots_smoothed[2]&shift)!=pots_last[2]) 
0087BC  2FE000     MOV #0xFE00, W0
0087BE  226002     MOV #0x2600, W2
0087C0  600012     AND W0, [W2], W0
0087C2  97B29F     MOV [W15-30], W5
0087C4  500F85     SUB W0, W5, [W15]
0087C6  320005     BRA Z, 0x87D2
145:                       pots[i+2]=pots_buf[2];
0087C8  E88001     INC2 W1, W0
0087CA  D00000     SL W0, W0
0087CC  2127C2     MOV #0x127C, W2
0087CE  400002     ADD W0, W2, W0
0087D0  78080B     MOV W11, [W0]
146:                   if((pots_smoothed[3]&shift)!=pots_last[3]) 
0087D2  2FE000     MOV #0xFE00, W0
0087D4  226022     MOV #0x2602, W2
0087D6  600012     AND W0, [W2], W0
0087D8  97B30F     MOV [W15-32], W6
0087DA  500F86     SUB W0, W6, [W15]
0087DC  320006     BRA Z, 0x87EA
147:                       pots[i+3]=pots_buf[3];
0087DE  408063     ADD W1, #0x3, W0
0087E0  D00000     SL W0, W0
0087E2  2127C2     MOV #0x127C, W2
0087E4  400002     ADD W0, W2, W0
0087E6  97B2DF     MOV [W15-22], W5
0087E8  780805     MOV W5, [W0]
148:                   if((pots_smoothed[4]&shift)!=pots_last[4]) 
0087EA  2FE000     MOV #0xFE00, W0
0087EC  226042     MOV #0x2604, W2
0087EE  600012     AND W0, [W2], W0
0087F0  97AB7F     MOV [W15-34], W6
0087F2  500F86     SUB W0, W6, [W15]
0087F4  320006     BRA Z, 0x8802
149:                       pots[i+4]=pots_buf[4];
0087F6  408064     ADD W1, #0x4, W0
0087F8  D00000     SL W0, W0
0087FA  2127C2     MOV #0x127C, W2
0087FC  400002     ADD W0, W2, W0
0087FE  97B2CF     MOV [W15-24], W5
008800  780805     MOV W5, [W0]
150:                   if((pots_smoothed[5]&shift)!=pots_last[5]) 
008802  2FE000     MOV #0xFE00, W0
008804  620200     AND W4, W0, W4
008806  97AB6F     MOV [W15-36], W6
008808  520F86     SUB W4, W6, [W15]
00880A  320005     BRA Z, 0x8816
151:                       pots[i+5]=pots_buf[5];     
00880C  4080E5     ADD W1, #0x5, W1
00880E  D00081     SL W1, W1
008810  2127C0     MOV #0x127C, W0
008812  408080     ADD W1, W0, W1
008814  78088A     MOV W10, [W1]
152:               }
008816  F90026     POP ACCAU
008818  F90024     POP ACCAH
00881A  F90022     POP ACCA
00881C  78074F     MOV [--W15], W14
00881E  BE064F     MOV.D [--W15], W12
008820  BE054F     MOV.D [--W15], W10
008822  BE044F     MOV.D [--W15], W8
008824  B1012F     SUB #0x12, W15
008826  060000     RETURN
153:               
154:               void scalePots(void){
008828  F80022     PUSH ACCA
00882A  F80024     PUSH ACCAH
00882C  F80026     PUSH ACCAU
155:                   /* Potentiometer scaling for fx or lcd display */
156:                   volatile register int scaled asm("A");
157:                   
158:                   scaled=__builtin_mpy(pots[0],POT_PERCENT, NULL, NULL, 0, NULL, NULL, 0);
00882E  232644     MOV #0x3264, W4
008830  8093E5     MOV pots, W5
008832  C00113     MPY W4*W5, A
159:                   pots_scaled[0]=__builtin_sac(scaled, 7);
008834  212940     MOV #0x1294, W0
008836  CC0390     SAC A, #7, [W0]
160:                   scaled=__builtin_mpy(pots[1],POT_PERCENT, NULL, NULL, 0, NULL, NULL, 0);
008838  8093F5     MOV 0x127E, W5
00883A  C00113     MPY W4*W5, A
161:                   pots_scaled[1]=__builtin_sac(scaled, 7);
00883C  E88000     INC2 W0, W0
00883E  CC0390     SAC A, #7, [W0]
162:                   scaled=__builtin_mpy(pots[2],POT_PERCENT, NULL, NULL, 0, NULL, NULL, 0);
008840  809405     MOV 0x1280, W5
008842  C00113     MPY W4*W5, A
163:                   pots_scaled[2]=__builtin_sac(scaled, 7);
008844  E88000     INC2 W0, W0
008846  CC0390     SAC A, #7, [W0]
164:                   scaled=__builtin_mpy(pots[3],POT_PERCENT, NULL, NULL, 0, NULL, NULL, 0);
008848  809415     MOV 0x1282, W5
00884A  C00113     MPY W4*W5, A
165:                   pots_scaled[3]=__builtin_sac(scaled, 7);
00884C  E88000     INC2 W0, W0
00884E  CC0390     SAC A, #7, [W0]
166:                   scaled=__builtin_mpy(pots[4],POT_PERCENT, NULL, NULL, 0, NULL, NULL, 0);
008850  809425     MOV 0x1284, W5
008852  C00113     MPY W4*W5, A
167:                   pots_scaled[4]=__builtin_sac(scaled, 7);
008854  E88000     INC2 W0, W0
008856  CC0390     SAC A, #7, [W0]
168:                   scaled=__builtin_mpy(pots[5],POT_PERCENT, NULL, NULL, 0, NULL, NULL, 0);
008858  809435     MOV 0x1286, W5
00885A  C00113     MPY W4*W5, A
169:                   pots_scaled[5]=__builtin_sac(scaled, 7);
00885C  E88000     INC2 W0, W0
00885E  CC0390     SAC A, #7, [W0]
170:                   
171:                   scaled=__builtin_mpy(pots[POT_FX_SELECT1],FXSCALE, NULL, NULL, 0, NULL, NULL, 0);
008860  8081C4     MOV 0x1038, W4
008862  809485     MOV 0x1290, W5
008864  C00113     MPY W4*W5, A
172:                   pots_scaled[POT_FX_SELECT1]=__builtin_sac(scaled, 0);
008866  40006A     ADD W0, #0xA, W0
008868  CC0010     SAC A, [W0]
173:                   scaled=__builtin_mpy(pots[POT_FX_SELECT2],FXSCALE, NULL, NULL, 0, NULL, NULL, 0);
00886A  809495     MOV 0x1292, W5
00886C  C00113     MPY W4*W5, A
174:                   pots_scaled[POT_FX_SELECT2]=__builtin_sac(scaled, 0);
00886E  E88000     INC2 W0, W0
008870  CC0010     SAC A, [W0]
175:               }
008872  F90026     POP ACCAU
008874  F90024     POP ACCAH
008876  F90022     POP ACCA
008878  060000     RETURN
176:               
177:               fractional scalePotsCustom(unsigned int steps, fractional scaleme){
00887A  781F88     MOV W8, [W15++]
00887C  F80022     PUSH ACCA
00887E  F80024     PUSH ACCAH
008880  F80026     PUSH ACCAU
008882  780100     MOV W0, W2
008884  780401     MOV W1, W8
178:                   volatile register int scaled asm("A");
179:                   fractional scale = Q15(steps*0.000030518509476);
008886  B81061     MUL.UU W2, #1, W0
008888  07BED5     RCALL ___floatunsisf
00888A  201002     MOV #0x100, W2
00888C  238003     MOV #0x3800, W3
00888E  07BF27     RCALL ___mulsf3
008890  2FE002     MOV #0xFE00, W2
008892  246FF3     MOV #0x46FF, W3
008894  07BF24     RCALL ___mulsf3
008896  200002     MOV #0x0, W2
008898  23F003     MOV #0x3F00, W3
00889A  07BE4E     RCALL ___addsf3
00889C  07BEAA     RCALL ___fixsfsi
180:                   
181:                   scaled=__builtin_mpy(scaleme,scale, NULL, NULL, 0, NULL, NULL, 0);
00889E  780208     MOV W8, W4
0088A0  780280     MOV W0, W5
0088A2  C00113     MPY W4*W5, A
182:                   return(__builtin_sac(scaled, 0));
0088A4  CC0000     SAC A, W0
183:               }
0088A6  F90026     POP ACCAU
0088A8  F90024     POP ACCAH
0088AA  F90022     POP ACCA
0088AC  78044F     MOV [--W15], W8
0088AE  060000     RETURN
184:               
185:               void changeFX(void){
186:                   fxUnits[0]=pots_scaled[POT_FX_SELECT1];
0088B0  809540     MOV 0x12A8, W0
0088B2  888070     MOV W0, fxUnits
187:                   fxUnits[1]=pots_scaled[POT_FX_SELECT2];
0088B4  809550     MOV 0x12AA, W0
0088B6  888080     MOV W0, 0x1010
188:               }
0088B8  060000     RETURN
189:               
190:               void display(void){
191:                   scalePots();
0088BA  07FFB6     RCALL scalePots
192:                   changeFX();
0088BC  07FFF9     RCALL changeFX
193:                   // Update ui state logic here
194:                   state = (ENCODERCNTL/4)+1;
0088BE  800E30     MOV POS1CNTL, W0
0088C0  DE0042     LSR W0, #2, W0
0088C2  E80000     INC W0, W0
0088C4  888150     MOV W0, 0x102A
195:                   
196:                   // Update screen here
197:                   screenUpdate();
0088C6  07FE75     RCALL screenUpdate
198:                  
199:                  if(UART_ON==TRUE){
0088C8  BFD009     MOV.B UART_ON, WREG
0088CA  404FE1     ADD.B W0, #0x1, [W15]
0088CC  3A0007     BRA NZ, 0x88DC
200:                       //printf("b1 %d, b2 %d, b3 %d, b4 %d\r\n", pad[0], pad[1], pad[2], pad[3]);
201:                       //printf("b4 %d, b5 %d, b6 %d, b7 %d\r\n", pad[4], pad[5], pad[6], pad[7]);
202:                       //printf("P1 %x  P1 %d bpm %d\r\n", pots[0], pots[0], bpm);   //check pots
203:                       printf("P1 %d  P2 %d P3 %d\r\n", pots[0], pots[1], pots[2]);   //check pots
0088CE  F81280     PUSH 0x1280
0088D0  F8127E     PUSH 0x127E
0088D2  F8127C     PUSH pots
0088D4  2FA760     MOV #0xFA76, W0
0088D6  781F80     MOV W0, [W15++]
0088D8  07BF73     RCALL __printf_cdnopuxX
0088DA  5787E8     SUB W15, #0x8, W15
204:                       //printf("%d\r\n", sample);  //check input ADC
205:                       //printf("%d, pot1 %x, pot2 %x, avg %x\r\n", sample, pots[1], pots[2], average);  //check input ADC
206:                   }
207:                  
208:                  SLED=~SLED;
0088DC  8072A0     MOV LATF, W0
0088DE  EA8000     COM W0, W0
0088E0  600061     AND W0, #0x1, W0
0088E2  8072A1     MOV LATF, W1
0088E4  A10001     BCLR W1, #0
0088E6  700081     IOR W0, W1, W1
0088E8  8872A1     MOV W1, LATF
209:               }
0088EA  060000     RETURN
210:               
211:               void processRxData(fractional *sourceBuffer, fractional *targetBuffer){
212:                   /* This procedure loops back the received data to the*/
213:                   /* the codec output. The user application could process*/
214:                   /* this data as per application requirements.*/
215:                   int index;
216:                   for(index = 0;index < STREAMBUF;index ++)
0088EC  EB0100     CLR W2
0088EE  201006     MOV #0x100, W6
0088FC  E80102     INC W2, W2
0088FE  510F86     SUB W2, W6, [W15]
008900  3AFFF7     BRA NZ, 0x88F0
217:                   {
218:                       targetBuffer[index] = sourceBuffer[index];
0088F0  B91261     MUL.SU W2, #1, W4
0088F2  420204     ADD W4, W4, W4
0088F4  4A8285     ADDC W5, W5, W5
0088F6  408184     ADD W1, W4, W3
0088F8  400204     ADD W0, W4, W4
0088FA  780994     MOV [W4], [W3]
219:                   }
220:               }
008902  060000     RETURN
221:               
222:               void ClipCopy_psv(int numElems, fractional * dstV, __psv__ fractional * srcV){
008904  BE9F88     MOV.D W8, [W15++]
008906  BE9F8A     MOV.D W10, [W15++]
00890C  E90400     DEC W0, W8
00890E  EB0480     CLR W9
008910  440461     ADD W8, #0x1, W8
008912  4C84E0     ADDC W9, #0x0, W9
008914  440408     ADD W8, W8, W8
008916  4C8489     ADDC W9, W9, W9
008918  410408     ADD W2, W8, W8
00891A  498489     ADDC W3, W9, W9
00891E  B80D61     MUL.UU W1, #1, W10
008920  D00300     SL W0, W6
223:                   int i;
224:                   
225:                   for(i=0; i<numElems; i++){
008908  E00000     CP0 W0
00890A  34001D     BRA LE, 0x8946
00891C  EB0000     CLR W0
00893C  E80000     INC W0, W0
00893E  510F88     SUB W2, W8, [W15]
008940  3AFFEF     BRA NZ, 0x8920
008942  518F89     SUB W3, W9, [W15]
008944  3AFFED     BRA NZ, 0x8920
226:                       *dstV++=*srcV++;
008922  43030A     ADD W6, W10, W6
008924  800197     MOV DSRPAG, W7
008926  780202     MOV W2, W4
008928  A4F004     BTSTS.C W4, #15
00892A  D28283     RLC W3, W5
00892C  880195     MOV W5, DSRPAG
00892E  000000     NOP
008930  780214     MOV [W4], W4
008932  880197     MOV W7, DSRPAG
008934  000000     NOP
008936  780B04     MOV W4, [W6]
008938  410162     ADD W2, #0x2, W2
00893A  4981E0     ADDC W3, #0x0, W3
227:                   }
228:               }
008946  BE054F     MOV.D [--W15], W10
008948  BE044F     MOV.D [--W15], W8
00894A  060000     RETURN
229:               
230:               void ClipCopy_eds(int numElems, fractional * dstV, __eds__ fractional * srcV){
00894C  BE9F88     MOV.D W8, [W15++]
008952  E90000     DEC W0, W0
008954  DE04CF     LSR W0, #15, W9
008956  780400     MOV W0, W8
008958  A1F008     BCLR W8, #15
00895A  440461     ADD W8, #0x1, W8
00895C  4C84E0     ADDC W9, #0x0, W9
00895E  440408     ADD W8, W8, W8
008960  4C8489     ADDC W9, W9, W9
008962  D28F88     RLC W8, [W15]
008964  D28489     RLC W9, W9
008966  780408     MOV W8, W8
008968  A1F008     BCLR W8, #15
00896A  D00002     SL W2, W0
00896C  D00208     SL W8, W4
00896E  400404     ADD W0, W4, W8
008970  A82042     BSET SR, #1
008972  498489     ADDC W3, W9, W9
008974  A90042     BCLR SR, #0
008976  AE2042     BTSS SR, #1
008978  A80042     BSET SR, #0
00897A  D38408     RRC W8, W8
00897E  B80861     MUL.UU W1, #1, W0
008980  D00304     SL W4, W6
231:                   int i;
232:                   
233:                   for(i=0; i<numElems; i++){
00894E  E00000     CP0 W0
008950  34002B     BRA LE, 0x89A8
00897C  EB0200     CLR W4
00899E  E80204     INC W4, W4
0089A0  510F88     SUB W2, W8, [W15]
0089A2  3AFFEE     BRA NZ, 0x8980
0089A4  518F89     SUB W3, W9, [W15]
0089A6  3AFFEC     BRA NZ, 0x8980
234:                       *dstV++=*srcV++;
008982  430300     ADD W6, W0, W6
008984  800195     MOV DSRPAG, W5
008986  880193     MOV W3, DSRPAG
008988  000000     NOP
00898A  780B12     MOV [W2], [W6]
00898C  880195     MOV W5, DSRPAG
00898E  000000     NOP
008990  780282     MOV W2, W5
008992  B00022     ADD #0x2, W2
008994  6A8282     XOR W5, W2, W5
008996  AF6042     BTSC SR, #3
008998  A0F002     BSET W2, #15
00899A  D28285     RLC W5, W5
00899C  B08003     ADDC #0x0, W3
235:                   } 
236:               }
0089A8  BE044F     MOV.D [--W15], W8
0089AA  060000     RETURN
237:               
238:               void ClipCopy_toeds(int numElems, __eds__ fractional * dstV, fractional * srcV){
0089AC  BE9F88     MOV.D W8, [W15++]
0089AE  BE9F8A     MOV.D W10, [W15++]
0089B4  E90000     DEC W0, W0
0089B6  DE04CF     LSR W0, #15, W9
0089B8  780400     MOV W0, W8
0089BA  A1F008     BCLR W8, #15
0089BC  440461     ADD W8, #0x1, W8
0089BE  4C84E0     ADDC W9, #0x0, W9
0089C0  440408     ADD W8, W8, W8
0089C2  4C8489     ADDC W9, W9, W9
0089C4  D28F88     RLC W8, [W15]
0089C6  D28489     RLC W9, W9
0089C8  780408     MOV W8, W8
0089CA  A1F008     BCLR W8, #15
0089CC  D00002     SL W2, W0
0089CE  D00208     SL W8, W4
0089D0  400404     ADD W0, W4, W8
0089D2  A82042     BSET SR, #1
0089D4  498489     ADDC W3, W9, W9
0089D6  A90042     BCLR SR, #0
0089D8  AE2042     BTSS SR, #1
0089DA  A80042     BSET SR, #0
0089DC  D38408     RRC W8, W8
0089E0  B80D61     MUL.UU W1, #1, W10
0089E2  D00384     SL W4, W7
239:                   int i;
240:                   
241:                   for(i=0; i<numElems; i++){
0089B0  E00000     CP0 W0
0089B2  340029     BRA LE, 0x8A06
0089DE  EB0200     CLR W4
0089FC  E80204     INC W4, W4
0089FE  510F88     SUB W2, W8, [W15]
008A00  3AFFF0     BRA NZ, 0x89E2
008A02  518F89     SUB W3, W9, [W15]
008A04  3AFFEE     BRA NZ, 0x89E2
242:                       *dstV++=*srcV++;
0089E4  43838A     ADD W7, W10, W7
0089E6  8001A5     MOV DSWPAG, W5
0089E8  8801A3     MOV W3, DSWPAG
0089EA  780917     MOV [W7], [W2]
0089EC  8801A5     MOV W5, DSWPAG
0089EE  780002     MOV W2, W0
0089F0  B00022     ADD #0x2, W2
0089F2  680002     XOR W0, W2, W0
0089F4  AF6042     BTSC SR, #3
0089F6  A0F002     BSET W2, #15
0089F8  D28000     RLC W0, W0
0089FA  B08003     ADDC #0x0, W3
243:                   } 
244:               }
008A06  BE054F     MOV.D [--W15], W10
008A08  BE044F     MOV.D [--W15], W8
008A0A  060000     RETURN
245:               
246:               //A blocking delay function. Not very accurate but good enough.
247:               void Delay_us(unsigned int delay)
248:               {
249:                   int i;
250:                   for (i = 0; i < delay; i++)
008A0C  E00000     CP0 W0
008A0E  320006     BRA Z, 0x8A1C
008A10  EB0080     CLR W1
008A16  E80081     INC W1, W1
008A18  500F81     SUB W0, W1, [W15]
008A1A  3EFFFB     BRA GTU, 0x8A12
251:                   {
252:                       __asm__ volatile ("repeat #50");
008A12  090032     REPEAT #0x32
253:                       __asm__ volatile ("nop");
008A14  000000     NOP
254:                   }
255:               }
008A1C  060000     RETURN
---  /home/fbuga/Documents/ps-040/sounds.c  -------------------------------------------------------------
1:                 /*
2:                  * File:   sounds.c
3:                  * Author: ThinkPad-OwnerX220
4:                  *
5:                  * Created on February 16, 2017, 2:48 PM
6:                  */
7:                 #include "xc.h"
8:                 #include "common.h"
9:                 #include "sounds.h"
10:                #include "dsp.h"
11:                
12:                fractional __attribute__((space(psv))) sintab[SINRES] = {
13:                     0,     201,     402,     603,     804,    1005,    1206,    1406,
14:                  1607,    1808,    2009,    2209,    2410,    2610,    2811,    3011,
15:                  3211,    3411,    3611,    3811,    4011,    4210,    4409,    4608,
16:                  4807,    5006,    5205,    5403,    5601,    5799,    5997,    6195,
17:                  6392,    6589,    6786,    6982,    7179,    7375,    7571,    7766,
18:                  7961,    8156,    8351,    8545,    8739,    8932,    9126,    9319,
19:                  9511,    9703,    9895,   10087,   10278,   10469,   10659,   10849,
20:                 11038,   11227,   11416,   11604,   11792,   11980,   12166,   12353,
21:                 12539,   12724,   12909,   13094,   13278,   13462,   13645,   13827,
22:                 14009,   14191,   14372,   14552,   14732,   14911,   15090,   15268,
23:                 15446,   15623,   15799,   15975,   16150,   16325,   16499,   16672,
24:                 16845,   17017,   17189,   17360,   17530,   17699,   17868,   18036,
25:                 18204,   18371,   18537,   18702,   18867,   19031,   19194,   19357,
26:                 19519,   19680,   19840,   20000,   20159,   20317,   20474,   20631,
27:                 20787,   20942,   21096,   21249,   21402,   21554,   21705,   21855,
28:                 22004,   22153,   22301,   22448,   22594,   22739,   22883,   23027,
29:                 23169,   23311,   23452,   23592,   23731,   23869,   24006,   24143,
30:                 24278,   24413,   24546,   24679,   24811,   24942,   25072,   25201,
31:                 25329,   25456,   25582,   25707,   25831,   25954,   26077,   26198,
32:                 26318,   26437,   26556,   26673,   26789,   26905,   27019,   27132,
33:                 27244,   27355,   27466,   27575,   27683,   27790,   27896,   28001,
34:                 28105,   28208,   28309,   28410,   28510,   28608,   28706,   28802,
35:                 28897,   28992,   29085,   29177,   29268,   29358,   29446,   29534,
36:                 29621,   29706,   29790,   29873,   29955,   30036,   30116,   30195,
37:                 30272,   30349,   30424,   30498,   30571,   30643,   30713,   30783,
38:                 30851,   30918,   30984,   31049,   31113,   31175,   31236,   31297,
39:                 31356,   31413,   31470,   31525,   31580,   31633,   31684,   31735,
40:                 31785,   31833,   31880,   31926,   31970,   32014,   32056,   32097,
41:                 32137,   32176,   32213,   32249,   32284,   32318,   32350,   32382,
42:                 32412,   32441,   32468,   32495,   32520,   32544,   32567,   32588,
43:                 32609,   32628,   32646,   32662,   32678,   32692,   32705,   32717,
44:                 32727,   32736,   32744,   32751,   32757,   32761,   32764,   32766,
45:                 32767,   32766,   32764,   32761,   32757,   32751,   32744,   32736,
46:                 32727,   32717,   32705,   32692,   32678,   32662,   32646,   32628,
47:                 32609,   32588,   32567,   32544,   32520,   32495,   32468,   32441,
48:                 32412,   32382,   32350,   32318,   32284,   32249,   32213,   32176,
49:                 32137,   32097,   32056,   32014,   31970,   31926,   31880,   31833,
50:                 31785,   31735,   31684,   31633,   31580,   31525,   31470,   31413,
51:                 31356,   31297,   31236,   31175,   31113,   31049,   30984,   30918,
52:                 30851,   30783,   30713,   30643,   30571,   30498,   30424,   30349,
53:                 30272,   30195,   30116,   30036,   29955,   29873,   29790,   29706,
54:                 29621,   29534,   29446,   29358,   29268,   29177,   29085,   28992,
55:                 28897,   28802,   28706,   28608,   28510,   28410,   28309,   28208,
56:                 28105,   28001,   27896,   27790,   27683,   27575,   27466,   27355,
57:                 27244,   27132,   27019,   26905,   26789,   26673,   26556,   26437,
58:                 26318,   26198,   26077,   25954,   25831,   25707,   25582,   25456,
59:                 25329,   25201,   25072,   24942,   24811,   24679,   24546,   24413,
60:                 24278,   24143,   24006,   23869,   23731,   23592,   23452,   23311,
61:                 23169,   23027,   22883,   22739,   22594,   22448,   22301,   22153,
62:                 22004,   21855,   21705,   21554,   21402,   21249,   21096,   20942,
63:                 20787,   20631,   20474,   20317,   20159,   20000,   19840,   19680,
64:                 19519,   19357,   19194,   19031,   18867,   18702,   18537,   18371,
65:                 18204,   18036,   17868,   17699,   17530,   17360,   17189,   17017,
66:                 16845,   16672,   16499,   16325,   16150,   15975,   15799,   15623,
67:                 15446,   15268,   15090,   14911,   14732,   14552,   14372,   14191,
68:                 14009,   13827,   13645,   13462,   13278,   13094,   12909,   12724,
69:                 12539,   12353,   12166,   11980,   11792,   11604,   11416,   11227,
70:                 11038,   10849,   10659,   10469,   10278,   10087,    9895,    9703,
71:                  9511,    9319,    9126,    8932,    8739,    8545,    8351,    8156,
72:                  7961,    7766,    7571,    7375,    7179,    6982,    6786,    6589,
73:                  6392,    6195,    5997,    5799,    5601,    5403,    5205,    5006,
74:                  4807,    4608,    4409,    4210,    4011,    3811,    3611,    3411,
75:                  3211,    3011,    2811,    2610,    2410,    2209,    2009,    1808,
76:                  1607,    1406,    1206,    1005,     804,     603,     402,     201,
77:                     0,    -201,    -402,    -603,    -804,   -1005,   -1206,   -1406,
78:                 -1607,   -1808,   -2009,   -2209,   -2410,   -2610,   -2811,   -3011,
79:                 -3211,   -3411,   -3611,   -3811,   -4011,   -4210,   -4409,   -4608,
80:                 -4807,   -5006,   -5205,   -5403,   -5601,   -5799,   -5997,   -6195,
81:                 -6392,   -6589,   -6786,   -6982,   -7179,   -7375,   -7571,   -7766,
82:                 -7961,   -8156,   -8351,   -8545,   -8739,   -8932,   -9126,   -9319,
83:                 -9511,   -9703,   -9895,  -10087,  -10278,  -10469,  -10659,  -10849,
84:                -11038,  -11227,  -11416,  -11604,  -11792,  -11980,  -12166,  -12353,
85:                -12539,  -12724,  -12909,  -13094,  -13278,  -13462,  -13645,  -13827,
86:                -14009,  -14191,  -14372,  -14552,  -14732,  -14911,  -15090,  -15268,
87:                -15446,  -15623,  -15799,  -15975,  -16150,  -16325,  -16499,  -16672,
88:                -16845,  -17017,  -17189,  -17360,  -17530,  -17699,  -17868,  -18036,
89:                -18204,  -18371,  -18537,  -18702,  -18867,  -19031,  -19194,  -19357,
90:                -19519,  -19680,  -19840,  -20000,  -20159,  -20317,  -20474,  -20631,
91:                -20787,  -20942,  -21096,  -21249,  -21402,  -21554,  -21705,  -21855,
92:                -22004,  -22153,  -22301,  -22448,  -22594,  -22739,  -22883,  -23027,
93:                -23169,  -23311,  -23452,  -23592,  -23731,  -23869,  -24006,  -24143,
94:                -24278,  -24413,  -24546,  -24679,  -24811,  -24942,  -25072,  -25201,
95:                -25329,  -25456,  -25582,  -25707,  -25831,  -25954,  -26077,  -26198,
96:                -26318,  -26437,  -26556,  -26673,  -26789,  -26905,  -27019,  -27132,
97:                -27244,  -27355,  -27466,  -27575,  -27683,  -27790,  -27896,  -28001,
98:                -28105,  -28208,  -28309,  -28410,  -28510,  -28608,  -28706,  -28802,
99:                -28897,  -28992,  -29085,  -29177,  -29268,  -29358,  -29446,  -29534,
100:               -29621,  -29706,  -29790,  -29873,  -29955,  -30036,  -30116,  -30195,
101:               -30272,  -30349,  -30424,  -30498,  -30571,  -30643,  -30713,  -30783,
102:               -30851,  -30918,  -30984,  -31049,  -31113,  -31175,  -31236,  -31297,
103:               -31356,  -31413,  -31470,  -31525,  -31580,  -31633,  -31684,  -31735,
104:               -31785,  -31833,  -31880,  -31926,  -31970,  -32014,  -32056,  -32097,
105:               -32137,  -32176,  -32213,  -32249,  -32284,  -32318,  -32350,  -32382,
106:               -32412,  -32441,  -32468,  -32495,  -32520,  -32544,  -32567,  -32588,
107:               -32609,  -32628,  -32646,  -32662,  -32678,  -32692,  -32705,  -32717,
108:               -32727,  -32736,  -32744,  -32751,  -32757,  -32761,  -32764,  -32766,
109:               -32767,  -32766,  -32764,  -32761,  -32757,  -32751,  -32744,  -32736,
110:               -32727,  -32717,  -32705,  -32692,  -32678,  -32662,  -32646,  -32628,
111:               -32609,  -32588,  -32567,  -32544,  -32520,  -32495,  -32468,  -32441,
112:               -32412,  -32382,  -32350,  -32318,  -32284,  -32249,  -32213,  -32176,
113:               -32137,  -32097,  -32056,  -32014,  -31970,  -31926,  -31880,  -31833,
114:               -31785,  -31735,  -31684,  -31633,  -31580,  -31525,  -31470,  -31413,
115:               -31356,  -31297,  -31236,  -31175,  -31113,  -31049,  -30984,  -30918,
116:               -30851,  -30783,  -30713,  -30643,  -30571,  -30498,  -30424,  -30349,
117:               -30272,  -30195,  -30116,  -30036,  -29955,  -29873,  -29790,  -29706,
118:               -29621,  -29534,  -29446,  -29358,  -29268,  -29177,  -29085,  -28992,
119:               -28897,  -28802,  -28706,  -28608,  -28510,  -28410,  -28309,  -28208,
120:               -28105,  -28001,  -27896,  -27790,  -27683,  -27575,  -27466,  -27355,
121:               -27244,  -27132,  -27019,  -26905,  -26789,  -26673,  -26556,  -26437,
122:               -26318,  -26198,  -26077,  -25954,  -25831,  -25707,  -25582,  -25456,
123:               -25329,  -25201,  -25072,  -24942,  -24811,  -24679,  -24546,  -24413,
124:               -24278,  -24143,  -24006,  -23869,  -23731,  -23592,  -23452,  -23311,
125:               -23169,  -23027,  -22883,  -22739,  -22594,  -22448,  -22301,  -22153,
126:               -22004,  -21855,  -21705,  -21554,  -21402,  -21249,  -21096,  -20942,
127:               -20787,  -20631,  -20474,  -20317,  -20159,  -20000,  -19840,  -19680,
128:               -19519,  -19357,  -19194,  -19031,  -18867,  -18702,  -18537,  -18371,
129:               -18204,  -18036,  -17868,  -17699,  -17530,  -17360,  -17189,  -17017,
130:               -16845,  -16672,  -16499,  -16325,  -16150,  -15975,  -15799,  -15623,
131:               -15446,  -15268,  -15090,  -14911,  -14732,  -14552,  -14372,  -14191,
132:               -14009,  -13827,  -13645,  -13462,  -13278,  -13094,  -12909,  -12724,
133:               -12539,  -12353,  -12166,  -11980,  -11792,  -11604,  -11416,  -11227,
134:               -11038,  -10849,  -10659,  -10469,  -10278,  -10087,   -9895,   -9703,
135:                -9511,   -9319,   -9126,   -8932,   -8739,   -8545,   -8351,   -8156,
136:                -7961,   -7766,   -7571,   -7375,   -7179,   -6982,   -6786,   -6589,
137:                -6392,   -6195,   -5997,   -5799,   -5601,   -5403,   -5205,   -5006,
138:                -4807,   -4608,   -4409,   -4210,   -4011,   -3811,   -3611,   -3411,
139:                -3211,   -3011,   -2811,   -2610,   -2410,   -2209,   -2009,   -1808,
140:                -1607,   -1406,   -1206,   -1005,    -804,    -603,    -402,    -201
141:               };
142:               
143:               
144:               void genSine(unsigned int size){
145:                   /*
146:                   long int counter=0;
147:                   for(; counter<size; counter++)
148:                       sintab[counter]=Q15(0.5);
149:                   */
150:                   
151:               }
0093A8  060000     RETURN
152:               
153:               fractional __attribute__((space(psv))) kicksamp[5552] = {-1, 3, -5, 6, -6, 5, -4, 3, -2, 2, -3, 3, -3, 3, -2, 1, -1, 1, -1, 1, -1, 1, 0, -1, 1, -1, 1, -1, 1, -1, 1, -1, -12, -49, -72, -26, 132, 337, 578, 813, 1029, 1202, 1334, 1425, 1472, 1501, 1469, 1438, 1379, 1328, 1269, 1219, 1160, 1107, 1062, 1037, 1044, 1066, 1113, 1167, 1197, 1225, 1192, 1142, 1026, 882, 702, 498, 284, 66, -161, -419, -722, -1087, -1515, -1991, -2511, -3042, -3581, -4092, -4567, -4994, -5360, -5668, -5909, -6102, -6234, -6326, -6368, -6385, -6362, -6325, -6260, -6176, -6079, -5957, -5825, -5677, -5504, -5322, -5107, -4882, -4635, -4390, -4128, -3866, -3580, -3281, -2946, -2589, -2195, -1767, -1312, -808, -293, 274, 825, 1423, 1995, 2597, 3189, 3791, 4385, 4987, 5577, 6174, 6749, 7328, 7886, 8429, 8966, 9467, 9965, 10417, 10859, 11272, 11669, 12031, 12370, 12672, 12946, 13178, 13386, 13547, 13684, 13787, 13846, 13892, 13887, 13868, 13812, 13731, 13620, 13485, 13324, 13140, 12928, 12687, 12415, 12115, 11780, 11428, 11054, 10668, 10272, 9871, 9460, 9060, 8646, 8243, 7834, 7425, 7019, 6605, 6195, 5779, 5356, 4936, 4500, 4075, 3628, 3190, 2737, 2287, 1829, 1370, 904, 440, -31, -496, -969, -1432, -1906, -2362, -2834, -3285, -3748, -4195, -4650, -5085, -5536, -5960, -6395, -6816, -7236, -7648, -8053, -8453, -8846, -9232, -9611, -9981, -10342, -10708, -11055, -11397, -11723, -12065, -12435, -12841, -13293, -13758, -14251, -14717, -15172, -15590, -15951, -16259, -16496, -16647, -16729, -16708, -16632, -16478, -16263, -15984, -15654, -15281, -14906, -14526, -14175, -13866, -13608, -13426, -13311, -13290, -13337, -13474, -13681, -13954, -14281, -14663, -15072, -15516, -15971, -16435, -16903, -17356, -17799, -18230, -18625, -19012, -19354, -19677, -19968, -20221, -20452, -20645, -20808, -20940, -21045, -21109, -21163, -21162, -21164, -21102, -21045, -20934, -20806, -20645, -20448, -20228, -19968, -19687, -19356, -19011, -18614, -18199, -17742, -17248, -16732, -16168, -15587, -14960, -14315, -13632, -12924, -12192, -11429, -10645, -9847, -9014, -8185, -7321, -6463, -5586, -4707, -3826, -2938, -2059, -1178, -299, 579, 1392, 2246, 3094, 3949, 4745, 5556, 6311, 7043, 7767, 8436, 9113, 9743, 10360, 10966, 11530, 12107, 12635, 13167, 13672, 14165, 14643, 15109, 15550, 15993, 16414, 16846, 17265, 17681, 18099, 18491, 18892, 19259, 19621, 19965, 20288, 20596, 20890, 21162, 21426, 21671, 21903, 22131, 22338, 22548, 22735, 22927, 23101, 23275, 23442, 23596, 23755, 23897, 24041, 24175, 24318, 24427, 24533, 24656, 24785, 24890, 25004, 25092, 25173, 25250, 25300, 25361, 25394, 25427, 25459, 25464, 25487, 25478, 25481, 25470, 25451, 25436, 25402, 25377, 25331, 25300, 25245, 25204, 25144, 25088, 25021, 24956, 24872, 24798, 24706, 24613, 24505, 24402, 24290, 24198, 24100, 24009, 23918, 23817, 23705, 23584, 23434, 23279, 23094, 22898, 22678, 22451, 22203, 21958, 21692, 21427, 21154, 20892, 20622, 20359, 20065, 19788, 19484, 19203, 18917, 18662, 18412, 18208, 18008, 17858, 17713, 17608, 17517, 17442, 17389, 17336, 17299, 17263, 17221, 17184, 17135, 17079, 17012, 16930, 16830, 16711, 16540, 16436, 16275, 16005, 15745, 15436, 15124, 14796, 14449, 14092, 13711, 13313, 12895, 12449, 11987, 11488, 10980, 10431, 9869, 9279, 8664, 8035, 7374, 6706, 6016, 5306, 4602, 3856, 3137, 2381, 1640, 891, 136, -609, -1351, -2096, -2818, -3543, -4252, -4941, -5637, -6289, -6959, -7580, -8215, -8807, -9405, -9967, -10531, -11061, -11590, -12094, -12590, -13068, -13533, -13986, -14428, -14853, -15281, -15681, -16091, -16480, -16866, -17251, -17611, -17985, -18332, -18683, -19025, -19353, -19683, -19999, -20306, -20614, -20897, -21194, -21471, -21753, -22028, -22298, -22557, -22814, -23048, -23282, -23500, -23693, -23896, -24057, -24231, -24375, -24514, -24640, -24754, -24862, -24951, -25048, -25109, -25198, -25239, -25313, -25342, -25396, -25420, -25450, -25467, -25481, -25480, -25488, -25461, -25465, -25418, -25406, -25354, -25314, -25265, -25198, -25142, -25067, -24993, -24914, -24824, -24737, -24641, -24535, -24449, -24340, -24226, -24082, -23986, -23911, -23814, -23727, -23611, -23493, -23367, -23221, -23082, -22929, -22775, -22623, -22463, -22305, -22156, -21989, -21847, -21683, -21538, -21386, -21234, -21097, -20944, -20808, -20666, -20527, -20392, -20255, -20122, -19989, -19859, -19727, -19601, -19466, -19344, -19209, -19084, -18954, -18820, -18691, -18560, -18419, -18296, -18125, -17998, -17899, -17743, -17552, -17343, -17140, -16942, -16753, -16565, -16389, -16198, -16026, -15822, -15637, -15416, -15203, -14959, -14711, -14439, -14146, -13840, -13502, -13156, -12776, -12382, -11952, -11515, -11045, -10568, -10065, -9543, -9005, -8433, -7854, -7229, -6604, -5932, -5263, -4554, -3846, -3110, -2377, -1620, -881, -116, 619, 1378, 2106, 2854, 3574, 4302, 5008, 5702, 6381, 7035, 7675, 8280, 8879, 9436, 9987, 10500, 11003, 11476, 11938, 12375, 12795, 13203, 13591, 13967, 14335, 14679, 15025, 15350, 15674, 15988, 16289, 16594, 16879, 17175, 17449, 17736, 18002, 18274, 18542, 18792, 19061, 19301, 19553, 19800, 20029, 20276, 20496, 20730, 20947, 21169, 21381, 21592, 21798, 21996, 22198, 22385, 22578, 22756, 22935, 23111, 23273, 23445, 23592, 23754, 23896, 24036, 24175, 24302, 24424, 24545, 24652, 24757, 24857, 24944, 25031, 25107, 25176, 25240, 25297, 25343, 25390, 25415, 25452, 25465, 25475, 25489, 25473, 25475, 25449, 25428, 25393, 25360, 25304, 25265, 25190, 25134, 25055, 24980, 24907, 24816, 24738, 24639, 24547, 24439, 24331, 24210, 24085, 23950, 23811, 23659, 23510, 23346, 23183, 23016, 22837, 22670, 22480, 22312, 22120, 21945, 21759, 21575, 21398, 21212, 21033, 20859, 20671, 20510, 20322, 20164, 19984, 19823, 19657, 19490, 19338, 19173, 19023, 18868, 18720, 18573, 18433, 18284, 18157, 18012, 17888, 17754, 17628, 17499, 17379, 17245, 17134, 16992, 16882, 16746, 16620, 16491, 16353, 16220, 16082, 15932, 15792, 15630, 15481, 15308, 15139, 14965, 14771, 14586, 14381, 14166, 13957, 13712, 13485, 13223, 12961, 12684, 12386, 12119, 11793, 11398, 11060, 10751, 10469, 10134, 9784, 9403, 8978, 8536, 8066, 7564, 7067, 6523, 5997, 5439, 4881, 4321, 3738, 3171, 2578, 2004, 1412, 829, 242, -338, -926, -1496, -2079, -2639, -3214, -3761, -4322, -4859, -5398, -5924, -6442, -6977, -7477, -7909, -8342, -8906, -9438, -9951, -10431, -10872, -11277, -11658, -12005, -12337, -12647, -12939, -13229, -13496, -13765, -14018, -14268, -14510, -14743, -14979, -15199, -15427, -15636, -15852, -16060, -16260, -16466, -16656, -16855, -17043, -17225, -17419, -17586, -17778, -17943, -18122, -18295, -18457, -18630, -18784, -18953, -19100, -19266, -19406, -19564, -19702, -19850, -19990, -20128, -20263, -20401, -20527, -20665, -20789, -20920, -21046, -21170, -21297, -21418, -21546, -21666, -21789, -21910, -22034, -22154, -22277, -22397, -22520, -22643, -22755, -22891, -22993, -23134, -23239, -23363, -23485, -23591, -23723, -23819, -23944, -24045, -24153, -24262, -24355, -24460, -24552, -24641, -24735, -24809, -24899, -24963, -25044, -25103, -25170, -25223, -25278, -25323, -25369, -25403, -25428, -25452, -25469, -25471, -25489, -25475, -25490, -25471, -25474, -25458, -25446, -25430, -25407, -25383, -25351, -25317, -25277, -25229, -25183, -25117, -25070, -24985, -24928, -24839, -24764, -24673, -24581, -24489, -24383, -24285, -24174, -24066, -23952, -23835, -23715, -23595, -23469, -23345, -23212, -23085, -22952, -22821, -22678, -22551, -22398, -22270, -22116, -21975, -21826, -21679, -21534, -21387, -21241, -21098, -20953, -20812, -20668, -20525, -20380, -20235, -20085, -19938, -19784, -19631, -19476, -19317, -19158, -18996, -18835, -18667, -18506, -18337, -18170, -18008, -17831, -17674, -17496, -17332, -17156, -16984, -16808, -16628, -16449, -16262, -16074, -15884, -15685, -15487, -15281, -15069, -14860, -14632, -14414, -14179, -13941, -13699, -13449, -13197, -12935, -12665, -12393, -12098, -11813, -11499, -11188, -10866, -10523, -10188, -9824, -9466, -9087, -8711, -8311, -7922, -7503, -7097, -6674, -6247, -5817, -5374, -4941, -4488, -4047, -3589, -3138, -2684, -2222, -1764, -1316, -864, -412, 125, 555, 944, 1339, 1745, 2163, 2604, 3043, 3510, 3963, 4437, 4900, 5363, 5832, 6277, 6736, 7170, 7612, 8036, 8452, 8867, 9263, 9655, 10041, 10405, 10775, 11120, 11467, 11795, 12119, 12428, 12733, 13023, 13306, 13577, 13840, 14096, 14338, 14578, 14798, 15024, 15229, 15431, 15629, 15802, 15993, 16146, 16323, 16452, 16666, 16753, 16804, 16991, 17158, 17332, 17479, 17598, 17712, 17777, 17860, 17899, 17951, 17987, 18015, 18051, 18073, 18102, 18133, 18158, 18195, 18217, 18263, 18291, 18334, 18383, 18416, 18482, 18523, 18586, 18645, 18702, 18772, 18839, 18910, 18990, 19066, 19148, 19242, 19320, 19430, 19506, 19619, 19708, 19812, 19913, 20010, 20116, 20211, 20316, 20411, 20511, 20608, 20701, 20798, 20891, 20978, 21076, 21154, 21250, 21328, 21419, 21496, 21582, 21657, 21742, 21814, 21896, 21971, 22046, 22125, 22197, 22273, 22349, 22423, 22497, 22575, 22647, 22724, 22798, 22878, 22947, 23034, 23103, 23185, 23266, 23337, 23427, 23496, 23585, 23662, 23741, 23829, 23898, 23992, 24059, 24147, 24222, 24296, 24379, 24446, 24526, 24593, 24663, 24732, 24798, 24858, 24925, 24972, 25041, 25081, 25140, 25182, 25227, 25267, 25305, 25336, 25371, 25391, 25422, 25435, 25456, 25467, 25474, 25484, 25480, 25482, 25477, 25464, 25456, 25435, 25417, 25394, 25362, 25339, 25295, 25266, 25217, 25177, 25127, 25077, 25020, 24963, 24906, 24833, 24780, 24694, 24634, 24555, 24474, 24404, 24305, 24238, 24135, 24061, 23957, 23873, 23774, 23678, 23584, 23479, 23376, 23275, 23159, 23060, 22948, 22838, 22744, 22619, 22541, 22411, 22331, 22217, 22119, 22025, 21918, 21818, 21723, 21609, 21523, 21401, 21311, 21197, 21096, 20990, 20883, 20777, 20669, 20565, 20452, 20350, 20235, 20134, 20017, 19916, 19796, 19697, 19573, 19474, 19350, 19244, 19124, 19013, 18895, 18782, 18662, 18546, 18422, 18303, 18178, 18049, 17926, 17785, 17655, 17513, 17363, 17225, 17063, 16908, 16752, 16568, 16415, 16216, 16041, 15847, 15646, 15446, 15231, 15013, 14788, 14550, 14312, 14062, 13802, 13542, 13267, 12984, 12700, 12401, 12099, 11791, 11466, 11145, 10808, 10466, 10122, 9763, 9401, 9040, 8656, 8286, 7895, 7503, 7115, 6702, 6310, 5890, 5488, 5072, 4656, 4242, 3820, 3396, 2976, 2537, 2113, 1678, 1238, 807, 362, -73, -508, -952, -1378, -1822, -2244, -2677, -3107, -3509, -3918, -4389, -4798, -5160, -5531, -5905, -6276, -6662, -7044, -7437, -7821, -8212, -8604, -8980, -9369, -9735, -10117, -10469, -10841, -11181, -11536, -11869, -12205, -12532, -12851, -13161, -13475, -13764, -14067, -14345, -14629, -14900, -15166, -15427, -15682, -15924, -16170, -16400, -16629, -16850, -17062, -17275, -17472, -17672, -17859, -18043, -18220, -18388, -18556, -18710, -18867, -19009, -19152, -19281, -19417, -19528, -19655, -19755, -19865, -19962, -20053, -20146, -20218, -20305, -20368, -20439, -20496, -20555, -20607, -20653, -20696, -20736, -20768, -20802, -20832, -20876, -20872, -20834, -20907, -20958, -21007, -21042, -21065, -21065, -21071, -21048, -21040, -21012, -20989, -20969, -20939, -20920, -20897, -20880, -20863, -20848, -20836, -20829, -20821, -20822, -20817, -20826, -20833, -20850, -20860, -20890, -20905, -20946, -20968, -21012, -21044, -21094, -21132, -21188, -21233, -21291, -21346, -21399, -21466, -21520, -21590, -21653, -21718, -21793, -21855, -21934, -22005, -22078, -22160, -22228, -22317, -22387, -22475, -22550, -22637, -22715, -22803, -22884, -22970, -23051, -23144, -23215, -23315, -23385, -23476, -23561, -23638, -23728, -23803, -23887, -23968, -24044, -24125, -24200, -24273, -24353, -24416, -24496, -24559, -24626, -24695, -24754, -24815, -24879, -24923, -24994, -25028, -25088, -25129, -25174, -25216, -25254, -25286, -25324, -25349, -25379, -25401, -25423, -25440, -25456, -25464, -25479, -25479, -25485, -25483, -25478, -25474, -25461, -25451, -25433, -25416, -25392, -25370, -25341, -25313, -25276, -25245, -25202, -25162, -25122, -25067, -25031, -24966, -24929, -24856, -24814, -24741, -24690, -24619, -24559, -24486, -24422, -24349, -24276, -24208, -24127, -24057, -23976, -23899, -23823, -23737, -23667, -23575, -23501, -23415, -23330, -23255, -23159, -23087, -22993, -22915, -22826, -22743, -22656, -22574, -22482, -22405, -22311, -22230, -22142, -22051, -21972, -21875, -21796, -21706, -21618, -21540, -21446, -21369, -21279, -21193, -21116, -21019, -20946, -20851, -20768, -20681, -20595, -20502, -20422, -20321, -20242, -20142, -20054, -19964, -19864, -19780, -19674, -19588, -19481, -19383, -19284, -19173, -19073, -18956, -18845, -18730, -18609, -18484, -18363, -18223, -18096, -17952, -17808, -17661, -17505, -17347, -17183, -17014, -16838, -16657, -16474, -16276, -16084, -15878, -15668, -15453, -15232, -15001, -14776, -14526, -14290, -14035, -13780, -13519, -13250, -12979, -12698, -12420, -12129, -11836, -11543, -11235, -10939, -10618, -10314, -9985, -9676, -9336, -9022, -8673, -8353, -8000, -7668, -7315, -6974, -6616, -6268, -5908, -5554, -5192, -4831, -4465, -4103, -3733, -3367, -2995, -2626, -2252, -1881, -1505, -1132, -756, -384, -4, 365, 747, 1110, 1495, 1855, 2241, 2598, 2981, 3335, 3715, 4067, 4440, 4795, 5156, 5513, 5866, 6221, 6571, 6915, 7264, 7602, 7947, 8278, 8618, 8943, 9275, 9593, 9914, 10251, 10578, 10874, 11164, 11456, 11745, 12046, 12340, 12641, 12943, 13240, 13533, 13838, 14117, 14417, 14694, 14980, 15255, 15532, 15795, 16066, 16321, 16579, 16831, 17072, 17322, 17547, 17789, 18010, 18236, 18450, 18664, 18869, 19075, 19271, 19464, 19654, 19834, 20020, 20186, 20365, 20519, 20690, 20831, 20993, 21123, 21275, 21399, 21538, 21660, 21789, 21908, 22030, 22143, 22261, 22365, 22479, 22574, 22677, 22772, 22866, 22951, 23043, 23116, 23205, 23275, 23350, 23422, 23487, 23555, 23616, 23679, 23732, 23796, 23841, 23903, 23945, 23999, 24044, 24089, 24139, 24175, 24226, 24262, 24304, 24345, 24378, 24420, 24453, 24490, 24529, 24553, 24596, 24618, 24656, 24680, 24715, 24730, 24773, 24777, 24823, 24828, 24859, 24876, 24890, 24910, 24928, 24936, 24959, 24957, 24982, 24977, 24994, 24992, 25001, 25002, 25004, 25002, 25026, 24981, 24958, 24984, 25008, 25018, 25024, 25025, 25007, 24995, 24967, 24941, 24913, 24876, 24849, 24810, 24783, 24745, 24719, 24685, 24655, 24631, 24599, 24579, 24554, 24530, 24517, 24494, 24485, 24468, 24460, 24449, 24446, 24442, 24439, 24442, 24439, 24448, 24449, 24457, 24469, 24472, 24498, 24499, 24529, 24538, 24564, 24591, 24605, 24646, 24657, 24697, 24722, 24748, 24788, 24807, 24849, 24872, 24905, 24937, 24968, 24995, 25030, 25053, 25091, 25112, 25144, 25172, 25195, 25225, 25248, 25269, 25301, 25311, 25346, 25352, 25381, 25395, 25407, 25429, 25433, 25455, 25455, 25472, 25471, 25481, 25482, 25481, 25486, 25476, 25480, 25463, 25464, 25451, 25435, 25430, 25403, 25395, 25368, 25348, 25326, 25295, 25274, 25237, 25212, 25173, 25140, 25102, 25064, 25020, 24984, 24931, 24894, 24842, 24794, 24747, 24690, 24643, 24587, 24527, 24479, 24411, 24360, 24295, 24239, 24170, 24116, 24041, 23989, 23916, 23854, 23786, 23722, 23652, 23587, 23514, 23450, 23378, 23308, 23242, 23166, 23100, 23024, 22955, 22882, 22808, 22733, 22659, 22578, 22506, 22417, 22345, 22250, 22179, 22077, 22000, 21900, 21810, 21714, 21613, 21509, 21411, 21292, 21193, 21064, 20961, 20830, 20712, 20581, 20448, 20318, 20177, 20037, 19893, 19744, 19594, 19440, 19282, 19122, 18957, 18788, 18615, 18445, 18259, 18094, 17900, 17731, 17541, 17357, 17180, 16980, 16807, 16606, 16422, 16227, 16034, 15835, 15641, 15435, 15242, 15029, 14833, 14616, 14415, 14202, 13988, 13779, 13560, 13343, 13128, 12901, 12684, 12458, 12230, 12006, 11776, 11538, 11314, 11068, 10841, 10591, 10359, 10108, 9866, 9616, 9365, 9113, 8861, 8599, 8349, 8079, 7824, 7554, 7289, 7019, 6750, 6478, 6204, 5925, 5650, 5365, 5090, 4805, 4520, 4237, 3946, 3659, 3374, 3074, 2791, 2495, 2200, 1910, 1609, 1319, 1022, 723, 432, 127, -160, -465, -757, -1052, -1353, -1642, -1943, -2234, -2528, -2823, -3112, -3404, -3694, -3983, -4271, -4557, -4843, -5128, -5407, -5696, -5964, -6259, -6518, -6810, -7073, -7351, -7618, -7889, -8153, -8424, -8679, -8951, -9199, -9471, -9714, -9980, -10223, -10479, -10727, -10969, -11219, -11458, -11696, -11942, -12168, -12412, -12635, -12870, -13097, -13319, -13550, -13763, -13984, -14205, -14409, -14636, -14829, -15049, -15248, -15452, -15656, -15848, -16049, -16239, -16435, -16619, -16812, -16993, -17177, -17356, -17537, -17708, -17891, -18052, -18228, -18395, -18554, -18727, -18877, -19044, -19195, -19351, -19504, -19652, -19797, -19946, -20081, -20228, -20360, -20490, -20635, -20746, -20888, -21003, -21125, -21247, -21356, -21475, -21582, -21690, -21795, -21898, -21995, -22092, -22187, -22273, -22368, -22444, -22530, -22612, -22683, -22765, -22828, -22905, -22970, -23034, -23099, -23162, -23210, -23285, -23314, -23387, -23440, -23497, -23538, -23563, -23613, -23636, -23689, -23723, -23771, -23815, -23862, -23904, -23956, -23990, -24044, -24080, -24123, -24170, -24201, -24250, -24283, -24319, -24363, -24388, -24429, -24460, -24491, -24523, -24555, -24578, -24616, -24632, -24668, -24686, -24714, -24736, -24756, -24781, -24796, -24823, -24833, -24857, -24868, -24888, -24899, -24916, -24927, -24942, -24954, -24966, -24978, -24989, -24997, -25012, -25018, -25029, -25040, -25046, -25060, -25064, -25076, -25077, -25094, -25094, -25110, -25108, -25123, -25124, -25137, -25141, -25145, -25161, -25155, -25176, -25170, -25183, -25193, -25190, -25213, -25204, -25222, -25225, -25232, -25242, -25249, -25256, -25265, -25269, -25278, -25292, -25289, -25311, -25308, -25322, -25332, -25332, -25350, -25350, -25365, -25365, -25378, -25387, -25390, -25404, -25401, -25417, -25419, -25429, -25429, -25443, -25438, -25455, -25450, -25461, -25460, -25467, -25466, -25474, -25472, -25475, -25478, -25477, -25477, -25479, -25473, -25477, -25471, -25471, -25464, -25483, -25465, -25418, -25427, -25456, -25462, -25482, -25475, -25477, -25456, -25446, -25416, -25402, -25364, -25349, -25313, -25288, -25265, -25228, -25213, -25178, -25156, -25133, -25106, -25084, -25066, -25039, -25022, -25005, -24982, -24974, -24950, -24938, -24928, -24908, -24904, -24885, -24877, -24870, -24852, -24854, -24831, -24833, -24817, -24810, -24801, -24792, -24778, -24777, -24753, -24757, -24729, -24729, -24702, -24700, -24672, -24666, -24637, -24628, -24593, -24587, -24546, -24535, -24499, -24473, -24439, -24414, -24372, -24344, -24302, -24263, -24226, -24175, -24140, -24079, -24045, -23984, -23935, -23878, -23820, -23760, -23699, -23629, -23568, -23492, -23426, -23346, -23270, -23185, -23107, -23015, -22929, -22835, -22741, -22641, -22540, -22431, -22331, -22210, -22107, -21975, -21864, -21733, -21605, -21479, -21338, -21205, -21060, -20920, -20773, -20620, -20474, -20311, -20161, -19997, -19833, -19671, -19502, -19333, -19163, -18989, -18813, -18639, -18457, -18281, -18096, -17918, -17727, -17551, -17352, -17179, -16977, -16795, -16604, -16405, -16225, -16018, -15832, -15633, -15435, -15241, -15041, -14837, -14646, -14431, -14243, -14025, -13829, -13618, -13408, -13203, -12986, -12780, -12560, -12353, -12125, -11921, -11686, -11475, -11247, -11021, -10804, -10562, -10347, -10103, -9877, -9645, -9399, -9175, -8923, -8687, -8446, -8193, -7959, -7700, -7459, -7204, -6950, -6700, -6444, -6184, -5929, -5665, -5410, -5140, -4884, -4615, -4353, -4082, -3815, -3548, -3278, -3009, -2738, -2464, -2195, -1920, -1650, -1374, -1102, -829, -551, -285, 0, 258, 548, 807, 1090, 1353, 1632, 1898, 2173, 2437, 2714, 2973, 3245, 3513, 3773, 4047, 4300, 4569, 4831, 5084, 5353, 5601, 5865, 6118, 6369, 6629, 6873, 7132, 7373, 7628, 7868, 8120, 8359, 8606, 8844, 9084, 9326, 9554, 9803, 10023, 10263, 10495, 10716, 10957, 11170, 11403, 11625, 11845, 12065, 12288, 12497, 12722, 12925, 13148, 13346, 13568, 13762, 13978, 14173, 14379, 14577, 14775, 14975, 15165, 15363, 15552, 15740, 15933, 16112, 16301, 16482, 16660, 16843, 17017, 17193, 17368, 17536, 17708, 17877, 18036, 18212, 18359, 18539, 18678, 18848, 18997, 19152, 19307, 19451, 19602, 19749, 19891, 20034, 20178, 20311, 20452, 20586, 20711, 20856, 20968, 21112, 21222, 21356, 21469, 21593, 21705, 21822, 21932, 22046, 22150, 22259, 22362, 22462, 22564, 22659, 22756, 22846, 22940, 23026, 23115, 23199, 23279, 23363, 23438, 23516, 23589, 23662, 23733, 23803, 23865, 23934, 23992, 24059, 24115, 24172, 24234, 24277, 24346, 24381, 24446, 24485, 24536, 24582, 24625, 24673, 24709, 24757, 24791, 24831, 24873, 24901, 24945, 24973, 25005, 25044, 25064, 25104, 25123, 25143, 25199, 25216, 25234, 25244, 25248, 25274, 25278, 25305, 25319, 25340, 25358, 25379, 25392, 25413, 25424, 25439, 25451, 25459, 25469, 25473, 25482, 25480, 25483, 25482, 25477, 25474, 25466, 25455, 25449, 25430, 25421, 25401, 25385, 25362, 25346, 25316, 25301, 25264, 25248, 25210, 25187, 25157, 25120, 25094, 25053, 25027, 24984, 24952, 24913, 24877, 24837, 24799, 24759, 24717, 24680, 24635, 24595, 24553, 24508, 24466, 24421, 24377, 24334, 24285, 24242, 24193, 24146, 24101, 24047, 24008, 23947, 23907, 23852, 23800, 23754, 23694, 23648, 23588, 23540, 23483, 23429, 23371, 23316, 23258, 23201, 23142, 23081, 23026, 22961, 22906, 22839, 22781, 22718, 22652, 22595, 22523, 22469, 22396, 22336, 22270, 22204, 22138, 22074, 22005, 21942, 21873, 21806, 21741, 21672, 21610, 21538, 21474, 21405, 21339, 21271, 21203, 21139, 21067, 21007, 20930, 20874, 20798, 20735, 20668, 20598, 20535, 20459, 20423, 20330, 20231, 20183, 20135, 20095, 20042, 19986, 19921, 19852, 19776, 19704, 19622, 19545, 19467, 19385, 19312, 19227, 19158, 19076, 19009, 18932, 18861, 18794, 18720, 18662, 18589, 18534, 18463, 18413, 18348, 18294, 18241, 18182, 18139, 18078, 18037, 17984, 17940, 17889, 17850, 17799, 17762, 17717, 17672, 17637, 17588, 17556, 17506, 17476, 17428, 17392, 17348, 17311, 17267, 17228, 17184, 17143, 17097, 17057, 17009, 16966, 16918, 16874, 16820, 16778, 16719, 16674, 16617, 16564, 16507, 16451, 16392, 16330, 16273, 16207, 16142, 16079, 16007, 15943, 15868, 15797, 15723, 15649, 15569, 15495, 15406, 15334, 15242, 15160, 15078, 14979, 14902, 14801, 14710, 14620, 14513, 14430, 14316, 14226, 14119, 14015, 13912, 13801, 13696, 13585, 13473, 13358, 13250, 13121, 13021, 12885, 12775, 12650, 12524, 12404, 12273, 12149, 12016, 11891, 11750, 11627, 11484, 11352, 11215, 11070, 10938, 10788, 10654, 10500, 10363, 10206, 10069, 9910, 9764, 9610, 9455, 9304, 9142, 8991, 8830, 8669, 8508, 8345, 8183, 8015, 7853, 7681, 7517, 7347, 7170, 7008, 6824, 6661, 6480, 6301, 6134, 5941, 5780, 5585, 5413, 5230, 5043, 4866, 4679, 4492, 4314, 4118, 3941, 3745, 3567, 3370, 3190, 2993, 2810, 2617, 2429, 2238, 2046, 1860, 1667, 1476, 1288, 1094, 906, 714, 526, 333, 146, -48, -233, -426, -612, -805, -992, -1179, -1372, -1552, -1749, -1930, -2120, -2306, -2494, -2672, -2869, -3042, -3234, -3416, -3598, -3781, -3967, -4140, -4333, -4503, -4690, -4868, -5045, -5225, -5405, -5575, -5766, -5921, -6117, -6274, -6459, -6628, -6796, -6973, -7142, -7310, -7482, -7648, -7817, -7984, -8148, -8315, -8478, -8642, -8806, -8965, -9126, -9290, -9441, -9610, -9755, -9924, -10068, -10232, -10378, -10538, -10683, -10837, -10986, -11130, -11286, -11423, -11576, -11720, -11856, -12011, -12139, -12291, -12426, -12563, -12702, -12839, -12972, -13111, -13241, -13375, -13505, -13635, -13767, -13888, -14023, -14142, -14272, -14392, -14518, -14633, -14763, -14873, -14996, -15111, -15229, -15345, -15455, -15570, -15682, -15792, -15899, -16011, -16115, -16221, -16332, -16424, -16543, -16627, -16741, -16837, -16928, -17042, -17117, -17230, -17315, -17407, -17505, -17588, -17684, -17770, -17856, -17942, -18031, -18108, -18200, -18273, -18359, -18434, -18513, -18590, -18665, -18737, -18811, -18882, -18951, -19025, -19088, -19161, -19225, -19288, -19356, -19416, -19478, -19539, -19599, -19656, -19718, -19768, -19828, -19881, -19935, -19984, -20043, -20082, -20145, -20181, -20233, -20281, -20318, -20375, -20402, -20460, -20485, -20536, -20570, -20608, -20646, -20682, -20715, -20749, -20784, -20809, -20852, -20865, -20911, -20924, -20960, -20984, -21003, -21037, -21050, -21078, -21097, -21112, -21141, -21146, -21178, -21180, -21205, -21212, -21230, -21238, -21254, -21257, -21275, -21276, -21289, -21290, -21301, -21301, -21308, -21311, -21308, -21317, -21309, -21312, -21302, -21309, -21324, -21297, -21292, -21272, -21256, -21252, -21236, -21233, -21221, -21220, -21202, -21207, -21187, -21184, -21170, -21156, -21147, -21127, -21118, -21094, -21084, -21057, -21040, -21014, -20997, -20962, -20947, -20908, -20886, -20851, -20823, -20785, -20758, -20714, -20684, -20642, -20603, -20567, -20519, -20483, -20433, -20397, -20340, -20306, -20248, -20206, -20159, -20101, -20061, -20004, -19955, -19900, -19852, -19789, -19745, -19685, -19629, -19582, -19512, -19470, -19401, -19352, -19291, -19234, -19176, -19117, -19059, -18995, -18929, -18868, -18796, -18739, -18665, -18608, -18532, -18477, -18401, -18342, -18271, -18208, -18136, -18078, -18004, -17941, -17878, -17803, -17749, -17671, -17613, -17543, -17476, -17414, -17341, -17284, -17211, -17151, -17080, -17017, -16955, -16882, -16824, -16751, -16692, -16621, -16561, -16493, -16427, -16369, -16293, -16242, -16166, -16111, -16042, -15980, -15917, -15848, -15795, -15721, -15666, -15601, -15537, -15479, -15412, -15352, -15294, -15224, -15176, -15101, -15054, -14984, -14930, -14869, -14807, -14750, -14688, -14657, -14572, -14481, -14439, -14415, -14372, -14339, -14289, -14230, -14180, -14106, -14048, -13976, -13908, -13843, -13771, -13707, -13641, -13572, -13514, -13444, -13389, -13326, -13265, -13214, -13153, -13099, -13051, -12992, -12951, -12899, -12854, -12809, -12762, -12723, -12682, -12639, -12605, -12558, -12532, -12487, -12458, -12421, -12385, -12355, -12317, -12289, -12255, -12220, -12193, -12153, -12126, -12095, -12053, -12037, -11983, -11968, -11920, -11890, -11860, -11812, -11790, -11736, -11715, -11663, -11631, -11587, -11544, -11503, -11460, -11411, -11371, -11316, -11277, -11217, -11177, -11115, -11070, -11013, -10955, -10905, -10838, -10787, -10723, -10659, -10602, -10532, -10467, -10406, -10329, -10266, -10197, -10116, -10060, -9968, -9906, -9822, -9744, -9671, -9584, -9507, -9422, -9340, -9252, -9173, -9074, -8998, -8898, -8809, -8707, -8608, -8510, -8409, -8305, -8207, -8098, -7997, -7892, -7781, -7683, -7566, -7463, -7353, -7239, -7135, -7013, -6910, -6787, -6682, -6560, -6447, -6331, -6213, -6095, -5982, -5852, -5747, -5615, -5502, -5378, -5260, -5134, -5018, -4889, -4773, -4643, -4523, -4400, -4270, -4156, -4019, -3907, -3774, -3653, -3526, -3403, -3275, -3154, -3022, -2903, -2774, -2651, -2524, -2399, -2277, -2148, -2029, -1897, -1778, -1652, -1528, -1403, -1280, -1155, -1036, -909, -788, -668, -542, -422, -303, -176, -65, 67, 178, 305, 415, 547, 650, 783, 888, 1015, 1124, 1247, 1357, 1476, 1592, 1702, 1820, 1931, 2043, 2159, 2266, 2380, 2490, 2600, 2707, 2822, 2921, 3039, 3138, 3249, 3354, 3458, 3564, 3669, 3768, 3881, 3971, 4083, 4175, 4280, 4377, 4481, 4571, 4676, 4767, 4865, 4965, 5049, 5154, 5240, 5332, 5432, 5511, 5612, 5694, 5787, 5872, 5963, 6044, 6136, 6215, 6306, 6381, 6472, 6547, 6631, 6712, 6789, 6872, 6946, 7025, 7098, 7179, 7250, 7325, 7400, 7466, 7545, 7611, 7681, 7753, 7816, 7889, 7950, 8021, 8079, 8148, 8200, 8272, 8315, 8391, 8433, 8502, 8547, 8609, 8657, 8715, 8762, 8818, 8864, 8918, 8960, 9015, 9055, 9107, 9148, 9193, 9238, 9276, 9325, 9358, 9404, 9442, 9475, 9520, 9550, 9589, 9625, 9657, 9690, 9726, 9752, 9787, 9816, 9843, 9876, 9897, 9928, 9953, 9977, 10005, 10024, 10050, 10072, 10092, 10114, 10133, 10153, 10170, 10189, 10205, 10221, 10236, 10249, 10265, 10279, 10289, 10304, 10310, 10325, 10331, 10340, 10352, 10352, 10369, 10365, 10376, 10379, 10384, 10385, 10391, 10389, 10393, 10392, 10394, 10390, 10392, 10386, 10388, 10381, 10379, 10374, 10368, 10365, 10355, 10350, 10343, 10332, 10321, 10320, 10313, 10300, 10276, 10263, 10245, 10229, 10220, 10201, 10197, 10176, 10168, 10154, 10138, 10131, 10106, 10103, 10073, 10069, 10043, 10028, 10012, 9984, 9971, 9946, 9921, 9905, 9871, 9855, 9824, 9800, 9771, 9745, 9714, 9687, 9656, 9624, 9596, 9561, 9532, 9495, 9464, 9427, 9396, 9359, 9323, 9290, 9248, 9221, 9172, 9144, 9101, 9068, 9025, 8990, 8950, 8910, 8876, 8828, 8800, 8748, 8720, 8672, 8635, 8600, 8550, 8521, 8471, 8441, 8392, 8362, 8313, 8282, 8237, 8200, 8159, 8121, 8079, 8047, 8004, 7972, 7930, 7899, 7855, 7828, 7781, 7755, 7710, 7680, 7643, 7605, 7576, 7533, 7506, 7466, 7433, 7400, 7363, 7332, 7297, 7262, 7231, 7197, 7163, 7132, 7099, 7062, 7037, 6999, 6972, 6938, 6904, 6880, 6840, 6818, 6781, 6753, 6724, 6689, 6665, 6632, 6605, 6573, 6548, 6514, 6493, 6457, 6435, 6403, 6377, 6351, 6326, 6310, 6253, 6225, 6222, 6202, 6189, 6169, 6142, 6121, 6087, 6066, 6028, 6005, 5968, 5945, 5913, 5885, 5856, 5828, 5804, 5777, 5751, 5729, 5703, 5684, 5658, 5640, 5620, 5600, 5582, 5565, 5545, 5534, 5513, 5504, 5484, 5473, 5459, 5446, 5434, 5420, 5409, 5399, 5386, 5374, 5364, 5353, 5340, 5333, 5316, 5312, 5294, 5288, 5273, 5263, 5252, 5239, 5227, 5214, 5200, 5189, 5170, 5163, 5140, 5133, 5112, 5098, 5082, 5062, 5049, 5028, 5008, 4994, 4966, 4954, 4929, 4906, 4890, 4859, 4845, 4814, 4795, 4769, 4740, 4722, 4685, 4670, 4631, 4613, 4577, 4554, 4521, 4491, 4463, 4427, 4401, 4365, 4333, 4301, 4267, 4234, 4199, 4163, 4130, 4092, 4059, 4019, 3986, 3946, 3911, 3869, 3835, 3793, 3756, 3717, 3675, 3638, 3595, 3556, 3515, 3474, 3431, 3390, 3349, 3305, 3264, 3220, 3176, 3138, 3088, 3048, 3003, 2959, 2917, 2869, 2829, 2779, 2740, 2689, 2648, 2603, 2554, 2514, 2462, 2427, 2381, 2343, 2297, 2261, 2210, 2178, 2126, 2089, 2045, 2001, 1961, 1914, 1875, 1827, 1788, 1741, 1700, 1656, 1612, 1569, 1523, 1484, 1435, 1397, 1347, 1309, 1261, 1219, 1179, 1131, 1091, 1044, 1003, 960, 917, 873, 828, 791, 740, 706, 656, 618, 575, 532, 491, 449, 407, 364, 326, 281, 243, 199, 160, 118, 79, 37, -2, -42, -83, -121, -163, -198, -241, -276, -317, -358, -389, -436, -466, -508, -544, -580, -618, -655, -689, -731, -760, -801, -835, -869, -906, -939, -975, -1007, -1044, -1074, -1113, -1140, -1179, -1205, -1245, -1270, -1307, -1337, -1367, -1401, -1431, -1459, -1494, -1519, -1554, -1579, -1612, -1639, -1669, -1695, -1727, -1750, -1783, -1806, -1835, -1863, -1887, -1914, -1940, -1964, -1994, -2014, -2043, -2064, -2091, -2112, -2139, -2159, -2185, -2205, -2228, -2254, -2269, -2299, -2311, -2339, -2356, -2380, -2397, -2420, -2436, -2458, -2477, -2494, -2516, -2528, -2554, -2564, -2585, -2603, -2615, -2638, -2648, -2669, -2681, -2699, -2713, -2726, -2745, -2755, -2773, -2783, -2799, -2809, -2826, -2835, -2849, -2861, -2873, -2885, -2895, -2907, -2916, -2929, -2939, -2948, -2959, -2967, -2979, -2985, -2995, -3003, -3010, -3022, -3024, -3039, -3038, -3052, -3055, -3061, -3071, -3072, -3083, -3084, -3092, -3096, -3101, -3105, -3111, -3113, -3120, -3120, -3128, -3127, -3134, -3134, -3138, -3140, -3143, -3145, -3145, -3148, -3149, -3150, -3153, -3151, -3155, -3152, -3154, -3154, -3153, -3156, -3149, -3154, -3149, -3151, -3148, -3147, -3144, -3145, -3139, -3141, -3137, -3132, -3134, -3125, -3127, -3122, -3118, -3117, -3109, -3109, -3103, -3098, -3096, -3088, -3087, -3078, -3078, -3074, -3066, -3059, -3051, -3047, -3038, -3032, -3029, -3016, -3021, -3004, -3009, -2993, -2996, -2983, -2982, -2973, -2966, -2961, -2951, -2947, -2938, -2931, -2922, -2914, -2907, -2897, -2890, -2879, -2871, -2862, -2851, -2842, -2833, -2820, -2814, -2801, -2791, -2782, -2768, -2759, -2747, -2737, -2723, -2716, -2699, -2693, -2677, -2669, -2652, -2648, -2631, -2630, -2614, -2610, -2599, -2590, -2580, -2572, -2561, -2554, -2543, -2536, -2525, -2514, -2510, -2494, -2491, -2478, -2470, -2461, -2450, -2442, -2433, -2423, -2415, -2404, -2395, -2388, -2377, -2370, -2360, -2349, -2343, -2332, -2325, -2314, -2307, -2296, -2290, -2279, -2272, -2261, -2257, -2243, -2241, -2225, -2224, -2210, -2205, -2198, -2185, -2184, -2168, -2167, -2156, -2149, -2139, -2134, -2124, -2119, -2109, -2102, -2095, -2087, -2081, -2072, -2066, -2058, -2050, -2044, -2036, -2029, -2024, -2012, -2012, -1996, -1999, -1985, -1983, -1974, -1967, -1961, -1955, -1947, -1941, -1933, -1929, -1922, -1915, -1914, -1902, -1887, -1891, -1885, -1887, -1880, -1876, -1870, -1862, -1858, -1847, -1841, -1832, -1826, -1816, -1811, -1799, -1799, -1784, -1786, -1768, -1773, -1758, -1759, -1748, -1747, -1739, -1737, -1730, -1729, -1722, -1721, -1715, -1714, -1708, -1709, -1703, -1703, -1701, -1696, -1697, -1691, -1694, -1688, -1690, -1687, -1684, -1685, -1680, -1683, -1678, -1678, -1675, -1675, -1671, -1672, -1667, -1668, -1664, -1664, -1659, -1658, -1657, -1652, -1650, -1648, -1643, -1642, -1636, -1635, -1630, -1628, -1621, -1620, -1610, -1612, -1601, -1602, -1592, -1591, -1581, -1579, -1570, -1566, -1559, -1553, -1546, -1539, -1533, -1525, -1518, -1510, -1502, -1494, -1486, -1477, -1469, -1460, -1451, -1442, -1432, -1426, -1413, -1405, -1396, -1381, -1379, -1360, -1357, -1341, -1334, -1319, -1312, -1299, -1288, -1276, -1265, -1253, -1242, -1229, -1217, -1207, -1191, -1182, -1166, -1157, -1143, -1130, -1117, -1105, -1090, -1081, -1064, -1052, -1039, -1022, -1013, -996, -984, -970, -957, -941, -929, -914, -899, -887, -870, -859, -842, -830, -813, -800, -787, -770, -758, -741, -729, -712, -701, -682, -670, -655, -641, -626, -612, -596, -583, -568, -555, -538, -526, -508, -499, -478, -469, -451, -441, -424, -408, -398, -379, -371, -352, -340, -326, -312, -299, -282, -274, -254, -246, -229, -217, -204, -189, -176, -165, -148, -140, -122, -113, -98, -85, -73, -60, -49, -35, -24, -9, -1, 16, 25, 38, 50, 60, 73, 86, 94, 109, 118, 130, 143, 150, 167, 171, 188, 192, 210, 213, 230, 234, 251, 256, 268, 278, 287, 298, 305, 318, 324, 336, 344, 351, 366, 368, 381, 388, 396, 407, 414, 422, 430, 437, 447, 454, 462, 468, 478, 483, 493, 497, 506, 515, 517, 531, 528, 543, 547, 552, 561, 563, 573, 575, 586, 586, 597, 598, 605, 612, 615, 622, 626, 629, 639, 639, 646, 650, 652, 661, 660, 669, 669, 675, 678, 683, 686, 688, 694, 695, 700, 702, 704, 709, 710, 715, 715, 720, 720, 726, 723, 732, 725, 737, 729, 741, 733, 742, 738, 745, 740, 748, 744, 747, 750, 746, 753, 748, 754, 750, 754, 753, 752, 755, 753, 753, 755, 753, 755, 754, 752, 753, 753, 751, 752, 750, 751, 748, 750, 747, 748, 746, 744, 745, 741, 742, 740, 736, 738, 732, 734, 728, 730, 729, 731, 731, 732, 733, 735, 734, 736, 734, 738, 736, 738, 736, 740, 736, 740, 737, 738, 738, 737, 737, 737, 737, 736, 735, 736, 731, 738, 729, 735, 730, 729, 732, 724, 730, 724, 726, 723, 722, 720, 720, 717, 717, 715, 713, 714, 708, 712, 704, 709, 702, 703, 700, 700, 696, 695, 695, 691, 692, 685, 688, 684, 683, 684, 674, 681, 673, 676, 672, 668, 670, 666, 664, 665, 657, 663, 654, 657, 653, 653, 649, 649, 647, 645, 644, 640, 641, 635, 641, 629, 639, 626, 633, 627, 625, 626, 622, 622, 620, 617, 617, 614, 614, 611, 611, 609, 606, 608, 601, 606, 599, 601, 598, 597, 595, 593, 593, 591, 589, 591, 583, 588, 582, 584, 581, 580, 578, 579, 574, 577, 572, 572, 570, 570, 571, 569, 571, 565, 569, 562, 566, 560, 561, 557, 558, 555, 552, 554, 548, 552, 545, 550, 545, 543, 544, 542, 543, 541, 540, 539, 541, 537, 539, 537, 539, 535, 539, 535, 538, 537, 537, 537, 537, 537, 537, 538, 535, 540, 533, 541, 535, 537, 538, 535, 539, 536, 538, 535, 539, 534, 537, 537, 534, 537, 533, 535, 534, 533, 533, 531, 532, 530, 529, 530, 525, 529, 523, 525, 523, 521, 521, 519, 516, 518, 511, 515, 508, 512, 505, 506, 503, 500, 501, 494, 496, 491, 488, 489, 482, 484, 477, 477, 474, 470, 470, 462, 466, 455, 459, 451, 451, 447, 442, 438, 439, 431, 431, 425, 422, 419, 415, 413, 406, 407, 397, 398, 391, 390, 383, 384, 373, 377, 365, 366, 361, 355, 353, 348, 343, 342, 333, 332, 326, 324, 317, 315, 310, 304, 302, 295, 293, 287, 283, 279, 273, 271, 265, 260, 256, 251, 246, 244, 235, 234, 228, 224, 219, 214, 212, 202, 204, 195, 191, 189, 181, 180, 171, 170, 164, 160, 156, 148, 150, 140, 140, 131, 131, 122, 122, 115, 111, 107, 103, 97, 96, 88, 86, 80, 78, 72, 70, 63, 61, 56, 51, 49, 44, 40, 36, 31, 30, 23, 20, 16, 13, 8, 5, 1, -3, -5, -11, -14, -17, -21, -24, -29, -32, -34, -41, -40, -48, -48, -51, -58, -57, -63, -67, -66, -76, -71, -81, -78, -88, -83, -93, -91, -96, -101, -100, -106, -108, -109, -114, -116, -118, -123, -122, -129, -127, -134, -132, -139, -137, -144, -142, -149, -146, -152, -153, -155, -160, -158, -163, -164, -165, -171, -165, -177, -171, -177, -178, -179, -183, -184, -186, -186, -189, -193, -189, -197, -193, -200, -196, -202, -201, -203, -207, -203, -210, -208, -210, -212, -212, -215, -214, -216, -219, -218, -220, -222, -220, -225, -224, -223, -228, -225, -229, -230, -227, -233, -229, -234, -230, -235, -234, -235, -235, -235, -238, -237, -238, -239, -238, -241, -238, -242, -240, -240, -245, -239, -244, -241, -245, -241, -246, -240, -247, -242, -246, -243, -243, -246, -241, -248, -243, -243, -248, -240, -250, -241, -246, -243, -245, -243, -245, -243, -245, -244, -241, -245, -242, -242, -243, -240, -244, -240, -241, -241, -240, -241, -238, -243, -233, -245, -233, -241, -234, -236, -236, -233, -237, -231, -235, -232, -233, -232, -230, -232, -229, -230, -229, -228, -227, -229, -223, -229, -223, -224, -225, -222, -223, -221, -218, -222, -216, -221, -215, -216, -217, -212, -214, -212, -209, -213, -207, -209, -207, -205, -206, -203, -204, -201, -203, -197, -202, -195, -200, -194, -196, -194, -191, -195, -187, -193, -184, -189, -185, -185, -185, -182, -182, -182, -178, -182, -174, -179, -174, -174, -175, -169, -174, -167, -171, -168, -166, -167, -165, -163, -164, -161, -162, -160, -158, -159, -156, -156, -156, -153, -151, -154, -147, -154, -147, -148, -148, -144, -147, -143, -144, -141, -141, -140, -139, -138, -138, -134, -137, -133, -133, -132, -131, -131, -128, -131, -126, -129, -125, -125, -124, -122, -123, -121, -121, -116, -123, -113, -122, -113, -116, -114, -112, -114, -109, -112, -108, -111, -107, -106, -109, -102, -107, -100, -104, -101, -102, -99, -100, -98, -98, -98, -94, -98, -91, -96, -90, -90, -93, -86, -91, -85, -85, -87, -83, -83, -84, -79, -85, -77, -80, -79, -76, -79, -75, -76, -74, -75, -72};
154:               
155:               fractional __attribute__((space(psv))) snaresamp[6252] = {-114, -124, -115, -131, -144, -136, -135, -170, -178, -207, -251, -275, -274, -301, -315, -333, -325, -312, -293, -279, -277, -286, -323, -338, -293, -297, -291, -259, -296, -338, -343, -340, -380, -402, -403, -417, -417, -398, -419, -423, -410, -422, -432, -407, -397, -438, -479, -457, -451, -525, -526, -498, -517, -502, -502, -542, -522, -518, -504, -452, -426, -443, -460, -502, -509, -537, -540, -553, -576, -547, -530, -536, -541, -544, -520, -473, -501, -502, -483, -507, -506, -522, -559, -517, -534, -524, -489, -512, -481, -462, -501, -497, -597, -645, -539, -533, -608, -700, -701, -735, -900, -778, -455, -301, -235, -530, -927, -965, -997, -1004, -849, -786, -729, -752, -825, -785, -905, -890, -682, -539, -240, 53, 247, 425, 468, 542, 524, 333, 458, 988, 1849, 2512, 2504, 2200, 1661, 602, -1048, -2812, -3350, -2694, -1975, -1151, -382, -244, -522, -821, -965, -919, -818, -749, -726, -689, -772, -966, -1177, -1518, -1733, -1665, -1668, -1762, -2098, -2425, -1951, -1017, -688, -961, -1454, -2310, -3287, -3560, -3208, -2774, -2421, -2080, -1729, -1369, -988, -695, -619, -593, -512, -286, 7, 46, -108, -393, -687, -737, -854, -916, -765, -843, -875, -823, -798, -660, -928, -1424, -2217, -3921, -4833, -4068, -2939, -1986, -1289, -624, -61, 241, 934, 1513, 1659, 1949, 2058, 2331, 2836, 2963, 3326, 3494, 3258, 3181, 2657, 2160, 2309, 2458, 2456, 1941, 926, -449, -2116, -2312, -1187, -545, -486, -980, -827, 876, 2041, 1930, 1475, 511, -319, -181, -236, -1682, -2420, -677, 934, 1090, 1453, 2095, 2638, 3199, 3207, 3069, 3283, 3282, 2869, 2347, 2096, 2229, 2232, 1629, 520, -1068, -2920, -3975, -3543, -2693, -2359, -2013, -1058, -113, 212, -63, -995, -2846, -5067, -5791, -4103, -2398, -1892, -1211, -614, -547, -376, -303, -169, 405, 863, 994, 746, -361, -2380, -4311, -4112, -1440, 1036, 1323, 687, 567, 560, 376, 265, 899, 2633, 4364, 5496, 6185, 6291, 6425, 6982, 8002, 9603, 11032, 11991, 12217, 11866, 11654, 10310, 7183, 1736, -5379, -6259, 832, 5958, 7075, 8767, 10689, 11559, 11277, 10996, 10946, 9658, 6927, 1473, -3510, -1412, 2852, 3443, 4466, 5623, 3785, 1304, -754, -3540, -6268, -7811, -8565, -8132, -5399, -2526, -1159, 754, 2625, 2703, 2337, 2394, 2277, 1247, -876, -3366, -6410, -9741, -11685, -12466, -12694, -11826, -10476, -9332, -8162, -7201, -7198, -8633, -10542, -11790, -12574, -12580, -11861, -11364, -10679, -9555, -8636, -7667, -6826, -6699, -6837, -6744, -6407, -6254, -6850, -8117, -9927, -11810, -13114, -13725, -13688, -13118, -12256, -11534, -11025, -9896, -8063, -6573, -5666, -5106, -4761, -5202, -6847, -8513, -9055, -7931, -5523, -3204, -1442, -1589, -3992, -4081, -178, 3656, 5352, 5616, 5588, 5173, 3754, 3567, 6177, 8196, 6054, 2440, 2727, 3912, 431, -2124, 1628, 6944, 10218, 12120, 12689, 11407, 8380, 4829, 1145, -1796, -1237, 1232, 2146, 2914, 4509, 6239, 9083, 12491, 14528, 14938, 14924, 15195, 14860, 13910, 13298, 12538, 11158, 9031, 6263, 4006, 2433, 1619, 2776, 4696, 5598, 6255, 7289, 8438, 9429, 10097, 10553, 10770, 11101, 11664, 11841, 11389, 10419, 9491, 9453, 9730, 9086, 7419, 5434, 4459, 5103, 5895, 5271, 3592, 1647, -857, -3244, -2870, 406, 3187, 4101, 4639, 5229, 5242, 4571, 4220, 5394, 7219, 7788, 6921, 5211, 2880, 920, 353, 738, 744, -90, -1414, -3304, -5997, -8704, -10287, -10212, -8891, -6879, -4646, -2632, -1169, -646, -1280, -2647, -4243, -6072, -7883, -9320, -10216, -10300, -9474, -8579, -8568, -9247, -10039, -10454, -9736, -8256, -7311, -6982, -6822, -6756, -6520, -6329, -6218, -5793, -5510, -6096, -7549, -9700, -12266, -14162, -14286, -13362, -12902, -12714, -12770, -13196, -12719, -10637, -7796, -5416, -4703, -5293, -6416, -8281, -10664, -13103, -14946, -15771, -16277, -16344, -15561, -14847, -14351, -13752, -13395, -13062, -12478, -11306, -9535, -8257, -8197, -9111, -10296, -10629, -10014, -9031, -8252, -8203, -8425, -8443, -8291, -7999, -8214, -9031, -9520, -9199, -8224, -6964, -4848, -1803, 208, 1262, 2124, 1322, 478, 1174, 565, -1605, -3489, -5557, -6417, -4819, -3300, -3159, -2404, -340, 1674, 3898, 6876, 8475, 7875, 6675, 5423, 4469, 4037, 2872, 1078, 172, 709, 1834, 2170, 2012, 2523, 3417, 4079, 4662, 5499, 7010, 9077, 10815, 12229, 13815, 14733, 14348, 13841, 13670, 13011, 12042, 11344, 10519, 8986, 7056, 6502, 8139, 10536, 12438, 13126, 12417, 11449, 10896, 11218, 12987, 14115, 13173, 12410, 12357, 11565, 11618, 13181, 13557, 12780, 13134, 13544, 12182, 10274, 9895, 10940, 11274, 9857, 7643, 5419, 4708, 6700, 8772, 9185, 9764, 10721, 10828, 10467, 9922, 9077, 8102, 7002, 6037, 5205, 4356, 3734, 3158, 2551, 2288, 1979, 1280, 648, 724, 1832, 3437, 4874, 5969, 6008, 4434, 1833, -1106, -3402, -4234, -4154, -4334, -5372, -6122, -4467, -1295, 412, 292, -462, -1841, -3316, -3268, -1895, -1655, -3981, -8525, -14173, -18241, -18180, -15249, -12289, -9981, -7801, -5884, -4097, -1868, -161, -271, -1542, -3267, -5583, -7363, -8182, -9619, -12595, -16200, -18918, -19937, -19202, -16747, -12858, -9362, -7787, -6367, -3922, -3296, -5358, -7249, -8561, -10179, -11782, -13638, -16010, -18424, -19792, -18992, -17132, -15510, -14019, -13211, -13026, -12731, -12735, -12897, -12759, -12408, -11990, -12124, -12771, -13185, -13479, -13481, -12728, -11544, -10495, -9940, -9521, -8897, -8700, -8978, -9396, -9870, -9976, -10002, -10469, -11163, -12223, -13283, -12849, -10963, -9382, -8479, -7313, -6362, -6240, -6258, -6266, -6689, -7219, -7690, -8041, -8123, -7893, -7353, -7075, -7132, -6506, -4861, -2913, -1586, -1075, -1259, -1923, -1847, -372, 1435, 2950, 3585, 3831, 4923, 5247, 3311, 827, -254, 943, 2917, 4160, 5803, 7762, 9683, 12250, 13887, 14192, 14349, 13898, 12863, 11345, 9565, 8320, 6365, 2821, -2237, -7384, -6821, -1209, 2012, 3671, 7395, 10986, 13493, 16020, 18422, 19766, 19573, 19043, 18458, 17603, 16863, 15410, 13071, 7944, -1278, -6705, -4582, -3206, -3263, 1197, 6793, 9696, 12473, 15852, 18244, 19730, 20551, 20429, 19490, 18279, 17578, 17242, 16582, 15876, 15337, 14658, 13921, 12514, 10264, 9036, 9082, 7151, 2755, 2146, 7777, 12277, 13025, 14174, 14474, 13443, 14439, 15992, 16511, 16617, 15123, 12447, 9174, 5220, 2257, 942, 1474, 3555, 4745, 4973, 5455, 5847, 6321, 6226, 5286, 4581, 3852, 3256, 3269, 3171, 3415, 4092, 4485, 4597, 3989, 3056, 2352, 1251, 39, -1207, -3045, -4999, -6390, -5687, -2516, 468, 2152, 3084, 2515, 733, -1340, -3708, -5624, -5854, -4667, -3807, -4180, -5134, -6081, -6506, -5963, -4894, -3744, -2695, -2029, -1838, -2260, -3246, -3965, -3832, -3721, -4585, -6327, -8247, -8428, -5688, -3294, -3936, -5689, -7645, -10070, -10318, -8077, -7492, -9315, -11188, -13383, -14560, -11505, -6913, -4835, -3929, -3250, -3596, -4173, -4410, -4495, -4727, -5662, -7163, -9288, -12312, -15008, -15672, -14602, -13955, -13454, -10544, -6450, -4113, -3292, -2804, -3022, -4558, -6559, -9095, -13033, -14843, -12976, -12261, -12993, -11858, -9322, -5333, -1166, 700, 2022, 3250, 2443, 548, -1091, -1951, -1983, -2274, -3002, -3700, -3575, -2267, -1351, -1480, -2493, -4830, -6546, -5922, -4304, -2506, -284, 2134, 4872, 7851, 10280, 11917, 13147, 14007, 14339, 14115, 13317, 12527, 11661, 9920, 7097, 3360, 1358, 3437, 5747, 5901, 6801, 8658, 10070, 10943, 10286, 7780, 4302, 3319, 7249, 11087, 11898, 12962, 13927, 13562, 13480, 13715, 13293, 11794, 9265, 5227, 206, -1308, 1247, 2972, 4262, 6654, 8282, 9885, 11647, 11460, 9472, 7139, 6357, 7397, 7527, 5590, 3265, 2699, 4639, 7439, 9383, 9580, 7534, 4422, 1841, 1078, 2489, 3651, 2666, 1179, -284, -3393, -5584, -2791, 1589, 3033, 3972, 5204, 4254, 2020, -274, -3535, -6735, -7142, -4022, -615, 696, 1618, 3229, 4806, 5768, 4847, 2282, -795, -4602, -7902, -8999, -8492, -7502, -6801, -6663, -5865, -3698, -1544, -868, -1516, -2483, -2346, -381, 1148, -148, -2840, -5197, -6840, -6192, -4271, -4368, -6084, -8094, -9971, -8947, -5205, -2758, -2003, -2513, -4844, -7511, -10836, -13793, -11597, -6583, -4442, -3224, -1662, -2429, -4272, -5124, -6209, -7949, -9430, -10719, -11782, -12158, -11405, -8325, -4012, -1998, -1644, -116, 549, -1483, -3666, -4389, -5103, -6710, -8007, -8731, -9898, -11153, -11900, -10789, -6633, -2127, 481, 2140, 3075, 3758, 4152, 2453, -166, -2115, -4716, -7965, -9888, -9825, -8963, -8356, -7796, -6970, -4711, -340, 4128, 7109, 8371, 8331, 7753, 4874, 28, -1743, -55, 1265, 1599, 1007, -951, -3590, -6535, -8252, -5814, -516, 2408, 2726, 3594, 3284, 1311, 1224, 2306, 2677, 2539, 1072, -1154, -3573, -6705, -7177, -2884, 2180, 5309, 7896, 10416, 11685, 12065, 12316, 11869, 10878, 9160, 6408, 3719, 683, -2905, -6629, -10471, -9442, -1810, 3516, 3883, 4785, 6222, 7342, 9615, 11698, 12193, 11312, 8989, 5553, 2907, 3220, 4640, 3794, 1613, -376, -2428, -3490, -2911, -2675, -4106, -4524, -692, 5117, 8357, 9455, 10422, 10378, 9508, 9491, 9087, 6571, 3346, 1452, 725, -488, -2857, -5435, -7118, -7131, -5663, -4260, -3223, -732, 3358, 6602, 7662, 7274, 5518, 2964, 1672, 1587, 704, -1484, -4454, -7892, -10425, -9710, -6824, -5395, -5388, -4323, -1942, 218, 312, -1967, -4864, -7927, -10480, -8784, -3597, -618, -518, -975, -1820, -1807, -196, 570, -947, -3400, -6244, -9979, -12965, -11985, -8100, -5250, -3288, -981, 165, -444, -2150, -3838, -4245, -4354, -5929, -8299, -10607, -12174, -10068, -5324, -2790, -1945, -1171, -1328, -1616, -2036, -3682, -6000, -8192, -10088, -11464, -11812, -11684, -12199, -11543, -7598, -2998, -562, 450, 439, -1084, -3384, -5220, -6758, -8729, -10707, -11946, -10334, -5997, -3475, -2906, -1499, -229, 500, 1127, 842, -884, -3493, -6017, -7921, -7895, -5751, -4148, -3805, -3110, -2153, -1462, -612, -24, -195, -609, -265, 1543, 3399, 3228, 1011, -2205, -5880, -9558, -11030, -9570, -8281, -8407, -7188, -3455, 150, 2002, 3144, 4250, 6279, 9173, 10382, 8968, 5728, 1036, -2666, -2059, 624, 517, -1577, -3504, -5744, -5921, -2629, 287, 1309, 2567, 3701, 4208, 4462, 3623, 2343, 2395, 3737, 4516, 3623, 2391, 1139, -199, 765, 3589, 5052, 4946, 4284, 4081, 5561, 7451, 7951, 6906, 5039, 3898, 3108, 1378, -439, -2117, -2669, 207, 4387, 6116, 6070, 5813, 5136, 5456, 7433, 8037, 6315, 3864, 941, 656, 5389, 9548, 9897, 9397, 7897, 5553, 4934, 5609, 5860, 5026, 3496, 1744, 217, 1200, 4860, 7763, 8717, 9055, 9627, 10837, 11851, 11169, 8425, 4633, 929, -2146, -2992, -727, 2109, 4564, 7053, 8699, 9475, 9129, 8616, 8852, 8023, 6550, 4780, 1863, -663, -2105, -2268, -701, 1245, 2760, 3654, 5170, 9069, 12619, 12926, 11338, 8621, 6549, 7832, 9972, 8956, 5395, 1425, -4860, -11226, -8456, -1032, 77, -886, 188, 1263, 4043, 7740, 9066, 8105, 6050, 3649, 2115, 2290, 3477, 4344, 4354, 3701, 1827, -1355, -5038, -9220, -13136, -14932, -14185, -12753, -11779, -9033, -4883, -2637, -2286, -2505, -2762, -2563, -1768, -813, -754, -1876, -3444, -4816, -5190, -3978, -3470, -5379, -7763, -10265, -10890, -6816, -2638, -1896, -2447, -3788, -5549, -5049, -2518, -2342, -4556, -6156, -7130, -6017, -2638, -972, -1790, -3493, -5012, -4666, -2094, 1126, 3176, 2900, 1452, 970, 1614, 1673, 45, -2202, -4329, -5392, -3668, -2186, -3572, -5486, -6990, -6432, -3014, -248, 568, 340, -367, -338, 804, 1804, 1444, 719, 763, 821, 649, 99, -1129, -2631, -3942, -4018, -2497, -1280, -1114, -786, 65, 1123, 1691, 1587, 1393, 1329, 1762, 2772, 3274, 2490, 522, -1967, -2825, -114, 3767, 5533, 5792, 5075, 3272, 1574, 122, -772, -260, 321, 45, -202, 92, 1046, 1994, 2412, 2784, 3131, 3671, 4502, 4711, 3862, 2335, 1766, 3298, 5230, 5723, 4956, 3791, 2982, 3474, 5150, 6665, 8173, 10720, 13522, 14011, 11772, 8533, 4503, 1649, 1893, 2039, 201, -1393, -1754, -1226, 118, 1414, 2601, 4722, 6743, 7418, 7119, 5945, 4461, 3406, 3300, 4232, 5394, 6795, 7912, 7745, 6435, 4846, 3350, 2387, 3053, 4075, 3622, 2183, 169, -2067, -3969, -5056, -5638, -5662, -3275, 528, 2840, 3893, 4761, 5453, 5631, 5135, 3757, 1782, 224, 568, 2845, 3507, 1185, -1775, -5198, -8957, -11011, -9163, -4408, -871, 902, 2555, 4496, 6777, 7924, 6388, 3014, -1040, -5872, -9626, -10019, -9285, -9381, -9177, -7713, -4688, -1123, 877, 813, -202, -1475, -2006, -1884, -3015, -5304, -7819, -8519, -5985, -4047, -4729, -6101, -6604, -4654, -1557, -279, -1294, -3467, -5822, -8111, -10056, -10728, -9311, -7181, -6264, -5450, -3912, -2608, -1806, -1989, -2643, -2353, -2085, -3517, -5975, -8435, -9545, -7362, -3751, -1958, -1942, -2857, -4624, -5814, -5061, -4020, -3934, -3902, -4208, -4508, -3910, -3280, -3225, -3521, -3824, -3875, -3792, -3862, -4355, -5058, -5860, -6403, -5874, -4332, -2805, -2599, -3867, -5682, -7264, -6110, -1737, 1262, 1301, 332, -1255, -2154, -2408, -4053, -6262, -7827, -8390, -6789, -4005, -2782, -3273, -2985, -888, 1456, 2546, 2076, 486, -1451, -3267, -4582, -4943, -4273, -3512, -2984, -1855, -341, 671, 1439, 2090, 2487, 3357, 4619, 5506, 5134, 3126, 851, -1384, -2686, -1284, 670, 1233, 1655, 2642, 3732, 4300, 4252, 3754, 3294, 3639, 4808, 5572, 4493, 2153, -382, -1711, 567, 4490, 6223, 6117, 5185, 3089, 574, -1010, -1272, 80, 2799, 5906, 8597, 9698, 8956, 7274, 5365, 3932, 2997, 2499, 1914, 734, -722, -1379, 470, 3460, 4880, 5327, 5747, 5818, 5240, 4618, 4594, 4482, 3707, 2055, -57, -1885, -2879, -2469, -1749, -1356, -443, 1768, 5399, 8555, 9508, 8264, 5615, 3096, 1503, 212, -1873, -4752, -7081, -7179, -4954, -2808, -1785, -1160, -975, -689, 25, 655, 701, 143, -872, -2421, -4050, -5004, -4140, -2065, -1412, -2324, -3801, -5630, -7143, -7592, -6833, -5942, -5242, -4008, -2934, -2747, -3382, -3954, -3676, -3097, -2869, -2998, -3026, -2485, -1324, -706, -1837, -3876, -6137, -7734, -7068, -5288, -4712, -5115, -5013, -3483, -808, 1064, 847, -785, -2987, -4021, -2804, -1921, -3215, -5243, -6649, -6505, -4365, -2245, -2218, -3306, -4516, -5653, -5590, -4602, -4301, -5005, -5294, -3866, -1974, -1132, -1028, -1407, -2251, -3260, -4253, -4969, -5302, -5776, -6709, -6692, -4308, -1438, -449, -931, -1869, -2053, -616, 926, 794, -714, -2495, -4122, -4617, -3040, -776, 178, -34, -142, 323, 1055, 1426, 826, -217, -837, -620, 219, 932, 1141, 836, 358, 724, 2123, 3427, 3761, 3272, 2325, 1357, 773, 246, -399, -1234, -1750, -729, 1193, 2676, 3451, 3790, 3961, 4264, 4934, 5156, 4293, 3006, 1774, 924, 357, -358, -946, -101, 2668, 5189, 6055, 6048, 5597, 4923, 4151, 3671, 4097, 4617, 4259, 3415, 2944, 3123, 3820, 4173, 3508, 2642, 2071, 2033, 2371, 2257, 1418, -47, -791, 111, 986, 488, -706, -1631, -1239, 1438, 4929, 6715, 6999, 6434, 5408, 4830, 4143, 2779, 1434, 935, 968, 463, -525, -1581, -2060, -1202, 703, 2621, 3609, 3724, 3115, 1643, 242, 179, 1372, 2263, 2259, 1981, 1370, 611, 798, 2162, 3662, 4592, 4973, 4405, 2731, 456, -1876, -3787, -4190, -2757, -1543, -1621, -1995, -2124, -703, 2428, 4165, 3142, 1017, -1259, -2732, -1763, 20, -4, -841, -1314, -1735, -1458, 22, 1735, 2022, 827, -1033, -3407, -5359, -5556, -4837, -4831, -5442, -5572, -4616, -3064, -2116, -2149, -1768, 333, 2725, 3001, 1419, -995, -4219, -7080, -8252, -8564, -8987, -8755, -7459, -5819, -4601, -4230, -4006, -2410, 63, 1202, 318, -1617, -4193, -6201, -5470, -3532, -3882, -5871, -7361, -7314, -5128, -2934, -2795, -3308, -3409, -3564, -3539, -3445, -3671, -3655, -3264, -2935, -2840, -3275, -3546, -2478, -572, 628, 100, -1958, -4284, -6160, -7182, -6211, -3641, -1833, -1613, -2467, -3732, -3121, 557, 3874, 4115, 3244, 2457, 990, 524, 2186, 3226, 2313, 612, -1520, -3170, -2593, -1153, -1480, -2939, -3315, -1606, 1136, 2217, 1179, -510, -1909, -1576, 622, 1855, 1436, 982, 696, 1383, 3467, 4414, 3385, 1513, -1241, -2921, -1164, 1909, 3222, 3052, 2325, 464, -2042, -2582, -772, 545, 255, -647, -1089, 289, 2630, 3227, 1985, -60, -1391, 161, 2828, 3106, 1884, 1359, 2006, 3491, 4067, 2851, 1223, 106, 319, 1961, 2870, 2193, 1487, 1246, 1301, 1722, 2050, 2309, 2906, 3471, 3588, 3380, 2948, 2526, 2556, 3103, 3307, 2476, 1142, 233, 537, 1968, 3095, 3399, 3423, 3264, 3446, 4570, 5253, 4342, 2636, 928, -10, 232, 541, -160, -1359, -1923, -718, 1835, 3898, 4881, 5234, 4785, 3635, 2385, 1261, 388, -75, -320, -872, -2018, -2328, -463, 1583, 1549, 561, -81, -226, 584, 1481, 777, -1018, -2833, -4291, -3870, -1285, 975, 1586, 1590, 1435, 837, 106, -312, -441, -662, -1331, -2460, -3485, -3398, -2094, -675, 444, 1728, 2821, 3209, 3115, 2568, 1455, 66, -899, -1033, -991, -1592, -2524, -3249, -3602, -3621, -3722, -3232, -956, 1776, 3117, 3534, 3397, 2681, 2379, 2369, 1373, -336, -1753, -2777, -3360, -3152, -2262, -1563, -1465, -999, 511, 2080, 2611, 2253, 1663, 999, 79, -770, -1174, -1457, -1957, -2593, -2970, -2277, -295, 1865, 3464, 4543, 4824, 3876, 2055, 654, 712, 1447, 1218, 32, -797, -432, 805, 1706, 1518, 839, 319, -49, -431, -870, -906, -121, 762, 953, 543, -154, -472, 491, 2220, 3434, 3921, 4180, 4254, 3874, 3002, 1797, 318, -1333, -2914, -4003, -3891, -2439, -673, 702, 2097, 3730, 5006, 5384, 4959, 3906, 2093, 251, -339, -64, -366, -1201, -1530, -751, 644, 1488, 1403, 1113, 1108, 1485, 2310, 3304, 4300, 5038, 5019, 4186, 2876, 1797, 1897, 2590, 2390, 1493, 282, -1510, -2424, -1055, 629, 630, 218, 1307, 3649, 5727, 6645, 6653, 6171, 5664, 5492, 5404, 4813, 3930, 3048, 2347, 2308, 2704, 2527, 1833, 1620, 2172, 3023, 3605, 3654, 3273, 2363, 1427, 1860, 3543, 4528, 4159, 3153, 1613, -4, -311, 683, 1183, 630, 651, 2268, 4340, 5634, 5975, 5484, 4104, 2289, 1112, 1207, 1485, 920, 288, 797, 2171, 3228, 3403, 3192, 3214, 3545, 3999, 3907, 2737, 871, -1480, -3794, -4036, -1922, 112, 1190, 2492, 3890, 4630, 4634, 3866, 2511, 1201, 332, 13, 128, 408, 466, 49, -190, 536, 1430, 1566, 1591, 2091, 2454, 2237, 1700, 1252, 955, 482, -387, -1453, -1946, -1162, 252, 842, 680, 661, 1157, 2172, 3244, 3756, 3803, 3523, 2818, 1816, 888, 445, 741, 1247, 1383, 1067, 397, -458, -1290, -1605, -975, 10, 478, 582, 742, 1106, 1652, 2044, 2057, 1812, 1333, 906, 805, 707, 231, -561, -1088, -827, -153, 381, 933, 1686, 2316, 2504, 2060, 1110, 108, -354, -134, -10, -412, -778, -929, -1208, -1813, -2476, -2196, -662, 729, 1258, 1728, 2479, 3099, 3279, 2855, 1864, 411, -964, -1404, -982, -816, -1543, -2591, -2447, -663, 1081, 1639, 1879, 2336, 2710, 3226, 3757, 3625, 2870, 1750, 338, -498, -272, 37, -609, -1992, -2869, -1939, 215, 1541, 2074, 2971, 3922, 4442, 4722, 4480, 3656, 2776, 2221, 2194, 2382, 2126, 1290, 412, 157, 798, 1779, 2553, 3263, 3834, 3992, 3644, 2858, 2137, 1929, 2049, 2298, 2856, 3443, 3656, 3531, 3217, 2659, 1901, 1201, 1074, 1658, 2401, 2599, 2295, 1979, 2017, 2705, 3718, 4292, 4354, 3986, 3078, 2261, 1997, 1590, 647, -570, -1281, -230, 2243, 4109, 4813, 5137, 5046, 4410, 3630, 2819, 1877, 1001, 379, -139, -571, -498, 185, 755, 673, 175, 212, 1471, 2968, 3444, 3141, 2719, 2496, 2944, 3538, 3187, 1981, 619, -289, -146, 513, 475, 239, 960, 2250, 3152, 3544, 3487, 2861, 2019, 1394, 859, 123, -505, -527, -135, 33, -99, 188, 1068, 1723, 1697, 1574, 1803, 2153, 2118, 1680, 1322, 1371, 1397, 1055, 569, 302, 221, 197, 78, -227, -754, -1384, -1953, -2085, -1419, -477, -269, -784, -1156, -1007, -586, -32, 593, 1165, 1597, 1825, 1721, 1316, 808, 350, 5, -258, -602, -907, -897, -649, -351, -52, 102, -60, -565, -1231, -1374, -695, 56, 177, -69, -281, -302, -156, -27, -165, -490, -620, -308, 91, 230, 122, -148, -220, 412, 1347, 1629, 993, -71, -895, -996, -454, 210, 517, 381, 49, -87, 152, 558, 852, 1094, 1356, 1367, 1019, 670, 877, 1615, 2255, 2362, 1980, 1418, 1223, 1567, 1850, 1660, 1281, 1248, 1714, 2298, 2288, 1482, 593, 608, 1643, 2787, 3425, 3681, 3497, 2730, 1799, 1380, 1395, 1148, 516, 136, 266, 445, 469, 691, 1421, 2371, 2940, 3213, 3723, 4345, 4490, 3895, 2682, 1165, -294, -1378, -1789, -1545, -1021, -436, 434, 1507, 2451, 3002, 3020, 2576, 1967, 1386, 1026, 930, 914, 762, 633, 902, 1771, 2762, 3268, 3177, 2636, 1874, 1296, 980, 540, -143, -524, 20, 1161, 1893, 1770, 1134, 691, 974, 1651, 1971, 1974, 2050, 2105, 2005, 2050, 2455, 2908, 2977, 2641, 2128, 1676, 1462, 1273, 734, -149, -998, -1444, -1300, -897, -510, 214, 1322, 2154, 2217, 1797, 1200, 777, 656, 506, 36, -545, -1057, -1250, -855, -557, -1076, -1922, -2143, -1477, -441, 152, 140, -151, -437, -521, -503, -684, -1015, -1363, -1845, -2305, -2470, -2505, -2756, -3087, -2824, -1702, -427, 396, 805, 914, 738, 427, 26, -558, -1476, -2545, -3462, -3885, -3423, -2238, -1218, -811, -844, -1295, -1818, -1582, -655, -70, -310, -1045, -1555, -1266, -565, -337, -760, -1392, -2017, -2344, -1872, -1247, -1551, -2087, -1615, -880, -757, -531, -7, 179, 232, 312, 47, -365, -463, -192, 329, 708, 550, -36, -725, -968, -579, -227, -454, -904, -961, -251, 956, 1860, 2067, 1702, 1145, 770, 641, 493, 347, 406, 490, 430, 399, 555, 687, 516, -6, -408, -33, 803, 1308, 1507, 1783, 2139, 2476, 2524, 2082, 1376, 755, 541, 804, 947, 511, -199, -624, -321, 557, 1245, 1435, 1332, 1254, 1724, 2576, 2911, 2446, 1446, 478, 330, 884, 986, 384, -295, -551, -176, 680, 1379, 1692, 1719, 1644, 1793, 2281, 2644, 2404, 1720, 729, -322, -1107, -1558, -1742, -1493, -848, -201, 298, 708, 1057, 1436, 1714, 1559, 979, 357, 168, 574, 1024, 969, 452, -315, -1119, -1572, -1492, -1074, -609, -244, -4, 123, 268, 550, 836, 879, 598, 67, -594, -1071, -1325, -1681, -2193, -2389, -2011, -1269, -624, -374, -486, -757, -934, -658, 9, 489, 438, 116, -71, 51, 295, 296, -108, -704, -1117, -1196, -1223, -1509, -1887, -2133, -2233, -2277, -2194, -1705, -800, 83, 536, 591, 538, 671, 874, 681, -18, -763, -1297, -1742, -2159, -2210, -1750, -1296, -1153, -1057, -986, -1284, -1866, -2301, -2093, -984, 481, 1481, 1853, 1809, 1493, 1246, 1080, 567, -364, -1401, -2171, -2377, -2127, -1891, -1824, -1730, -1330, -478, 440, 833, 684, 419, 401, 673, 1006, 1187, 1199, 1049, 782, 647, 785, 1006, 994, 634, 48, -467, -803, -1172, -1595, -1723, -1434, -932, -269, 450, 951, 1216, 1552, 2053, 2376, 2291, 1962, 1573, 1133, 627, 20, -490, -698, -720, -542, 40, 776, 1148, 1103, 860, 709, 830, 995, 1004, 954, 818, 633, 655, 820, 615, 28, -468, -612, -548, -549, -622, -473, 56, 762, 1287, 1679, 2020, 2019, 1412, 443, -388, -716, -603, -497, -566, -453, 118, 974, 1743, 2088, 2065, 1790, 1481, 1360, 1325, 1032, 568, 20, -600, -1311, -1916, -1932, -1067, -77, 299, 229, 163, 372, 825, 1155, 1314, 1465, 1532, 1351, 937, 388, -194, -795, -1290, -1461, -1352, -1141, -846, -403, 214, 981, 1552, 1660, 1343, 900, 591, 405, 14, -645, -1244, -1570, -1648, -1531, -1301, -1034, -787, -568, -395, -225, 30, 336, 474, 479, 457, 245, -309, -772, -635, -99, 144, -190, -884, -1685, -2209, -2086, -1585, -1145, -803, -522, -238, 162, 503, 448, -40, -728, -1089, -1081, -1121, -1403, -1698, -1938, -1907, -1296, -319, -52, -1030, -1970, -1727, -1203, -1113, -905, -704, -884, -928, -832, -1031, -1369, -1597, -1606, -1251, -836, -803, -1149, -1625, -1792, -1211, -54, 952, 1427, 1455, 1243, 895, 370, -471, -1504, -2255, -2484, -2305, -1923, -1421, -983, -832, -874, -601, 150, 762, 796, 327, -312, -580, -316, 36, 136, 105, -17, -185, -353, -502, -643, -685, -542, -316, -189, 42, 737, 1255, 905, 417, 510, 423, -189, -579, -627, -675, -505, -122, 167, 527, 1065, 1513, 1852, 2021, 1815, 1388, 1074, 913, 764, 433, -52, -474, -703, -527, -107, -45, -340, -391, -54, 259, 383, 540, 702, 701, 551, 364, 244, 324, 438, 314, 81, 70, 267, 464, 547, 561, 540, 438, 201, -49, -261, -419, -481, -481, -423, -241, -45, -125, -550, -959, -994, -820, -771, -746, -713, -579, -320, -197, -258, -245, -121, -42, -156, -394, -573, -636, -473, -205, -228, -587, -861, -803, -571, -501, -543, -535, -586, -542, -270, -24, -70, -345, -618, -751, -859, -1048, -1255, -1373, -1334, -1109, -742, -455, -440, -687, -995, -1118, -868, -403, -82, 52, -86, -521, -867, -852, -848, -1117, -1458, -1593, -1438, -1141, -850, -648, -629, -756, -840, -748, -628, -803, -1191, -1352, -1004, -365, 34, 2, -184, -529, -894, -872, -569, -508, -775, -1148, -1337, -1263, -1196, -1145, -943, -610, -327, -64, 73, 74, 160, 400, 673, 619, 192, -356, -921, -958, -146, 638, 435, -1328, -3113, -2058, -46, -323, -443, 836, 612, -532, -609, -679, -856, -414, -191, -506, -851, -1075, -830, -152, 207, 21, -284, -475, -438, -217, -100, -234, -376, -402, -570, -809, -852, -977, -1298, -1471, -1356, -1012, -721, -596, -391, -140, 7, 250, 499, 642, 731, 593, 271, -85, -416, -659, -823, -1032, -1291, -1385, -1119, -741, -460, -204, -21, 120, 381, 706, 937, 870, 389, -224, -604, -662, -564, -491, -548, -619, -588, -532, -344, 42, 386, 657, 865, 931, 860, 712, 544, 372, 121, -96, -286, -439, -384, -260, -202, -91, -64, -57, 1, 122, 320, 422, 356, 195, -107, -73, 347, 479, 269, 104, 109, 194, 176, 114, 58, -15, 188, 597, 891, 978, 848, 589, 425, 275, -36, -592, -1105, -1133, -781, -415, -253, -197, -37, 256, 504, 628, 570, 394, 243, 262, 402, 396, 111, -333, -642, -462, -11, 173, 34, -162, -205, -58, 135, 154, 125, 291, 579, 627, 316, -56, -262, -368, -417, -275, 84, 314, 186, 13, -209, -527, -317, 451, 827, 276, -709, -1070, -743, -692, -680, -172, 107, -51, -123, -207, -418, -492, -343, 28, 248, 28, -487, -916, -936, -491, -139, -166, -79, 288, 569, 588, 256, -19, 205, 275, -418, -1551, -2222, -1612, -820, -1106, -1092, -289, -181, -345, 148, 559, 575, 581, 375, -114, -434, -459, -549, -678, -634, -482, -278, -44, 98, -23, -356, -463, -107, 302, 571, 661, 428, -85, -597, -828, -768, -559, -384, -432, -634, -728, -486, -1, 383, 501, 412, 199, 126, 258, 370, 351, 243, 81, -98, -266, -274, -234, -333, -425, -448, -459, -361, -83, 266, 553, 566, 397, 244, 120, 104, 282, 482, 443, 176, -73, -182, -79, 129, 196, 40, -166, -338, -473, -487, -502, -548, -465, -235, -121, -89, 21, 7, -101, -70, 73, 118, 132, 197, 324, 463, 498, 295, -208, -879, -1371, -1399, -1208, -1161, -1189, -1045, -754, -567, -558, -503, -199, 178, 422, 467, 323, -69, -604, -757, -427, -157, -261, -566, -784, -783, -684, -615, -497, -340, -292, -338, -358, -262, -127, -34, 23, -109, -273, -367, -431, -334, -131, -65, -86, -139, -139, -11, 80, 83, 62, -184, -493, -598, -563, -466, -256, 40, 243, 81, -319, -475, -202, 174, 385, 457, 456, 336, 319, 379, 328, 178, 26, -140, -155, 56, 263, 341, 504, 692, 679, 632, 713, 767, 648, 283, -206, -404, -86, 413, 693, 789, 876, 998, 1006, 735, 422, 287, 192, 102, 158, 220, 137, 15, 38, 166, 324, 582, 847, 983, 1005, 882, 530, 110, -103, -5, 56, -22, -59, -113, -89, 63, 186, 336, 524, 636, 685, 704, 659, 544, 236, -57, -139, -74, 19, -32, -214, -177, 79, 245, 215, 143, 225, 404, 514, 529, 498, 465, 372, 156, 37, 82, 116, 186, 288, 180, -107, -331, -212, 191, 360, 225, -32, -322, -268, 165, 407, 493, 582, 555, 476, 331, 165, 118, 141, 138, 13, -190, -239, -205, -229, -322, -412, -455, -470, -389, -216, -12, 190, 320, 444, 519, 506, 491, 468, 452, 530, 529, 291, -12, -326, -361, -58, 165, 121, -23, -136, -139, 70, 322, 342, 193, -89, -404, -387, -168, 153, 847, 1477, 1045, -771, -1999, -685, 479, -686, -1072, -277, -589, -519, 472, 452, 15, 144, 263, 325, 440, 312, -37, -204, -185, -153, -66, 67, 72, -40, -233, -344, -185, 12, 22, -104, -143, -48, -3, -86, -185, -174, 45, 268, 295, 326, 325, 260, 139, -107, -435, -563, -490, -510, -741, -902, -813, -557, -228, 75, 210, 263, 379, 514, 541, 468, 341, 267, 157, -76, -296, -417, -546, -585, -455, -243, -77, -111, -169, -243, -333, -294, -69, 71, 81, 1, 17, 177, 342, 350, 122, -195, -346, -372, -373, -295, -209, -35, 174, 313, 351, 303, 201, 270, 406, 358, 97, -189, -378, -366, -169, 0, 16, -172, -297, 94, 806, 1026, 343, -305, -114, 43, -270, -129, 226, 34, -250, -339, -345, -16, 246, -92, -545, -367, 95, 190, 268, 471, 248, -183, -280, -234, -188, -74, -82, -220, -170, 58, 86, -47, -155, -199, -147, -53, -13, -38, -156, -331, -380, -315, -264, -218, -281, -543, -663, -405, -165, -136, 32, 135, -99, -431, -641, -725, -682, -566, -544, -712, -777, -660, -587, -543, -435, -380, -479, -673, -842, -906, -803, -457, -112, -131, -461, -748, -861, -834, -339, 560, 721, -577, -2086, -1575, 182, 536, 146, -503, -2468, -2674, -156, 11, -1443, -635, -109, -1079, -751, 14, -346, -482, -261, -572, -928, -898, -727, -555, -460, -596, -704, -723, -806, -843, -836, -867, -784, -537, -373, -411, -419, -314, -238, -217, -186, -169, -182, -296, -455, -527, -470, -354, -352, -495, -630, -748, -724, -509, -335, -234, -94, -61, -76, -35, 86, 197, 263, 185, -180, -563, -526, -190, -105, -240, -351, -459, -416, -233, -182, -264, -361, -490, -573, -523, -354, -248, -236, -176, -163, -266, -393, -353, -243, -252, -372, -477, -571, -588, -460, -326, -295, -299, -481, -763, -840, -699, -419, -272, -357, -430, -507, -584, -547, -581, -715, -748, -739, -859, -1100, -1209, -1118, -976, -853, -700, -657, -720, -722, -694, -672, -660, -745, -843, -866, -951, -1093, -1209, -1138, -855, -676, -748, -953, -1156, -1166, -1047, -920, -887, -840, -766, -754, -808, -885, -1075, -1375, -1555, -1479, -1346, -1194, -1043, -969, -949, -932, -900, -790, -636, -593, -650, -749, -966, -1179, -1252, -1232, -1135, -1025, -982, -905, -823, -789, -787, -863, -981, -1146, -1275, -1252, -1081, -860, -795, -790, -728, -734, -761, -638, -510, -487, -533, -642, -777, -849, -910, -1045, -1108, -1202, -1335, -1212, -845, -539, -456, -503, -679, -802, -683, -529, -457, -411, -455, -514, -464, -408, -483, -550, -490, -529, -629, -662, -680, -471, -53, 239, 1, -742, -1193, -849, -410, -451, -375, -38, -136, -384, -277, -210, -309, -255, -199, -267, -182, 21, 53, 28, -16, -149, -201, -136, -67, -87, -148, -163, -105, -27, 57, 144, 202, 133, -27, -136, -171, -115, 85, 296, 374, 270, 161, 137, 135, 81, 50, 204, 320, 316, 322, 282, 133, -44, -142, -178, -233, -373, -481, -539, -512, -383, -144, 70, 242, 351, 354, 362, 410, 439, 442, 380, 310, 220, 178, 137, -5, -152, -194, -145, -65, 72, 239, 327, 282, 190, 101, 68, 62, 54, 32, -19, -74, -41, 112, 212, 191, 214, 167, 5, -89, -86, -108, -154, -170, -194, -222, -247, -303, -329, -285, -212, -163, -90, 21, 158, 257, 227, 155, 84, 66, 153, 283, 270, 142, -51, -337, -461, -342, -223, -255, -336, -457, -522, -422, -274, -166, -111, -123, -169, -123, -26, 12, 43, 85, 83, 75, 41, -110, -299, -369, -328, -222, -156, -173, -291, -435, -490, -473, -470, -402, -305, -278, -266, -207, -137, -74, -76, -104, -46, 24, 10, -87, -242, -375, -456, -525, -560, -540, -450, -290, -147, -102, -76, -62, -67, -70, -122, -190, -243, -265, -220, -165, -149, -92, -48, 4, 94, 160, 173, 238, 312, 328, 217, 26, -63, -5, 71, 97, 67, -17, -90, -163, -183, -133, 20, 203, 238, 139, 88, 119, 210, 355, 414, 358, 265, 123, 13, 0, 21, -18, -54, -24, 36, 38, 73, 108, 39, -20, 29, 155, 261, 291, 186, 53, 87, 240, 354, 299, 124, -42, -184, -247, -221, -175, -210, -254, -181, -37, 176, 487, 711, 702, 574, 379, 206, 200, 278, 238, 58, -174, -340, -387, -385, -416, -428, -349, -148, 32, 118, 124, 66, 3, 4, 9, -44, -147, -251, -303, -295, -326, -315, -297, -397, -510, -535, -530, -561, -527, -458, -393, -315, -235, -292, -334, -320, -301, -311, -329, -299, -163, -63, -96, -168, -262, -341, -330, -337, -456, -485, -419, -396, -315, -241, -285, -285, -202, -171, -219, -375, -620, -739, -682, -578, -556, -582, -606, -568, -515, -466, -409, -340, -318, -311, -345, -400, -412, -380, -367, -427, -564, -697, -727, -653, -543, -497, -570, -675, -769, -733, -665, -579, -454, -332, -275, -274, -286, -328, -349, -287, -262, -319, -344, -335, -337, -289, -243, -318, -460, -536, -547, -564, -475, -313, -201, -209, -292, -420, -461, -288, -48, 80, 45, -108, -241, -281, -228, -210, -333, -498, -548, -485, -413, -384, -357, -318, -255, -195, -202, -263, -353, -382, -349, -316, -239, -196, -284, -421, -480, -408, -340, -284, -252, -275, -289, -242, -218, -198, -154, -198, -333, -442, -452, -421, -436, -532, -596, -610, -608, -622, -606, -601, -560, -499, -449, -456, -473, -461, -466, -424, -396, -442, -489, -484, -521, -609, -665, -679, -666, -672, -680, -578, -390, -243, -148, -57, -73, -164, -277, -347, -337, -229, -151, -223, -225, -169, -203, -239, -268, -355, -404, -383, -408, -505, -596, -594, -441, -304, -270, -179, -98, -56, 1, -34, -203, -378, -478, -546, -593, -606, -514, -316, -182, -213, -276, -353, -401, -403, -327, -319, -352, -375, -367, -381, -364, -357, -314, -262, -213, -135, -106, -157, -225, -357, -513, -638, -698, -680, -604, -472, -330, -258, -290, -337, -323, -282, -240, -254, -348, -462, -522, -531, -501, -476, -446, -450, -605, -750, -750, -668, -592, -531, -405, -281, -224, -181, -148, -203, -320, -400, -469, -522, -598, -687, -726, -711, -672, -560, -461, -387, -340, -341, -325, -292, -313, -314, -219, -150, -164, -188, -284, -372, -409, -471, -498, -472, -482, -537, -597, -572, -519, -461, -345, -270, -315, -389, -427, -360, -222, -94, -52, -134, -300, -420, -383, -347, -378, -427, -478, -537, -529, -412, -302, -262, -209, -69, -3, -23, -95, -160, -171, -125, -72, -108, -236, -292, -293, -363, -401, -324, -204, -162, -212, -369, -480, -519, -444, -268, -72, 52, 101, -7, -178, -349, -438, -502, -552, -455, -299, -241, -236, -249, -243, -209, -145, -101, -39, -23, -88, -134, -130, -143, -71, -2, 27, 38, 37, 35, 51, 69, 59, -49, -193, -278, -333, -315, -170, 17, 113, 136, 144, 130, 156, 248, 363, 408, 408, 339, 242, 239, 226, 131, 83, 76, 69, 97, 165, 263, 313, 312, 266, 199, 142, 165, 223, 307, 374, 321, 249, 229, 187, 143, 150, 171, 191, 209, 275, 351, 368, 295, 191, 68, -50, -62, -13, 31, 33, 67, 136, 207, 310, 412, 455, 425, 413, 410, 364, 226, 69, -55, -103, -58, 14, 75, 195, 292, 246, 198, 187, 168, 193, 248, 311, 303, 256, 180, 97, 69, 66, 76, 101, 100, 92, 118, 115, 86, 79, 160, 208, 189, 223, 242, 240, 268, 321, 374, 319, 255, 288, 263, 206, 191, 189, 172, 163, 145, 151, 123, 26, 28, 98, 166, 164, 127, 89, 111, 197, 299, 365, 394, 392, 427, 504, 451, 287, 168, 109, 36, 67, 170, 194, 185, 245, 329, 357, 308, 306, 323, 319, 295, 189, 78, 122, 256, 339, 350, 269, 151, 84, 79, 58, 51, 23, -5, 55, 153, 247, 325, 381, 382, 371, 338, 333, 320, 240, 146, 92, 86, 197, 262, 225, 189, 273, 384, 449, 492, 529, 555, 586, 613, 574, 512, 484, 480, 482, 461, 360, 297, 311, 300, 330, 381, 414, 423, 422, 411, 390, 421, 472, 558, 630, 654, 707, 751, 689, 608, 553, 439, 396, 460, 444, 352, 275, 303, 403, 487, 549, 633, 735, 768, 733, 720, 750, 757, 712, 626, 610, 629, 553, 438, 388, 350, 342, 329, 346, 354, 389, 426, 501, 539, 538, 532, 559, 581, 550, 517, 507, 520, 484, 437, 373, 279, 197, 209, 310, 403, 411, 421, 431, 384, 367, 444, 498, 471, 397, 306, 307, 380, 465, 548, 633, 632, 542, 562, 548, 417, 271, 195, 175, 217, 288, 365, 383, 380, 394, 430, 534, 610, 604, 573, 533, 517, 546, 599, 594, 548, 515, 546, 571, 570, 522, 451, 382, 349, 358, 391, 518, 637, 645, 578, 506, 457, 421, 410, 448, 517, 539, 534, 545, 568, 564, 603, 618, 599, 664, 746, 719, 653, 609, 630, 710, 791, 800, 766, 725, 686, 649, 588, 628, 757, 784, 668, 630, 676, 670, 678, 731, 789, 822, 842, 843, 832, 870, 909, 919, 877, 775, 723, 706, 619, 580, 610, 594, 598, 650, 706, 739, 777, 808, 804, 755, 758, 775, 821, 921, 1004, 1026, 989, 943, 932, 934, 905, 874, 826, 799, 834, 881, 875, 839, 843, 799, 732, 697, 716, 744, 748, 758, 826, 899, 962, 999, 1035, 1097, 1113, 1063, 960, 846, 739, 702, 716, 715, 720, 683, 638, 671, 780, 903, 949, 921, 821, 775, 819, 872, 892, 883, 862, 835, 792, 777, 792, 821, 805, 737, 615, 564, 563, 561, 569, 576, 551, 591, 660, 646, 671, 747, 799, 777, 706, 628, 570, 598, 683, 661, 517, 443, 494, 573, 639, 691, 717, 742, 732, 747, 769, 760, 767, 732, 683, 660, 648, 667, 645, 643, 687, 650, 595, 660, 730, 695, 638, 682, 788, 885, 966, 956, 860, 794, 818, 814, 741, 676, 643, 577, 522, 546, 586, 662, 815, 874, 861, 849, 794, 722, 702, 734, 746, 690, 665, 653, 591, 545, 556, 570, 643, 729, 700, 682, 705, 733, 767, 735, 624, 590, 654, 705, 658, 609, 623, 646, 649, 629, 580, 562, 546, 459, 364, 345, 386, 474, 544, 613, 683, 707, 704, 679, 572, 467, 490, 569, 570, 520, 493, 476, 439, 450, 499, 497, 508, 536, 535, 539, 572, 564, 583, 616, 595, 563, 554, 548, 520, 517, 543, 553, 567, 567, 532, 519, 489, 451, 449, 525, 552, 527, 511, 454, 429, 442, 421, 422, 426, 368, 310, 235, 256, 337, 355, 327, 265, 263, 303, 291, 260, 242, 196, 181, 188, 188, 242, 267, 189, 111, 69, 41, 51, 89, 127, 171, 217, 235, 195, 133, 164, 232, 217, 180, 151, 97, 63, 17, -84, -162, -119, -83, -130, -155, -171, -214, -229, -151, -37, -1, -27, -46, -110, -177, -198, -218, -244, -195, -162, -217, -217, -170, -168, -218, -255, -259, -293, -257, -219, -214, -258, -301, -345, -369, -392, -337, -351, -421, -433, -409, -405, -362, -334, -319, -262, -165, -65, -22, -92, -239, -427, -579, -583, -546, -513, -474, -442, -385, -310, -266, -241, -278, -369, -499, -611, -611, -511, -481, -456, -402, -375, -327, -312, -357, -380, -372, -351, -283, -238, -274, -404, -582, -608, -511, -482, -481, -412, -305, -247, -211, -191, -196, -213, -208, -181, -268, -339, -328, -337, -295, -217, -243, -296, -337, -329, -342, -324, -231, -258, -349, -282, -217, -229, -182, -82, -95, -160, -169, -192, -156, -74, -52, -92, -56, -17, -18, -24, -8, -25, -85, -81, -38, -21, 35, 104, 137, 99, 55, 79, 76, 103, 114, 57, 31, 33, 11, -37, -18, 14, 43, 40, 68, 97, 103, 37, 64, 137, 87, 8, 33, 118, 142, 69, 2, -47, -120, -124, -66, -69, -70, -36, -9, -7, -7, -9, -4, 26, -15, -87, -106, -120, -110, -61, -46, -51, -58, -89, -158};
156:               
157:               //fractional hat[6662] __attribute__((space(psv))) = {186, 238, 114, -17 -82, -173, -121, -48, -207, -1141, -2167, -3315, -3790, -2701, 213, 1875, 2372, 2238, 1599, 2599, 4745, 4546, 1617, -1717, -3467, -1918, 1438, 2260, 1559, 1261, 1213, 776, 6, -1236, -1427, -875, 422, 1186, 1208, 765, -37, 415, 1645, 2086, 877, -911, -2576, -2320, 623, 2781, 2350, 1596, 629, -216, -351, -457, -1639, -2609, -2842, -1228, 1591, 4815, 5987, 5493, 1623, -2849, -4961, -5170, -3798, -2830, -2289, -1407, -43, 449, 103, -854, -1778, -2454, -2251, -1419, -340, 543, 533, 240, 723, -428, -3227, -4912, -5025, -2784, 827, 2258, 2009, 723, -1883, -3699, -4072, -3097, -1237, 255, 2325, 3795, 3518, 2079, 379, -1351, -3091, -4068, -3733, -2217, 202, 2905, 4550, 4784, 2368, -1734, -4416, -4319, -2628, -1408, -180, 2398, 3397, 2781, 1125, -1638, -3019, -2705, -944, 1075, 2813, 4039, 4419, 3677, 1527, -931, -2467, -2293, -1040, 139, 697, 1325, 2081, 1965, 1736, 1335, 376, -683, -1207, -1455, -1126, 864, 2569, 2594, 1877, 703, 479, 1360, 1454, 487, -199, -994, -950, -383, 562, 1010, 485, -269, -498, 397, 1429, 2225, 2106, 1835, 1063, 923, 1226, 1593, 1201, -1162, -2916, -3327, -1591, 817, 2710, 4105, 4757, 4392, 2321, -984, -3725, -4181, -2906, -734, 651, 2966, 5013, 4484, 4165, 2160, -1216, -3899, -4987, -3839, -929, 1644, 2245, 2790, 2010, 180, -1236, -2485, -2167, -662, 864, 736, 89, -181, -346, -272, -566, -617, -874, -876, -523, -306, 154, 658, 1153, 58, -1442, -1719, -813, 95, 410, 905, 1108, 35, -1903, -2933, -2656, -555, 2215, 3069, 2772, 1611, 442, -288, -1735, -2769, -2600, -1462, 110, 1913, 2684, 1695, 377, -569, -934, -1202, -288, 1020, 1432, 1187, 441, 195, 1548, 1452, -960, -3081, -4089, -3448, 993, 3775, 3581, 2360, 595, -377, -1419, -3405, -4750, -4375, -2136, 2490, 4815, 5255, 2907, -399, -2444, -2071, -2012, -2666, -4074, -2246, 904, 2350, 2956, 1481, -1267, -3553, -4017, -2840, 761, 2995, 2498, 205, -3000, -3815, -2869, -3650, -3683, -2513, -101, 3013, 4471, 4333, 2072, -1770, -3428, -3162, -2805, -2269, -803, 684, 1120, 1296, 1707, 1476, -524, -2156, -3035, -2625, -615, 2333, 4066, 3946, 1062, -3203, -6151, -6440, -2439, 1592, 1949, 2048, 1170, 1386, 3088, 3920, 3256, 622, -3835, -6216, -5580, -1887, 2748, 4570, 4763, 2317, -968, -2185, -1940, -1050, 453, 2031, 3566, 3896, 3472, 1428, -602, -1102, -418, 151, 334, 1452, 2098, 1455, 1182, 546, 892, 1123, 1695, 1884, 677, -1259, -2426, -1517, 1706, 4632, 4330, 2753, -815, -3494, -3658, -990, -325, -2010, -2969, -1715, 1609, 2699, 2531, 2194, 912, -631, -2012, -1818, 328, 2124, 1988, 663, -1193, -3102, -4106, -2480, 674, 1217, 147, -174, 898, 2777, 3543, 1385, -2075, -4870, -3858, -1420, 188, 2092, 3632, 4555, 4157, 2182, -1798, -4135, -4248, -2175, -429, 814, 2350, 3737, 4706, 4809, 1947, -2715, -5635, -6362, -6101, -2825, 1687, 4302, 4962, 4408, 1678, -1885, -4340, -6235, -6043, -4410, -167, 2957, 4920, 6361, 6274, 3950, -17, -5823, -9922, -10645, -4474, 1957, 4850, 7729, 6955, 3312, -54, -3051, -4324, -3842, -2655, 906, 3863, 5867, 6151, 4350, -530, -4877, -7081, -8095, -4178, 2099, 4915, 6040, 5639, 4104, 1831, -1951, -5039, -6476, -6460, -1715, 1904, 4138, 5064, 4339, 1611, -2521, -4374, -4350, -643, 3540, 5289, 5219, 3250, 948, -2666, -4888, -5480, -4559, -2621, 911, 3568, 5116, 4468, 1095, -1859, -3103, -2600, -971, 834, 1714, 1274, -83, -628, 269, 401, -758, -1786, -2119, -1911, -1442, -534, 1034, 1474, 1212, 567, -962, -1905, -1839, -906, -362, -598, -1029, -245, 120, 9, -1038, -1220, -1612, -1689, -646, 1084, 2070, -152, -1499, -2385, -1544, -17, 209, 1137, 385, -1937, -3903, -5438, -3193, 731, 3347, 4858, 4969, 2866, -258, -3626, -3731, -1053, 1789, 2016, 417, -528, -2694, -3068, -1825, 1336, 4827, 4020, 2462, -1008, -1629, 523, 2349, 3843, 3799, 2037, -1618, -3925, -3160, 1147, 4755, 4956, 3300, -717, -3064, -2025, 839, 2424, 1756, -81, -1593, -857, 2129, 3023, 1119, -969, -2607, -913, 1262, 2584, 2289, 1228, -789, -1075, -575, 850, 1413, -232, -1648, -2419, -1311, 1835, 5004, 5529, 4619, 1505, -1900, -3617, -3968, -2668, -1425, -89, 1873, 3329, 3460, 2721, 1154, -1652, -2583, -2766, -764, 1927, 2603, 2824, 1145, -1058, -2124, -2426, -1788, -258, 2199, 3185, 2319, 1022, -133, 340, 1420, 1796, -199, -1910, -2352, -1431, -3, 889, 2226, 2458, 475, -1924, -2834, -332, 1309, 171, -747, -579, 739, 686, 392, 1490, 1761, 931, 60, -1080, -2091, -3727, -3709, -895, 2559, 3859, 3029, 140, -2867, -3281, -2214, -730, 161, 598, 74, 129, 616, 1336, 108, -2576, -4130, -5236, -3729, 144, 2987, 3319, 1286, -1037, -1627, -770, -994, -898, 130, 897, 1574, 1678, 2389, 2576, 2173, 720, -856, -1926, -2337, -937, 2138, 3841, 3063, 993, -884, -543, -154, -1758, -1913, -561, 1418, 2981, 3680, 2980, 830, -1667, -3422, -3238, -2091, -1412, -1041, 730, 2580, 1982, 497, -1271, -2088, -1755, -1547, -1669, -1119, -1134, -1409, 106, 1080, 2008, 1224, -1730, -4635, -6123, -4922, -1040, 2982, 4288, 3479, 743, -2139, -3198, -3124, -2782, -1857, -1149, -782, 616, 3090, 3931, 2436, 149, -900, -957, -1900, -2200, -1098, -455, -70, 148, 2072, 4058, 4448, 4730, 2951, -150, -3382, -5878, -3768, 529, 2520, 1951, 974, 271, -929, -1166, -794, 1908, 2048, -537, -2381, -2885, -654, 2854, 4455, 3834, 580, -2615, -4171, -2962, -622, -249, -782, 1840, 3742, 4414, 3902, -282, -3403, -3750, -2413, -950, 418, 1911, 3335, 1746, -126, -1977, -1749, 1350, 3278, 3149, 1447, -143, -224, 575, -736, -2373, -1855, -305, 1068, 1231, 2724, 3938, 3191, 918, -2187, -3752, -4381, -3655, -361, 3459, 4033, 2907, 1281, 997, 1259, -324, -2305, -3490, -2715, 845, 2883, 2885, 2433, 1768, 1291, 1737, 964, -1337, -2919, -3903, -2783, 480, 3834, 5169, 4842, 1552, -2219, -3983, -3549, -1040, 508, 1057, 1798, 1591, 2228, 2280, 241, -2187, -4057, -3716, -1547, 534, 611, 1111, 2834, 2698, 1062, -766, -1132, -954, -1920, -2907, -1749, -71, 352, 1033, 348, -1530, -3225, -3060, -1268, 1786, 3400, 3354, 2459, 721, -1030, -3099, -3564, -3942, -3258, 549, 3404, 4848, 4994, 3354, -1207, -4628, -5752, -3755, 781, 4295, 5662, 4925, 1255, -1550, -3263, -4711, -4054, -1585, 968, 1904, 3381, 4703, 4101, 1645, -1976, -5027, -5550, -3889, -2226, -1329, 593, 3200, 4604, 4697, 2711, 156, -2227, -3769, -3983, -3784, -2643, 248, 2616, 3956, 3411, 121, -2862, -3746, -3403, -1697, 1040, 2180, 1959, 589, -957, -2155, -3008, -2098, -270, 1687, 1116, -362, -1254, -638, 839, 541, -615, -1278, -2360, -3105, -3309, -1815, 1675, 3522, 2696, 561, -1635, -2789, -2661, -2161, -1629, -815, 1210, 2867, 2203, 70, -2046, -3332, -2399, 284, 1397, 1245, 1377, 1666, 1715, 1042, -1143, -2863, -3332, -2347, 14, 2172, 3012, 3117, 2185, 434, -637, -1147, -1268, -1195, -23, 1959, 2493, 2239, 1557, 615, -330, -51, 197, -534, -1904, -1913, 643, 3271, 4108, 2006, -979, -2646, -2774, -1756, 173, 1703, 1261, 337, 156, 1428, 1844, 134, -1547, -2455, -1323, 585, 1345, 563, 579, 351, 336, 526, 1294, 1526, 516, -374, -944, 199, 1372, 1692, 427, -272, -721, -1008, 28, 1352, 2533, 1447, 215, -769, -376, 814, 1747, 1936, 418, -750, -1843, -1313, 415, 1791, 1352, -21, -565, -813, -253, -128, 681, 1014, 0, -1015, -1473, 373, 2021, 1952, 65, -1877, -3120, -3182, -2102, -72, 1846, 2014, 1463, -23, -1559, -2009, -1178, -1296, -1827, -1815, -312, 1975, 2901, 2091, -490, -3053, -4400, -3907, -2075, -230, 715, 2045, 3033, 2274, 768, -733, -1510, -2418, -2940, -2158, -747, 1268, 2572, 3638, 2766, 543, -2116, -3936, -2881, -305, 272, -306, 65, 1024, 2614, 2730, 1771, 393, -1364, -2119, -2438, -1645, 288, 1838, 2817, 1677, 511, -647, -867, -674, 55, 585, -75, -315, -959, 492, 2076, 3114, 3260, 1348, -1391, -3680, -2836, 845, 2963, 2233, 504, -1148, -811, 329, -457, -1160, -749, 578, 935, -33, -467, -224, -262, -515, -3, 625, 560, 225, 740, 1566, 1796, 1205, 183, -711, -1241, -1283, -935, -620, -468, -362, -432, -1050, -1360, -881, -86, 648, 1526, 1999, 1771, 631, -456, -1612, -2425, -1870, -60, 468, -80, 173, 322, 478, 193, 429, -635, -1735, -2918, -3438, -1386, 999, 2707, 1361, -487, -1347, -1535, -409, 284, 1318, 601, -1048, -1881, -2624, -1478, 1264, 3047, 2045, 93, -1313, -1549, -635, 101, 521, 138, -1142, -1960, -1993, -567, 1258, 1607, 1536, 1614, 1157, 514, -353, -1205, -943, -439, 528, 2047, 3002, 2684, 1259, 80, -304, -514, -412, -158, 813, 1132, 889, 17, -110, 1021, 1678, 1193, -705, -1431, -1704, -1203, 576, 3146, 4302, 2477, -166, -2306, -2251, -1636, -1772, -1641, -946, -816, -745, 1353, 2875, 3304, 2688, 311, -1819, -3566, -3241, -360, 1978, 3319, 2514, 321, -1920, -3164, -1548, 717, 1680, 1517, 642, -413, -883, -528, 508, 673, -442, -1310, -1500, -735, 577, 1496, 1576, 1598, 1400, 340, -798, -1211, -789, 182, 951, 1262, 784, -511, -1513, -1414, -67, 1385, 1725, 1605, 906, -306, -1203, -1763, -1728, -1600, -1099, -130, 981, 1333, 1060, 565, 204, 4, -500, -862, -1478, -1750, -2079, -1154, 1112, 2685, 2453, 815, -708, -1700, -1517, -747, 102, 437, 435, 541, 646, 927, 1140, 717, -309, -1470, -2313, -2438, -1622, 243, 1561, 1720, 1527, 946, 240, -238, -732, -1254, -1664, -1575, -427, 1359, 2005, 1564, 891, 129, -232, -562, -1120, -1467, -1147, -153, 1095, 1634, 1550, 930, 433, 385, 839, 302, -778, -1404, -717, 1059, 2556, 2711, 1582, -248, -2173, -3099, -1994, 188, 676, 96, 123, 1346, 2719, 2253, 379, -1377, -2549, -2395, -1065, -335, -66, -38, 241, 919, 1312, 417, -1261, -2531, -2717, -1408, 524, 1238, 774, 320, -582, -1774, -2694, -2185, -596, 195, 200, 584, 906, 306, -629, -1933, -3121, -3402, -2520, -522, 1141, 2091, 2585, 2619, 1440, -655, -2595, -3550, -3093, -1636, 70, 1228, 2461, 2842, 1783, 128, -1436, -2238, -2249, -1761, -759, 1367, 2780, 2281, 1053, -392, -1292, -1608, -1583, -1042, -7, 1076, 1822, 1896, 1234, -57, -1534, -2350, -2085, -1053, -179, 444, 1814, 2570, 1130, -691, -1847, -1827, -532, 201, -106, -469, -595, -273, 600, 818, 169, -501, -580, -186, 111, 168, 51, 168, 51, -376, -463, -260, 13, 32, 341, 966, 1107, 406, -718, -1307, -1439, -1143, 46, 1425, 1572, 521, -584, -883, -636, -37, 724, 1047, 526, -350, -1097, -1451, -1049, 233, 1434, 1660, 1104, 239, -529, -992, -1042, -406, 413, 654, 425, 455, 776, 863, 247, -592, -944, -646, -23, 351, 644, 771, 682, 813, 973, 83, -1341, -2208, -2057, -372, 1597, 2148, 1814, 1293, 800, 406, -632, -1891, -2488, -2214, -990, 916, 2193, 2058, 1148, 148, -419, -597, -362, 62, 337, 277, 7, 514, 1475, 1760, 1100, 42, -642, -671, -629, -1164, -1321, -490, 1098, 2100, 2025, 1454, 665, -233, -954, -1016, -420, 86, 288, 466, 382, 47, -46, 34, -19, -62, -96, 56, 100, 39, 15, 194, 173, -414, -752, -648, -144, 474, 897, 815, 134, -645, -1169, -1239, -915, -499, -198, 122, 562, 888, 683, -86, -916, -1423, -1797, -1959, -1696, -749, 557, 1038, 541, -493, -1639, -2274, -2016, -1220, -729, -580, -214, 565, 1048, 521, -411, -1220, -1463, -1387, -1144, -1260, -1148, -564, 155, 780, 572, 304, -339, -1454, -2600, -2943, -1557, 457, 1605, 1169, 217, -912, -1731, -872, 951, 1411, 401, -590, -920, -426, 638, 730, 37, -419, -545, -21, 569, 758, 522, 84, -258, -162, 218, 596, 768, 534, 23, -389, -394, -203, -61, -77, 26, 15, -198, -133, 120, 710, 957, 617, -392, -1410, -1899, -1389, -411, 258, 355, 740, 1216, 1263, 984, -159, -1420, -2589, -2203, -447, 1616, 1770, 822, -101, -601, 300, 1773, 1374, -442, -1617, -1479, -313, 1079, 1483, 1367, 804, -327, -789, -322, 641, 851, 742, 1044, 1039, 847, 811, 769, 531, 143, -374, -646, -563, -66, 594, 760, 752, 1111, 1552, 1342, 474, -267, -561, -484, -245, 308, 800, 672, 179, -98, 378, 992, 820, 182, -137, -102, -196, -214, 14, 456, 444, 320, 599, 816, 551, 28, -232, -163, 67, 220, 145, 218, 329, 329, 197, 313, 768, 534, -171, -690, -579, -48, 59, -235, -264, -26, 134, 174, 169, 394, 560, 387, 156, -120, -147, 72, 558, 752, 350, -147, -265, 210, 576, 486, 118, -106, -221, -55, 715, 1605, 1550, 594, -600, -1537, -1769, -1006, 124, 495, 305, 283, 196, 129, 186, 104, -190, -463, -533, -474, -467, -363, -62, 76, -302, -797, -870, -516, -235, -251, -384, -303, -145, -118, -540, -953, -1030, -921, -484, -388, -374, -758, -967, -891, -297, 700, 1260, 1124, 116, -879, -1749, -1760, -860, 457, 476, -609, -1444, -1421, -38, 1852, 2271, 1254, 91, -1024, -1634, -1501, -831, -70, 219, 232, 425, 597, 450, 64, -212, -468, -752, -723, -175, 314, 188, 30, 26, 102, 53, -16, -120, -572, -1171, -1178, -230, 1166, 1335, 534, -43, -516, -764, -687, -629, -295, 355, 790, 721, 664, 677, 576, 312, -82, -223, -126, -81, -145, -193, -239, -269, 167, 1096, 1681, 1107, 173, -436, -882, -1133, -1127, -497, 448, 1023, 1169, 1128, 727, 85, -373, -641, -607, -354, -152, 5, 116, 407, 666, 800, 676, 174, -487, -892, -810, -470, 17, 461, 821, 696, 195, -430, -878, -971, -698, -9, 535, 695, 419, 160, 63, -264, -693, -1087, -1175, -632, 278, 380, -402, -903, -936, -477, 254, 739, 829, 516, -122, -686, -852, -583, -518, -827, -1071, -632, 378, 1178, 1074, 515, -315, -1019, -1218, -618, -2, 67, -3, 215, 943, 1362, 1039, 78, -679, -978, -710, 170, 1009, 1308, 722, -33, -422, -357, 223, 825, 1103, 545, -92, -355, 123, 1157, 1793, 1466, 549, -403, -982, -692, 465, 1248, 997, 487, -124, -503, -218, 716, 1115, 591, -100, -226, 441, 965, 368, -494, -889, -870, -327, 401, 647, 438, 103, 172, 534, 377, -308, -873, -790, -482, -173, 346, 931, 804, 103, -478, -680, -302, 174, 414, 463, 412, 142, -24, -70, 24, -84, -470, -614, -398, 74, 657, 1143, 1182, 589, -287, -997, -1051, -458, 85, 174, 421, 771, 751, 169, -592, -1095, -1163, -539, 510, 1112, 487, -607, -1336, -1381, -340, 947, 1120, 550, -211, -988, -1198, -788, -446, -737, -994, -890, -142, 1018, 1583, 1032, -107, -1074, -1503, -998, -200, -42, -124, -47, -127, -249, -340, -285, -155, -301, -499, -377, -5, 577, 1063, 1160, 850, 243, -420, -951, -1073, -399, 491, 604, 248, 67, 189, 465, 561, 427, 45, -473, -689, -481, -243, -93, 180, 642, 841, 491, -185, -688, -651, -4, 598, 526, 233, 11, 69, 116, -192, -533, -605, -370, 35, 438, 429, 92, -386, -542, -233, 162, 124, -244, -535, -503, 26, 548, 368, -207, -668, -911, -669, 68, 1007, 1356, 815, 248, -171, -562, -920, -1344, -876, 286, 1193, 848, 162, -462, -699, -329, 133, -17, -579, -883, -717, 325, 1519, 1689, 685, -381, -1139, -1121, -312, 402, 327, -27, -118, 47, 415, 877, 1212, 1092, 514, -159, -603, -647, -264, 384, 719, 489, -26, -240, 195, 693, 630, 172, 128, 412, 538, 409, 163, 198, 156, 146, 75, 29, -57, -212, -2, 330, 450, 295, 268, 471, 661, 574, 440, 360, -31, -497, -800, -646, -127, 398, 568, 580, 695, 688, 453, 56, -417, -743, -895, -663, -220, 228, 375, 293, 321, 431, 289, -316, -830, -952, -407, 319, 532, 372, 112, -85, -25, 292, 424, 177, -207, -542, -637, -434, -202, -159, -226, -84, 239, 506, 339, -50, -381, -428, -161, 376, 818, 787, 376, -19, -80, 136, 238, -13, -308, -495, -423, 188, 961, 1067, 572, 53, -361, -414, -175, 23, 47, 138, 418, 759, 901, 604, 183, -141, -361, -450, -428, -120, 428, 959, 1000, 582, -43, -596, -684, -402, -85, 131, 450, 743, 767, 556, 71, -480, -847, -873, -374, 329, 727, 700, 483, 194, -110, -301, -229, -52, -42, -135, -203, -28, 281, 288, -78, -460, -498, -91, 407, 538, 531, 577, 482, 178, -328, -685, -737, -649, -541, -458, -177, 258, 613, 602, 345, 14, -223, -300, -462, -563, -514, -377, -199, 92, 326, 340, 25, -442, -737, -780, -543, -371, -344, -248, -31, 135, 88, -150, -364, -602, -689, -553, -131, 231, 146, -158, -299, -222, -285, -512, -643, -502, -280, -260, -337, -315, -201, 6, 121, 8, -339, -647, -629, -324, -246, -438, -463, -237, 102, 367, 552, 388, -108, -620, -718, -464, -153, -180, -315, -385, -401, -226, -24, 11, -55, -138, -157, 55, 216, 192, -72, -353, -482, -533, -435, -376, -207, 42, 350, 540, 483, 165, -231, -583, -692, -583, -345, -67, 218, 442, 459, 266, 108, 17, -61, -50, -9, 101, 124, 157, 243, 239, 16, -344, -461, -240, 168, 435, 530, 643, 548, 270, -33, -247, -384, -497, -376, 96, 612, 720, 499, 168, -52, -192, -275, -270, 38, 486, 632, 434, 173, 81, 101, 24, -189, -388, -285, 122, 701, 1127, 1099, 597, 30, -383, -393, -243, -140, -107, -24, 89, 249, 494, 758, 678, 75, -631, -1042, -862, 32, 890, 1029, 598, 50, -181, 74, 544, 639, 382, 89, -144, -400, -476, -279, 34, 199, 133, 68, -70, -276, -439, -403, -132, 256, 529, 633, 334, -5, -127, -13, 34, -100, -196, -203, -30, 130, 154, -70, -373, -562, -443, -295, -332, -338, -183, 22, 22, -173, -453, -670, -717, -372, 167, 582, 542, 175, -120, -262, -307, -386, -456, -505, -501, -440, -132, 117, 58, -128, -213, -145, -251, -504, -545, -317, -34, 149, 223, 97, -231, -601, -760, -634, -81, 402, 451, 96, -279, -427, -480, -449, -477, -389, -299, -183, 39, 250, 234, -13, -242, -184, 32, 58, -142, -344, -374, -332, -170, 143, 394, 328, -74, -511, -802, -813, -589, -150, 372, 610, 457, 155, -145, -372, -345, -274, -207, -270, -359, -381, -299, -146, -132, -277, -293, -143, 136, 360, 389, 202, -126, -436, -682, -742, -594, -434, -236, -8, 85, 74, 2, -10, -14, -98, -310, -435, -483, -330, -61, 178, 207, 141, 71, -87, -317, -438, -361, -135, 59, 117, 154, 189, 200, 128, -46, -291, -459, -462, -175, 199, 394, 263, -30, -301, -453, -292, 22, 184, 104, 30, 177, 442, 639, 590, 264, -106, -406, -532, -539, -406, -110, 394, 746, 830, 605, 232, -120, -325, -299, -127, 95, 275, 457, 535, 452, 184, -74, -181, -231, -187, 44, 348, 510, 406, 174, 21, 24, 82, 45, -153, -340, -275, 87, 475, 547, 283, 6, -111, -41, 132, 209, 217, 209, 176, 170, 200, 238, 201, 63, -109, -176, -18, 295, 424, 252, -31, -123, 0, 190, 192, 23, -28, 125, 354, 405, 291, 157, 70, 132, 211, 158, 57, -1, 114, 182, 181, 74, -12, -104, -125, -6, 52, 71, 33, 100, 252, 477, 460, 270, -14, -214, -278, -359, -394, -333, -62, 232, 372, 279, 96, -66, -189, -210, -238, -258, -204, -49, 221, 293, 148, -146, -385, -462, -344, -135, 39, 179, 116, -21, -233, -355, -277, -50, 166, 168, 1, -119, -131, -71, 1, 17, 18, 50, 46, -12, -43, -54, 9, 95, 197, 215, 134, -18, -238, -375, -418, -262, -19, 66, -65, -240, -287, -75, 230, 359, 281, 94, -125, -248, -311, -260, -206, -204, -254, -241, -199, -153, -94, -196, -342, -368, -206, 101, 235, 138, -83, -161, -130, -29, -215, -397, -483, -364, -33, 167, 240, 59, -137, -250, -193, -88, 24, 53, -26, -200, -409, -429, -328, -230, -48, 184, 307, 273, 74, -190, -336, -332, -184, -51, -57, -152, -149, -13, 71, -38, -213, -280, -216, -88, -7, 19, 47, 118, 199, 251, 192, 4, -164, -278, -215, -68, 150, 344, 436, 284, -3, -277, -302, -137, 22, 3, 0, 32, 75, 109, 171, 158, 40, -23, 56, 206, 244, 161, -52, -243, -283, -167, 12, 107, 113, 72, 15, 27, 28, -32, -103, -45, 40, 165, 155, 74, 64, 118, 116, 107, 86, 112, 195, 314, 407, 278, 150, 60, 132, 214, 172, 37, -51, -3, 123, 235, 347, 455, 521, 470, 299, 76, -13, 45, 181, 246, 253, 273, 253, 286, 370, 384, 210, -10, -124, -115, 1, 263, 576, 699, 534, 286, 79, 75, 154, 190, 134, 86, 131, 246, 341, 338, 294, 279, 207, 146, 152, 207, 218, 132, 54, 133, 330, 584, 723, 667, 396, 5, -246, -209, 65, 335, 380, 336, 305, 341, 375, 438, 360, 205, 34, -49, 49, 188, 311, 331, 372, 438, 460, 372, 209, 56, -23, 131, 362, 515, 412, 131, -92, -186, -55, 112, 204, 152, 172, 140, 173, 223, 238, 173, 71, 3, 55, 138, 204, 145, 66, 30, 89, 158, 107, -16, -106, -72, 17, 96, 68, 3, -29, -17, -21, -23, -11, 36, 30, 32, 9, -52, -80, -66, -77, -150, -253, -320, -249, -136, -3, 35, -4, -153, -297, -301, -212, -41, 124, 140, 6, -161, -199, -209, -124, -40, -31, -12, -21, -18, 27, 54, 3, -114, -284, -454, -513, -382, -181, 25, 95, 84, 31, 112, 195, 163, 38, -122, -211, -240, -208, -136, -25, 34, 98, 163, 166, 46, -37, -70, -175, -253, -234, -67, 108, 141, 162, 161, 172, 95, -19, -96, -85, -26, 22, 47, 41, 32, 41, 137, 156, 51, -155, -268, -187, 14, 286, 478, 453, 194, -160, -366, -369, -177, -7, 142, 227, 190, 139, -21, -136, -203, -248, -230, -191, -121, 32, 114, 45, -57, -201, -154, 20, 191, 232, 148, -10, -113, -60, 42, 121, 115, 86, 44, 71, 48, -46, -98, -169, -174, -97, 54, 160, 196, 127, 70, 20, -31, 36, 123, 269, 270, 153, 18, 38, 95, 90, -61, -212, -255, -212, -96, 63, 229, 263, 153, -33, -169, -168, -30, 210, 351, 378, 254, 83, -46, -121, -115, -54, 9, 22, 11, 71, 155, 244, 271, 197, 61, -34, -8, 109, 259, 336, 201, 19, -150, -101, 77, 147, 169, 112, 42, 14, 77, 185, 282, 214, 120, 137, 133, 149, 111, 100, 168, 181, 141, 1, 2, 32, 81, 136, 80, 50, 25, 80, 91, 117, 81, 15, 7, 7, -5, -105, -117, 3, 199, 337, 366, 366, 318, 218, 47, -133, -132, -52, 90, 274, 335, 311, 202, 63, -78, -187, -181, -97, 69, 196, 282, 332, 227, 48, -175, -241, -71, 196, 325, 317, 163, -44, -141, -121, -70, -64, -84, -52, 33, 99, 84, -71, -230, -269, -191, 14, 200, 238, 138, -29, -129, -131, 25, 84, 24, -80, -144, -146, -22, 72, 12, -124, -237, -252, -204, -56, 56, 100, 99, 102, 106, 81, 46, -13, -43, -24, 14, 5, -69, -89, -96, -99, -63, 4, 51, 32, -18, -66, -29, -8, 24, 36, 99, 125, 106, 42, -81, -173, -184, -115, -7, 64, 141, 208, 161, 13, -110, -180, -163, -138, -121, -46, 33, 95, 42, -31, -105, -61, 3, -3, 0, 9, -6, -68, -118, -103, -45, -11, -76, -148, -190, -142, 12, 73, 50, -44, -110, -107, -43, 12, 7, -9, 1, 48, 89, 84, 70, 27, 29, 48, 26, -6, -49, -41, -49, -19, 36, 154, 256, 331, 322, 232, 126, 49, 81, 123, 230, 177, 180, 140, 91, 110, 132, 129, 142, 148, 224, 318, 322, 333, 258, 177, 123, 111, 167, 265, 309, 357, 342, 337, 303, 197, 226, 295, 316, 304, 208, 155, 202, 225, 248, 246, 244, 285, 306, 354, 418, 408, 364, 259, 203, 243, 283, 299, 276, 264, 246, 281, 319, 372, 363, 266, 192, 181, 177, 197, 215, 199, 196, 200, 229, 241, 223, 202, 169, 202, 197, 156, 161, 151, 172, 131, 103, 58, 21, 54, 118, 169, 178, 119, 93, 59, 21, 17, -23, -34, -7, 121, 221, 172, 69, -33, -70, -11, 61, 110, 97, 16, 2, -12, -25, -83, -138, -201, -124, -38, 37, 25, -3, -19, -1, 8, -1, -34, -81, -51, -23, 46, 103, 59, 3, -75, -164, -182, -116, -9, 96, 149, 131, 75, -9, -69, -109, -107, -63, 33, 107, 173, 182, 125, -4, -129, -165, -101, -16, 14, 35, 20, 44, 60, 101, 192, 231, 168, 74, 0, -1, -24, -29, -22, 25, 80, 135, 127, 74, 15, -1, 21, -17, -98, -125, -86, -13, 29, -46, -100, -158, -133, -8, 95, 127, 55, -78, -167, -258, -245, -220, -223, -228, -187, -104, 12, 62, 51, -79, -269, -391, -387, -206, -73, -32, -90, -118, -129, -113, -160, -247, -354, -453, -388, -287, -179, -129, -212, -342, -426, -464, -389, -281, -180, -78, -76, -129, -211, -284, -353, -362, -283, -232, -185, -154, -151, -192, -167, -243, -243, -253, -269, -193, -132, -13, 9, -11, -61, -136, -164, -183, -164, -73, -34, -9, 15, 0, -35, -31, 24, 46, 25, -30, -30, -49, -36, -27, -33, 1, 59, 139, 202, 184, 118, 37, 8, 39, 126, 174, 189, 171, 134, 49, 31, 14, 19, 38, 101, 172, 213, 170, 87, 42, 32, 72, 125, 195, 242, 242, 224, 138, 105, 74, 27, 47, 77, 127, 169, 200, 199, 212, 141, 105, 66, 46, 87, 113, 145, 187, 166, 98, 117, 129, 10, 9, 4, 41, 116, 132, 152, 115, 77, -14, -104, -71, -26, 68, 131, 114, 78, 25, -8, -37, 0, 35, 83, 111, 116, 120, 143, 116, 109, 70, 56, 2, 37, 138, 71, 49, -30, 0, -24, -5, 23, 30, 21, 31, 100, 178, 210, 187, 130, 100, 56, 118, 156, 144, 77, 9, -41, -14, 24, 31, 53, 31, 34, -4, 19, 22, 55, 88, 66, 69, 73, 57, 56, 49, 22, 1, 25, 51, 77, 70, -10, -72, -69, -19, 85, 124, 121, 60, -11, -81, -102, -45, 3, 69, 93, 99, 96, 34, -3, -65, -73, -82, 4, 58, 69, 54, -46, -93, -77, -89, -65, -81, -109, -79, -36, 13, 6, -47, -80, -120, -101, -89, -96, -138, -127, -122, -58, -83, -118, -150, -183, -100, -89, -70, -137, -138, -117, -73, -32, -62, -58, -100, -125, -155, -97, -69, 11, -64, -161, -120, -184, -128, -123, -43, -68, -82, -116, -73, -72, 19, 47, 22, -47, -143, -148, -79, -21, 7, 39, 53, 50, 36, -1, -11, -32, -42, -13, 39, 56, 63, 41, 87, 120, 121, 114, 104, 74, 77, 143, 205, 176, 87, 6, -39, -27, 37, 129, 139, 178, 131, 97, 41, -6, 21, 3, 35, 92, 113, 153, 142, 121, 89, 51, 54, 59, 85, 113, 131, 130, 110, 56, 97, 83, 90, 97, 89, 101, 97, 98, 108, 160, 179, 185, 148, 119, 61, 11, 12, 38, 113, 169, 177, 177, 138, 65, 23, -21, -26, -2, 46, 66, 57, 72, 81, 65, -6, -70, -44, 7, 106, 145, 145, 115, 45, 28, -40, -102, -134, -128, -131, -45, 45, 88, 89, 48, 31, -77, -57, -72, -64, -70, -26, 30, 56, 74, 45, 2, -64, -75, -81, -62, -46, 2, 16, 38, 9, 25, -7, -39, -42, -46, -47, -79, -109, -133, -127, -50, -35, -30, -20, 0, 8, -25, -33, -75, -39, -27, -52, -76, -127, -159, -143, -118, -71, -67, -89, -86, -116, -107, -89, -77, -62, -69, -54, -81, -107, -120, -124, -137, -181, -206, -232, -201, -123, -110, -89, -118, -156, -157, -186, -189, -213, -198, -212, -236, -246, -202, -185, -192, -154, -188, -192, -249, -226, -223, -219, -190, -191, -141, -179, -223, -229, -229, -168, -114, -107, -154, -213, -249, -249, -247, -195, -158, -174, -146, -179, -170, -199, -233, -283, -255, -271, -231, -221, -216, -214, -195, -192, -174, -185, -212, -265, -294, -317, -266, -206, -201, -167, -187, -215, -218, -229, -188, -179, -148, -185, -215, -218, -190, -169, -166, -173, -223, -248, -262, -246, -220, -195, -193, -216, -248, -251, -246, -263, -259, -236, -246, -250, -289, -273, -287, -263, -245, -240, -205, -230, -197, -195, -181, -142, -97, -152, -205, -276, -312, -284, -274, -246, -237, -234, -196, -157, -151, -123, -145, -160, -176, -247, -228, -230, -218, -153, -137, -140, -142, -201, -220, -209, -214, -180, -142, -140, -158, -165, -134, -97, -99, -107, -141, -187, -222, -175, -114, -44, -51, -48, -90, -131, -126, -110, -92, -70, -70, -44, -53, -33, -66, -73, -84, -100, -61, -33, -20, 7, -6, -40, -91, -129, -102, -51, -26, -8, 1, 15, -12, 13, 53, 20, -26, -60, -32, -34, -2, 14, 79, 106, 112, 83, 59, 1, -31, -16, 4, 41, 74, 60, 31, 34, 2, 12, 20, 30, 27, 20, 11, -4, 8, 25, 43, 64, 15, 22, -3, -21, -19, 28, 53, 57, -6, -57, -69, -50, -19, 29, 14, -12, -75, -72, -35, 18, 14, -18, -107, -158, -146, -133, -97, -39, -13, -60, -61, -81, -96, -125, -109, -142, -147, -135, -109, -51, -33, -71, -117, -150, -165, -163, -79, -48, -50, -110, -129, -178, -187, -212, -205, -173, -159, -124, -125, -76, -87, -75, -134, -207, -234, -238, -196, -163, -143, -113, -139, -162, -177, -183, -171, -185, -165, -165, -155, -138, -143, -178, -154, -176, -152, -178, -148, -152, -194, -223, -218, -197, -173, -160, -166, -177, -187, -162, -147, -106, -83, -98, -123, -198, -211, -193, -127, -79, -108, -108, -126, -73, -57, -51, -52, -103, -147, -156, -183, -193, -182, -159, -60, -75, -56, -52, -131, -140, -189, -191, -226, -173, -141, -133, -134, -156, -210, -249, -224, -210, -164, -145, -137, -154, -153, -160, -149, -161, -179, -186, -213, -202, -192, -184, -174, -158, -117, -117, -122, -123, -110, -138, -111, -129, -103, -117, -151, -143, -126, -112, -93, -64, -58, -67, -103, -135, -115, -86, -72, -75, -64, -36, -45, -41, -32, -33, 7, -28, -41, -57, -52, -35, -27, 6, -10, -41, -18, -73, -41, 3, 17, 6, 10, -13, -7, 9, -1, 4, -23, 3, 32, 36, 13, -29, -42, -18, -34, -15, -25, -17, 2, 22, -7, 31, 21, -3, -13, -52, -44, -52, -9, 4, 20, 12, 6, -51, -67, -109, -142, -98, -96, -64, -15, -7, -38, -49, -100, -137, -148, -123, -98, -105, -131, -120, -142, -128, -79, -116, -73, -112, -147, -158, -159, -151, -124, -126, -137, -129, -141, -145, -133, -130, -122, -111, -134, -110, -161, -153, -187, -179, -155, -151, -124, -136, -96, -89, -83, -144, -191, -201, -155, -121, -120, -100, -79, -101, -140, -157, -149, -144, -122, -91, -110, -98, -102, -109, -107, -115, -134, -134, -113, -81, -75, -67, -92, -98, -91, -78, -60, -68, -81, -90, -101, -67, -48, -37, -72, -28, -72, -48, -67, -94, -91, -132, -126, -106, -68, -66, -45, -70, -70, -74, -76, -63, -72, -52, -60, -73, -115, -155, -172, -139, -132, -128, -117, -118, -121, -117, -129, -146, -151, -176, -167, -169, -173, -138, -178, -152, -167, -153, -180, -199, -202, -205, -174, -147, -132, -148, -174, -180, -175, -178, -164, -194, -167, -164, -165, -226, -189, -216, -214, -221, -229, -201, -206, -201, -231, -219, -217, -207, -210, -210, -231, -233, -241, -221, -181, -175, -150, -149, -156, -180, -198, -182, -176, -185, -164, -139, -137, -117, -91, -122, -175, -195, -207, -184, -123, -123, -88, -128, -128, -156, -152, -161, -175, -141, -111, -74, -34, -30, -50, -42, -110, -116, -85, -75, -47, -56, -50, -37, -29, -38, -43, -72, -44, -14, -23, -17, -3, -10, 5, 5, -3, 19, 5, 12, -5, -35, -29, -37, 10, 39, 55, 55, 56, 29, 4, -26, -21, -15, -5, 34, 42, 42, 60, 57, 47, 32, 19, 40, 33, 56, 66, 30, 5, -17, -10, -1, 36, 25, -3, 8, 24, 32, 56, 38, -10, -30, -47, -24, -25, -26, 19, 27, 31, 23, -18, -2, -12, -19, -33, -26, 18, -7, 5, -4, -9, -16, -15, -23, -4, -10, 3, -11, 4, -8, -37, -39, -16, 3, 13, 4, -31, -6, 5, -12, -7, -17, -39, -65, -40, 3, -1, 27, 15, 52, -30, -31, -67, -69, -13, -17, -23, -25, -31, -8, -17, 9, 30, 1, -21, -55, -41, -54, -2, 1, 34, 28, -9, -7, -20, 28, -1, 26, -5, -9, -18, -48, -35, -21, -38, -36, -23, -42, -67, -54, -59, -38, -82, -91, -69, -54, -17, 3, -12, 1, -22, -50, -85, -77, -49, -37, -25, -27, -69, -66, -81, -22, 18, 22, 10, -19, -48, -69, -101, -88, -69, -53, -49, -41, -53, -66, -61, -46, -47, -71, -67, -87, -103, -83, -69, -62, -61, -70, -74, -64, -77, -91, -110, -113, -74, -92, -86, -106, -133, -115, -83, -102, -58, -50, -53, -37, -52, -81, -124, -134, -146, -106, -118, -86, -54, -52, -44, -56, -81, -99, -86, -103, -115, -108, -111, -93, -78, -71, -75, -75, -62, -66, -38, -8, -13, -47, -38, -65, -81, -47, -10, -60, -38, -34, -18, -39, -42, -27, -81, -87, -103, -76, -29, 1, -18, -38, -94, -112, -103, -81, -33, -13, -22, -5, -41, -59, -69, -72, -56, -68, -66, -68, -37, -70, -76, -72, -75, -59, -47, -40, -20, -53, -63, -104, -102, -77, -67, -48, -49, -53, -67, -75, -105, -93, -74, -66, -73, -75, -75, -110, -106, -142, -123, -122, -92, -78, -86, -51, -41, -57, -19, -68, -63, -61, -36, -17, -22, -20, -5, -36, -35, -33, -37, -29, -34, -28, -15, 20, -11, 10, -2, -15, -40, -54, -54, -52, -23, -23, -24, 18, 13, 25, 21, 8, 18, 16, 5, -23, -19, -15, 32, 2, -15, 1, -12, -26, 9, 36, 49, 42, 25, 24, 5, 53, 45, 67, 59, 59, 29, 56, 47, 100, 13, 142, -436, 219, 206, -21, 170, 21, 152, 44, 123, 53, 82, 25, 60, 40, 71, 41, 45, 51, 88, 93, 108, 106, 109, 81, 80, 78, 79, 104, 93, 131, 126, 99, 82, 74, 24, 47, 32, 46, 59, 57, 95, 69, 62, 14, 42, 56, 56, 35, 41, 76, 54, 20, 26, 16, 3, -25, -14, 23, 5, 22, 18, -2, 8, -20, -42, -71, -43, -38, 4, 40, -9, 5, -9, -17, -49, -54, -21, -21, -12, -15, -18, -19, -25, -67, -65, -77, -76, -45, -65, -30, -15, -14, -12, -27, -51, -49, -53, -69, -68, -44, -28, -52, -55, -24, -34, -32, -58, -30, -68, -44, -32, -32, -11, 4, -25, -20, 19, -7, 10, 4, 20, 23, 18, 16, 23, 28, 41, 47, 58, 56, 46, 61, 66, 49, 71, 52, 40, 69, 103, 127, 110, 107, 97, 87, 114, 147, 128, 136, 72, 74, 98, 96, 126, 130, 153, 175, 188, 175, 168, 147, 145, 131, 137, 140, 131, 129, 123, 161, 138, 169, 106, 115, 152, 142, 180, 167, 161, 134, 133, 133, 135, 122, 146, 146, 118, 127, 114, 109, 127, 127, 142, 134, 129, 141, 129, 113, 119, 126, 144, 194, 206, 207, 179, 154, 182, 156, 145, 136, 124, 141, 120, 146, 118, 147, 122, 131, 151, 146, 158, 142, 155, 117, 142, 124, 164, 152, 128, 108, 150, 146, 150, 146, 129, 120, 95, 109, 134, 140, 127, 108, 65, 118, 115, 102, 153, 135, 143, 161, 128, 131, 114, 116, 131, 120, 141, 118, 115, 114, 111, 156, 171, 184, 134, 141, 143, 148, 158, 154, 144, 130, 116, 78, 104, 158, 149, 133, 145, 118, 107, 85, 71, 65, 63, 67, 47, 35, 28, 84, 72, 79, 50, 48, 45, 52, 52, 74, 45, 10, 11, 9, 28, 20, 3, -9, 26, 45, 45, 19, 1, -32, -22, -38, -11, 11, 14, 28, 16, 9, -5, 11, -42, -19, -50, -4, -1, -4, -23, -43, -46, -57, -63, -28, -44, -39, -8, -17, 17, -13, -30, -47, -46, -27, -33, 1, -22, 5, 9, 7, -6, 13, -4, 0, -13, -42, -62, -76, -55, -60, -42, -32, -18, 5, 5, -27, -56, -48, -23, -21, -18, -34, -61, -80, -59, -56, -34, -27, -15, -34, 5, -7, -9, 4, -16, -51, -47, -44, -50, -57, -40, -21, -38, -40, -41, -24, -22, -8, -26, -23, -18, -16, 6, 30, 30, 25, -41, -43, -60, -21, -9, -6, 0, -6, -17, -26, -6, -15, -4, -14, -53, -29, -13, -17, -2, 8, 8, -31, -3, -38, -18, -12, -12, -39, -40, -32, -30, -27, -26, -40, -39, -65, -42, -43, -30, -22, 22, 14, -2, -14, -32, -47, -37, -29, -37, -31, -27, -27, 13, 3, -34, -64, -52, -9, 13, 48, 61, 29, 14, 68, 26, 10, 10, -9, -10, -4, 26, 13, 35, 29, 27, 19, 45, 49, 68, 42, 41, 46, 62, 62, 28, 47, 25, 56, 49, 47, 67, 84, 89, 125, 83, 82, 60, 76, 82, 109, 120, 122, 134, 128, 128, 134, 118, 112, 108, 105, 143, 128, 147, 160, 159, 155, 153, 143, 143, 138, 129, 152, 119, 195, 159, 159, 175, 183, 162, 156, 160, 159, 178, 168, 214, 229, 214, 174, 172, 187, 174, 198, 189, 151, 154, 200, 187, 185, 163, 154, 177, 148, 153, 177, 190, 186, 203, 193, 171, 171, 156, 151, 146, 129, 108, 129, 157, 155, 180, 151, 143, 130, 147, 133, 143, 155, 159, 155, 151, 163, 143, 140, 132, 125, 131, 135, 127, 159, 186, 183, 156, 129, 135, 124, 123, 128, 117, 111, 100, 76, 90, 77, 83, 96, 119, 104, 94, 83, 88, 55, 47, 62, 55, 56, 38, 57, 30, 34, 53, 61, 57, 41, 40, 42, 28, 47, 62, 26, 29, 20, 6, 56, 50, 47, 76, 84, 84, 76, 42, 52, 42, 35, 44, 60, 59, 71, 41, 70, 82, 68, 52, 71, 79, 83, 83, 64, 68, 68, 84, 68, 83, 82, 73, 102, 113, 95, 97, 94, 71, 87, 42, 115, 124, 114, 147, 102, 114, 102, 86, 101, 102, 102, 106, 133, 137, 129, 147, 133, 132, 147, 128, 125, 125, 104, 139, 137, 127, 142, 151, 149, 162, 164, 151, 137, 150, 174, 154, 169, 171, 159, 169, 182, 187, 167, 177, 136, 135, 132, 153, 179, 193, 192, 191, 184, 155, 139, 128, 168, 178, 170, 193, 190, 173, 188, 176, 152, 129, 131, 132, 155, 173, 160, 178, 176, 150, 130, 132, 127, 135, 156, 143, 136, 115, 102, 133, 123, 116, 120, 127, 146, 121, 106, 110, 71, 67, 62, 120, 122, 91, 95, 94, 85, 70, 67, 74, 67, 72, 70, 72, 73, 80, 86, 79, 100, 99, 100, 82, 68, 86, 60, 58, 79, 52, 38, 64, 53, 74, 70, 68, 82, 57, 68, 88, 72, 90, 61, 75, 79, 61, 28, 26, 51, 77, 80, 51, 84, 100, 82, 111, 121, 116, 98, 98, 79, 92, 85, 117, 136, 116, 98, 78, 63, 52, 83, 79, 107, 94, 76, 79, 88, 68, 30, 55, 84, 81, 89, 96, 67, 73, 82, 71, 71, 57, 48, 53, 57, 36, 52, 18, 41, 57, 25, 44, 39, 11, 35, 28, 44, -5, 14, 41, 13, -1, -31, -15, -13, -6, 24, -20, -4, -17, -29, -35, -48, -28, -30, -45, -34, 30, -72, -62, 16, -61, -16, -50, -47, -67, -60, -40, -32, -33, -23, -24, -27, -39, -34, -34, -44, -46, -11, 3, -19, -5, -42, -38, -43, -67, -41, -35, -15, -22, -6, 7, 6, -19, -17, -7, -22, -10, -15, -11, -11, -1, 16, 1, 4, 5, 11, 18, 28, 57, 37, 35, 13, 26, 34, 36, 49, 35, 54, 58, 41, 60, 53, 16, 39, 44, 88, 100, 99, 87, 116, 94, 94, 88, 50, 54, 42, 64, 56, 99, 87, 103, 104, 106, 120, 88, 98, 69, 87, 89, 94, 101, 88, 99, 107, 114, 115, 94, 83, 82, 86, 105, 108, 98, 104, 86, 83, 74, 84, 84, 103, 127, 125, 120, 122, 108, 111, 82, 113, 92, 105, 120, 117, 131, 127, 123, 101, 103, 127, 116, 106, 119, 161, 137, 143, 154, 143, 139, 137, 180, 151, 147, 165, 135, 136, 127, 112, 129, 151, 159, 159, 167, 162, 174, 169, 169, 179, 169, 151, 161, 157, 155, 147, 160, 176, 185, 195, 170, 162, 180, 159, 161, 173, 149, 178, 205, 208, 180, 157, 151, 151, 170, 162, 171, 182, 174, 170, 138, 154, 162, 166, 140, 140, 146, 119, 133, 160, 153, 160, 149, 153, 150, 107, 134, 68, 121, 116, 113, 137, 91, 117, 107, 120, 123, 124, 78, 107, 109, 121, 122, 114, 102, 63, 68, 80, 97, 95, 103, 109, 93, 90, 75, 29, 41, 19, 39, 57, 44, 101, 81, 99, 63, 52, 53, 46, 47, 51, 49, 28, 17, 13, 10, -3, 18, 34, 55, 60, 39, 33, 25, 1, -6, -36, -20, 3, -10, 13, 13, 16, 60, 52, 65, 63, 39, 23, 16, 27, 42, 49, 77, 104, 101, 128, 101, 102, 93, 117, 130, 91, 93, 88, 106, 138, 152, 134, 113, 100, 94, 90, 124, 141, 134, 155, 130, 149, 138, 153, 140, 120, 154, 133, 125, 129, 116, 139, 143, 121, 125, 120, 114, 133, 155, 151, 157, 143, 135, 128, 126, 111, 112, 123, 129, 139, 106, 136, 140, 141, 112, 129, 118, 127, 114, 72, 102, 84, 86, 94, 97, 59, 76, 87, 59, 80, 71, 85, 92, 92, 79, 83, 88, 67, 82, 51, 37, 29, 60, 73, 61, 74, 65, 78, 77, 81, 80, 68, 49, 30, 15, -7, 4, 57, 57, 39, 45, 51, 43, 51, 56, 75, 49, 47, 49, 39, 58, 62, 84, 59, 85, 100, 75, 84, 79, 70, 67, 55, 70, 103, 66, 49, 32, 26, 46, 41, 74, 74, 75, 78, 56, 49, 34, 33, 31, 44, 41, 58, 72, 47, 65, 67, 49, 44, 48, 46, 46, 47, 42, 52, 24, 41, 27, 59, 66, 38, 24, -7, 6, -10, 5, -17, -29, -26, 9, 5, 9, 21, 10, 5, 30, 0, -19, -17, -11, -21, -2, -20, 10, 14, -31, -7, -4, 1, 9, -8, 0, 3, 11, -2, -7, 0, 8, -28, -51, -46, -85, -64, -32, -74, -16, -43, -43, -48, -65, -67, -83, -74, -119, -93, -86, -68, -91, -74, -84, -71, -78, -77, -67, -76, -53, -70, -77, -98, -84, -82, -102, -84, -79, -78, -94, -68, -57, -68, -68, -53, -65, -68, -62, -78, -66, -63, -87, -48, -55, -43, -49, -52, -41, -35, -47, -43, -24, -14, -4, -2, -13, -14, -39, -12, 0, 2, 15, 9, 3, 7, 2, 10, 19, 11, 2, -15, 4, -22, -29, 2, 11, -5, 3, -3, -4, -12, -3, -5, 15, 1, 10, -18, -16, -14, -8, 7, 5, 11, 26, -1, 13, 18, 14, 37, 0, 5, -7, -19, -23, -3, 1, -6, 1, -23, -7, -4, 4, 3, 7, -7, -1, 4, 15, 38, 9, 13, 24, 6, 44, 60, 34, 76, 68, 46, 33, 45, 54, 70, 61, 50, 35, 57, 60, 60, 72, 57, 56, 42, 66, 53, 64, 75, 75, 69, 78, 68, 67, 60, 65, 64, 86, 98, 92, 100, 117, 98, 87, 110, 89, 102, 99, 119, 133, 116, 126, 141, 128, 104, 104, 111, 110, 133, 137, 117, 101, 110, 110, 129, 134, 162, 153, 140, 159, 156, 139, 143, 174, 157, 150, 166, 151, 152, 156, 138, 160, 160, 180, 168, 160, 127, 141, 155, 109, 136, 134, 136, 124, 137, 123, 90, 101, 108, 96, 72, 102, 80, 79, 84, 62, 102, 99, 104, 94, 76, 94, 91, 71, 74, 74, 76, 75, 89, 65, 61, 79, 86, 86, 85, 80, 74, 63, 38, 52, 64, 33, 48, 75, 67, 71, 66, 59, 50, 67, 78, 50, 57, 74, 54, 55, 39, 29, 31, 22, 38, 36, 33, 18, 36, 25, 15, -19, -13, 1, -2, -24, 0, -15, -17, -33, -30, -38, -33, -27, -32, -41, -1, -30, 2, -41, -38, -5, -44, -21, -42, -25, -19, -40, -43, -53, -34, -35, -19, -29, -50, -45, -15, -7, -24, -30, -27, -20, -35, -30, -61, -52, -70, -82, -80, -81, -78, -28, -40, -32, -45, -65, -71, -88, -95, -87, -58, -55, -64, -50, -44, -61, -72, -69, -76, -42, -79, -76, -82, -68, -61, -65, -93, -103, -122, -104, -98, -109, -112, -93, -96, -85, -92, -106, -109, -105, -44, -75, -63, -119, -74, -45, -82, -54, -53, -45, -78, -75, -87, -64, -71, -72, -71, -74, -108, -65, -73, -68, -40, -58, -63, -49, -89, -95, -110, -117, -81, -96, -96, -110, -88, -93, -69, -83, -96, -87, -74, -56, -32, -17, -41, -63, -39, -38, -72, -82, -77, -85, -73, -54, -44, -22, -47, -28, -39, -32, -30, -49, -55, -49};
158:               
159:               struct clip_psv sine = {.size = SINRES, .blocks=SINRES/STREAMBUF, .playing=FALSE, .flash=FALSE, .block_index=0, .start_ptr=sintab, .read_ptr=sintab};
160:               
161:               struct clip_psv kick = {.size = 5552, .blocks=5552/STREAMBUF, .playing=FALSE, .flash=FALSE, .block_index=0, .start_ptr=kicksamp, .read_ptr=kicksamp};
162:               struct clip_psv snare = {.size = 6252, .blocks=6252/STREAMBUF, .playing=FALSE, .flash=FALSE, .block_index=0, .start_ptr=snaresamp, .read_ptr=snaresamp};
---  /home/fbuga/Documents/ps-040/screens.c  ------------------------------------------------------------
1:                 /*
2:                  * File:   screens.c
3:                  * Author: ryan
4:                  *
5:                  * Created on January 28, 2018, 11:17 PM
6:                  */
7:                 
8:                 
9:                 #include <xc.h>
10:                #include "screens.h"
11:                #include "common.h"
12:                #include "plcd.h"
13:                #include "dsp.h"
14:                #include "flash.h"
15:                
16:                #include "sounds.h"
17:                
18:                extern unsigned char TEST_SIN;
19:                extern fractional pots[POTS];
20:                extern fractional pots_scaled[POTS];
21:                extern unsigned char pad[BUTTONS];
22:                extern enum screenStruc state, laststate;
23:                extern char flash_readback[512];
24:                extern unsigned int process_time;
25:                
26:                extern unsigned int TxBufferA[STREAMBUF], TxBufferB[STREAMBUF], 
27:                            RxBufferA[STREAMBUF], RxBufferB[STREAMBUF];  
28:                
29:                extern struct clip sine;
30:                
31:                extern enum fxStruct fxUnits[NUMFXUNITS];
32:                
33:                int fxLast=0;
34:                int fxNow=0;
35:                
36:                void (*fxModPointers[NUMFX])(unsigned int, fractional, fractional, fractional) = {screenNoFXmod, screenLPFmod, screenTRMmod, screenLOPmod, screenBTCmod};
37:                
38:                void screenDebugAudio(){
39:                
40:                }
008340  060000     RETURN
41:                
42:                void screenDebugBuffers(){
43:                    if(state!=laststate){
008342  808060     MOV laststate, W0
008344  E3102A     CP 0x102A
008346  32001B     BRA Z, 0x837E
44:                        //setup here
45:                        lcdClearQ();
008348  07FBB8     RCALL lcdClearQ
46:                        lcdSetCursorQ(0,0);
00834A  EB4080     CLR.B W1
00834C  784001     MOV.B W1, W0
00834E  07FBC0     RCALL lcdSetCursorQ
47:                        lcdWriteStringQ("Buffer Debug");
008350  2FA050     MOV #0xFA05, W0
008352  07FBD2     RCALL lcdWriteStringQ
48:                        lcdSetCursorQ(0,1);
008354  B3C011     MOV.B #0x1, W1
008356  EB4000     CLR.B W0
008358  07FBBB     RCALL lcdSetCursorQ
49:                        lcdWriteStringQ("FX time:");
00835A  2FA120     MOV #0xFA12, W0
00835C  07FBCD     RCALL lcdWriteStringQ
50:                        lcdSetCursorQ(11,1);
00835E  B3C011     MOV.B #0x1, W1
008360  B3C0B0     MOV.B #0xB, W0
008362  07FBB6     RCALL lcdSetCursorQ
51:                        lcdWriteStringQ("/256");
008364  2FA1B0     MOV #0xFA1B, W0
008366  07FBC8     RCALL lcdWriteStringQ
52:                        lcdSetCursorQ(0,2);
008368  B3C021     MOV.B #0x2, W1
00836A  EB4000     CLR.B W0
00836C  07FBB1     RCALL lcdSetCursorQ
53:                        lcdWriteStringQ("LCD:");
00836E  2FA200     MOV #0xFA20, W0
008370  07FBC3     RCALL lcdWriteStringQ
54:                        lcdSetCursorQ(0,3);
008372  B3C031     MOV.B #0x3, W1
008374  EB4000     CLR.B W0
008376  07FBAC     RCALL lcdSetCursorQ
55:                        lcdWriteStringQ("Flash:");
008378  2FA250     MOV #0xFA25, W0
00837A  07FBBE     RCALL lcdWriteStringQ
00837C  370006     BRA 0x838A
56:                    } else {
57:                        //update here
58:                        lcdSetCursorQ(8,1);
00837E  B3C011     MOV.B #0x1, W1
008380  B3C080     MOV.B #0x8, W0
008382  07FBA6     RCALL lcdSetCursorQ
59:                        lcdWriteDecimalQ(process_time,3);
008384  200031     MOV #0x3, W1
008386  BFD006     MOV.B process_time, WREG
008388  07FCA6     RCALL lcdWriteDecimalQ
60:                        //lcdSetCursorQ(4,2);
61:                        //lcdWriteDecimalQ();
62:                        //lcdSetCursorQ(6,3);
63:                        //lcdWriteDecimalQ();
64:                        
65:                    }
66:                }
00838A  060000     RETURN
67:                
68:                void screenDebugPots(void){
00838C  BE9F88     MOV.D W8, [W15++]
00838E  BE9F8A     MOV.D W10, [W15++]
008390  BE9F8C     MOV.D W12, [W15++]
69:                    int bank=0;
0083CC  EB0480     CLR W9
70:                    
71:                    if(state!=laststate){
008392  808060     MOV laststate, W0
008394  E3102A     CP 0x102A
008396  320016     BRA Z, 0x83C4
72:                        // Setup here
73:                        lcdClearQ();
008398  07FB90     RCALL lcdClearQ
74:                        lcdSetCursorQ(0,0);
00839A  EB4080     CLR.B W1
00839C  784001     MOV.B W1, W0
00839E  07FB98     RCALL lcdSetCursorQ
75:                        lcdWriteStringQ("Potentiometer Debug");
0083A0  2FA2C0     MOV #0xFA2C, W0
0083A2  07FBAA     RCALL lcdWriteStringQ
76:                        lcdSetCursorQ(9,1);
0083A4  B3C011     MOV.B #0x1, W1
0083A6  B3C090     MOV.B #0x9, W0
0083A8  07FB93     RCALL lcdSetCursorQ
77:                        lcdWriteStringQ("|");
0083AA  2FA400     MOV #0xFA40, W0
0083AC  07FBA5     RCALL lcdWriteStringQ
78:                         lcdSetCursorQ(9,2);
0083AE  B3C021     MOV.B #0x2, W1
0083B0  B3C090     MOV.B #0x9, W0
0083B2  07FB8E     RCALL lcdSetCursorQ
79:                        lcdWriteStringQ("|");
0083B4  2FA400     MOV #0xFA40, W0
0083B6  07FBA0     RCALL lcdWriteStringQ
80:                         lcdSetCursorQ(9,3);
0083B8  B3C031     MOV.B #0x3, W1
0083BA  B3C090     MOV.B #0x9, W0
0083BC  07FB89     RCALL lcdSetCursorQ
81:                        lcdWriteStringQ("|");
0083BE  2FA400     MOV #0xFA40, W0
0083C0  07FB9B     RCALL lcdWriteStringQ
0083C2  370066     BRA 0x8490
82:                    } else {
83:                        // Update here
84:                        if(!pad[34])bank=POTS/2;
0083C4  200069     MOV #0x6, W9
0083C6  21AE60     MOV #0x1AE6, W0
0083C8  E00410     CP0.B [W0]
0083CA  320001     BRA Z, 0x83CE
85:                        lcdSetCursorQ(0,1);
0083CE  B3C011     MOV.B #0x1, W1
0083D0  EB4000     CLR.B W0
0083D2  07FB7E     RCALL lcdSetCursorQ
86:                        lcdWriteDecimalQ(pots_scaled[bank], 3);
0083D4  B94E61     MUL.SU W9, #1, W12
0083D6  46060C     ADD W12, W12, W12
0083D8  4E868D     ADDC W13, W13, W13
0083DA  212948     MOV #0x1294, W8
0083DC  44000C     ADD W8, W12, W0
0083DE  780010     MOV [W0], W0
0083E0  200031     MOV #0x3, W1
0083E2  07FC79     RCALL lcdWriteDecimalQ
87:                        lcdWriteQ(',');
0083E4  B3C2C0     MOV.B #0x2C, W0
0083E6  07FB54     RCALL lcdWriteQ
88:                        lcdWriteWordUnsignedQ(pots[bank++]);
0083E8  E80509     INC W9, W10
0083EA  2127C9     MOV #0x127C, W9
0083EC  44860C     ADD W9, W12, W12
0083EE  78001C     MOV [W12], W0
0083F0  07FC18     RCALL lcdWriteWordUnsignedQ
89:                        lcdSetCursorQ(11,1);
0083F2  B3C011     MOV.B #0x1, W1
0083F4  B3C0B0     MOV.B #0xB, W0
0083F6  07FB6C     RCALL lcdSetCursorQ
90:                        lcdWriteDecimalQ(pots_scaled[bank], 3);
0083F8  B95661     MUL.SU W10, #1, W12
0083FA  46060C     ADD W12, W12, W12
0083FC  4E868D     ADDC W13, W13, W13
0083FE  44000C     ADD W8, W12, W0
008400  780010     MOV [W0], W0
008402  200031     MOV #0x3, W1
008404  07FC68     RCALL lcdWriteDecimalQ
91:                        lcdWriteQ(',');
008406  B3C2C0     MOV.B #0x2C, W0
008408  07FB43     RCALL lcdWriteQ
92:                        lcdWriteWordUnsignedQ(pots[bank++]);
00840A  E8050A     INC W10, W10
00840C  44860C     ADD W9, W12, W12
00840E  78001C     MOV [W12], W0
008410  07FC08     RCALL lcdWriteWordUnsignedQ
93:                        lcdSetCursorQ(0,2);
008412  B3C021     MOV.B #0x2, W1
008414  EB4000     CLR.B W0
008416  07FB5C     RCALL lcdSetCursorQ
94:                        lcdWriteDecimalQ(pots_scaled[bank], 3);
008418  B95661     MUL.SU W10, #1, W12
00841A  46060C     ADD W12, W12, W12
00841C  4E868D     ADDC W13, W13, W13
00841E  44000C     ADD W8, W12, W0
008420  780010     MOV [W0], W0
008422  200031     MOV #0x3, W1
008424  07FC58     RCALL lcdWriteDecimalQ
95:                        lcdWriteQ(',');
008426  B3C2C0     MOV.B #0x2C, W0
008428  07FB33     RCALL lcdWriteQ
96:                        lcdWriteWordUnsignedQ(pots[bank++]);
00842A  E8050A     INC W10, W10
00842C  44860C     ADD W9, W12, W12
00842E  78001C     MOV [W12], W0
008430  07FBF8     RCALL lcdWriteWordUnsignedQ
97:                        lcdSetCursorQ(11,2);
008432  B3C021     MOV.B #0x2, W1
008434  B3C0B0     MOV.B #0xB, W0
008436  07FB4C     RCALL lcdSetCursorQ
98:                        lcdWriteDecimalQ(pots_scaled[bank], 3);
008438  B95661     MUL.SU W10, #1, W12
00843A  46060C     ADD W12, W12, W12
00843C  4E868D     ADDC W13, W13, W13
00843E  44000C     ADD W8, W12, W0
008440  780010     MOV [W0], W0
008442  200031     MOV #0x3, W1
008444  07FC48     RCALL lcdWriteDecimalQ
99:                        lcdWriteQ(',');
008446  B3C2C0     MOV.B #0x2C, W0
008448  07FB23     RCALL lcdWriteQ
100:                       lcdWriteWordUnsignedQ(pots[bank++]);
00844A  E8050A     INC W10, W10
00844C  44860C     ADD W9, W12, W12
00844E  78001C     MOV [W12], W0
008450  07FBE8     RCALL lcdWriteWordUnsignedQ
101:                       lcdSetCursorQ(0,3);
008452  B3C031     MOV.B #0x3, W1
008454  EB4000     CLR.B W0
008456  07FB3C     RCALL lcdSetCursorQ
102:                       lcdWriteDecimalQ(pots_scaled[bank], 3);
008458  B95661     MUL.SU W10, #1, W12
00845A  46060C     ADD W12, W12, W12
00845C  4E868D     ADDC W13, W13, W13
00845E  44000C     ADD W8, W12, W0
008460  780010     MOV [W0], W0
008462  200031     MOV #0x3, W1
008464  07FC38     RCALL lcdWriteDecimalQ
103:                       lcdWriteQ(',');
008466  B3C2C0     MOV.B #0x2C, W0
008468  07FB13     RCALL lcdWriteQ
104:                       lcdWriteWordUnsignedQ(pots[bank++]);
00846A  E8050A     INC W10, W10
00846C  44860C     ADD W9, W12, W12
00846E  78001C     MOV [W12], W0
008470  07FBD8     RCALL lcdWriteWordUnsignedQ
105:                       lcdSetCursorQ(11,3);
008472  B3C031     MOV.B #0x3, W1
008474  B3C0B0     MOV.B #0xB, W0
008476  07FB2C     RCALL lcdSetCursorQ
106:                       lcdWriteDecimalQ(pots_scaled[bank], 3);
008478  DED5CF     ASR W10, #15, W11
00847A  45050A     ADD W10, W10, W10
00847C  4D858B     ADDC W11, W11, W11
00847E  44040A     ADD W8, W10, W8
008480  780018     MOV [W8], W0
008482  200031     MOV #0x3, W1
008484  07FC28     RCALL lcdWriteDecimalQ
107:                       lcdWriteQ(',');
008486  B3C2C0     MOV.B #0x2C, W0
008488  07FB03     RCALL lcdWriteQ
108:                       lcdWriteWordUnsignedQ(pots[bank++]);
00848A  44850A     ADD W9, W10, W10
00848C  78001A     MOV [W10], W0
00848E  07FBC9     RCALL lcdWriteWordUnsignedQ
109:                   }
110:               }
008490  BE064F     MOV.D [--W15], W12
008492  BE054F     MOV.D [--W15], W10
008494  BE044F     MOV.D [--W15], W8
008496  060000     RETURN
111:               
112:               
113:               void screenDebugFlash(void){
114:                       if(state!=laststate){
008498  808060     MOV laststate, W0
00849A  E3102A     CP 0x102A
00849C  320034     BRA Z, 0x8506
115:                       //setup here
116:                       lcdClearQ();
00849E  07FB0D     RCALL lcdClearQ
117:                       lcdSetCursorQ(0,0);
0084A0  EB4080     CLR.B W1
0084A2  784001     MOV.B W1, W0
0084A4  07FB15     RCALL lcdSetCursorQ
118:                       lcdWriteWordQ(RxBufferA[0]);
0084A6  8082E0     MOV RxBufferA, W0
0084A8  07FB4A     RCALL lcdWriteWordQ
119:                        lcdSetCursorQ(6,0);
0084AA  EB4080     CLR.B W1
0084AC  B3C060     MOV.B #0x6, W0
0084AE  07FB10     RCALL lcdSetCursorQ
120:                       lcdWriteWordQ(RxBufferB[0]);
0084B0  808360     MOV RxBufferB, W0
0084B2  07FB45     RCALL lcdWriteWordQ
121:                        lcdSetCursorQ(12,0);
0084B4  EB4080     CLR.B W1
0084B6  B3C0C0     MOV.B #0xC, W0
0084B8  07FB0B     RCALL lcdSetCursorQ
122:                       lcdWriteWordQ(RxBufferA[1]);
0084BA  8082F0     MOV 0x105E, W0
0084BC  07FB40     RCALL lcdWriteWordQ
123:                        lcdSetCursorQ(0,1);
0084BE  B3C011     MOV.B #0x1, W1
0084C0  EB4000     CLR.B W0
0084C2  07FB06     RCALL lcdSetCursorQ
124:                       lcdWriteWordQ(RxBufferB[1]);
0084C4  808370     MOV 0x106E, W0
0084C6  07FB3B     RCALL lcdWriteWordQ
125:                       lcdSetCursorQ(6,1);
0084C8  B3C011     MOV.B #0x1, W1
0084CA  B3C060     MOV.B #0x6, W0
0084CC  07FB01     RCALL lcdSetCursorQ
126:                       lcdWriteWordQ(RxBufferA[2]);
0084CE  808300     MOV 0x1060, W0
0084D0  07FB36     RCALL lcdWriteWordQ
127:                        lcdSetCursorQ(12,1);
0084D2  B3C011     MOV.B #0x1, W1
0084D4  B3C0C0     MOV.B #0xC, W0
0084D6  07FAFC     RCALL lcdSetCursorQ
128:                       lcdWriteWordQ(RxBufferB[2]);
0084D8  808380     MOV 0x1070, W0
0084DA  07FB31     RCALL lcdWriteWordQ
129:                       lcdSetCursorQ(0,2);
0084DC  B3C021     MOV.B #0x2, W1
0084DE  EB4000     CLR.B W0
0084E0  07FAF7     RCALL lcdSetCursorQ
130:                       lcdWriteWordQ(RxBufferA[3]);
0084E2  808310     MOV 0x1062, W0
0084E4  07FB2C     RCALL lcdWriteWordQ
131:                       lcdSetCursorQ(6,2);
0084E6  B3C021     MOV.B #0x2, W1
0084E8  B3C060     MOV.B #0x6, W0
0084EA  07FAF2     RCALL lcdSetCursorQ
132:                       lcdWriteWordQ(RxBufferB[3]);
0084EC  808390     MOV 0x1072, W0
0084EE  07FB27     RCALL lcdWriteWordQ
133:                        lcdSetCursorQ(12,2);
0084F0  B3C021     MOV.B #0x2, W1
0084F2  B3C0C0     MOV.B #0xC, W0
0084F4  07FAED     RCALL lcdSetCursorQ
134:                       lcdWriteWordQ(RxBufferA[4]);
0084F6  808320     MOV 0x1064, W0
0084F8  07FB22     RCALL lcdWriteWordQ
135:                       lcdSetCursorQ(0,3);
0084FA  B3C031     MOV.B #0x3, W1
0084FC  EB4000     CLR.B W0
0084FE  07FAE8     RCALL lcdSetCursorQ
136:                       lcdWriteWordQ(RxBufferB[4]);
008500  8083A0     MOV 0x1074, W0
008502  07FB1D     RCALL lcdWriteWordQ
008504  370005     BRA 0x8510
137:                   } else {
138:                       //update here
139:                       lcdSetCursorQ(9,3);
008506  B3C031     MOV.B #0x3, W1
008508  B3C090     MOV.B #0x9, W0
00850A  07FAE2     RCALL lcdSetCursorQ
140:                       lcdWriteStringQ("Stat:");
00850C  2FA420     MOV #0xFA42, W0
00850E  07FAF4     RCALL lcdWriteStringQ
141:                       //lcdWriteWordQ(flashStatusCheck());
142:                   }
143:               }
008510  060000     RETURN
144:               
145:               void screenDebugInput(void){
146:                   if(state!=laststate){
008512  808060     MOV laststate, W0
008514  E3102A     CP 0x102A
008516  320016     BRA Z, 0x8544
147:                       //setup here
148:                       lcdClearQ();
008518  07FAD0     RCALL lcdClearQ
149:                       lcdSetCursorQ(0,0);
00851A  EB4080     CLR.B W1
00851C  784001     MOV.B W1, W0
00851E  07FAD8     RCALL lcdSetCursorQ
150:                       lcdWriteStringQ("Input Debug");
008520  2FA480     MOV #0xFA48, W0
008522  07FAEA     RCALL lcdWriteStringQ
151:                       lcdSetCursorQ(0,1);
008524  B3C011     MOV.B #0x1, W1
008526  EB4000     CLR.B W0
008528  07FAD3     RCALL lcdSetCursorQ
152:                       lcdWriteStringQ("Size:");
00852A  2FA540     MOV #0xFA54, W0
00852C  07FAE5     RCALL lcdWriteStringQ
153:                       lcdSetCursorQ(0,2);
00852E  B3C021     MOV.B #0x2, W1
008530  EB4000     CLR.B W0
008532  07FACE     RCALL lcdSetCursorQ
154:                       lcdWriteStringQ("Playing:");
008534  2FA5A0     MOV #0xFA5A, W0
008536  07FAE0     RCALL lcdWriteStringQ
155:                       lcdSetCursorQ(0,3);
008538  B3C031     MOV.B #0x3, W1
00853A  EB4000     CLR.B W0
00853C  07FAC9     RCALL lcdSetCursorQ
156:                       lcdWriteStringQ("Blocks:");
00853E  2FA630     MOV #0xFA63, W0
008540  07FADB     RCALL lcdWriteStringQ
008542  370013     BRA 0x856A
157:                   } else {
158:                       //update here
159:                       lcdSetCursorQ(5,1);
008544  B3C011     MOV.B #0x1, W1
008546  B3C050     MOV.B #0x5, W0
008548  07FAC3     RCALL lcdSetCursorQ
160:                       lcdWriteWordUnsignedQ(sine.size);
00854A  812B90     MOV 0x2572, W0
00854C  07FB6A     RCALL lcdWriteWordUnsignedQ
161:                       lcdSetCursorQ(8,2);
00854E  B3C021     MOV.B #0x2, W1
008550  B3C080     MOV.B #0x8, W0
008552  07FABE     RCALL lcdSetCursorQ
162:                       lcdWriteWordUnsignedQ(sine.playing);
008554  225760     MOV #0x2576, W0
008556  FB8010     ZE [W0], W0
008558  07FB64     RCALL lcdWriteWordUnsignedQ
163:                       lcdSetCursorQ(7,3);
00855A  B3C031     MOV.B #0x3, W1
00855C  B3C070     MOV.B #0x7, W0
00855E  07FAB8     RCALL lcdSetCursorQ
164:                       lcdWriteDecimalQ(sine.block_index, 3);
008560  200031     MOV #0x3, W1
008562  812BC0     MOV 0x2578, W0
008564  07FBB8     RCALL lcdWriteDecimalQ
165:                       
166:                       lcdDrawPads(16);
008566  B3C100     MOV.B #0x10, W0
008568  07FBE8     RCALL lcdDrawPads
167:                   }
168:               }
00856A  060000     RETURN
169:               
170:               void screenNoFXmod(unsigned int col, fractional param1, fractional param2, fractional param3){
008136  781F88     MOV W8, [W15++]
008138  780400     MOV W0, W8
171:                       if(fxNow!=fxLast){
00813A  8081A0     MOV fxLast, W0
00813C  E31036     CP fxNow
00813E  320015     BRA Z, 0x816A
172:                       // Setup here
173:                           
174:                       lcdSetCursorQ(col+5,0);
008140  444065     ADD.B W8, #0x5, W0
008142  EB4080     CLR.B W1
008144  07FCC5     RCALL lcdSetCursorQ
175:                       lcdWriteStringQ("OFF");
008146  2F9CC0     MOV #0xF9CC, W0
008148  07FCD7     RCALL lcdWriteStringQ
176:                       lcdSetCursorQ(col,1);
00814A  B3C011     MOV.B #0x1, W1
00814C  784008     MOV.B W8, W0
00814E  07FCC0     RCALL lcdSetCursorQ
177:                       lcdWriteStringQ("        ");
008150  2F9D00     MOV #0xF9D0, W0
008152  07FCD2     RCALL lcdWriteStringQ
178:                       lcdSetCursorQ(col,2);
008154  B3C021     MOV.B #0x2, W1
008156  784008     MOV.B W8, W0
008158  07FCBB     RCALL lcdSetCursorQ
179:                       lcdWriteStringQ("        ");
00815A  2F9D00     MOV #0xF9D0, W0
00815C  07FCCD     RCALL lcdWriteStringQ
180:                       lcdSetCursorQ(col,3);
00815E  B3C031     MOV.B #0x3, W1
008160  784008     MOV.B W8, W0
008162  07FCB6     RCALL lcdSetCursorQ
181:                       lcdWriteStringQ("        ");
008164  2F9D00     MOV #0xF9D0, W0
008166  07FCC8     RCALL lcdWriteStringQ
008168  370005     BRA 0x8174
182:               
183:                   } else {
184:                       // Update here
185:                       lcdSetCursorQ(col+5,0);
00816A  444065     ADD.B W8, #0x5, W0
00816C  EB4080     CLR.B W1
00816E  07FCB0     RCALL lcdSetCursorQ
186:                       lcdWriteStringQ("OFF");
008170  2F9CC0     MOV #0xF9CC, W0
008172  07FCC2     RCALL lcdWriteStringQ
187:                   }
188:               }
008174  78044F     MOV [--W15], W8
008176  060000     RETURN
189:               
190:               void screenLPFmod(unsigned int col, fractional param1, fractional param2, fractional param3){
0082CE  BE9F88     MOV.D W8, [W15++]
0082D0  BE9F8A     MOV.D W10, [W15++]
0082D2  780400     MOV W0, W8
0082D4  780501     MOV W1, W10
0082D6  780582     MOV W2, W11
0082D8  780483     MOV W3, W9
191:                   if(fxNow!=fxLast){
0082DA  8081A0     MOV fxLast, W0
0082DC  E31036     CP fxNow
0082DE  320015     BRA Z, 0x830A
192:                       // Setup here
193:                       lcdSetCursorQ(col+5,0);
0082E0  444065     ADD.B W8, #0x5, W0
0082E2  EB4080     CLR.B W1
0082E4  07FBF5     RCALL lcdSetCursorQ
194:                       lcdWriteStringQ("LPF");
0082E6  2F9FD0     MOV #0xF9FD, W0
0082E8  07FC07     RCALL lcdWriteStringQ
195:                       lcdSetCursorQ(col,1);
0082EA  B3C011     MOV.B #0x1, W1
0082EC  784008     MOV.B W8, W0
0082EE  07FBF0     RCALL lcdSetCursorQ
196:                       lcdWriteStringQ("frq");
0082F0  2FA010     MOV #0xFA01, W0
0082F2  07FC02     RCALL lcdWriteStringQ
197:                       lcdSetCursorQ(col,2);
0082F4  B3C021     MOV.B #0x2, W1
0082F6  784008     MOV.B W8, W0
0082F8  07FBEB     RCALL lcdSetCursorQ
198:                       lcdWriteStringQ("d/w");
0082FA  2F9E10     MOV #0xF9E1, W0
0082FC  07FBFD     RCALL lcdWriteStringQ
199:                       lcdSetCursorQ(col,3);
0082FE  B3C031     MOV.B #0x3, W1
008300  784008     MOV.B W8, W0
008302  07FBE6     RCALL lcdSetCursorQ
200:                       lcdWriteStringQ("pwr");
008304  2F9E50     MOV #0xF9E5, W0
008306  07FBF8     RCALL lcdWriteStringQ
008308  370018     BRA 0x833A
201:                   } else {
202:                       // Update here
203:                       lcdSetCursorQ(col+5,1);
00830A  444465     ADD.B W8, #0x5, W8
00830C  B3C011     MOV.B #0x1, W1
00830E  784008     MOV.B W8, W0
008310  07FBDF     RCALL lcdSetCursorQ
204:                       lcdWriteDecimalQ(param1, 3);
008312  200031     MOV #0x3, W1
008314  78400A     MOV.B W10, W0
008316  07FCDF     RCALL lcdWriteDecimalQ
205:                       lcdSetCursorQ(col+5,2);
008318  B3C021     MOV.B #0x2, W1
00831A  784008     MOV.B W8, W0
00831C  07FBD9     RCALL lcdSetCursorQ
206:                       lcdWriteDecimalQ(param2, 3);
00831E  200031     MOV #0x3, W1
008320  78400B     MOV.B W11, W0
008322  07FCD9     RCALL lcdWriteDecimalQ
207:                       lcdSetCursorQ(col+5,3);
008324  B3C031     MOV.B #0x3, W1
008326  784008     MOV.B W8, W0
008328  07FBD3     RCALL lcdSetCursorQ
208:                       if(param3>=50)
00832A  200310     MOV #0x31, W0
00832C  548F80     SUB W9, W0, [W15]
00832E  340003     BRA LE, 0x8336
209:                           lcdWriteStringQ(" ON");
008330  2F9E90     MOV #0xF9E9, W0
008332  07FBE2     RCALL lcdWriteStringQ
008334  370002     BRA 0x833A
210:                       else lcdWriteStringQ("OFF");
008336  2F9CC0     MOV #0xF9CC, W0
008338  07FBDF     RCALL lcdWriteStringQ
211:                   }
212:               }
00833A  BE054F     MOV.D [--W15], W10
00833C  BE044F     MOV.D [--W15], W8
00833E  060000     RETURN
213:               
214:               void screenTRMmod(unsigned int col, fractional param1, fractional param2, fractional param3){
00825C  BE9F88     MOV.D W8, [W15++]
00825E  BE9F8A     MOV.D W10, [W15++]
008260  780400     MOV W0, W8
008262  780501     MOV W1, W10
008264  780582     MOV W2, W11
008266  780483     MOV W3, W9
215:                   if(fxNow!=fxLast){
008268  8081A0     MOV fxLast, W0
00826A  E31036     CP fxNow
00826C  320015     BRA Z, 0x8298
216:                       // Setup here
217:                       lcdSetCursorQ(col+5,0);
00826E  444065     ADD.B W8, #0x5, W0
008270  EB4080     CLR.B W1
008272  07FC2E     RCALL lcdSetCursorQ
218:                       lcdWriteStringQ("TRM");
008274  2F9F10     MOV #0xF9F1, W0
008276  07FC40     RCALL lcdWriteStringQ
219:                       lcdSetCursorQ(col,1);
008278  B3C011     MOV.B #0x1, W1
00827A  784008     MOV.B W8, W0
00827C  07FC29     RCALL lcdSetCursorQ
220:                       lcdWriteStringQ("rat");
00827E  2F9F50     MOV #0xF9F5, W0
008280  07FC3B     RCALL lcdWriteStringQ
221:                       lcdSetCursorQ(col,2);
008282  B3C021     MOV.B #0x2, W1
008284  784008     MOV.B W8, W0
008286  07FC24     RCALL lcdSetCursorQ
222:                       lcdWriteStringQ("dep");
008288  2F9F90     MOV #0xF9F9, W0
00828A  07FC36     RCALL lcdWriteStringQ
223:                       lcdSetCursorQ(col,3);
00828C  B3C031     MOV.B #0x3, W1
00828E  784008     MOV.B W8, W0
008290  07FC1F     RCALL lcdSetCursorQ
224:                       lcdWriteStringQ("pwr");
008292  2F9E50     MOV #0xF9E5, W0
008294  07FC31     RCALL lcdWriteStringQ
008296  370018     BRA 0x82C8
225:                   } else {
226:                       // Update here
227:                       lcdSetCursorQ(col+5,1);
008298  444465     ADD.B W8, #0x5, W8
00829A  B3C011     MOV.B #0x1, W1
00829C  784008     MOV.B W8, W0
00829E  07FC18     RCALL lcdSetCursorQ
228:                       lcdWriteDecimalQ(param1, 3);
0082A0  200031     MOV #0x3, W1
0082A2  78400A     MOV.B W10, W0
0082A4  07FD18     RCALL lcdWriteDecimalQ
229:                       lcdSetCursorQ(col+5,2);
0082A6  B3C021     MOV.B #0x2, W1
0082A8  784008     MOV.B W8, W0
0082AA  07FC12     RCALL lcdSetCursorQ
230:                       lcdWriteDecimalQ(param2, 3);
0082AC  200031     MOV #0x3, W1
0082AE  78400B     MOV.B W11, W0
0082B0  07FD12     RCALL lcdWriteDecimalQ
231:                       lcdSetCursorQ(col+5,3);
0082B2  B3C031     MOV.B #0x3, W1
0082B4  784008     MOV.B W8, W0
0082B6  07FC0C     RCALL lcdSetCursorQ
232:                       if(param3>=50)
0082B8  200310     MOV #0x31, W0
0082BA  548F80     SUB W9, W0, [W15]
0082BC  340003     BRA LE, 0x82C4
233:                           lcdWriteStringQ(" ON");
0082BE  2F9E90     MOV #0xF9E9, W0
0082C0  07FC1B     RCALL lcdWriteStringQ
0082C2  370002     BRA 0x82C8
234:                       else lcdWriteStringQ("OFF");
0082C4  2F9CC0     MOV #0xF9CC, W0
0082C6  07FC18     RCALL lcdWriteStringQ
235:                   }
236:               }
0082C8  BE054F     MOV.D [--W15], W10
0082CA  BE044F     MOV.D [--W15], W8
0082CC  060000     RETURN
237:               
238:               void screenLOPmod(unsigned int col, fractional param1, fractional param2, fractional param3){
0081EA  BE9F88     MOV.D W8, [W15++]
0081EC  BE9F8A     MOV.D W10, [W15++]
0081EE  780400     MOV W0, W8
0081F0  780501     MOV W1, W10
0081F2  780582     MOV W2, W11
0081F4  780483     MOV W3, W9
239:                   if(fxNow!=fxLast){
0081F6  8081A0     MOV fxLast, W0
0081F8  E31036     CP fxNow
0081FA  320015     BRA Z, 0x8226
240:                       // Setup here
241:                       lcdSetCursorQ(col+5,0);
0081FC  444065     ADD.B W8, #0x5, W0
0081FE  EB4080     CLR.B W1
008200  07FC67     RCALL lcdSetCursorQ
242:                       lcdWriteStringQ("LOP");
008202  2F9ED0     MOV #0xF9ED, W0
008204  07FC79     RCALL lcdWriteStringQ
243:                       lcdSetCursorQ(col,1);
008206  B3C011     MOV.B #0x1, W1
008208  784008     MOV.B W8, W0
00820A  07FC62     RCALL lcdSetCursorQ
244:                       lcdWriteStringQ("siz");
00820C  2F9DD0     MOV #0xF9DD, W0
00820E  07FC74     RCALL lcdWriteStringQ
245:                       lcdSetCursorQ(col,2);
008210  B3C021     MOV.B #0x2, W1
008212  784008     MOV.B W8, W0
008214  07FC5D     RCALL lcdSetCursorQ
246:                       lcdWriteStringQ("d/w");
008216  2F9E10     MOV #0xF9E1, W0
008218  07FC6F     RCALL lcdWriteStringQ
247:                       lcdSetCursorQ(col,3);
00821A  B3C031     MOV.B #0x3, W1
00821C  784008     MOV.B W8, W0
00821E  07FC58     RCALL lcdSetCursorQ
248:                       lcdWriteStringQ("pwr");
008220  2F9E50     MOV #0xF9E5, W0
008222  07FC6A     RCALL lcdWriteStringQ
008224  370018     BRA 0x8256
249:                   } else {
250:                       // Update here
251:                       lcdSetCursorQ(col+5,1);
008226  444465     ADD.B W8, #0x5, W8
008228  B3C011     MOV.B #0x1, W1
00822A  784008     MOV.B W8, W0
00822C  07FC51     RCALL lcdSetCursorQ
252:                       lcdWriteDecimalQ(param1, 3);
00822E  200031     MOV #0x3, W1
008230  78400A     MOV.B W10, W0
008232  07FD51     RCALL lcdWriteDecimalQ
253:                       lcdSetCursorQ(col+5,2);
008234  B3C021     MOV.B #0x2, W1
008236  784008     MOV.B W8, W0
008238  07FC4B     RCALL lcdSetCursorQ
254:                       lcdWriteDecimalQ(param2, 3);
00823A  200031     MOV #0x3, W1
00823C  78400B     MOV.B W11, W0
00823E  07FD4B     RCALL lcdWriteDecimalQ
255:                       lcdSetCursorQ(col+5,3);
008240  B3C031     MOV.B #0x3, W1
008242  784008     MOV.B W8, W0
008244  07FC45     RCALL lcdSetCursorQ
256:                       if(param3>=50)
008246  200310     MOV #0x31, W0
008248  548F80     SUB W9, W0, [W15]
00824A  340003     BRA LE, 0x8252
257:                           lcdWriteStringQ(" ON");
00824C  2F9E90     MOV #0xF9E9, W0
00824E  07FC54     RCALL lcdWriteStringQ
008250  370002     BRA 0x8256
258:                       else lcdWriteStringQ("OFF");
008252  2F9CC0     MOV #0xF9CC, W0
008254  07FC51     RCALL lcdWriteStringQ
259:                   }
260:               }
008256  BE054F     MOV.D [--W15], W10
008258  BE044F     MOV.D [--W15], W8
00825A  060000     RETURN
261:               
262:               void screenBTCmod(unsigned int col, fractional param1, fractional param2, fractional param3){
008178  BE9F88     MOV.D W8, [W15++]
00817A  BE9F8A     MOV.D W10, [W15++]
00817C  780400     MOV W0, W8
00817E  780501     MOV W1, W10
008180  780582     MOV W2, W11
008182  780483     MOV W3, W9
263:                   if(fxNow!=fxLast){
008184  8081A0     MOV fxLast, W0
008186  E31036     CP fxNow
008188  320015     BRA Z, 0x81B4
264:                       // Setup here
265:                       lcdSetCursorQ(col+5,0);
00818A  444065     ADD.B W8, #0x5, W0
00818C  EB4080     CLR.B W1
00818E  07FCA0     RCALL lcdSetCursorQ
266:                       lcdWriteStringQ("BIT");
008190  2F9D90     MOV #0xF9D9, W0
008192  07FCB2     RCALL lcdWriteStringQ
267:                       lcdSetCursorQ(col,1);
008194  B3C011     MOV.B #0x1, W1
008196  784008     MOV.B W8, W0
008198  07FC9B     RCALL lcdSetCursorQ
268:                       lcdWriteStringQ("siz");
00819A  2F9DD0     MOV #0xF9DD, W0
00819C  07FCAD     RCALL lcdWriteStringQ
269:                       lcdSetCursorQ(col,2);
00819E  B3C021     MOV.B #0x2, W1
0081A0  784008     MOV.B W8, W0
0081A2  07FC96     RCALL lcdSetCursorQ
270:                       lcdWriteStringQ("d/w");
0081A4  2F9E10     MOV #0xF9E1, W0
0081A6  07FCA8     RCALL lcdWriteStringQ
271:                       lcdSetCursorQ(col,3);
0081A8  B3C031     MOV.B #0x3, W1
0081AA  784008     MOV.B W8, W0
0081AC  07FC91     RCALL lcdSetCursorQ
272:                       lcdWriteStringQ("pwr");
0081AE  2F9E50     MOV #0xF9E5, W0
0081B0  07FCA3     RCALL lcdWriteStringQ
0081B2  370018     BRA 0x81E4
273:                   } else {
274:                       // Update here
275:                       lcdSetCursorQ(col+5,1);
0081B4  444465     ADD.B W8, #0x5, W8
0081B6  B3C011     MOV.B #0x1, W1
0081B8  784008     MOV.B W8, W0
0081BA  07FC8A     RCALL lcdSetCursorQ
276:                       lcdWriteDecimalQ(param1, 3);
0081BC  200031     MOV #0x3, W1
0081BE  78400A     MOV.B W10, W0
0081C0  07FD8A     RCALL lcdWriteDecimalQ
277:                       lcdSetCursorQ(col+5,2);
0081C2  B3C021     MOV.B #0x2, W1
0081C4  784008     MOV.B W8, W0
0081C6  07FC84     RCALL lcdSetCursorQ
278:                       lcdWriteDecimalQ(param2, 3);
0081C8  200031     MOV #0x3, W1
0081CA  78400B     MOV.B W11, W0
0081CC  07FD84     RCALL lcdWriteDecimalQ
279:                       lcdSetCursorQ(col+5,3);
0081CE  B3C031     MOV.B #0x3, W1
0081D0  784008     MOV.B W8, W0
0081D2  07FC7E     RCALL lcdSetCursorQ
280:                       if(param3>=50)
0081D4  200310     MOV #0x31, W0
0081D6  548F80     SUB W9, W0, [W15]
0081D8  340003     BRA LE, 0x81E0
281:                           lcdWriteStringQ(" ON");
0081DA  2F9E90     MOV #0xF9E9, W0
0081DC  07FC8D     RCALL lcdWriteStringQ
0081DE  370002     BRA 0x81E4
282:                       else lcdWriteStringQ("OFF");
0081E0  2F9CC0     MOV #0xF9CC, W0
0081E2  07FC8A     RCALL lcdWriteStringQ
283:                   }
284:               }
0081E4  BE054F     MOV.D [--W15], W10
0081E6  BE044F     MOV.D [--W15], W8
0081E8  060000     RETURN
285:               
286:               void screenFX(void){
00856C  781F88     MOV W8, [W15++]
287:                   if(state!=laststate){
00856E  808060     MOV laststate, W0
008570  E3102A     CP 0x102A
008572  32000C     BRA Z, 0x858C
288:                       //setup here
289:                       lcdClearQ();
008574  07FAA2     RCALL lcdClearQ
290:                       lcdSetCursorQ(0,0);
008576  EB4080     CLR.B W1
008578  784001     MOV.B W1, W0
00857A  07FAAA     RCALL lcdSetCursorQ
291:                       lcdWriteStringQ("Fx1:");
00857C  2FA6B0     MOV #0xFA6B, W0
00857E  07FABC     RCALL lcdWriteStringQ
292:                       lcdSetCursorQ(10,0);
008580  EB4080     CLR.B W1
008582  B3C0A0     MOV.B #0xA, W0
008584  07FAA5     RCALL lcdSetCursorQ
293:                       lcdWriteStringQ("Fx2:");
008586  2FA700     MOV #0xFA70, W0
008588  07FAB7     RCALL lcdWriteStringQ
00858A  370011     BRA 0x85AE
294:                       
295:                   } else {
296:                       //update here 
297:                       fxModPointers[fxUnits[0]](0,  pots_scaled[FX_1], pots_scaled[FX_2], pots_scaled[FX_3]);
00858C  D4100E     SL fxUnits, WREG
00858E  226088     MOV #0x2608, W8
008590  400008     ADD W0, W8, W0
008592  780210     MOV [W0], W4
008594  8094E3     MOV 0x129C, W3
008596  8094C2     MOV 0x1298, W2
008598  8094A1     MOV pots_scaled, W1
00859A  EB0000     CLR W0
00859C  010004     CALL W4
298:                       fxModPointers[fxUnits[1]](10, pots_scaled[FX_4], pots_scaled[FX_5], pots_scaled[FX_6]);
00859E  D41010     SL 0x1010, WREG
0085A0  400408     ADD W0, W8, W8
0085A2  780218     MOV [W8], W4
0085A4  8094F3     MOV 0x129E, W3
0085A6  8094D2     MOV 0x129A, W2
0085A8  8094B1     MOV 0x1296, W1
0085AA  2000A0     MOV #0xA, W0
0085AC  010004     CALL W4
299:                   }
300:                        
301:               }
0085AE  78044F     MOV [--W15], W8
0085B0  060000     RETURN
302:               
303:               void screenUpdate(void){
304:                   fxNow=fxUnits[0]+fxUnits[1];
0085B2  808070     MOV fxUnits, W0
0085B4  B41010     ADD 0x1010, WREG
0085B6  8881B0     MOV W0, fxNow
305:                   
306:                   switch(state){
0085B8  808150     MOV 0x102A, W0
0085BA  500FE3     SUB W0, #0x3, [W15]
0085BC  32000F     BRA Z, 0x85DC
0085BE  3E0005     BRA GTU, 0x85CA
0085C0  500FE1     SUB W0, #0x1, [W15]
0085C2  320008     BRA Z, 0x85D4
0085C4  500FE2     SUB W0, #0x2, [W15]
0085C6  3A000F     BRA NZ, 0x85E6
0085C8  370007     BRA 0x85D8
0085CA  500FE4     SUB W0, #0x4, [W15]
0085CC  320009     BRA Z, 0x85E0
0085CE  500FE5     SUB W0, #0x5, [W15]
0085D0  3A000A     BRA NZ, 0x85E6
0085D2  370008     BRA 0x85E4
307:                       case start: break;
308:                       case scrnFX:            screenFX(); 
0085D4  07FFCB     RCALL screenFX
309:                       break;
0085D6  370007     BRA 0x85E6
310:                       case debugscrnPOTS:     screenDebugPots();
0085D8  07FED9     RCALL screenDebugPots
311:                       break;
0085DA  370005     BRA 0x85E6
312:                       case debugscrnFLASH:    screenDebugFlash();
0085DC  07FF5D     RCALL screenDebugFlash
313:                       break;
0085DE  370003     BRA 0x85E6
314:                       case debugscrnBUFFERS:  screenDebugBuffers();
0085E0  07FEB0     RCALL screenDebugBuffers
315:                       break;
0085E2  370001     BRA 0x85E6
316:                       case debugscrnINPUT:    screenDebugInput();
0085E4  07FF96     RCALL screenDebugInput
317:                       break;
318:                                       
319:                       default: break;
320:                   }
321:                   
322:                   laststate=state;
0085E6  F8102A     PUSH 0x102A
0085E8  F9100C     POP laststate
323:                   fxLast=fxUnits[0]+fxUnits[1];
0085EA  808070     MOV fxUnits, W0
0085EC  B41010     ADD 0x1010, WREG
0085EE  8881A0     MOV W0, fxLast
324:               }
0085F0  060000     RETURN
325:                   /*
326:                   lcdSetCursorQ(0,3);
327:                   if(hard_clipped==TRUE){                                                     //CLIP CONTROL    
328:                       lcdWriteStringQ("CLIP");
329:                       hard_clipped=FALSE;  
330:                   }
331:                   else if(TEST_SIN==TRUE)lcdWriteStringQ("SINE");
332:                   else lcdWriteStringQ("THRU");
333:                    * 
334:                    *    lcdSetCursorQ(10,3);
335:                  lcdWriteWordQ(ENCODERCNTL);
336:                   */
337:               
338:               
---  /home/fbuga/Documents/ps-040/routines.c  -----------------------------------------------------------
1:                 #include <xc.h>
2:                 #include <p33EP512GM310.h>
3:                 #include <dsp.h>
4:                 #include <stdio.h>
5:                 #include "common.h"
6:                 #include "audio.h"
7:                 #include "utilities.h"
8:                 #include "routines.h"
9:                 //CONTROL VARIABLES//
10:                extern fractional outputA[STREAMBUF], outputB[STREAMBUF];
11:                extern fractional streamA[STREAMBUF], streamB[STREAMBUF];
12:                extern unsigned int write_ptr, rw, frameReady;
13:                extern int txBufferA[STREAMBUF], txBufferB[STREAMBUF],
14:                            RxBufferA[STREAMBUF], RxBufferB[STREAMBUF];  //doesnt work as fractional
15:                
16:                //misc.
17:                volatile fractional sampinA=0, sampinB=0;
18:                
19:                volatile int rxBufferIndicator = 0;
20:                fractional *ping, *pong;
21:                
22:                //Description: This interrupt triggers at the completion of DCI output
23:                //Dependancies: initSPI2(); 
24:                void __attribute__ ((interrupt, auto_psv)) _DCIInterrupt(void){
00032A  BE9F80     MOV.D W0, [W15++]
00032C  BE9F82     MOV.D W2, [W15++]
00032E  BE9F84     MOV.D W4, [W15++]
000330  F80032     PUSH DSRPAG
000332  F80034     PUSH DSWPAG
000334  200010     MOV #0x1, W0
000336  8801A0     MOV W0, DSWPAG
000338  202000     MOV #0x200, W0
00033A  880190     MOV W0, DSRPAG
00033C  000000     NOP
25:                    static fractional sampoutA=0, sampoutB=0;
26:                    
27:                    int trashA=RXBUF0;
00033E  801480     MOV RXBUF0, W0
28:                    sampinA=RXBUF1;
000340  F80292     PUSH RXBUF1
000342  F91012     POP sampinA
29:                    int trashB=RXBUF2;
000344  8014A0     MOV RXBUF2, W0
30:                    sampinB=RXBUF3;
000346  F80296     PUSH RXBUF3
000348  F91014     POP sampinB
31:                    TXBUF0=TXBUF1=sampoutA;                                    //output buffered sample to DAC
00034A  F8101E     PUSH sampoutA
00034C  F9029A     POP TXBUF1
00034E  F8029A     PUSH TXBUF1
000350  F90298     POP TXBUF0
32:                    TXBUF2=TXBUF3=sampoutB;
000352  F8101C     PUSH sampoutB
000354  F9029E     POP TXBUF3
000356  F8029E     PUSH TXBUF3
000358  F9029C     POP TXBUF2
33:                
34:                    __builtin_btg(&sampinA, 15);                             //convert to Q1.15 compatible format
00035A  210120     MOV #0x1012, W0
00035C  A2F010     BTG [W0], #15
35:                    __builtin_btg(&sampinB, 15);                             //convert to Q1.15 compatible format
00035E  210140     MOV #0x1014, W0
000360  A2F010     BTG [W0], #15
36:                    
37:                    if(write_ptr== STREAMBUF){                       //reset pointer when out of bounds
000362  201000     MOV #0x100, W0
000364  E31000     CP write_ptr
000366  3A0004     BRA NZ, 0x370
38:                        write_ptr=0;
000368  EF3000     CLR write_ptr
39:                        __builtin_btg(&rw,0);
00036A  AA1002     BTG rw, #0
40:                        frameReady=1;
00036C  200010     MOV #0x1, W0
00036E  888020     MOV W0, frameReady
41:                    }
42:                   
43:                    if(rw){
000370  E21002     CP0 rw
000372  320019     BRA Z, 0x3A6
44:                        streamB[write_ptr]=sampinA;
000374  808000     MOV write_ptr, W0
000376  B80161     MUL.UU W0, #1, W2
000378  410102     ADD W2, W2, W2
00037A  498183     ADDC W3, W3, W3
00037C  218C44     MOV #0x18C4, W4
00037E  420082     ADD W4, W2, W1
000380  808095     MOV sampinA, W5
000382  780885     MOV W5, [W1]
45:                        sampoutA=outputA[write_ptr++]; 
000384  212C41     MOV #0x12C4, W1
000386  408102     ADD W1, W2, W2
000388  780112     MOV [W2], W2
00038A  8880F2     MOV W2, sampoutA
00038C  E80000     INC W0, W0
46:                        streamB[write_ptr]=sampinB;
00038E  B80161     MUL.UU W0, #1, W2
000390  410102     ADD W2, W2, W2
000392  498183     ADDC W3, W3, W3
000394  420202     ADD W4, W2, W4
000396  8080A5     MOV sampinB, W5
000398  780A05     MOV W5, [W4]
47:                        sampoutB=outputA[write_ptr++];  
00039A  408102     ADD W1, W2, W2
00039C  780112     MOV [W2], W2
00039E  8880E2     MOV W2, sampoutB
0003A0  E80000     INC W0, W0
0003A2  888000     MOV W0, write_ptr
0003A4  370018     BRA 0x3D6
48:                    } else {
49:                        streamA[write_ptr]=sampinA; 
0003A6  808000     MOV write_ptr, W0
0003A8  B80161     MUL.UU W0, #1, W2
0003AA  410102     ADD W2, W2, W2
0003AC  498183     ADDC W3, W3, W3
0003AE  216C44     MOV #0x16C4, W4
0003B0  420082     ADD W4, W2, W1
0003B2  808095     MOV sampinA, W5
0003B4  780885     MOV W5, [W1]
50:                        sampoutA=outputB[write_ptr++];  
0003B6  214C41     MOV #0x14C4, W1
0003B8  408102     ADD W1, W2, W2
0003BA  780112     MOV [W2], W2
0003BC  8880F2     MOV W2, sampoutA
0003BE  E80000     INC W0, W0
51:                        streamA[write_ptr]=sampinB; 
0003C0  B80161     MUL.UU W0, #1, W2
0003C2  410102     ADD W2, W2, W2
0003C4  498183     ADDC W3, W3, W3
0003C6  420202     ADD W4, W2, W4
0003C8  8080A5     MOV sampinB, W5
0003CA  780A05     MOV W5, [W4]
52:                        sampoutB=outputB[write_ptr++];  
0003CC  408102     ADD W1, W2, W2
0003CE  780112     MOV [W2], W2
0003D0  8880E2     MOV W2, sampoutB
0003D2  E80000     INC W0, W0
0003D4  888000     MOV W0, write_ptr
53:                    } 
54:                    
55:                    _DCIIF=0;
0003D6  A98807     BCLR 0x807, #4
56:                }
0003D8  F90034     POP DSWPAG
0003DA  F90032     POP DSRPAG
0003DC  BE024F     MOV.D [--W15], W4
0003DE  BE014F     MOV.D [--W15], W2
0003E0  BE004F     MOV.D [--W15], W0
0003E2  064000     RETFIE
57:                
58:                void __attribute__((__interrupt__, auto_psv)) _DMA0Interrupt(void) {
0003E4  F80032     PUSH DSRPAG
0003E6  F80034     PUSH DSWPAG
0003E8  781F88     MOV W8, [W15++]
0003EA  200018     MOV #0x1, W8
0003EC  8801A8     MOV W8, DSWPAG
0003EE  202008     MOV #0x200, W8
0003F0  880198     MOV W8, DSRPAG
0003F2  000000     NOP
0003F4  78044F     MOV [--W15], W8
59:                    //static unsigned int BufferCount = 0; // Keep record of the buffer that contains TX data
60:                    //if(BufferCount == 0);
61:                    //{
62:                        //TxData(TxBufferA); // Transmit SPI data in DMA RAM Primary buffer
63:                        //TxData(TxBufferB); // Transmit SPI data in DMA RAM Secondary buffer
64:                    //}
65:                    //BufferCount ^= 1;
66:                    IFS0bits.DMA0IF = 0; // Clear the DMA0 Interrupt flag
0003F6  A98800     BCLR IFS0, #4
67:                }
0003F8  F90034     POP DSWPAG
0003FA  F90032     POP DSRPAG
0003FC  064000     RETFIE
68:                
69:                void __attribute__((__interrupt__, auto_psv)) _DMA1Interrupt(void){
0003FE  F80032     PUSH DSRPAG
000400  F80034     PUSH DSWPAG
000402  781F88     MOV W8, [W15++]
000404  200018     MOV #0x1, W8
000406  8801A8     MOV W8, DSWPAG
000408  202008     MOV #0x200, W8
00040A  880198     MOV W8, DSRPAG
00040C  000000     NOP
00040E  78044F     MOV [--W15], W8
70:                    //static unsigned int BufferCount = 0; // Keep record of the buffer that contains RX data
71:                    //if(BufferCount == 0) ;
72:                        //ProcessRxData(TxBufferA); // Process received SPI data in DMA RAM Primary buffer
73:                    //else;
74:                        //ProcessRxData(TxBufferB); // Process received SPI data in DMA RAM Secondary buffer
75:                 
76:                    //BufferCount ^= 1;
77:                    IFS0bits.DMA1IF = 0; // Clear the DMA1 Interrupt flag
000410  A9C801     BCLR 0x801, #6
78:                }
000412  F90034     POP DSWPAG
000414  F90032     POP DSRPAG
000416  064000     RETFIE
79:                
80:                /*
81:                //Description: This interrupt handles UART reception
82:                //Dependencies: initUART1();
83:                void __attribute__ ((interrupt, auto_psv)) _U1RXInterrupt(void){
84:                    unsigned char trash;
85:                    trash=U1RXREG;
86:                    printf("RECIEVED: %d\r\n", trash);
87:                    IFS0bits.U1RXIF = 0;            //clear flag, restart
88:                }
89:                
90:                //Description: This interrupt handles UART transmission
91:                //Dependencies: initUART1();
92:                void __attribute__ ((interrupt, auto_psv)) _U1TXInterrupt(void){
93:                    YLED=~YLED;
94:                    IFS0bits.U1TXIF = 0;            //clear flag, restart
95:                } 
96:                  
97:                void __attribute__ ((interrupt, auto_psv)) _SPI3Interrupt(void){
98:                    //SEG_SEL=1;
99:                    int trash=SPI3BUF;
100:                   SPI3STATbits.SPIROV = 0;                                //Clear SPI1 receive overflow flag if set
101:                   IFS5bits.SPI3IF=0;
102:                   
103:               }
104:                */
---  /home/fbuga/Documents/ps-040/plcd.c  ---------------------------------------------------------------
1:                 /*
2:                  * File:   plcd.c
3:                  * Author: root
4:                  *
5:                  * Created on January 10, 2018, 4:48 PM
6:                  */
7:                 
8:                 
9:                 #include "xc.h"
10:                #include "plcd.h"
11:                #include "common.h"
12:                #include "utilities.h"
13:                #include "screens.h"
14:                
15:                extern unsigned char pad[BUTTONS];
16:                int lcdBuf[LCDBUF+1]={0};
17:                int *lcdWritePtr=lcdBuf;
18:                int *lcdReadPtr=lcdBuf;
19:                
20:                // There are write and command macros in the header, make sure these match.
21:                void lcdWriteQ(unsigned char data){
22:                    *lcdWritePtr++=data|0x0000;
007A90  FB8000     ZE W0, W0
007A92  808181     MOV 0x1030, W1
007A94  781880     MOV W0, [W1++]
007A96  888181     MOV W1, 0x1030
23:                    if(lcdWritePtr==&lcdBuf[LCDBUF])
007A98  222E80     MOV #0x22E8, W0
007A9A  508F80     SUB W1, W0, [W15]
007A9C  3A0002     BRA NZ, 0x7AA2
24:                        lcdWritePtr=lcdBuf;
007A9E  B12000     SUB #0x200, W0
007AA0  888180     MOV W0, 0x1030
25:                }
007AA2  060000     RETURN
26:                
27:                // There are write and command macros in the header, make sure these match.
28:                void lcdCommandQ(unsigned char data){
29:                    *lcdWritePtr++=data|0x0100;     //flag for rs=1
007AA4  FB8000     ZE W0, W0
007AA6  808181     MOV 0x1030, W1
007AA8  A08000     BSET W0, #8
007AAA  781880     MOV W0, [W1++]
007AAC  888181     MOV W1, 0x1030
30:                    if(lcdWritePtr==&lcdBuf[LCDBUF])
007AAE  222E80     MOV #0x22E8, W0
007AB0  508F80     SUB W1, W0, [W15]
007AB2  3A0002     BRA NZ, 0x7AB8
31:                        lcdWritePtr=lcdBuf;
007AB4  B12000     SUB #0x200, W0
007AB6  888180     MOV W0, 0x1030
32:                }
007AB8  060000     RETURN
33:                
34:                void lcdClearQ(void){
35:                    *lcdWritePtr++=LCD_CLEARDISPLAY|0x0300;     //flag for rs=1 & long delay
007ABA  808180     MOV 0x1030, W0
007ABC  203011     MOV #0x301, W1
007ABE  781801     MOV W1, [W0++]
007AC0  888180     MOV W0, 0x1030
36:                    if(lcdWritePtr==&lcdBuf[LCDBUF])
007AC2  222E81     MOV #0x22E8, W1
007AC4  500F81     SUB W0, W1, [W15]
007AC6  3A0003     BRA NZ, 0x7ACE
37:                        lcdWritePtr=lcdBuf;
007AC8  2FE000     MOV #0xFE00, W0
007ACA  400001     ADD W0, W1, W0
007ACC  888180     MOV W0, 0x1030
38:                }
007ACE  060000     RETURN
39:                
40:                void lcdSetCursorQ(unsigned char col, unsigned char row) {
007AD0  784101     MOV.B W1, W2
41:                  static unsigned char offsets[] = { 0x00, 0x40, 0x14, 0x54 };
42:                  if (row > 3) {
43:                    row = 3;
44:                  }
45:                  *lcdWritePtr++=(LCD_SETDDRAMADDR | (col + offsets[row]))|0x0100;  //flag for rs=0 
007AD2  808181     MOV 0x1030, W1
007AD4  514FE3     SUB.B W2, #0x3, [W15]
007AD6  360001     BRA LEU, 0x7ADA
007AD8  B3C032     MOV.B #0x3, W2
007ADA  FB8102     ZE W2, W2
007ADC  2FA8C3     MOV #0xFA8C, W3
007ADE  418102     ADD W3, W2, W2
007AE0  FB8112     ZE [W2], W2
007AE2  FB8000     ZE W0, W0
007AE4  410000     ADD W2, W0, W0
007AE6  201802     MOV #0x180, W2
007AE8  701882     IOR W0, W2, [W1++]
007AEA  888181     MOV W1, 0x1030
46:                    if(lcdWritePtr==&lcdBuf[LCDBUF]) 
007AEC  222E80     MOV #0x22E8, W0
007AEE  508F80     SUB W1, W0, [W15]
007AF0  3A0002     BRA NZ, 0x7AF6
47:                        lcdWritePtr=lcdBuf; 
007AF2  B12000     SUB #0x200, W0
007AF4  888180     MOV W0, 0x1030
48:                }
007AF6  060000     RETURN
49:                
50:                void lcdWriteStringQ(char *string) {
007B06  E80200     INC W0, W4
007B08  EB0280     CLR W5
51:                    char *it = string;
52:                    for (; *it; it++) {
007AF8  784090     MOV.B [W0], W1
007AFA  E00401     CP0.B W1
007AFC  320012     BRA Z, 0x7B22
007AFE  EB0100     CLR W2
007B18  410004     ADD W2, W4, W0
007B1A  784090     MOV.B [W0], W1
007B1C  E80102     INC W2, W2
007B1E  E00401     CP0.B W1
007B20  3AFFF4     BRA NZ, 0x7B0A
53:                        lcdWriteQMac(*it);
007B00  222E83     MOV #0x22E8, W3
007B02  2FE006     MOV #0xFE00, W6
007B04  430303     ADD W6, W3, W6
007B0A  FB0081     SE W1, W1
007B0C  808180     MOV 0x1030, W0
007B0E  781801     MOV W1, [W0++]
007B10  888180     MOV W0, 0x1030
007B12  500F83     SUB W0, W3, [W15]
007B14  3A0001     BRA NZ, 0x7B18
007B16  888186     MOV W6, 0x1030
54:                  }
55:                }
007B22  060000     RETURN
56:                
57:                void lcdCustomSymbols(void){
58:                    int i=0;
59:                    lcdCommandQMac(0x40);
007B24  808180     MOV 0x1030, W0
007B26  201401     MOV #0x140, W1
007B28  781801     MOV W1, [W0++]
007B2A  888180     MOV W0, 0x1030
007B2C  222E81     MOV #0x22E8, W1
007B2E  500F81     SUB W0, W1, [W15]
007B30  3A0003     BRA NZ, 0x7B38
007B32  2FE000     MOV #0xFE00, W0
007B34  400001     ADD W0, W1, W0
007B36  888180     MOV W0, 0x1030
60:                    Delay_us(200);
007B38  200C80     MOV #0xC8, W0
007B3A  070768     RCALL Delay_us
61:                   // for(; i<8; i++)lcdWriteString(loadingOne[i]);
62:                    //lcdWriteString(loadingTwo);
63:                    //lcdWriteString(loadingThree);
64:                    //lcdWriteString(loadingFour);
65:                }
007B3C  060000     RETURN
66:                
67:                void lcdWriteWordQ(int word){
007B3E  FA0004     LNK #0x4
007B80  200011     MOV #0x1, W1
007B82  578164     SUB W15, #0x4, W2
007B84  B81361     MUL.UU W2, #1, W6
007B86  DD0942     SL W1, #2, W2
007B8C  DE89CF     ASR W1, #15, W3
007B8E  408206     ADD W1, W6, W4
007B90  498287     ADDC W3, W7, W5
68:                    int i;
69:                    char inchar[4];
70:                    
71:                    if(word<0) {
007B40  E00000     CP0 W0
007B42  3D000C     BRA GE, 0x7B5C
72:                        lcdWriteQMac('-');
007B44  808181     MOV 0x1030, W1
007B46  2002D2     MOV #0x2D, W2
007B48  781882     MOV W2, [W1++]
007B4A  888181     MOV W1, 0x1030
007B4C  222E82     MOV #0x22E8, W2
007B4E  508F82     SUB W1, W2, [W15]
007B50  3A0003     BRA NZ, 0x7B58
007B52  2FE001     MOV #0xFE00, W1
007B54  408082     ADD W1, W2, W1
007B56  888181     MOV W1, 0x1030
73:                        word=~word+1;
007B58  EA0000     NEG W0, W0
007B5A  37000A     BRA 0x7B70
74:                    }else lcdWriteQMac(' ');
007B5C  808181     MOV 0x1030, W1
007B5E  200202     MOV #0x20, W2
007B60  781882     MOV W2, [W1++]
007B62  888181     MOV W1, 0x1030
007B64  222E82     MOV #0x22E8, W2
007B66  508F82     SUB W1, W2, [W15]
007B68  3A0003     BRA NZ, 0x7B70
007B6A  2FE001     MOV #0xFE00, W1
007B6C  408082     ADD W1, W2, W1
007B6E  888181     MOV W1, 0x1030
75:                   
76:                   inchar[0] = word&0x000F; 
007B70  6040EF     AND.B W0, #0xF, W1
77:                   if (inchar[0] > 9) 
007B72  50CFE9     SUB.B W1, #0x9, [W15]
007B74  340003     BRA LE, 0x7B7C
78:                       inchar[0]+=55;
007B76  B04371     ADD.B #0x37, W1
007B78  9FFFC1     MOV.B W1, [W15-4]
007B7A  370002     BRA 0x7B80
79:                   else inchar[0]+=48;
007B7C  B04301     ADD.B #0x30, W1
007B7E  9FFFC1     MOV.B W1, [W15-4]
80:                   
81:                   for(i=1; i<4; i++){ 
007BA2  E80081     INC W1, W1
007BA4  508FE4     SUB W1, #0x4, [W15]
007BA6  3AFFEF     BRA NZ, 0x7B86
82:                      inchar[i] = ((word>>(i*4))&0x0000F); 
007B88  DE8102     ASR W0, W2, W2
007B8A  61416F     AND.B W2, #0xF, W2
007B92  784A02     MOV.B W2, [W4]
83:                      if (inchar[i] > 9) 
007B94  514FE9     SUB.B W2, #0x9, [W15]
007B96  340003     BRA LE, 0x7B9E
84:                          inchar[i]+=55;
007B98  B3C373     MOV.B #0x37, W3
007B9A  414A03     ADD.B W2, W3, [W4]
007B9C  370002     BRA 0x7BA2
85:                      else inchar[i]+=48;
007B9E  B3C303     MOV.B #0x30, W3
007BA0  414A03     ADD.B W2, W3, [W4]
86:                   } 
87:                   lcdWriteQMac(inchar[3]);
007BA8  97F8FF     MOV.B [W15-1], W1
007BAA  FB0081     SE W1, W1
007BAC  808180     MOV 0x1030, W0
007BAE  781801     MOV W1, [W0++]
007BB0  222E81     MOV #0x22E8, W1
007BB2  500F81     SUB W0, W1, [W15]
007BB4  3A000A     BRA NZ, 0x7BCA
88:                   lcdWriteQMac(inchar[2]);
007BB6  97F86F     MOV.B [W15-2], W0
007BB8  FB0000     SE W0, W0
007BBA  890740     MOV W0, lcdBuf
007BCA  97F8EF     MOV.B [W15-2], W1
007BCC  FB0081     SE W1, W1
007BCE  781801     MOV W1, [W0++]
007BD0  888180     MOV W0, 0x1030
007BD2  222E81     MOV #0x22E8, W1
007BD4  500F81     SUB W0, W1, [W15]
007BD6  3A0009     BRA NZ, 0x7BEA
89:                   lcdWriteQMac(inchar[1]);
007BBC  97F85F     MOV.B [W15-3], W0
007BBE  FB0000     SE W0, W0
007BC0  890750     MOV W0, 0x20EA
007BC2  2FE040     MOV #0xFE04, W0
007BC4  400001     ADD W0, W1, W0
007BC6  888180     MOV W0, 0x1030
007BC8  37001F     BRA 0x7C08
007BD8  97F85F     MOV.B [W15-3], W0
007BDA  FB0000     SE W0, W0
007BDC  890740     MOV W0, lcdBuf
007BEA  97F8DF     MOV.B [W15-3], W1
007BEC  FB0081     SE W1, W1
007BEE  808180     MOV 0x1030, W0
007BF0  781801     MOV W1, [W0++]
007BF2  888180     MOV W0, 0x1030
007BF4  222E81     MOV #0x22E8, W1
007BF6  500F81     SUB W0, W1, [W15]
007BF8  3A0007     BRA NZ, 0x7C08
90:                   lcdWriteQMac(inchar[0]);
007BDE  97F8CF     MOV.B [W15-4], W1
007BE0  FB0001     SE W1, W0
007BE2  890750     MOV W0, 0x20EA
007BE4  220EC0     MOV #0x20EC, W0
007BE6  888180     MOV W0, 0x1030
007BE8  37001A     BRA 0x7C1E
007BFA  97F94F     MOV.B [W15-4], W2
007BFC  FB0002     SE W2, W0
007BFE  890740     MOV W0, lcdBuf
007C00  2FE020     MOV #0xFE02, W0
007C02  400001     ADD W0, W1, W0
007C04  888180     MOV W0, 0x1030
007C06  37000B     BRA 0x7C1E
007C08  97F9CF     MOV.B [W15-4], W3
007C0A  FB0083     SE W3, W1
007C0C  808180     MOV 0x1030, W0
007C0E  781801     MOV W1, [W0++]
007C10  888180     MOV W0, 0x1030
007C12  222E81     MOV #0x22E8, W1
007C14  500F81     SUB W0, W1, [W15]
007C16  3A0003     BRA NZ, 0x7C1E
007C18  2FE000     MOV #0xFE00, W0
007C1A  400001     ADD W0, W1, W0
007C1C  888180     MOV W0, 0x1030
91:                }
007C1E  FA8000     ULNK
007C20  060000     RETURN
92:                
93:                void lcdWriteWordUnsignedQ(unsigned int word){
007C22  FA0004     LNK #0x4
007C34  200011     MOV #0x1, W1
007C36  578164     SUB W15, #0x4, W2
007C38  B81361     MUL.UU W2, #1, W6
007C3A  DD0942     SL W1, #2, W2
007C40  DE89CF     ASR W1, #15, W3
007C42  408206     ADD W1, W6, W4
007C44  498287     ADDC W3, W7, W5
94:                    int i;
95:                    char inchar[4];
96:                    
97:                   inchar[0] = word&0x000F; 
007C24  6040EF     AND.B W0, #0xF, W1
98:                   if (inchar[0] > 9) 
007C26  50CFE9     SUB.B W1, #0x9, [W15]
007C28  340003     BRA LE, 0x7C30
99:                       inchar[0]+=55;
007C2A  B04371     ADD.B #0x37, W1
007C2C  9FFFC1     MOV.B W1, [W15-4]
007C2E  370002     BRA 0x7C34
100:                  else inchar[0]+=48;
007C30  B04301     ADD.B #0x30, W1
007C32  9FFFC1     MOV.B W1, [W15-4]
101:                  
102:                  for(i=1; i<4; i++){ 
007C56  E80081     INC W1, W1
007C58  508FE4     SUB W1, #0x4, [W15]
007C5A  3AFFEF     BRA NZ, 0x7C3A
103:                     inchar[i] = ((word>>(i*4))&0x0000F); 
007C3C  DE0102     LSR W0, W2, W2
007C3E  61416F     AND.B W2, #0xF, W2
007C46  784A02     MOV.B W2, [W4]
104:                     if (inchar[i] > 9) 
007C48  514FE9     SUB.B W2, #0x9, [W15]
007C4A  340003     BRA LE, 0x7C52
105:                         inchar[i]+=55;
007C4C  B3C373     MOV.B #0x37, W3
007C4E  414A03     ADD.B W2, W3, [W4]
007C50  370002     BRA 0x7C56
106:                     else inchar[i]+=48;
007C52  B3C303     MOV.B #0x30, W3
007C54  414A03     ADD.B W2, W3, [W4]
107:                  } 
108:                  lcdWriteQMac(inchar[3]);
007C5C  97F8FF     MOV.B [W15-1], W1
007C5E  FB0081     SE W1, W1
007C60  808180     MOV 0x1030, W0
007C62  781801     MOV W1, [W0++]
007C64  222E81     MOV #0x22E8, W1
007C66  500F81     SUB W0, W1, [W15]
007C68  3A000A     BRA NZ, 0x7C7E
109:                  lcdWriteQMac(inchar[2]);
007C6A  97F86F     MOV.B [W15-2], W0
007C6C  FB0000     SE W0, W0
007C6E  890740     MOV W0, lcdBuf
007C7E  97F8EF     MOV.B [W15-2], W1
007C80  FB0081     SE W1, W1
007C82  781801     MOV W1, [W0++]
007C84  888180     MOV W0, 0x1030
007C86  222E81     MOV #0x22E8, W1
007C88  500F81     SUB W0, W1, [W15]
007C8A  3A0009     BRA NZ, 0x7C9E
110:                  lcdWriteQMac(inchar[1]);
007C70  97F85F     MOV.B [W15-3], W0
007C72  FB0000     SE W0, W0
007C74  890750     MOV W0, 0x20EA
007C76  2FE040     MOV #0xFE04, W0
007C78  400001     ADD W0, W1, W0
007C7A  888180     MOV W0, 0x1030
007C7C  37001F     BRA 0x7CBC
007C8C  97F85F     MOV.B [W15-3], W0
007C8E  FB0000     SE W0, W0
007C90  890740     MOV W0, lcdBuf
007C9E  97F8DF     MOV.B [W15-3], W1
007CA0  FB0081     SE W1, W1
007CA2  808180     MOV 0x1030, W0
007CA4  781801     MOV W1, [W0++]
007CA6  888180     MOV W0, 0x1030
007CA8  222E81     MOV #0x22E8, W1
007CAA  500F81     SUB W0, W1, [W15]
007CAC  3A0007     BRA NZ, 0x7CBC
111:                  lcdWriteQMac(inchar[0]);
007C92  97F8CF     MOV.B [W15-4], W1
007C94  FB0001     SE W1, W0
007C96  890750     MOV W0, 0x20EA
007C98  220EC0     MOV #0x20EC, W0
007C9A  888180     MOV W0, 0x1030
007C9C  37001A     BRA 0x7CD2
007CAE  97F94F     MOV.B [W15-4], W2
007CB0  FB0002     SE W2, W0
007CB2  890740     MOV W0, lcdBuf
007CB4  2FE020     MOV #0xFE02, W0
007CB6  400001     ADD W0, W1, W0
007CB8  888180     MOV W0, 0x1030
007CBA  37000B     BRA 0x7CD2
007CBC  97F9CF     MOV.B [W15-4], W3
007CBE  FB0083     SE W3, W1
007CC0  808180     MOV 0x1030, W0
007CC2  781801     MOV W1, [W0++]
007CC4  888180     MOV W0, 0x1030
007CC6  222E81     MOV #0x22E8, W1
007CC8  500F81     SUB W0, W1, [W15]
007CCA  3A0003     BRA NZ, 0x7CD2
007CCC  2FE000     MOV #0xFE00, W0
007CCE  400001     ADD W0, W1, W0
007CD0  888180     MOV W0, 0x1030
112:               }
007CD2  FA8000     ULNK
007CD4  060000     RETURN
113:               
114:               void lcdWriteDecimalQ(char word, int digits){
007CD6  FA0000     LNK #0x0
007CD8  781F88     MOV W8, [W15++]
007CDA  780381     MOV W1, W7
115:                   const char maxdigits = 4;
116:                   char result[maxdigits];
007CDE  4787E6     ADD W15, #0x6, W15
007CE0  780186     MOV W6, W3
117:                   char i = 3;
007CE2  B3C032     MOV.B #0x3, W2
118:                   do {
119:                       result[i] = '0' + word % 10;
007CE4  2000A4     MOV #0xA, W4
007CE6  FB0282     SE W2, W5
007CE8  418285     ADD W3, W5, W5
007CEA  FB0000     SE W0, W0
007CEC  090011     REPEAT #0x11
007CEE  D80004     DIV.SW W0, W4
007CF0  B3C308     MOV.B #0x30, W8
007CF2  40CA88     ADD.B W1, W8, [W5]
120:                       word /= 10;
121:                       i--;
007CF4  E94102     DEC.B W2, W2
122:                   }
123:                   while (word > 0);
007CF6  E00400     CP0.B W0
007CF8  3CFFF6     BRA GT, 0x7CE6
124:                   while (i>=0) result[i--] = ' '; 
007CFA  E00402     CP0.B W2
007CFC  350007     BRA LT, 0x7D0C
007CFE  B3C204     MOV.B #0x20, W4
007D00  FB0002     SE W2, W0
007D02  418000     ADD W3, W0, W0
007D04  784804     MOV.B W4, [W0]
007D06  E94102     DEC.B W2, W2
007D08  414FE1     ADD.B W2, #0x1, [W15]
007D0A  3AFFFA     BRA NZ, 0x7D00
125:                 
126:                   for (i=maxdigits-digits; i<maxdigits; i++) {
007D0C  B3C041     MOV.B #0x4, W1
007D0E  50C087     SUB.B W1, W7, W1
007D10  50CFE3     SUB.B W1, #0x3, [W15]
007D12  3C000F     BRA GT, 0x7D32
007D2C  E84081     INC.B W1, W1
007D2E  50CFE4     SUB.B W1, #0x4, [W15]
007D30  3AFFF4     BRA NZ, 0x7D1A
127:                       lcdWriteQMac(result[i]);
007D14  222E84     MOV #0x22E8, W4
007D16  2FE005     MOV #0xFE00, W5
007D18  428284     ADD W5, W4, W5
007D1A  FB0001     SE W1, W0
007D1C  418000     ADD W3, W0, W0
007D1E  FB0110     SE [W0], W2
007D20  808180     MOV 0x1030, W0
007D22  781802     MOV W2, [W0++]
007D24  888180     MOV W0, 0x1030
007D26  500F84     SUB W0, W4, [W15]
007D28  3A0001     BRA NZ, 0x7D2C
007D2A  888185     MOV W5, 0x1030
128:                   }
129:               }
007CDC  78030F     MOV W15, W6
007D32  780786     MOV W6, W15
007D34  78044F     MOV [--W15], W8
007D36  FA8000     ULNK
007D38  060000     RETURN
130:               
131:               //4x4 pad debug
132:               void lcdDrawPads(unsigned char col){
007D3A  BE9F88     MOV.D W8, [W15++]
007D3C  784480     MOV.B W0, W9
133:                   unsigned char block=0xFF;
007D4C  EBC400     SETM.B W8
134:                   if(!pad[34]||!pad[16]) block='*';
007D3E  B3C2A8     MOV.B #0x2A, W8
007D40  21AE60     MOV #0x1AE6, W0
007D42  E00410     CP0.B [W0]
007D44  320004     BRA Z, 0x7D4E
007D46  500072     SUB W0, #0x12, W0
007D48  E00410     CP0.B [W0]
007D4A  320001     BRA Z, 0x7D4E
135:                   
136:                   lcdSetCursorQ(col, 0);
007D4E  EB4080     CLR.B W1
007D50  784009     MOV.B W9, W0
007D52  07FEBE     RCALL lcdSetCursorQ
137:                   if(!pad[12]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
007D54  21AD00     MOV #0x1AD0, W0
007D56  E00410     CP0.B [W0]
007D58  3A000B     BRA NZ, 0x7D70
007D5A  808180     MOV 0x1030, W0
007D5C  200201     MOV #0x20, W1
007D5E  781801     MOV W1, [W0++]
007D60  888180     MOV W0, 0x1030
007D62  222E81     MOV #0x22E8, W1
007D64  500F81     SUB W0, W1, [W15]
007D66  3A000E     BRA NZ, 0x7D84
007D68  2FE000     MOV #0xFE00, W0
007D6A  400001     ADD W0, W1, W0
007D6C  888180     MOV W0, 0x1030
007D6E  37000A     BRA 0x7D84
007D70  FB8088     ZE W8, W1
007D72  808180     MOV 0x1030, W0
007D74  781801     MOV W1, [W0++]
007D76  888180     MOV W0, 0x1030
007D78  222E81     MOV #0x22E8, W1
007D7A  500F81     SUB W0, W1, [W15]
007D7C  3A0003     BRA NZ, 0x7D84
007D7E  2FE000     MOV #0xFE00, W0
007D80  400001     ADD W0, W1, W0
007D82  888180     MOV W0, 0x1030
138:                   if(!pad[13]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
007D84  21AD10     MOV #0x1AD1, W0
007D86  E00410     CP0.B [W0]
007D88  3A000B     BRA NZ, 0x7DA0
007D8A  808180     MOV 0x1030, W0
007D8C  200201     MOV #0x20, W1
007D8E  781801     MOV W1, [W0++]
007D90  888180     MOV W0, 0x1030
007D92  222E81     MOV #0x22E8, W1
007D94  500F81     SUB W0, W1, [W15]
007D96  3A000E     BRA NZ, 0x7DB4
007D98  2FE000     MOV #0xFE00, W0
007D9A  400001     ADD W0, W1, W0
007D9C  888180     MOV W0, 0x1030
007D9E  37000A     BRA 0x7DB4
007DA0  FB8088     ZE W8, W1
007DA2  808180     MOV 0x1030, W0
007DA4  781801     MOV W1, [W0++]
007DA6  888180     MOV W0, 0x1030
007DA8  222E81     MOV #0x22E8, W1
007DAA  500F81     SUB W0, W1, [W15]
007DAC  3A0003     BRA NZ, 0x7DB4
007DAE  2FE000     MOV #0xFE00, W0
007DB0  400001     ADD W0, W1, W0
007DB2  888180     MOV W0, 0x1030
139:                   if(!pad[14]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
007DB4  21AD20     MOV #0x1AD2, W0
007DB6  E00410     CP0.B [W0]
007DB8  3A000B     BRA NZ, 0x7DD0
007DBA  808180     MOV 0x1030, W0
007DBC  200201     MOV #0x20, W1
007DBE  781801     MOV W1, [W0++]
007DC0  888180     MOV W0, 0x1030
007DC2  222E81     MOV #0x22E8, W1
007DC4  500F81     SUB W0, W1, [W15]
007DC6  3A000E     BRA NZ, 0x7DE4
007DC8  2FE000     MOV #0xFE00, W0
007DCA  400001     ADD W0, W1, W0
007DCC  888180     MOV W0, 0x1030
007DCE  37000A     BRA 0x7DE4
007DD0  FB8088     ZE W8, W1
007DD2  808180     MOV 0x1030, W0
007DD4  781801     MOV W1, [W0++]
007DD6  888180     MOV W0, 0x1030
007DD8  222E81     MOV #0x22E8, W1
007DDA  500F81     SUB W0, W1, [W15]
007DDC  3A0003     BRA NZ, 0x7DE4
007DDE  2FE000     MOV #0xFE00, W0
007DE0  400001     ADD W0, W1, W0
007DE2  888180     MOV W0, 0x1030
140:                   if(!pad[15]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
007DE4  21AD30     MOV #0x1AD3, W0
007DE6  E00410     CP0.B [W0]
007DE8  3A000B     BRA NZ, 0x7E00
007DEA  808180     MOV 0x1030, W0
007DEC  200201     MOV #0x20, W1
007DEE  781801     MOV W1, [W0++]
007DF0  888180     MOV W0, 0x1030
007DF2  222E81     MOV #0x22E8, W1
007DF4  500F81     SUB W0, W1, [W15]
007DF6  3A000E     BRA NZ, 0x7E14
007DF8  2FE000     MOV #0xFE00, W0
007DFA  400001     ADD W0, W1, W0
007DFC  888180     MOV W0, 0x1030
007DFE  37000A     BRA 0x7E14
007E00  FB8088     ZE W8, W1
007E02  808180     MOV 0x1030, W0
007E04  781801     MOV W1, [W0++]
007E06  888180     MOV W0, 0x1030
007E08  222E81     MOV #0x22E8, W1
007E0A  500F81     SUB W0, W1, [W15]
007E0C  3A0003     BRA NZ, 0x7E14
007E0E  2FE000     MOV #0xFE00, W0
007E10  400001     ADD W0, W1, W0
007E12  888180     MOV W0, 0x1030
141:                   lcdSetCursorQ(col, 1);
007E14  B3C011     MOV.B #0x1, W1
007E16  784009     MOV.B W9, W0
007E18  07FE5B     RCALL lcdSetCursorQ
142:                   if(!pad[8]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
007E1A  21ACC0     MOV #0x1ACC, W0
007E1C  E00410     CP0.B [W0]
007E1E  3A000B     BRA NZ, 0x7E36
007E20  808180     MOV 0x1030, W0
007E22  200201     MOV #0x20, W1
007E24  781801     MOV W1, [W0++]
007E26  888180     MOV W0, 0x1030
007E28  222E81     MOV #0x22E8, W1
007E2A  500F81     SUB W0, W1, [W15]
007E2C  3A000E     BRA NZ, 0x7E4A
007E2E  2FE000     MOV #0xFE00, W0
007E30  400001     ADD W0, W1, W0
007E32  888180     MOV W0, 0x1030
007E34  37000A     BRA 0x7E4A
007E36  FB8088     ZE W8, W1
007E38  808180     MOV 0x1030, W0
007E3A  781801     MOV W1, [W0++]
007E3C  888180     MOV W0, 0x1030
007E3E  222E81     MOV #0x22E8, W1
007E40  500F81     SUB W0, W1, [W15]
007E42  3A0003     BRA NZ, 0x7E4A
007E44  2FE000     MOV #0xFE00, W0
007E46  400001     ADD W0, W1, W0
007E48  888180     MOV W0, 0x1030
143:                   if(!pad[9]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
007E4A  21ACD0     MOV #0x1ACD, W0
007E4C  E00410     CP0.B [W0]
007E4E  3A000B     BRA NZ, 0x7E66
007E50  808180     MOV 0x1030, W0
007E52  200201     MOV #0x20, W1
007E54  781801     MOV W1, [W0++]
007E56  888180     MOV W0, 0x1030
007E58  222E81     MOV #0x22E8, W1
007E5A  500F81     SUB W0, W1, [W15]
007E5C  3A000E     BRA NZ, 0x7E7A
007E5E  2FE000     MOV #0xFE00, W0
007E60  400001     ADD W0, W1, W0
007E62  888180     MOV W0, 0x1030
007E64  37000A     BRA 0x7E7A
007E66  FB8088     ZE W8, W1
007E68  808180     MOV 0x1030, W0
007E6A  781801     MOV W1, [W0++]
007E6C  888180     MOV W0, 0x1030
007E6E  222E81     MOV #0x22E8, W1
007E70  500F81     SUB W0, W1, [W15]
007E72  3A0003     BRA NZ, 0x7E7A
007E74  2FE000     MOV #0xFE00, W0
007E76  400001     ADD W0, W1, W0
007E78  888180     MOV W0, 0x1030
144:                   if(!pad[10]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
007E7A  21ACE0     MOV #0x1ACE, W0
007E7C  E00410     CP0.B [W0]
007E7E  3A000B     BRA NZ, 0x7E96
007E80  808180     MOV 0x1030, W0
007E82  200201     MOV #0x20, W1
007E84  781801     MOV W1, [W0++]
007E86  888180     MOV W0, 0x1030
007E88  222E81     MOV #0x22E8, W1
007E8A  500F81     SUB W0, W1, [W15]
007E8C  3A000E     BRA NZ, 0x7EAA
007E8E  2FE000     MOV #0xFE00, W0
007E90  400001     ADD W0, W1, W0
007E92  888180     MOV W0, 0x1030
007E94  37000A     BRA 0x7EAA
007E96  FB8088     ZE W8, W1
007E98  808180     MOV 0x1030, W0
007E9A  781801     MOV W1, [W0++]
007E9C  888180     MOV W0, 0x1030
007E9E  222E81     MOV #0x22E8, W1
007EA0  500F81     SUB W0, W1, [W15]
007EA2  3A0003     BRA NZ, 0x7EAA
007EA4  2FE000     MOV #0xFE00, W0
007EA6  400001     ADD W0, W1, W0
007EA8  888180     MOV W0, 0x1030
145:                   if(!pad[11]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
007EAA  21ACF0     MOV #0x1ACF, W0
007EAC  E00410     CP0.B [W0]
007EAE  3A000B     BRA NZ, 0x7EC6
007EB0  808180     MOV 0x1030, W0
007EB2  200201     MOV #0x20, W1
007EB4  781801     MOV W1, [W0++]
007EB6  888180     MOV W0, 0x1030
007EB8  222E81     MOV #0x22E8, W1
007EBA  500F81     SUB W0, W1, [W15]
007EBC  3A000E     BRA NZ, 0x7EDA
007EBE  2FE000     MOV #0xFE00, W0
007EC0  400001     ADD W0, W1, W0
007EC2  888180     MOV W0, 0x1030
007EC4  37000A     BRA 0x7EDA
007EC6  FB8088     ZE W8, W1
007EC8  808180     MOV 0x1030, W0
007ECA  781801     MOV W1, [W0++]
007ECC  888180     MOV W0, 0x1030
007ECE  222E81     MOV #0x22E8, W1
007ED0  500F81     SUB W0, W1, [W15]
007ED2  3A0003     BRA NZ, 0x7EDA
007ED4  2FE000     MOV #0xFE00, W0
007ED6  400001     ADD W0, W1, W0
007ED8  888180     MOV W0, 0x1030
146:                   lcdSetCursorQ(col, 2);
007EDA  B3C021     MOV.B #0x2, W1
007EDC  784009     MOV.B W9, W0
007EDE  07FDF8     RCALL lcdSetCursorQ
147:                   if(!pad[4]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
007EE0  21AC80     MOV #0x1AC8, W0
007EE2  E00410     CP0.B [W0]
007EE4  3A000B     BRA NZ, 0x7EFC
007EE6  808180     MOV 0x1030, W0
007EE8  200201     MOV #0x20, W1
007EEA  781801     MOV W1, [W0++]
007EEC  888180     MOV W0, 0x1030
007EEE  222E81     MOV #0x22E8, W1
007EF0  500F81     SUB W0, W1, [W15]
007EF2  3A000E     BRA NZ, 0x7F10
007EF4  2FE000     MOV #0xFE00, W0
007EF6  400001     ADD W0, W1, W0
007EF8  888180     MOV W0, 0x1030
007EFA  37000A     BRA 0x7F10
007EFC  FB8088     ZE W8, W1
007EFE  808180     MOV 0x1030, W0
007F00  781801     MOV W1, [W0++]
007F02  888180     MOV W0, 0x1030
007F04  222E81     MOV #0x22E8, W1
007F06  500F81     SUB W0, W1, [W15]
007F08  3A0003     BRA NZ, 0x7F10
007F0A  2FE000     MOV #0xFE00, W0
007F0C  400001     ADD W0, W1, W0
007F0E  888180     MOV W0, 0x1030
148:                   if(!pad[5]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
007F10  21AC90     MOV #0x1AC9, W0
007F12  E00410     CP0.B [W0]
007F14  3A000B     BRA NZ, 0x7F2C
007F16  808180     MOV 0x1030, W0
007F18  200201     MOV #0x20, W1
007F1A  781801     MOV W1, [W0++]
007F1C  888180     MOV W0, 0x1030
007F1E  222E81     MOV #0x22E8, W1
007F20  500F81     SUB W0, W1, [W15]
007F22  3A000E     BRA NZ, 0x7F40
007F24  2FE000     MOV #0xFE00, W0
007F26  400001     ADD W0, W1, W0
007F28  888180     MOV W0, 0x1030
007F2A  37000A     BRA 0x7F40
007F2C  FB8088     ZE W8, W1
007F2E  808180     MOV 0x1030, W0
007F30  781801     MOV W1, [W0++]
007F32  888180     MOV W0, 0x1030
007F34  222E81     MOV #0x22E8, W1
007F36  500F81     SUB W0, W1, [W15]
007F38  3A0003     BRA NZ, 0x7F40
007F3A  2FE000     MOV #0xFE00, W0
007F3C  400001     ADD W0, W1, W0
007F3E  888180     MOV W0, 0x1030
149:                   if(!pad[6]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
007F40  21ACA0     MOV #0x1ACA, W0
007F42  E00410     CP0.B [W0]
007F44  3A000B     BRA NZ, 0x7F5C
007F46  808180     MOV 0x1030, W0
007F48  200201     MOV #0x20, W1
007F4A  781801     MOV W1, [W0++]
007F4C  888180     MOV W0, 0x1030
007F4E  222E81     MOV #0x22E8, W1
007F50  500F81     SUB W0, W1, [W15]
007F52  3A000E     BRA NZ, 0x7F70
007F54  2FE000     MOV #0xFE00, W0
007F56  400001     ADD W0, W1, W0
007F58  888180     MOV W0, 0x1030
007F5A  37000A     BRA 0x7F70
007F5C  FB8088     ZE W8, W1
007F5E  808180     MOV 0x1030, W0
007F60  781801     MOV W1, [W0++]
007F62  888180     MOV W0, 0x1030
007F64  222E81     MOV #0x22E8, W1
007F66  500F81     SUB W0, W1, [W15]
007F68  3A0003     BRA NZ, 0x7F70
007F6A  2FE000     MOV #0xFE00, W0
007F6C  400001     ADD W0, W1, W0
007F6E  888180     MOV W0, 0x1030
150:                   if(!pad[7]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
007F70  21ACB0     MOV #0x1ACB, W0
007F72  E00410     CP0.B [W0]
007F74  3A000B     BRA NZ, 0x7F8C
007F76  808180     MOV 0x1030, W0
007F78  200201     MOV #0x20, W1
007F7A  781801     MOV W1, [W0++]
007F7C  888180     MOV W0, 0x1030
007F7E  222E81     MOV #0x22E8, W1
007F80  500F81     SUB W0, W1, [W15]
007F82  3A000E     BRA NZ, 0x7FA0
007F84  2FE000     MOV #0xFE00, W0
007F86  400001     ADD W0, W1, W0
007F88  888180     MOV W0, 0x1030
007F8A  37000A     BRA 0x7FA0
007F8C  FB8088     ZE W8, W1
007F8E  808180     MOV 0x1030, W0
007F90  781801     MOV W1, [W0++]
007F92  888180     MOV W0, 0x1030
007F94  222E81     MOV #0x22E8, W1
007F96  500F81     SUB W0, W1, [W15]
007F98  3A0003     BRA NZ, 0x7FA0
007F9A  2FE000     MOV #0xFE00, W0
007F9C  400001     ADD W0, W1, W0
007F9E  888180     MOV W0, 0x1030
151:                   lcdSetCursorQ(col, 3);
007FA0  B3C031     MOV.B #0x3, W1
007FA2  784009     MOV.B W9, W0
007FA4  07FD95     RCALL lcdSetCursorQ
152:                   if(!pad[0]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
007FA6  21AC40     MOV #0x1AC4, W0
007FA8  E00410     CP0.B [W0]
007FAA  3A000B     BRA NZ, 0x7FC2
007FAC  808180     MOV 0x1030, W0
007FAE  200201     MOV #0x20, W1
007FB0  781801     MOV W1, [W0++]
007FB2  888180     MOV W0, 0x1030
007FB4  222E81     MOV #0x22E8, W1
007FB6  500F81     SUB W0, W1, [W15]
007FB8  3A000E     BRA NZ, 0x7FD6
007FBA  2FE000     MOV #0xFE00, W0
007FBC  400001     ADD W0, W1, W0
007FBE  888180     MOV W0, 0x1030
007FC0  37000A     BRA 0x7FD6
007FC2  FB8088     ZE W8, W1
007FC4  808180     MOV 0x1030, W0
007FC6  781801     MOV W1, [W0++]
007FC8  888180     MOV W0, 0x1030
007FCA  222E81     MOV #0x22E8, W1
007FCC  500F81     SUB W0, W1, [W15]
007FCE  3A0003     BRA NZ, 0x7FD6
007FD0  2FE000     MOV #0xFE00, W0
007FD2  400001     ADD W0, W1, W0
007FD4  888180     MOV W0, 0x1030
153:                   if(!pad[1]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
007FD6  21AC50     MOV #0x1AC5, W0
007FD8  E00410     CP0.B [W0]
007FDA  3A000B     BRA NZ, 0x7FF2
007FDC  808180     MOV 0x1030, W0
007FDE  200201     MOV #0x20, W1
007FE0  781801     MOV W1, [W0++]
007FE2  888180     MOV W0, 0x1030
007FE4  222E81     MOV #0x22E8, W1
007FE6  500F81     SUB W0, W1, [W15]
007FE8  3A000E     BRA NZ, 0x8006
007FEA  2FE000     MOV #0xFE00, W0
007FEC  400001     ADD W0, W1, W0
007FEE  888180     MOV W0, 0x1030
007FF0  37000A     BRA 0x8006
007FF2  FB8088     ZE W8, W1
007FF4  808180     MOV 0x1030, W0
007FF6  781801     MOV W1, [W0++]
007FF8  888180     MOV W0, 0x1030
007FFA  222E81     MOV #0x22E8, W1
007FFC  500F81     SUB W0, W1, [W15]
007FFE  3A0003     BRA NZ, 0x8006
008000  2FE000     MOV #0xFE00, W0
008002  400001     ADD W0, W1, W0
008004  888180     MOV W0, 0x1030
154:                   if(!pad[2]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
008006  21AC60     MOV #0x1AC6, W0
008008  E00410     CP0.B [W0]
00800A  3A000B     BRA NZ, 0x8022
00800C  808180     MOV 0x1030, W0
00800E  200201     MOV #0x20, W1
008010  781801     MOV W1, [W0++]
008012  888180     MOV W0, 0x1030
008014  222E81     MOV #0x22E8, W1
008016  500F81     SUB W0, W1, [W15]
008018  3A000E     BRA NZ, 0x8036
00801A  2FE000     MOV #0xFE00, W0
00801C  400001     ADD W0, W1, W0
00801E  888180     MOV W0, 0x1030
008020  37000A     BRA 0x8036
008022  FB8088     ZE W8, W1
008024  808180     MOV 0x1030, W0
008026  781801     MOV W1, [W0++]
008028  888180     MOV W0, 0x1030
00802A  222E81     MOV #0x22E8, W1
00802C  500F81     SUB W0, W1, [W15]
00802E  3A0003     BRA NZ, 0x8036
008030  2FE000     MOV #0xFE00, W0
008032  400001     ADD W0, W1, W0
008034  888180     MOV W0, 0x1030
155:                   if(!pad[3]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
008036  21AC70     MOV #0x1AC7, W0
008038  E00410     CP0.B [W0]
00803A  3A000B     BRA NZ, 0x8052
00803C  808180     MOV 0x1030, W0
00803E  200201     MOV #0x20, W1
008040  781801     MOV W1, [W0++]
008042  888180     MOV W0, 0x1030
008044  222E81     MOV #0x22E8, W1
008046  500F81     SUB W0, W1, [W15]
008048  3A000E     BRA NZ, 0x8066
00804A  2FE000     MOV #0xFE00, W0
00804C  400001     ADD W0, W1, W0
00804E  888180     MOV W0, 0x1030
008050  37000A     BRA 0x8066
008052  FB8408     ZE W8, W8
008054  808180     MOV 0x1030, W0
008056  781808     MOV W8, [W0++]
008058  888180     MOV W0, 0x1030
00805A  222E81     MOV #0x22E8, W1
00805C  500F81     SUB W0, W1, [W15]
00805E  3A0003     BRA NZ, 0x8066
008060  2FE000     MOV #0xFE00, W0
008062  400001     ADD W0, W1, W0
008064  888180     MOV W0, 0x1030
156:               }
008066  BE044F     MOV.D [--W15], W8
008068  060000     RETURN
157:               
158:               void lcdPoll(void){  
159:                   if(lcdWritePtr!=lcdReadPtr){   
00806A  808190     MOV 0x1032, W0
00806C  E31030     CP 0x1030
00806E  320018     BRA Z, 0x80A0
160:                       if((*lcdReadPtr>>8)&1) LCD_RS=0;
008070  201001     MOV #0x100, W1
008072  608090     AND W1, [W0], W1
008074  320002     BRA Z, 0x807A
008076  A9EE45     BCLR 0xE45, #7
008078  370001     BRA 0x807C
161:                       else LCD_RS=1;
00807A  A8EE45     BSET 0xE45, #7
162:                       if((*lcdReadPtr>>9)&1) PR3=0x2DF0; //2DF0 for ~1.3mS
00807C  202001     MOV #0x200, W1
00807E  608090     AND W1, [W0], W1
008080  320003     BRA Z, 0x8088
008082  22DF01     MOV #0x2DF0, W1
008084  880871     MOV W1, PR3
008086  370002     BRA 0x808C
163:                       else PR3=0x0120; //120 for ~40uS
008088  201201     MOV #0x120, W1
00808A  880871     MOV W1, PR3
164:                       PMDIN1=(*lcdReadPtr++)&0x00FF;
00808C  200FF1     MOV #0xFF, W1
00808E  6080B0     AND W1, [W0++], W1
008090  883041     MOV W1, PMDIN1
008092  888190     MOV W0, 0x1032
165:                       if(lcdReadPtr==&lcdBuf[LCDBUF]) lcdReadPtr=lcdBuf;
008094  222E81     MOV #0x22E8, W1
008096  500F81     SUB W0, W1, [W15]
008098  3A0003     BRA NZ, 0x80A0
00809A  2FE000     MOV #0xFE00, W0
00809C  400001     ADD W0, W1, W0
00809E  888190     MOV W0, 0x1032
166:                   } 
167:                   TMR3=0x0000; 
0080A0  EF210A     CLR TMR3
168:               }
0080A2  060000     RETURN
169:               
170:               //ALWAYS SENDS, blocks program
171:               void lcdBlockingSend(unsigned char data){
0080A4  BE9F88     MOV.D W8, [W15++]
0080A6  781F8A     MOV W10, [W15++]
0080A8  784500     MOV.B W0, W10
172:                   while(PMMODEbits.BUSY)Delay_us(2);
0080AA  E20602     CP0 PMMODE
0080AC  3D0007     BRA GE, 0x80BC
0080AE  200028     MOV #0x2, W8
0080B0  280009     MOV #0x8000, W9
0080B2  780008     MOV W8, W0
0080B4  0704AB     RCALL Delay_us
0080B6  803011     MOV PMMODE, W1
0080B8  648001     AND W9, W1, W0
0080BA  3AFFFB     BRA NZ, 0x80B2
173:                   PMDIN1=data; 
0080BC  FB850A     ZE W10, W10
0080BE  88304A     MOV W10, PMDIN1
174:               }
0080C0  78054F     MOV [--W15], W10
0080C2  BE044F     MOV.D [--W15], W8
0080C4  060000     RETURN
175:               //ALWAYS SENDS, blocks program
176:               void lcdBlockingClear(void){
0080C6  BE9F88     MOV.D W8, [W15++]
177:                   while(PMMODEbits.BUSY)Delay_us(2);
0080C8  E20602     CP0 PMMODE
0080CA  3D0007     BRA GE, 0x80DA
0080CC  200028     MOV #0x2, W8
0080CE  280009     MOV #0x8000, W9
0080D0  780008     MOV W8, W0
0080D2  07049C     RCALL Delay_us
0080D4  803011     MOV PMMODE, W1
0080D6  648001     AND W9, W1, W0
0080D8  3AFFFB     BRA NZ, 0x80D0
178:                   PMDIN1=LCD_CLEARDISPLAY; 
0080DA  200010     MOV #0x1, W0
0080DC  883040     MOV W0, PMDIN1
179:               }
0080DE  BE044F     MOV.D [--W15], W8
0080E0  060000     RETURN
180:               
181:               //ALWAYS SENDS, blocks program
182:               void lcdBlockingReturn(void){
0080E2  BE9F88     MOV.D W8, [W15++]
183:                   while(PMMODEbits.BUSY)Delay_us(2);
0080E4  E20602     CP0 PMMODE
0080E6  3D0007     BRA GE, 0x80F6
0080E8  200028     MOV #0x2, W8
0080EA  280009     MOV #0x8000, W9
0080EC  780008     MOV W8, W0
0080EE  07048E     RCALL Delay_us
0080F0  803011     MOV PMMODE, W1
0080F2  648001     AND W9, W1, W0
0080F4  3AFFFB     BRA NZ, 0x80EC
184:                   PMDIN1=LCD_RETURNHOME;
0080F6  200020     MOV #0x2, W0
0080F8  883040     MOV W0, PMDIN1
185:               }
0080FA  BE044F     MOV.D [--W15], W8
0080FC  060000     RETURN
186:               
187:               void lcdInit(void){
188:                   LCD_RS=0;
0080FE  A9EE45     BCLR 0xE45, #7
189:                   lcdBlockingSend(0x38);              //function set, 8 bits, 2 line disp, 5x8
008100  B3C380     MOV.B #0x38, W0
008102  07FFD0     RCALL lcdBlockingSend
190:                   Delay_us(4500);                //>4.1 mS required
008104  211940     MOV #0x1194, W0
008106  070482     RCALL Delay_us
191:                   lcdBlockingSend(0x0C);              //display on, cursor on, blink on   (0f for blink+cursor)
008108  B3C0C0     MOV.B #0xC, W0
00810A  07FFCC     RCALL lcdBlockingSend
192:                   Delay_us(4500);
00810C  211940     MOV #0x1194, W0
00810E  07047E     RCALL Delay_us
193:                   lcdBlockingClear();                    //Display Clear  
008110  07FFDA     RCALL lcdBlockingClear
194:                   Delay_us(1800);                //>1.64mS required
008112  207080     MOV #0x708, W0
008114  07047B     RCALL Delay_us
195:                   lcdBlockingSend(0x06);               // entry Mode Set
008116  B3C060     MOV.B #0x6, W0
008118  07FFC5     RCALL lcdBlockingSend
196:                   Delay_us(200);
00811A  200C80     MOV #0xC8, W0
00811C  070477     RCALL Delay_us
197:                   lcdBlockingReturn();
00811E  07FFE1     RCALL lcdBlockingReturn
198:                   Delay_us(1500);
008120  205DC0     MOV #0x5DC, W0
008122  070474     RCALL Delay_us
199:                   
200:                   //lcdCustomSymbols();
201:                   Delay_us(200);
008124  200C80     MOV #0xC8, W0
008126  070472     RCALL Delay_us
202:                   lcdBlockingClear();                         //Display Clear  
008128  07FFCE     RCALL lcdBlockingClear
203:                   Delay_us(1500);
00812A  205DC0     MOV #0x5DC, W0
00812C  07046F     RCALL Delay_us
204:                   lcdBlockingReturn();
00812E  07FFD9     RCALL lcdBlockingReturn
205:                   Delay_us(200);
008130  200C80     MOV #0xC8, W0
008132  07046C     RCALL Delay_us
206:               }
008134  060000     RETURN
---  /home/fbuga/Documents/ps-040/main.c  ---------------------------------------------------------------
1:                 #include <xc.h>
2:                 #include <p33EP512GM310.h>
3:                 #include <dsp.h>
4:                 #include <libpic30.h>
5:                 #include "common.h"
6:                 #include "devInits.h"
7:                 #include "utilities.h"
8:                 #include "audio.h"
9:                 #include "plcd.h"
10:                #include "sounds.h"
11:                #include "flash.h"
12:                
13:                #pragma config ICS = PGD1       //pgeDC 1 is used
14:                #pragma config JTAGEN = OFF     //disable jtag
15:                #pragma config BOREN = OFF      //disable brown out (FYI possible erratta case in 33eMU810)
16:                #pragma config FWDTEN = OFF     //disable watchdog timer 
17:                #pragma config GCP = OFF        //disable general segment code protect
18:                #pragma config PLLKEN = ON      //wait for PLL lock
19:                #pragma config POSCMD = NONE    //no external oscillator
20:                #pragma config OSCIOFNC = OFF   //OSC2 is clock output
21:                #pragma config FNOSC = FRCPLL   //clock source
22:                
23:                /* Data Buffers & index variables */
24:                fractional outputA[STREAMBUF], outputB[STREAMBUF];
25:                fractional streamA[STREAMBUF], streamB[STREAMBUF];
26:                unsigned int write_ptr=0, rw=0, frameReady=0;
27:                
28:                unsigned char TxBufferA[FLASH_DMAXFERS] __attribute__((space(xmemory)));
29:                unsigned char TxBufferB[FLASH_DMAXFERS] __attribute__((space(xmemory)));
30:                unsigned char RxBufferA[FLASH_DMAXFERS] __attribute__((space(xmemory)));
31:                unsigned char RxBufferB[FLASH_DMAXFERS] __attribute__((space(xmemory)));
32:                
33:                
34:                
35:                /* Debug Variables */
36:                unsigned int process_time=0;
37:                
38:                unsigned char hard_clipped=FALSE;                                              
39:                volatile unsigned char recording=TRUE;
40:                unsigned char UART_ON = FALSE;
41:                unsigned char TEST_SIN = FALSE;
42:                
43:                char flash_readback[512]={0};
44:                
45:                /* Screen state variables */
46:                enum screenStruc state = scrnFX;
47:                enum screenStruc laststate = invalid;
48:                enum fxStruct fxUnits[NUMFXUNITS]={0,0};
49:                
50:                /* Buttons & Potentiometers */
51:                unsigned char pad[BUTTONS];                                                            
52:                fractional pots[POTS]={0};
53:                fractional pots_scaled[POTS]={0};
54:                fractional pots_custom[POTS]={0};
55:                
56:                void initBuffer(void){
0092D4  BE9F88     MOV.D W8, [W15++]
0092D6  BE9F8A     MOV.D W10, [W15++]
0092D8  BE9F8C     MOV.D W12, [W15++]
0092DC  216C48     MOV #0x16C4, W8
0092DE  EB0480     CLR W9
0092E2  218C46     MOV #0x18C4, W6
0092E4  EB0380     CLR W7
0092E8  B90161     MUL.SU W0, #1, W2
0092EA  410102     ADD W2, W2, W2
0092EC  498183     ADDC W3, W3, W3
0092FE  21AC44     MOV #0x1AC4, W4
009300  EB0280     CLR W5
009312  2103CC     MOV #0x103C, W12
009314  EB0680     CLR W13
009318  2104CA     MOV #0x104C, W10
00931A  EB0580     CLR W11
00931C  2105C8     MOV #0x105C, W8
00931E  EB0480     CLR W9
009320  2106C6     MOV #0x106C, W6
009322  EB0380     CLR W7
009324  B91861     MUL.SU W3, #1, W0
57:                    int i;
58:                    for(i=0; i<STREAMBUF; i++){
0092DA  EB0000     CLR W0
0092E6  201005     MOV #0x100, W5
0092F6  E80000     INC W0, W0
0092F8  500F85     SUB W0, W5, [W15]
0092FA  3AFFF6     BRA NZ, 0x92E8
0092FC  EB0000     CLR W0
59:                        streamA[i]=0;
0092E0  EB0080     CLR W1
0092EE  410208     ADD W2, W8, W4
0092F0  780A01     MOV W1, [W4]
60:                        streamB[i]=0;
0092F2  410106     ADD W2, W6, W2
0092F4  780901     MOV W1, [W2]
61:                    }
62:                    
63:                    for(i=0; i<BUTTONS; i++)
009304  200232     MOV #0x23, W2
00930A  E80000     INC W0, W0
00930C  500F82     SUB W0, W2, [W15]
00930E  3AFFFB     BRA NZ, 0x9306
009310  EB0180     CLR W3
64:                        pad[i]=1;
009302  B3C013     MOV.B #0x1, W3
009306  400084     ADD W0, W4, W1
009308  784883     MOV.B W3, [W1]
65:                    
66:                    for(i=0; i<FLASH_DMAXFERS; i++){
009336  E80183     INC W3, W3
009338  518FF0     SUB W3, #0x10, [W15]
00933A  3AFFF4     BRA NZ, 0x9324
67:                        TxBufferA[i]=0;
009316  EB4100     CLR.B W2
009326  40020C     ADD W0, W12, W4
009328  784A02     MOV.B W2, [W4]
68:                        TxBufferB[i]=0;
00932A  40020A     ADD W0, W10, W4
00932C  784A02     MOV.B W2, [W4]
69:                        RxBufferA[i]=0;
00932E  400208     ADD W0, W8, W4
009330  784A02     MOV.B W2, [W4]
70:                        RxBufferB[i]=0;
009332  400006     ADD W0, W6, W0
009334  784802     MOV.B W2, [W0]
71:                    }
72:                }
00933C  BE064F     MOV.D [--W15], W12
00933E  BE054F     MOV.D [--W15], W10
009340  BE044F     MOV.D [--W15], W8
009342  060000     RETURN
73:                
74:                int main(void) {
009344  BE9F88     MOV.D W8, [W15++]
009346  BE9F8A     MOV.D W10, [W15++]
009348  781F8C     MOV W12, [W15++]
75:                    initPorts();                    //configure io device & adc 
00934A  07FB69     RCALL initPorts
76:                    //initUART1();                    //configure & enable UART
77:                    initBuffer();
00934C  07FFC3     RCALL initBuffer
78:                    genSine(STREAMBUF);
00934E  201000     MOV #0x100, W0
009350  07002B     RCALL genSine
79:                    initADC1();                     //configure & enable internal ADC
009352  07FC2C     RCALL initADC1
80:                    initPMP();
009354  07FC47     RCALL initPMP
81:                    //||||||||----
82:                    initDCI_DAC();                  //configure & enable DAC
009356  07FC85     RCALL initDCI_DAC
83:                    initT1();                       //configure & start T1 
009358  07FC59     RCALL initT1
84:                    initT2();                       //configure & start T2 
00935A  07FC61     RCALL initT2
85:                    initSPI3_MEM();                  //start segment display
00935C  07FCCC     RCALL initSPI3_MEM
86:                    //initCAP_BPM();                  //configure bpm capture
87:                    initT3();                       //configure & start T3 for lcd
00935E  07FC6B     RCALL initT3
88:                    initQEI_ENC();
009360  07FCEE     RCALL initQEI_ENC
89:                    //initT5();
90:                    fractional temp;
91:                    fractional *ping, *pong;
92:                    
93:                    while(1){    
94:                        if(frameReady) {
00936C  E21004     CP0 frameReady
00936E  32000B     BRA Z, 0x9386
95:                            if(rw){
009370  E21002     CP0 rw
009372  320003     BRA Z, 0x937A
96:                                ping = streamA;
009368  216C4C     MOV #0x16C4, W12
009376  78000C     MOV W12, W0
009378  370002     BRA 0x937E
97:                                pong = outputB;
009366  214C4B     MOV #0x14C4, W11
009374  78008B     MOV W11, W1
98:                            }else{
99:                                ping = streamB;
009364  218C4A     MOV #0x18C4, W10
00937C  78000A     MOV W10, W0
100:                               pong = outputA;
009362  212C49     MOV #0x12C4, W9
00937A  780089     MOV W9, W1
101:                           }
102:                           
103:                           processAudio(ping, pong); 
00937E  07FE07     RCALL processAudio
104:                           process_time=write_ptr;    //DEBUG
009380  F81000     PUSH write_ptr
009382  F91006     POP process_time
105:                           frameReady=0;
009384  EF3004     CLR frameReady
106:                       }
107:                       if(_T2IF){
009386  ABE800     BTST IFS0, #7
009388  320006     BRA Z, 0x9396
108:                           scanButtons();                   //read button matrix
00938A  07F933     RCALL scanButtons
109:                           if(_AD1IF) readPots();
00936A  220008     MOV #0x2000, W8
00938C  804001     MOV IFS0, W1
00938E  640001     AND W8, W1, W0
009390  320001     BRA Z, 0x9394
009392  07F9A9     RCALL readPots
110:                           _T2IF=0;
009394  A9E800     BCLR IFS0, #7
111:                       }
112:                       if(_T1IF){
009396  AB6800     BTST IFS0, #3
009398  320002     BRA Z, 0x939E
113:                           display();
00939A  07FA8F     RCALL display
114:                           _T1IF=0;
00939C  A96800     BCLR IFS0, #3
115:                       }
116:                       if(_T3IF) {
00939E  AB0801     BTST 0x801, #0
0093A0  32FFE5     BRA Z, 0x936C
117:                           lcdPoll();
0093A2  07F663     RCALL lcdPoll
118:                           _T3IF=0;
0093A4  A90801     BCLR 0x801, #0
0093A6  37FFE2     BRA 0x936C
119:                       }
120:                   }
121:                   return 0;
122:               }
123:               // example test 
---  /home/fbuga/Documents/ps-040/flash.c  --------------------------------------------------------------
1:                 /*
2:                  * File:   flash.c
3:                  * Author: root
4:                  *
5:                  * Created on January 28, 2018, 5:00 PM
6:                  */
7:                 
8:                 
9:                 #include "xc.h"
10:                #include "flash.h"
11:                #include "common.h"
12:                #include "utilities.h"
13:                
14:                char flashBuf[STREAMBUF*2];
15:                char receive;
16:                
17:                void flashWriteReg(char command) {
18:                    SS3=0;
0091D6  A92E54     BCLR LATF, #1
19:                    SPI3BUF=command;               //WEL=1 for write enable
0091D8  FB0000     SE W0, W0
0091DA  881540     MOV W0, SPI3BUF
20:                    while(!_SPI3IF); _SPI3IF=0;
0091DC  208001     MOV #0x800, W1
0091DE  804052     MOV IFS5, W2
0091E0  608002     AND W1, W2, W0
0091E2  32FFFD     BRA Z, 0x91DE
0091E4  A9680B     BCLR 0x80B, #3
21:                    receive=SPI3BUF;
0091E6  801540     MOV SPI3BUF, W0
0091E8  B7F03A     MOV.B WREG, receive
22:                    SS3=1;
0091EA  A82E54     BSET LATF, #1
23:                }
0091EC  060000     RETURN
24:                
25:                char flashStatusCheck(void){
26:                    SS3=0;
0091EE  A92E54     BCLR LATF, #1
27:                    SPI3BUF=FLASH_RDSR1;               //WEL=1 for write enable
0091F0  200050     MOV #0x5, W0
0091F2  881540     MOV W0, SPI3BUF
28:                    while(!_SPI3IF); _SPI3IF=0;
0091F4  208001     MOV #0x800, W1
0091F6  804052     MOV IFS5, W2
0091F8  608002     AND W1, W2, W0
0091FA  32FFFD     BRA Z, 0x91F6
0091FC  A9680B     BCLR 0x80B, #3
29:                    receive=SPI3BUF;
0091FE  801540     MOV SPI3BUF, W0
30:                    SPI3BUF=0x00;               //WEL=1 for write enable
009200  EF22A8     CLR SPI3BUF
31:                    while(!_SPI3IF); _SPI3IF=0;
009202  208001     MOV #0x800, W1
009204  804052     MOV IFS5, W2
009206  608002     AND W1, W2, W0
009208  32FFFD     BRA Z, 0x9204
00920A  A9680B     BCLR 0x80B, #3
32:                    receive=SPI3BUF;
00920C  801540     MOV SPI3BUF, W0
00920E  B7F03A     MOV.B WREG, receive
33:                    SS3=1;
009210  A82E54     BSET LATF, #1
34:                    
35:                    return receive;
36:                }
009212  060000     RETURN
37:                
38:                void flashWritePage(int addressH, int addressL){
39:                    int i;
40:                    SS3=0;
009214  A92E54     BCLR LATF, #1
41:                    SPI3BUF=FLASH_PP;
009216  200022     MOV #0x2, W2
009218  881542     MOV W2, SPI3BUF
42:                    while(!_SPI3IF); _SPI3IF=0;
00921A  208003     MOV #0x800, W3
00921C  804054     MOV IFS5, W4
00921E  618104     AND W3, W4, W2
009220  32FFFD     BRA Z, 0x921C
009222  A9680B     BCLR 0x80B, #3
43:                    receive=SPI3BUF;
009224  801542     MOV SPI3BUF, W2
44:                    SPI3BUF=addressH&&0xFF;
009226  A7F000     BTSC W0, #15
009228  EA0000     NEG W0, W0
00922A  EA0000     NEG W0, W0
00922C  DE004F     LSR W0, #15, W0
00922E  881540     MOV W0, SPI3BUF
45:                    while(!_SPI3IF); _SPI3IF=0;
009230  208002     MOV #0x800, W2
009232  804053     MOV IFS5, W3
009234  610003     AND W2, W3, W0
009236  32FFFD     BRA Z, 0x9232
009238  A9680B     BCLR 0x80B, #3
46:                    receive=SPI3BUF;
00923A  801540     MOV SPI3BUF, W0
47:                    SPI3BUF=(addressL&&0xFF00)>>8;
00923C  EF22A8     CLR SPI3BUF
48:                    while(!_SPI3IF); _SPI3IF=0;
00923E  208002     MOV #0x800, W2
009240  804054     MOV IFS5, W4
009242  610004     AND W2, W4, W0
009244  32FFFD     BRA Z, 0x9240
009246  A9680B     BCLR 0x80B, #3
49:                    receive=SPI3BUF;
009248  801540     MOV SPI3BUF, W0
50:                    SPI3BUF=addressL&&0xFF;
00924A  780001     MOV W1, W0
00924C  A7F000     BTSC W0, #15
00924E  EA0000     NEG W0, W0
009250  EA0000     NEG W0, W0
009252  DE004F     LSR W0, #15, W0
009254  881540     MOV W0, SPI3BUF
51:                    while(!_SPI3IF); _SPI3IF=0;
009256  208001     MOV #0x800, W1
009258  804052     MOV IFS5, W2
00925A  608002     AND W1, W2, W0
00925C  32FFFD     BRA Z, 0x9258
00925E  A9680B     BCLR 0x80B, #3
52:                    receive=SPI3BUF;
009260  801540     MOV SPI3BUF, W0
009262  202002     MOV #0x200, W2
53:                    
54:                    for(i=0; i<512;i++){    //write 512 bytes
009276  3AFFF8     BRA NZ, 0x9268
009278  B7F03A     MOV.B WREG, receive
55:                        //send byte
56:                        SPI3BUF=0xAA;
009264  200AA3     MOV #0xAA, W3
009268  881543     MOV W3, SPI3BUF
57:                        while(!_SPI3IF); _SPI3IF=0;
009266  208001     MOV #0x800, W1
00926A  804054     MOV IFS5, W4
00926C  608004     AND W1, W4, W0
00926E  32FFFD     BRA Z, 0x926A
009270  A9680B     BCLR 0x80B, #3
58:                        receive=SPI3BUF;
009272  801540     MOV SPI3BUF, W0
009274  E90102     DEC W2, W2
59:                    }
60:                    SS3=1;
00927A  A82E54     BSET LATF, #1
61:                }
00927C  060000     RETURN
62:                
63:                void flashRead(char *array, int bytes){
64:                    int i;
65:                    
66:                    SS3=0;
00927E  A92E54     BCLR LATF, #1
67:                    SPI3BUF=FLASH_READ;
009280  200030     MOV #0x3, W0
009282  881540     MOV W0, SPI3BUF
68:                    while(!_SPI3IF); _SPI3IF=0;
009284  208001     MOV #0x800, W1
009286  804052     MOV IFS5, W2
009288  608002     AND W1, W2, W0
00928A  32FFFD     BRA Z, 0x9286
00928C  A9680B     BCLR 0x80B, #3
69:                    receive=SPI3BUF;
00928E  801540     MOV SPI3BUF, W0
70:                    SPI3BUF=0x00;
009290  EF22A8     CLR SPI3BUF
71:                    while(!_SPI3IF); _SPI3IF=0;
009292  208001     MOV #0x800, W1
009294  804052     MOV IFS5, W2
009296  608002     AND W1, W2, W0
009298  32FFFD     BRA Z, 0x9294
00929A  A9680B     BCLR 0x80B, #3
72:                    receive=SPI3BUF;
00929C  801540     MOV SPI3BUF, W0
73:                    SPI3BUF=0x00;
00929E  EF22A8     CLR SPI3BUF
74:                    while(!_SPI3IF); _SPI3IF=0;
0092A0  208001     MOV #0x800, W1
0092A2  804052     MOV IFS5, W2
0092A4  608002     AND W1, W2, W0
0092A6  32FFFD     BRA Z, 0x92A2
0092A8  A9680B     BCLR 0x80B, #3
75:                    receive=SPI3BUF;
0092AA  801540     MOV SPI3BUF, W0
76:                    SPI3BUF=0x00;
0092AC  EF22A8     CLR SPI3BUF
77:                    while(!_SPI3IF); _SPI3IF=0;
0092AE  208001     MOV #0x800, W1
0092B0  804052     MOV IFS5, W2
0092B2  608002     AND W1, W2, W0
0092B4  32FFFD     BRA Z, 0x92B0
0092B6  A9680B     BCLR 0x80B, #3
78:                    receive=SPI3BUF;
0092B8  801540     MOV SPI3BUF, W0
0092BA  B7F03A     MOV.B WREG, receive
79:                    
80:                    initDMA();
0092BC  07FCF8     RCALL initDMA
81:                    /* Kick off read here */
82:                    
83:                    Delay_us(1);
0092BE  200010     MOV #0x1, W0
0092C0  07FBA5     RCALL Delay_us
84:                    //DMA0REQbits.FORCE = 1; // Manual mode: Kick-start the 1st transfer
85:                    //DMA1REQbits.FORCE = 1; // Manual mode: Kick-start the 1st transfer
86:                    SPI3BUF=0x00;
0092C2  EF22A8     CLR SPI3BUF
87:                    SPI3STATbits.SPIROV = 0;        // Clear SPI1 receive overflow flag if set
0092C4  A9C2A0     BCLR SPI3STAT, #6
88:                    /*
89:                    for(i=0; i<bytes;i++){    //read 512 bytes
90:                        //receive byte
91:                        SPI3BUF=0x00;
92:                        while(!_SPI3IF); _SPI3IF=0;
93:                        Delay_us(1);
94:                        array[i]=SPI3BUF;
95:                    }
96:                    
97:                    */ 
98:                    Delay_us(10);
0092C6  2000A0     MOV #0xA, W0
0092C8  07FBA1     RCALL Delay_us
99:                    SS3=1;
0092CA  A82E54     BSET LATF, #1
100:               }
0092CC  060000     RETURN
101:               
102:               void flashBulkErase(void) {
103:                   flashWriteReg(FLASH_FRMT);
0092CE  B3C600     MOV.B #0x60, W0
0092D0  07FF82     RCALL flashWriteReg
104:               }
0092D2  060000     RETURN
---  /home/fbuga/Documents/ps-040/devInits.c  -----------------------------------------------------------
1:                 /*
2:                  ** This file contains functions to initialize various peripheral devices
3:                  */
4:                 #include <xc.h>
5:                 #include <p33EP512GM310.h>
6:                 #include <libpic30.h>
7:                 #include "common.h"
8:                 #include "devInits.h"
9:                 #include "utilities.h"
10:                #include "plcd.h"
11:                #include "screens.h"
12:                #include "flash.h"
13:                #include "dsp.h"
14:                
15:                extern unsigned char UART_ON;
16:                extern unsigned char TxBufferA[STREAMBUF], TxBufferB[STREAMBUF], 
17:                            RxBufferA[STREAMBUF], RxBufferB[STREAMBUF];  
18:                
19:                extern char flash_readback[512];
20:                
21:                void initPorts(void){
22:                    //CLOCK CONFIG
23:                    CLKDIVbits.PLLPOST=0;
008A1E  2FF3F0     MOV #0xFF3F, W0
008A20  B62744     AND CLKDIV
24:                    CLKDIVbits.PLLPRE=0;
008A22  2FFE00     MOV #0xFFE0, W0
008A24  B62744     AND CLKDIV
25:                    PLLFBDbits.PLLDIV = 0x49;       //d_73 for ~140Mhz
008A26  2FE000     MOV #0xFE00, W0
008A28  B60746     AND PLLFBD, WREG
008A2A  B30490     IOR #0x49, W0
008A2C  883A30     MOV W0, PLLFBD
26:                    while(OSCCONbits.LOCK!=1) {};   //wait for PLL to lock
008A2E  200201     MOV #0x20, W1
008A30  803A12     MOV OSCCON, W2
008A32  608002     AND W1, W2, W0
008A34  32FFFD     BRA Z, 0x8A30
27:                    //RP pin config
28:                	__builtin_write_OSCCONL(OSCCON & ~(1<<6));      // Unlock Registers
008A36  803A10     MOV OSCCON, W0
008A38  A16000     BCLR W0, #6
008A3A  200462     MOV #0x46, W2
008A3C  200573     MOV #0x57, W3
008A3E  207421     MOV #0x742, W1
008A40  784882     MOV.B W2, [W1]
008A42  784883     MOV.B W3, [W1]
008A44  784880     MOV.B W0, [W1]
29:                    //RPINR18bits.U1RXR = 0x37; //U1 rx on RP55
30:                    //RPOR6bits.RP54R=0x1;          //U1 tx on RP54
31:                    RPOR2bits.RP38R = 0x1;
008A46  2FFC00     MOV #0xFFC0, W0
008A48  803424     MOV RPOR2, W4
008A4A  600084     AND W0, W4, W1
008A4C  A00001     BSET W1, #0
008A4E  883421     MOV W1, RPOR2
32:                    RPINR24bits.CSDIR=0x3D;     //DCI IN on RPI61           
008A50  2FF801     MOV #0xFF80, W1
008A52  803685     MOV RPINR24, W5
008A54  608205     AND W1, W5, W4
008A56  B303D4     IOR #0x3D, W4
008A58  883684     MOV W4, RPINR24
33:                    RPOR3bits.RP40R=0x0C;       //DCI clock
008A5A  B60686     AND RPOR3, WREG
008A5C  B300C0     IOR #0xC, W0
008A5E  883430     MOV W0, RPOR3
34:                    RPOR2bits.RP39R=0x0D;       //DCI frame sync
008A60  2C0FF0     MOV #0xC0FF, W0
008A62  803426     MOV RPOR2, W6
008A64  600286     AND W0, W6, W5
008A66  20D004     MOV #0xD00, W4
008A68  720205     IOR W4, W5, W4
008A6A  883424     MOV W4, RPOR2
35:                    RPOR3bits.RP41R=0x0B;       //DCI output
008A6C  803434     MOV RPOR3, W4
008A6E  600284     AND W0, W4, W5
008A70  20B004     MOV #0xB00, W4
008A72  720205     IOR W4, W5, W4
008A74  883434     MOV W4, RPOR3
36:                    RPINR7bits.IC1R=0x5F;       //Capture input on pin 95 re15
008A76  803575     MOV RPINR7, W5
008A78  608205     AND W1, W5, W4
008A7A  B305F4     IOR #0x5F, W4
008A7C  883574     MOV W4, RPINR7
37:                    RPINR29bits.SCK3R=0x39;     //SCK3 input on pin 84
008A7E  280FF4     MOV #0x80FF, W4
008A80  8036D5     MOV RPINR29, W5
008A82  620305     AND W4, W5, W6
008A84  239005     MOV #0x3900, W5
008A86  728286     IOR W5, W6, W5
008A88  8836D5     MOV W5, RPINR29
38:                    RPOR7bits.RP57R=0x20;       //SCK3 output on pin 84
008A8A  803476     MOV RPOR7, W6
008A8C  600286     AND W0, W6, W5
008A8E  A0D005     BSET W5, #13
008A90  883475     MOV W5, RPOR7
39:                    RPOR8bits.RP70R=0x1F;       //SDO3 on pin 83
008A92  803485     MOV RPOR8, W5
008A94  600305     AND W0, W5, W6
008A96  21F005     MOV #0x1F00, W5
008A98  728286     IOR W5, W6, W5
008A9A  883485     MOV W5, RPOR8
40:                    RPOR9bits.RP97R=0x21;       //SS3 on pin 88
008A9C  B60692     AND RPOR9, WREG
008A9E  221005     MOV #0x2100, W5
008AA0  728280     IOR W5, W0, W5
008AA2  883495     MOV W5, RPOR9
41:                    RPINR29bits.SDI3R=0x4C;     //SDI on pin 79, RPI76
008AA4  8036D6     MOV RPINR29, W6
008AA6  608006     AND W1, W6, W0
008AA8  B304C0     IOR #0x4C, W0
008AAA  8836D0     MOV W0, RPINR29
42:                    RPINR14bits.QEA1R=0x10;     //QEA on pin 22, RPI16
008AAC  8035E0     MOV RPINR14, W0
008AAE  608080     AND W1, W0, W1
008AB0  A04001     BSET W1, #4
008AB2  8835E1     MOV W1, RPINR14
43:                    RPINR14bits.QEB1R=0x1B;     //QEB on pin 21, RPI27
008AB4  8035E5     MOV RPINR14, W5
008AB6  620205     AND W4, W5, W4
008AB8  21B000     MOV #0x1B00, W0
008ABA  700004     IOR W0, W4, W0
008ABC  8835E0     MOV W0, RPINR14
44:                	__builtin_write_OSCCONL(OSCCON | (1<<6));       // Lock Registers
008ABE  803A10     MOV OSCCON, W0
008AC0  A06000     BSET W0, #6
008AC2  207421     MOV #0x742, W1
008AC4  784882     MOV.B W2, [W1]
008AC6  784883     MOV.B W3, [W1]
008AC8  784880     MOV.B W0, [W1]
45:                    /*PERIPHERAL ENABLE (0) - DISABLE (1)*/
46:                    PMD1=PMD2=PMD3=PMD4=PMD6=PMD7=0xFFFF;
008ACA  EB8000     SETM W0
008ACC  883B60     MOV W0, PMD7
008ACE  F8076C     PUSH PMD7
008AD0  F9076A     POP PMD6
008AD2  F8076A     PUSH PMD6
008AD4  F90766     POP PMD4
008AD6  F80766     PUSH PMD4
008AD8  F90764     POP PMD3
008ADA  F80764     PUSH PMD3
008ADC  F90762     POP PMD2
008ADE  F80762     PUSH PMD2
008AE0  F90760     POP PMD1
47:                    PMD1bits.AD1MD=0;
008AE2  A90760     BCLR PMD1, #0
48:                    PMD1bits.SPI1MD=0;
008AE4  A96760     BCLR PMD1, #3
49:                    PMD1bits.SPI2MD=0;
008AE6  A98760     BCLR PMD1, #4
50:                    PMD1bits.U1MD=0;
008AE8  A9A760     BCLR PMD1, #5
51:                    PMD1bits.U2MD=0;
008AEA  A9C760     BCLR PMD1, #6
52:                    PMD1bits.DCIMD=0;
008AEC  A90761     BCLR 0x761, #0
53:                    PMD1bits.T1MD=0;
008AEE  A96761     BCLR 0x761, #3
54:                    PMD1bits.T2MD=0;
008AF0  A98761     BCLR 0x761, #4
55:                    PMD1bits.T3MD=0;
008AF2  A9A761     BCLR 0x761, #5
56:                    PMD1bits.T4MD=0;
008AF4  A9C761     BCLR 0x761, #6
57:                    PMD1bits.T5MD=0;
008AF6  A9E761     BCLR 0x761, #7
58:                    PMD3bits.PMPMD=0;
008AF8  A90765     BCLR 0x765, #0
59:                    PMD3bits.CMPMD=0;
008AFA  A94765     BCLR 0x765, #2
60:                    PMD6bits.SPI3MD=0;
008AFC  A9076A     BCLR PMD6, #0
61:                    PMD7bits.DMA0MD=0;
008AFE  A9876C     BCLR PMD7, #4
62:                    
63:                    /* Digital IO DIRECTION (1 = input) */
64:                    TRISA=TRISB=TRISC=TRISD=TRISE=TRISF=TRISG=0x0000;
008B00  EF2E60     CLR TRISG
008B02  F80E60     PUSH TRISG
008B04  F90E50     POP TRISF
008B06  F80E50     PUSH TRISF
008B08  F90E40     POP TRISE
008B0A  F80E40     PUSH TRISE
008B0C  F90E30     POP TRISD
008B0E  F80E30     PUSH TRISD
008B10  F90E20     POP TRISC
008B12  F80E20     PUSH TRISC
008B14  F90E10     POP TRISB
008B16  F80E10     PUSH TRISB
008B18  F90E00     POP TRISA
65:                    TRISA=0x1E01; CNPUA=0x0801;
008B1A  21E011     MOV #0x1E01, W1
008B1C  887001     MOV W1, TRISA
008B1E  208011     MOV #0x801, W1
008B20  887051     MOV W1, CNPUA
66:                    TRISB=0x0000; CNPUB=0x0000;
008B22  EF2E10     CLR TRISB
008B24  EF2E1A     CLR CNPUB
67:                    TRISC=0x2087;
008B26  220871     MOV #0x2087, W1
008B28  887101     MOV W1, TRISC
68:                    TRISD=0x011E; CNPUD=0x001E;
008B2A  2011E1     MOV #0x11E, W1
008B2C  887181     MOV W1, TRISD
008B2E  2001E1     MOV #0x1E, W1
008B30  8871D1     MOV W1, CNPUD
69:                    TRISE=0x7300;
008B32  273001     MOV #0x7300, W1
008B34  887201     MOV W1, TRISE
70:                    TRISF=0x00F0; CNPUF=0x00F1;
008B36  200F01     MOV #0xF0, W1
008B38  887281     MOV W1, TRISF
008B3A  E80081     INC W1, W1
008B3C  8872D1     MOV W1, CNPUF
71:                    TRISG=CNPUG=0xFFFF;   //PORTG all inputs,//weak pull ups on all of G
008B3E  887350     MOV W0, CNPUG
008B40  F80E6A     PUSH CNPUG
008B42  F90E60     POP TRISG
72:                    
73:                    /* DIGITAL OUTPUT LATCH */
74:                    LATA=LATB=LATC=LATD=LATE=LATF=LATG=0x0000;
008B44  EF2E64     CLR LATG
008B46  F80E64     PUSH LATG
008B48  F90E54     POP LATF
008B4A  F80E54     PUSH LATF
008B4C  F90E44     POP LATE
008B4E  F80E44     PUSH LATE
008B50  F90E34     POP LATD
008B52  F80E34     PUSH LATD
008B54  F90E24     POP LATC
008B56  F80E24     PUSH LATC
008B58  F90E14     POP LATB
008B5A  F80E14     PUSH LATB
008B5C  F90E04     POP LATA
75:                    LATA=0x0040;
008B5E  200400     MOV #0x40, W0
008B60  887020     MOV W0, LATA
76:                    
77:                    /* ANALOG PINS (1 = analog) */
78:                    ANSELA=ANSELB=ANSELC=ANSELD=ANSELE=ANSELF=ANSELG=0x0000;
008B62  EF2E6E     CLR ANSELG
008B64  F80E6E     PUSH ANSELG
008B66  F90E5E     POP ANSELF
008B68  F80E5E     PUSH ANSELF
008B6A  F90E4E     POP ANSELE
008B6C  F80E4E     PUSH ANSELE
008B6E  F90E3E     POP ANSELD
008B70  F80E3E     PUSH ANSELD
008B72  F90E2E     POP ANSELC
008B74  F80E2E     PUSH ANSELC
008B76  F90E1E     POP ANSELB
008B78  F80E1E     PUSH ANSELB
008B7A  F90E0E     POP ANSELA
79:                    ANSELCbits.ANSC0=1;     //AN6
008B7C  A80E2E     BSET ANSELC, #0
80:                    ANSELCbits.ANSC1=1;     //AN7
008B7E  A82E2E     BSET ANSELC, #1
81:                    ANSELCbits.ANSC2=1;     //AN8
008B80  A84E2E     BSET ANSELC, #2
82:                    ANSELAbits.ANSA12=1;    //AN10 
008B82  A88E0F     BSET 0xE0F, #4
83:                    ANSELEbits.ANSE8=1;     //AN21
008B84  A80E4F     BSET 0xE4F, #0
84:                    ANSELEbits.ANSE9=1;     //AN20
008B86  A82E4F     BSET 0xE4F, #1
85:                    
86:                    
87:                    
88:                }
008B88  060000     RETURN
89:                
90:                void initUART1(void){
91:                    IFS0bits.U1TXIF = 0;        //clear flag
008B8A  A98801     BCLR 0x801, #4
92:                    IFS0bits.U1RXIF = 0;        //clear flag
008B8C  A96801     BCLR 0x801, #3
93:                    U1STA=0x1510;               //enable tx & rx
008B8E  215100     MOV #0x1510, W0
008B90  881110     MOV W0, U1STA
94:                    U1BRG=BRGVAL;               //baud rate
008B92  2004A0     MOV #0x4A, W0
008B94  881140     MOV W0, U1BRG
95:                    U1MODEbits.PDSEL=1;         //8 bit data, even parity
008B96  2FFF90     MOV #0xFFF9, W0
008B98  B60220     AND U1MODE, WREG
008B9A  A01000     BSET W0, #1
008B9C  881100     MOV W0, U1MODE
96:                    IPC2bits.U1RXIP = 7;        //interrupt priority 3 (low)
008B9E  270000     MOV #0x7000, W0
008BA0  B72844     IOR IPC2
97:                    IPC3bits.U1TXIP = 7;        //interrupt priority 3 (low)
008BA2  200070     MOV #0x7, W0
008BA4  B72846     IOR IPC3
98:                    //IEC0bits.U1TXIE = 1;        //enable tx interrupt
99:                    //IEC0bits.U1RXIE = 1;        //enable rx interrupt
100:                   U1MODEbits.UARTEN = 1;      //start uart
008BA6  A8E221     BSET 0x221, #7
101:                   UART_ON = TRUE;
008BA8  EFF009     SETM.B UART_ON
102:                   
103:               }
008BAA  060000     RETURN
104:               
105:               void initADC1(void){ 
106:               
107:                   /* Assign MUXA inputs */
108:                   AD1CON1 = 0x04E4; // Enable 12-bit mode, auto-sample and auto-conversion
008BAC  204E40     MOV #0x4E4, W0
008BAE  881900     MOV W0, AD1CON1
109:                   AD1CON2 = 0x0408; // Sample alternately using channel scanning
008BB0  B10DC0     SUB #0xDC, W0
008BB2  881910     MOV W0, AD1CON2
110:                   AD1CON2bits.SMPI=(POTS/2)-1; // Sample 6 channels
008BB4  2FF830     MOV #0xFF83, W0
008BB6  B60322     AND AD1CON2, WREG
008BB8  B30140     IOR #0x14, W0
008BBA  881910     MOV W0, AD1CON2
111:                   AD1CON3 = 0x0F0F; // Sample for 15*TAD before converting
008BBC  20F0F0     MOV #0xF0F, W0
008BBE  881920     MOV W0, AD1CON3
112:                   AD1CON1bits.FORM=2;         //signed fractional format 
008BC0  2FCFF0     MOV #0xFCFF, W0
008BC2  B60320     AND AD1CON1, WREG
008BC4  A09000     BSET W0, #9
008BC6  881900     MOV W0, AD1CON1
113:                   AD1CON3bits.ADCS=0x07;
008BC8  B3C070     MOV.B #0x7, W0
008BCA  B7E324     MOV.B WREG, AD1CON3
114:                   AD1CON3bits.SAMC=0x1F;
008BCC  21F000     MOV #0x1F00, W0
008BCE  B72324     IOR AD1CON3
115:                   //select  AN6,7,8
116:                   AD1CSSLbits.CSS6=1; //AN6
008BD0  A8C330     BSET AD1CSSL, #6
117:                   AD1CSSLbits.CSS7=1; //AN7
008BD2  A8E330     BSET AD1CSSL, #7
118:                   AD1CSSLbits.CSS8=1; //AN8
008BD4  A80331     BSET 0x331, #0
119:                   AD1CSSLbits.CSS10=1;//AN10
008BD6  A84331     BSET 0x331, #2
120:                   AD1CSSHbits.CSS20=1;//AN20
008BD8  A8832E     BSET AD1CSSH, #4
121:                   AD1CSSHbits.CSS21=1;//AN21
008BDA  A8A32E     BSET AD1CSSH, #5
122:                   //AD1CSSLbits.CSS9=1; //AN9
123:                   /* Enable ADC module and provide ADC stabilization delay */
124:                   AD1CON1bits.ADON = 1;
008BDC  A8E321     BSET 0x321, #7
125:                   Delay_us(30);
008BDE  2001E0     MOV #0x1E, W0
008BE0  07FF15     RCALL Delay_us
126:               }
008BE2  060000     RETURN
127:               
128:               void initPMP(void){
129:                   /*
130:                    Data is clocked on falling edge of E
131:                    *  RS = 44 = PMAO (H = display data, L = display instruction)
132:                    *  E = 81 = PMWR (pulse width 450ns MIN, data triggers from H to L) 
133:                    */
134:                   PMMODEbits.MODE=3;  //master mode 1 
008BE4  203000     MOV #0x300, W0
008BE6  B72602     IOR PMMODE
135:                   PMCONbits.PTWREN = 1;
008BE8  A82601     BSET 0x601, #1
136:                   PMCONbits.PTRDEN = 1;
008BEA  A80601     BSET 0x601, #0
137:                   PMCONbits.WRSP=1;   //write strobe active high
008BEC  A82600     BSET PMCON, #1
138:                   PMCONbits.RDSP=1;   //read strobe active high
008BEE  A80600     BSET PMCON, #0
139:               
140:                   PMMODEbits.WAITB = 0;
008BF0  2FF3F0     MOV #0xFF3F, W0
008BF2  B62602     AND PMMODE
141:                   PMMODEbits.WAITM = 0xC;
008BF4  2FFC30     MOV #0xFFC3, W0
008BF6  B60602     AND PMMODE, WREG
008BF8  B30300     IOR #0x30, W0
008BFA  883010     MOV W0, PMMODE
142:                   PMMODEbits.WAITE = 0;
008BFC  2FFFC0     MOV #0xFFFC, W0
008BFE  B62602     AND PMMODE
143:                   LCD_RS=0;
008C00  A9EE45     BCLR 0xE45, #7
144:                   PMCONbits.PMPEN = 1;
008C02  A8E601     BSET 0x601, #7
145:                   
146:                   /* INIT DEVICE */
147:                   Delay_us(40000);
008C04  29C400     MOV #0x9C40, W0
008C06  07FF02     RCALL Delay_us
148:                   lcdInit();
008C08  07FA7A     RCALL lcdInit
149:                   
150:                   /* SETUP SCREEN */
151:                   //lcdSetupPots();
152:               }
008C0A  060000     RETURN
153:               
154:               
155:               //Description: Initializes timer for LED's UART and display
156:               //Prereq: initUART1()
157:               //Dependencies: _T1Interrupt(void)
158:               //Frequency: 15Hz
159:               void initT1(void){          //16 bit timer
160:                   TMR1 = 0x0000;          //clear timer 4
008C0C  EF2100     CLR TMR1
161:                   T1CONbits.TCKPS = 3;    //prescale 1:256
008C0E  200300     MOV #0x30, W0
008C10  B72104     IOR T1CON
162:                   T1CONbits.TCS = 0;      //use internal clock
008C12  A92104     BCLR T1CON, #1
163:                   T1CONbits.TGATE = 0;    //gate accumulation disabled
008C14  A9C104     BCLR T1CON, #6
164:                   PR1 = Fcy/(256*Fdisp);    //period register
008C16  246500     MOV #0x4650, W0
008C18  880810     MOV W0, PR1
165:                   //PR1=0x7FFF;
166:               
167:                   T1CONbits.TON = 1;      //start timer
008C1A  A8E105     BSET 0x105, #7
168:               }
008C1C  060000     RETURN
169:               
170:               //Description:  Initializes timer handles polling button input
171:               //Prereq: initADC1() 
172:               //Dependencies: _T2Interrupt(void)
173:               //Frequency: 512Hz
174:               void initT2(void){          //16/32 bit timer
175:                   TMR2 = 0x0000;          //clear timer 4
008C1E  EF2106     CLR TMR2
176:                   T2CONbits.T32 = 0;      //16 bit mode
008C20  A96110     BCLR T2CON, #3
177:                   T2CONbits.TCKPS = 1;    //prescale 1:8
008C22  2FFCF0     MOV #0xFFCF, W0
008C24  B60110     AND T2CON, WREG
008C26  A04000     BSET W0, #4
008C28  880880     MOV W0, T2CON
178:                   T2CONbits.TCS = 0;      //use internal clock
008C2A  A92110     BCLR T2CON, #1
179:                   T2CONbits.TGATE = 0;    //gate accumulation disabled
008C2C  A9C110     BCLR T2CON, #6
180:                   PR2 = Fcy/(8*Fscan);      //period register about 512hz, PR2 = 0x3938 
008C2E  270800     MOV #0x7080, W0
008C30  880860     MOV W0, PR2
181:               
182:                   T2CONbits.TON = 1;      //start timer
008C32  A8E111     BSET 0x111, #7
183:               }
008C34  060000     RETURN
184:               
185:               //Description: Initialize timer handling LCD sending
186:               //Dependencies: _T3Interrupt(void)
187:               //Frequency: 44.1kHz
188:               void initT3(void){          //16/32 bit timer
189:                   TMR3 = 0x0000;          //clear timer 3
008C36  EF210A     CLR TMR3
190:                   T3CONbits.TCKPS = 1;    //prescale 8:1
008C38  2FFCF0     MOV #0xFFCF, W0
008C3A  B60112     AND T3CON, WREG
008C3C  A04000     BSET W0, #4
008C3E  880890     MOV W0, T3CON
191:                   T3CONbits.TCS = 0;      //use internal clock
008C40  A92112     BCLR T3CON, #1
192:                   T3CONbits.TGATE = 0;    //gate accumulation disabled
008C42  A9C112     BCLR T3CON, #6
193:                   //PR3 = Fcy/(256*T3freq);           //period register
194:                   PR3 = 0x01D0;           //45uS initial delay
008C44  201D00     MOV #0x1D0, W0
008C46  880870     MOV W0, PR3
195:                   
196:                   T3CONbits.TON = 1;
008C48  A8E113     BSET 0x113, #7
197:                   
198:               }
008C4A  060000     RETURN
199:               
200:               /*=============================================================================  
201:               Timer 5 is setup to time-out every 125 microseconds (8Khz Rate). As a result, the module 
202:               will stop sampling and trigger a conversion on every Timer3 time-out, i.e., Ts=125us. 
203:               =============================================================================*/
204:               void initT5() 
205:               {
206:                       TMR5 = 0x0000;
008C4C  EF2118     CLR TMR5
207:                       PR5 = 4999;
008C4E  213870     MOV #0x1387, W0
008C50  8808E0     MOV W0, PR5
208:                       T5CONbits.TCKPS = 2;    //prescale 8:1
008C52  2FFCF0     MOV #0xFFCF, W0
008C54  B60120     AND T5CON, WREG
008C56  A05000     BSET W0, #5
008C58  880900     MOV W0, T5CON
209:                       IFS1bits.T5IF = 0;
008C5A  A98803     BCLR 0x803, #4
210:                       IEC1bits.T5IE = 0;
008C5C  A98823     BCLR 0x823, #4
211:               
212:                       //Start Timer 3
213:                       T5CONbits.TON = 1;
008C5E  A8E121     BSET 0x121, #7
214:               
215:               }
008C60  060000     RETURN
216:               
217:               //Description: Initializes & starts 16 bit DCI I2S DAC
218:               //Prereq: initSPI_ADC(void)
219:               //Dependencies: readDAC(void)
220:               void initDCI_DAC(void){
221:                   DCICON3bits.BCG=(Fcy/(64*Fout)-1);  //calculate baud rate (WILL TRUNCATE)
008C62  2F0000     MOV #0xF000, W0
008C64  B60284     AND DCICON3, WREG
008C66  B30170     IOR #0x17, W0
008C68  881420     MOV W0, DCICON3
222:                   DCICON1bits.COFSM=1;                //i2s mode
008C6A  2FFFC0     MOV #0xFFFC, W0
008C6C  B60280     AND DCICON1, WREG
008C6E  A00000     BSET W0, #0
008C70  881400     MOV W0, DCICON1
223:                   DCICON1bits.CSCKE=1;                //sample on rising edge
008C72  A82281     BSET 0x281, #1
224:                   DCICON2bits.WS=0xF;                 //16 bit data word
008C74  2000F0     MOV #0xF, W0
008C76  B72282     IOR DCICON2
225:                   DCICON2bits.COFSG=0;    //data frame has 1 word (per frame)
008C78  2FE1F0     MOV #0xFE1F, W0
008C7A  B62282     AND DCICON2
226:                   DCICON1bits.DJST=0;     //align data
008C7C  A9A280     BCLR DCICON1, #5
227:                   DCICON2bits.BLEN=3;     //4 words buffer btwn interrupts
008C7E  20C000     MOV #0xC00, W0
008C80  B72282     IOR DCICON2
228:                   
229:                   TSCONbits.TSE0 = 1;     // Transmit on Time Slot 0     
008C82  A80288     BSET TSCON, #0
230:                   TSCONbits.TSE1 = 1;     // Transmit on Time Slot 1   
008C84  A82288     BSET TSCON, #1
231:                   TSCONbits.TSE2 = 1;     // Transmit on Time Slot 2     
008C86  A84288     BSET TSCON, #2
232:                   TSCONbits.TSE3 = 1;     // Transmit on Time Slot 3   
008C88  A86288     BSET TSCON, #3
233:                   RSCONbits.RSE0 = 1;     // rcv on Time Slot 0     
008C8A  A8028C     BSET RSCON, #0
234:                   RSCONbits.RSE1 = 1;     // rcv on Time Slot 1 
008C8C  A8228C     BSET RSCON, #1
235:                   RSCONbits.RSE2 = 1;     // rcv on Time Slot 2     
008C8E  A8428C     BSET RSCON, #2
236:                   RSCONbits.RSE3 = 1;     // rcv on Time Slot 3 
008C90  A8628C     BSET RSCON, #3
237:                   
238:               
239:                   
240:                   IPC15bits.DCIIP = 6;    // Interrput priority
008C92  2FFF80     MOV #0xFFF8, W0
008C94  B6085E     AND IPC15, WREG
008C96  B30060     IOR #0x6, W0
008C98  8842F0     MOV W0, IPC15
241:                   IFS3bits.DCIIF=0;
008C9A  A98807     BCLR 0x807, #4
242:                   IEC3bits.DCIIE=1;       //=0 to let dma handle interrupt
008C9C  A88827     BSET 0x827, #4
243:                   
244:                   // Pre-load send registers.
245:                   TXBUF0=0;
008C9E  EF2298     CLR TXBUF0
246:                   TXBUF1=0;   
008CA0  EF229A     CLR TXBUF1
247:                   TXBUF2=0;
008CA2  EF229C     CLR TXBUF2
248:                   TXBUF3=0;
008CA4  EF229E     CLR TXBUF3
249:                   DCICON1bits.DCIEN=1;    //ENABLE
008CA6  A8E281     BSET 0x281, #7
250:                   // Stabilization delay
251:                   Delay_us(20);
008CA8  200140     MOV #0x14, W0
008CAA  07FEB0     RCALL Delay_us
252:               }
008CAC  060000     RETURN
253:               
254:               void initDMA(void){
255:                   /* RX */
256:                   IFS0bits.DMA1IF = 0;
008CAE  A9C801     BCLR 0x801, #6
257:                   DMA1CONbits.SIZE=1;                             // Byte size
008CB0  A8CB11     BSET 0xB11, #6
258:                   DMA1CONbits.DIR=0;                              // Read from flash
008CB2  A9AB11     BCLR 0xB11, #5
259:                   DMA1CONbits.MODE=3;                             // One shot, ping pong
008CB4  200030     MOV #0x3, W0
008CB6  B72B10     IOR DMA1CON
260:                   DMA1STAL = (unsigned int)&RxBufferA;
008CB8  2105C0     MOV #0x105C, W0
008CBA  8858A0     MOV W0, DMA1STAL
261:                   DMA1STAH = (unsigned int)&RxBufferB;
008CBC  2106C0     MOV #0x106C, W0
008CBE  8858B0     MOV W0, DMA1STAH
262:                   DMA1PAD = (volatile unsigned int) &SPI3BUF;
008CC0  202A82     MOV #0x2A8, W2
008CC2  8858E2     MOV W2, DMA1PAD
263:                   //DMA1CNT = (unsigned int)(FLASH_DMAXFERS-1);
264:                   DMA1CNT = 4;
008CC4  200041     MOV #0x4, W1
008CC6  8858F1     MOV W1, DMA1CNT
265:                   DMA1REQbits.IRQSEL = 0x5B;
008CC8  B3C5B4     MOV.B #0x5B, W4
008CCA  20B120     MOV #0xB12, W0
008CCC  784804     MOV.B W4, [W0]
266:                   DMA1CONbits.CHEN = 1;
008CCE  A8EB11     BSET 0xB11, #7
267:                   IEC0bits.DMA1IE = 1;
008CD0  A8C821     BSET 0x821, #6
268:                   
269:                   /* TX */
270:                   IFS0bits.DMA0IF = 0;
008CD2  A98800     BCLR IFS0, #4
271:                   DMAPWC = 0;
008CD4  EF2BF0     CLR DMAPWC
272:                   DMA0CONbits.SIZE=1;                             // Byte size
008CD6  A8CB01     BSET 0xB01, #6
273:                   DMA0CONbits.DIR=1;                              // Write to flash
008CD8  A8AB01     BSET 0xB01, #5
274:                   DMA0CONbits.MODE=3;                             // One shot, ping pong
008CDA  200030     MOV #0x3, W0
008CDC  B72B00     IOR DMA0CON
275:                   DMA0STAL = (unsigned int)&TxBufferA;
008CDE  2103C3     MOV #0x103C, W3
008CE0  885823     MOV W3, DMA0STAL
276:                   DMA0STAH = (unsigned int)&TxBufferB;
008CE2  2104C3     MOV #0x104C, W3
008CE4  885833     MOV W3, DMA0STAH
277:                   DMA0PAD = (volatile unsigned int) &SPI3BUF;
008CE6  885862     MOV W2, DMA0PAD
278:                   //DMA0CNT = (unsigned int)(FLASH_DMAXFERS-1);
279:                   DMA0CNT = 4;
008CE8  885871     MOV W1, DMA0CNT
280:                   DMA0REQbits.IRQSEL = 0x5B;
008CEA  784184     MOV.B W4, W3
008CEC  20B021     MOV #0xB02, W1
008CEE  784883     MOV.B W3, [W1]
281:                   IEC0bits.DMA0IE = 1;
008CF0  A88820     BSET IEC0, #4
282:                   DMA0CONbits.CHEN = 1;
008CF2  A8EB01     BSET 0xB01, #7
283:               }
008CF4  060000     RETURN
284:               
285:               void initSPI3_MEM(void){
286:                   SS3=1;                     // Assert chip select (active low)
008CF6  A82E54     BSET LATF, #1
287:                   IFS5bits.SPI3IF = 0;        // Clear the Interrupt flag
008CF8  A9680B     BCLR 0x80B, #3
288:                   IEC5bits.SPI3IE = 0;        // Disable the interrupt
008CFA  A9682B     BCLR 0x82B, #3
289:                   SPI3CON1bits.MSTEN=1;       //master mode
008CFC  A8A2A2     BSET SPI3CON1, #5
290:                   SPI3CON1bits.DISSCK = 0;    //Internal serial clock is enabled
008CFE  A982A3     BCLR 0x2A3, #4
291:                   SPI3CON1bits.MODE16=0;      //8 bitBufferB
008D00  A942A3     BCLR 0x2A3, #2
292:                   SPI3CON1bits.DISSDO=0;      //enable SDO 
008D02  A962A3     BCLR 0x2A3, #3
293:                   SPI3CON1bits.SSEN=1;        //use SS
008D04  A8E2A2     BSET SPI3CON1, #7
294:                   SPI3CON2bits.FRMEN=0;       //no enable framed mode
008D06  A9E2A5     BCLR 0x2A5, #7
295:                   SPI3CON2bits.SPIBEN=0;      //enhanced buffer mode
008D08  A902A4     BCLR SPI3CON2, #0
296:                   SPI2STATbits.SISEL=5;       //interrupt when done sending
008D0A  2FFE33     MOV #0xFFE3, W3
008D0C  801300     MOV SPI2STAT, W0
008D0E  618080     AND W3, W0, W1
008D10  B30141     IOR #0x14, W1
008D12  881301     MOV W1, SPI2STAT
297:                   
298:                   SPI3STATbits.SPISIDL = 0; // Continue module operation in Idle mode
008D14  A9A2A1     BCLR 0x2A1, #5
299:                   SPI3STATbits.SPIBEC = 0; // Buffer Length = 1 Word
008D16  2F8FF1     MOV #0xF8FF, W1
008D18  202A02     MOV #0x2A0, W2
008D1A  608912     AND W1, [W2], [W2]
300:                   
301:                   SPI3CON1bits.SMP=1;         //data sampled at end of output time
008D1C  A822A3     BSET 0x2A3, #1
302:                   SPI3CON1bits.CKP=0;         //idle clock is low
008D1E  A9C2A2     BCLR SPI3CON1, #6
303:                   SPI3CON1bits.CKE=1;         //data changes from H to L
008D20  A802A3     BSET 0x2A3, #0
304:                   
305:                   SPI3CON1bits.PPRE=3;        //1:1 primary prescale
008D22  200030     MOV #0x3, W0
008D24  B722A2     IOR SPI3CON1
306:                   SPI3CON1bits.SPRE=5;        //2:1 secondary (6)
008D26  801511     MOV SPI3CON1, W1
008D28  618001     AND W3, W1, W0
008D2A  B30140     IOR #0x14, W0
008D2C  881510     MOV W0, SPI3CON1
307:                   
308:                   SPI3STATbits.SPIROV = 0;        // Clear SPI1 receive overflow flag if set
008D2E  A9C2A0     BCLR SPI3STAT, #6
309:                   //IPC22bits.SPI3IP = 3;         // Interrupt priority
310:                   //IFS5bits.SPI3IF = 0;          // Clear the Interrupt flag
311:                   SPI3STATbits.SPIEN = 1;         //start SPI module
008D30  A8E2A1     BSET 0x2A1, #7
312:                   // Force First Word After Enabling SPI
313:                   Delay_us(5);                       // Stabilization Delay
008D32  200050     MOV #0x5, W0
008D34  07FE6B     RCALL Delay_us
314:                   
315:                   //flashWriteReg(FLASH_WREN);
316:                   /*
317:                   flashBulkErase();
318:                   while(flashStatusCheck()&1);
319:               
320:                   flashWritePage
321:                   while(flashStatusCheck()&1);
322:                   */
323:                   flashRead(flash_readback, 256);     // READBACK
008D36  201001     MOV #0x100, W1
008D38  2107C0     MOV #0x107C, W0
008D3A  0702A1     RCALL flashRead
324:                   
325:                   
326:               }
008D3C  060000     RETURN
327:               
328:               void initQEI_ENC(void){
329:                   QEI1CONbits.INTDIV=6;       // 1:64 prescaler
008D3E  2FF8F0     MOV #0xFF8F, W0
008D40  B601C0     AND QEI1CON, WREG
008D42  B30600     IOR #0x60, W0
008D44  880E00     MOV W0, QEI1CON
330:                   QEI1IOCbits.FLTREN=1;       // Enable input filter
008D46  A8C1C3     BSET 0x1C3, #6
331:                   QEI1CONbits.QEIEN=1;        // Enable Quad encoder inteface
008D48  A8E1C1     BSET 0x1C1, #7
332:               }
008D4A  060000     RETURN
333:               
---  /home/fbuga/Documents/ps-040/audio.c  --------------------------------------------------------------
1:                 #include "xc.h"
2:                 #include "audio.h"
3:                 #include "common.h"
4:                 #include "sounds.h"
5:                 #include <dsp.h>
6:                 #include "utilities.h"
7:                 
8:                 
9:                 extern char pad[BUTTONS];                                                             //CONTROL VARIABLES//
10:                extern fractional pots[POTS];
11:                extern fractional pots_scaled[POTS];
12:                
13:                extern fractional sintab[SINRES];
14:                
15:                volatile unsigned int loop_ptr = 0;                                             //FX FLAGS & VARS//
16:                extern unsigned char hard_clipped;
17:                
18:                static fractional loopbuf[LOOP_BUF_SIZE] __attribute__ ((eds)) = {0};
19:                struct clip_eds history = {.size = LOOP_BUF_SIZE, .blocks=LOOP_BUF_SIZE/STREAMBUF, .playing=FALSE, .flash=FALSE, .block_index=0, .start_ptr=loopbuf, .end_ptr=&loopbuf[LOOP_BUF_SIZE-1], .read_ptr=loopbuf};
20:                
21:                fractional lpf_alpha=Q15(0.5), lpf_inv_alpha=Q15(0.5);
22:                static fractional psvbuf[STREAMBUF]={0};
23:                static fractional flashbufA[STREAMBUF]={0};
24:                static fractional flashbufB[STREAMBUF]={0};
25:                
26:                
27:                extern unsigned char TEST_SIN;
28:                
29:                extern enum fxStruct fxUnits[NUMFXUNITS];
30:                extern struct clip_psv sine, kick, snare;
31:                
32:                
33:                void (*fxFuncPointers[NUMFX])(fractional *, fractional *, fractional, fractional, fractional) = {NULL, runLPF, runTRM, runLOP, runBTC};
34:                
35:                void runBufferLooper(fractional *source){
008F3C  FA0002     LNK #0x2
008F3E  BE9F88     MOV.D W8, [W15++]
008F48  BE0300     MOV.D W0, W6
008F4A  B02006     ADD #0x200, W6
008F4C  B08007     ADDC #0x0, W7
36:                    flashbufA[0]=*source;
008F40  780090     MOV [W0], W1
008F42  88E741     MOV W1, flashbufA
37:                    flashbufB[0]=*source;
008F44  88F741     MOV W1, flashbufB
008F46  EB0080     CLR W1
38:                    
39:                    static fractional delayed_sample;
40:                    volatile fractional sample;
41:                    
42:                    int *readPTR=source;
43:                    
44:                    int counter=0;
45:                    for(; counter<STREAMBUF; counter++){
008F82  500F86     SUB W0, W6, [W15]
008F84  588F87     SUBB W1, W7, [W15]
008F86  3AFFE6     BRA NZ, 0x8F54
46:                        sample=*readPTR++; //!rw
008F54  780110     MOV [W0], W2
008F56  9FBFD2     MOV W2, [W15-6]
47:                        if(loop_ptr<LOOP_BUF_SIZE)
008F4E  243FF4     MOV #0x43FF, W4
008F58  808109     MOV loop_ptr, W9
008F5A  548F84     SUB W9, W4, [W15]
008F5C  3E0008     BRA GTU, 0x8F6E
48:                            loopbuf[loop_ptr++]=sample;
008F5E  808102     MOV loop_ptr, W2
008F60  D00282     SL W2, W5
008F62  428283     ADD W5, W3, W5
008F64  97BCDF     MOV [W15-6], W9
008F66  780A89     MOV W9, [W5]
008F68  E80102     INC W2, W2
008F6A  888102     MOV W2, loop_ptr
008F6C  370008     BRA 0x8F7E
49:                        else {
50:                            loop_ptr=0;
008F50  EB0400     CLR W8
008F6E  888108     MOV W8, loop_ptr
51:                            loopbuf[loop_ptr++]=sample;
008F52  248003     MOV #0x4800, W3
008F70  808102     MOV loop_ptr, W2
008F72  D00282     SL W2, W5
008F74  428283     ADD W5, W3, W5
008F76  97BCDF     MOV [W15-6], W9
008F78  780A89     MOV W9, [W5]
008F7A  E80102     INC W2, W2
008F7C  888102     MOV W2, loop_ptr
008F7E  400062     ADD W0, #0x2, W0
008F80  4880E0     ADDC W1, #0x0, W1
52:                        }
53:                    }
54:                }
008F88  BE044F     MOV.D [--W15], W8
008F8A  FA8000     ULNK
008F8C  060000     RETURN
55:                
56:                void runLPF(fractional *source, fractional *destination, fractional param1, fractional param2, fractional param3){
008EE4  FA0002     LNK #0x2
008EE6  F80022     PUSH ACCA
008EE8  F80024     PUSH ACCAH
008EEA  F80026     PUSH ACCAU
008F04  BE0302     MOV.D W2, W6
008F06  B02006     ADD #0x200, W6
008F08  B08007     ADDC #0x0, W7
57:                    volatile register int result asm("A");
58:                    static fractional delayed_sample;
59:                    volatile fractional sample;
60:                    if(param3>=0x3FFF){     //LPF CONTROL
008EEC  23FFE3     MOV #0x3FFE, W3
008EEE  520F83     SUB W4, W3, [W15]
008EF0  340020     BRA LE, 0x8F32
61:                        if(param1>=310){                      
008EF2  201353     MOV #0x135, W3
008EF4  510F83     SUB W2, W3, [W15]
008EF6  340004     BRA LE, 0x8F00
62:                            lpf_alpha=param1;
008EF8  888162     MOV W2, 0x102C
63:                            lpf_inv_alpha=(32767-lpf_alpha); 
008EFA  27FFF3     MOV #0x7FFF, W3
008EFC  518102     SUB W3, W2, W2
008EFE  888172     MOV W2, 0x102E
008F00  B80161     MUL.UU W0, #1, W2
008F02  B80861     MUL.UU W1, #1, W0
64:                        }
65:                
66:                
67:                        int *readPTR=source;
68:                        int *rewritePTR=destination;
69:                
70:                
71:                        int counter=0;
72:                        for(; counter<STREAMBUF; counter++){
008F2C  510F86     SUB W2, W6, [W15]
008F2E  598F87     SUBB W3, W7, [W15]
008F30  3AFFEC     BRA NZ, 0x8F0A
73:                            sample=*readPTR++; //!rw
008F0A  780212     MOV [W2], W4
008F0C  9FBFC4     MOV W4, [W15-8]
74:                
75:                            //LPF-EMA//   y(i)= ??x(i)+(1-?)?y(i-1)
76:                            result =__builtin_mpy(sample,lpf_alpha, NULL, NULL, 0, NULL, NULL, 0);
008F0E  97BA4F     MOV [W15-8], W4
008F10  808165     MOV 0x102C, W5
008F12  C00113     MPY W4*W5, A
77:                            result =__builtin_mac(result, delayed_sample, lpf_inv_alpha, NULL, NULL, 0, NULL, NULL, 0, 0, result);
008F14  808174     MOV 0x102E, W4
008F16  808135     MOV delayed_sample, W5
008F18  C00112     MAC W4*W5, A
78:                            delayed_sample=__builtin_sac(result, 0);
008F1A  CC0004     SAC A, W4
008F1C  888134     MOV W4, delayed_sample
79:                            sample=delayed_sample;
008F1E  9FBFC4     MOV W4, [W15-8]
80:                
81:                            *rewritePTR++=sample; //rw
008F20  97BA4F     MOV [W15-8], W4
008F22  780804     MOV W4, [W0]
008F24  410162     ADD W2, #0x2, W2
008F26  4981E0     ADDC W3, #0x0, W3
008F28  400062     ADD W0, #0x2, W0
008F2A  4880E0     ADDC W1, #0x0, W1
82:                        }
83:                    }
84:                    
85:                }
008F32  F90026     POP ACCAU
008F34  F90024     POP ACCAH
008F36  F90022     POP ACCA
008F38  FA8000     ULNK
008F3A  060000     RETURN
86:                
87:                void runTRM(fractional *source, fractional *destination, fractional param1, fractional param2, fractional param3){
008D4C  4787E6     ADD W15, #0x6, W15
008D4E  BE9F88     MOV.D W8, [W15++]
008D50  BE9F8A     MOV.D W10, [W15++]
008D52  BE9F8C     MOV.D W12, [W15++]
008D54  781F8E     MOV W14, [W15++]
008D56  F80022     PUSH ACCA
008D58  F80024     PUSH ACCAH
008D5A  F80026     PUSH ACCAU
008D5C  F80028     PUSH ACCB
008D5E  F8002A     PUSH ACCBH
008D60  F8002C     PUSH ACCBU
008D62  780283     MOV W3, W5
008D7C  BE0402     MOV.D W2, W8
008D7E  B02008     ADD #0x200, W8
008D80  B08009     ADDC #0x0, W9
88:                    volatile register int result1 asm("A");
89:                    volatile register int result2 asm("B");
90:                    volatile fractional sample, trem_mod;
91:                    int *readPTR=source;
92:                    int *rewritePTR=destination;
93:                    int counter=0;
94:                    static unsigned int trem_delay=0, tremelo_ptr=0;
95:                    const int pot_offset = 5;
96:                    
97:                    if(param3>=0x3FFF){     // TREM CONTROL
008D64  23FFE3     MOV #0x3FFE, W3
008D66  520F83     SUB W4, W3, [W15]
008D68  34004A     BRA LE, 0x8DFE
98:                        result1 =__builtin_mpy(param1,Q15(0.0006), NULL, NULL, 0, NULL, NULL, 0);
008D6A  780202     MOV W2, W4
008D6C  200146     MOV #0x14, W6
008D6E  C10113     MPY W4*W6, A
99:                        param1=__builtin_sac(result1, 0);
008D70  CC0006     SAC A, W6
100:                       if(param2<-0x7) param2=0;
008D72  428FE7     ADD W5, #0x7, [W15]
008D74  3D0001     BRA GE, 0x8D78
008D76  EB0280     CLR W5
008D78  B80961     MUL.UU W1, #1, W2
008D7A  EB0080     CLR W1
101:                       
102:                       for(; counter<STREAMBUF; counter++){
008DF8  510F88     SUB W2, W8, [W15]
008DFA  598F89     SUBB W3, W9, [W15]
008DFC  3AFFC7     BRA NZ, 0x8D8C
103:                           sample=*readPTR++; //!rw
008D8C  780390     MOV [W0], W7
008D8E  9FB797     MOV W7, [W15-30]
104:                                                                          //TREMELO//
105:                           if (trem_delay<=param1+pot_offset){
008D82  430365     ADD W6, #0x5, W6
008D90  808124     MOV trem_delay, W4
008D92  530F84     SUB W6, W4, [W15]
008D94  390013     BRA NC, 0x8DBC
106:                               trem_delay++;
008D96  E80204     INC W4, W4
008D98  888124     MOV W4, trem_delay
107:                               result1 =__builtin_mpy(param2,sintab[tremelo_ptr], NULL, NULL, 0, NULL, NULL, 0);
008D9A  808114     MOV tremelo_ptr, W4
008D9C  D00204     SL W4, W4
008D9E  42020A     ADD W4, W10, W4
008DA0  780214     MOV [W4], W4
008DA2  C00113     MPY W4*W5, A
108:                               trem_mod=__builtin_sac(result1, 0);
008DA4  CC0004     SAC A, W4
008DA6  9FB7A4     MOV W4, [W15-28]
109:                               trem_mod=0x7FF0-trem_mod;
008DA8  97B22F     MOV [W15-28], W4
008DAA  570204     SUB W14, W4, W4
008DAC  9FB7A4     MOV W4, [W15-28]
110:                               result2 =__builtin_mpy(trem_mod,sample, NULL, NULL, 0, NULL, NULL, 0);
008DAE  97B69F     MOV [W15-30], W13
008DB0  97B3AF     MOV [W15-28], W7
008DB2  78020D     MOV W13, W4
008DB4  C28113     MPY W4*W7, B
111:                               sample=__builtin_sac(result2, 0);
008DB6  CC8007     SAC B, W7
008DB8  9FB797     MOV W7, [W15-30]
008DBA  370018     BRA 0x8DEC
112:                           }
113:                           else{
114:                               trem_delay=0;
008D84  EB0580     CLR W11
008DBC  88812B     MOV W11, trem_delay
115:                               if(tremelo_ptr==1024)
008D86  20400C     MOV #0x400, W12
008DBE  808114     MOV tremelo_ptr, W4
008DC0  520F8C     SUB W4, W12, [W15]
008DC2  3A0002     BRA NZ, 0x8DC8
116:                                   tremelo_ptr=0;
008DC4  88811B     MOV W11, tremelo_ptr
008DC6  370002     BRA 0x8DCC
117:                               else tremelo_ptr++;
008DC8  E80204     INC W4, W4
008DCA  888114     MOV W4, tremelo_ptr
118:                               
119:                               result1 =__builtin_mpy(param2,sintab[tremelo_ptr], NULL, NULL, 0, NULL, NULL, 0);
008D88  2F1CCA     MOV #0xF1CC, W10
008DCC  808114     MOV tremelo_ptr, W4
008DCE  D00204     SL W4, W4
008DD0  42020A     ADD W4, W10, W4
008DD2  780214     MOV [W4], W4
008DD4  C00113     MPY W4*W5, A
120:                               trem_mod=__builtin_sac(result1, 0);
008DD6  CC0004     SAC A, W4
008DD8  9FB7A4     MOV W4, [W15-28]
121:                               trem_mod=0x7FF0-trem_mod;
008D8A  27FF0E     MOV #0x7FF0, W14
008DDA  97B22F     MOV [W15-28], W4
008DDC  570204     SUB W14, W4, W4
008DDE  9FB7A4     MOV W4, [W15-28]
122:                               result2 =__builtin_mpy(trem_mod,sample, NULL, NULL, 0, NULL, NULL, 0);
008DE0  97B69F     MOV [W15-30], W13
008DE2  97B22F     MOV [W15-28], W4
008DE4  78038D     MOV W13, W7
008DE6  C28113     MPY W4*W7, B
123:                               sample=__builtin_sac(result2, 0);
008DE8  CC8004     SAC B, W4
008DEA  9FB794     MOV W4, [W15-30]
124:                           }
125:               
126:                           *rewritePTR++=sample; //rw
008DEC  97B39F     MOV [W15-30], W7
008DEE  780907     MOV W7, [W2]
008DF0  410162     ADD W2, #0x2, W2
008DF2  4981E0     ADDC W3, #0x0, W3
008DF4  400062     ADD W0, #0x2, W0
008DF6  4880E0     ADDC W1, #0x0, W1
127:                       }
128:                   }
129:               }
008DFE  F9002C     POP ACCBU
008E00  F9002A     POP ACCBH
008E02  F90028     POP ACCB
008E04  F90026     POP ACCAU
008E06  F90024     POP ACCAH
008E08  F90022     POP ACCA
008E0A  78074F     MOV [--W15], W14
008E0C  BE064F     MOV.D [--W15], W12
008E0E  BE054F     MOV.D [--W15], W10
008E10  BE044F     MOV.D [--W15], W8
008E12  B1006F     SUB #0x6, W15
008E14  060000     RETURN
130:               
131:               void runBTC(fractional *source, fractional *destination, fractional param1, fractional param2, fractional param3){
008E96  FA0002     LNK #0x2
008E98  BE9F88     MOV.D W8, [W15++]
008E9A  BE9F8A     MOV.D W10, [W15++]
008E9C  780480     MOV W0, W9
008E9E  780501     MOV W1, W10
008EA0  780082     MOV W2, W1
008EA2  780404     MOV W4, W8
008EB2  BE0200     MOV.D W0, W4
008EB4  B02004     ADD #0x200, W4
008EB6  B08005     ADDC #0x0, W5
132:                   volatile fractional sample;
133:                   
134:                   int *readPTR=source;
135:                   int *rewritePTR=destination;
136:                   int counter=0;
137:                   int shift = scalePotsCustom(14, param1);
008EA4  2000E0     MOV #0xE, W0
008EA6  07FCE9     RCALL scalePotsCustom
138:                   fractional shiftedsample, sign;
139:                   
140:                   for(; counter<STREAMBUF; counter++){
008ED6  500F84     SUB W0, W4, [W15]
008ED8  588F85     SUBB W1, W5, [W15]
008EDA  3AFFEF     BRA NZ, 0x8EBA
141:                       sample=*readPTR++; //!rw
008EBA  780310     MOV [W0], W6
008EBC  9FBFB6     MOV W6, [W15-10]
142:                       
143:                       if(param3>=0x3FFF){     // BIT CONTROL
008EB8  23FFE2     MOV #0x3FFE, W2
008EBE  540F82     SUB W8, W2, [W15]
008EC0  340004     BRA LE, 0x8ECA
144:                           sign = sample&0x8000;
008EC2  97BB3F     MOV [W15-10], W6
145:                           sample=sample&(-1<<(16-shift));
008EA8  100070     SUBR W0, #0x10, W0
008EAA  EB8180     SETM W3
008EAC  DD1980     SL W3, W0, W3
008EAE  B84861     MUL.UU W9, #1, W0
008EB0  EB0580     CLR W11
008EC4  97BB3F     MOV [W15-10], W6
008EC6  618306     AND W3, W6, W6
008EC8  9FBFB6     MOV W6, [W15-10]
146:                       }
147:               
148:                       *rewritePTR++=sample; //rw
008ECA  97BB3F     MOV [W15-10], W6
008ECC  780D06     MOV W6, [W10]
008ECE  400062     ADD W0, #0x2, W0
008ED0  4880E0     ADDC W1, #0x0, W1
008ED2  450562     ADD W10, #0x2, W10
008ED4  4D85E0     ADDC W11, #0x0, W11
149:                   }
150:               }
008EDC  BE054F     MOV.D [--W15], W10
008EDE  BE044F     MOV.D [--W15], W8
008EE0  FA8000     ULNK
008EE2  060000     RETURN
151:               
152:               void runLOP(fractional *source, fractional *destination, fractional param1, fractional param2, fractional param3){
008E16  F80022     PUSH ACCA
008E18  F80024     PUSH ACCAH
008E1A  F80026     PUSH ACCAU
153:                   volatile register int result asm("A");
154:                   
155:                   result =__builtin_mpy(param1, POT_LOOP, NULL, NULL, 0, NULL, NULL, 0);
008E1C  780282     MOV W2, W5
008E1E  244006     MOV #0x4400, W6
008E20  C40113     MPY W5*W6, A
156:                   int loop_lim = __builtin_sac(result, 0);
008E22  CC0002     SAC A, W2
157:                   
158:                   __eds__ fractional *ptrr = history.start_ptr;
008E24  812E66     MOV 0x25CC, W6
008E26  812E77     MOV 0x25CE, W7
159:                   ptrr+=loop_lim;
008E28  DE91CF     ASR W2, #15, W3
008E2A  410102     ADD W2, W2, W2
008E2C  498183     ADDC W3, W3, W3
008E2E  D28F82     RLC W2, [W15]
008E30  D28183     RLC W3, W3
008E32  780102     MOV W2, W2
008E34  A1F002     BCLR W2, #15
008E36  D00006     SL W6, W0
008E38  D00282     SL W2, W5
008E3A  400105     ADD W0, W5, W2
008E3C  A82042     BSET SR, #1
008E3E  4B8183     ADDC W7, W3, W3
008E40  A90042     BCLR SR, #0
008E42  AE2042     BTSS SR, #1
008E44  A80042     BSET SR, #0
008E46  D38102     RRC W2, W2
160:                   
161:                   //Run looper Buffer
162:                   if(history.read_ptr>=(ptrr)) {
008E48  225D40     MOV #0x25D4, W0
008E4A  900290     MOV [W0+2], W5
008E4C  528F83     SUB W5, W3, [W15]
008E4E  390005     BRA NC, 0x8E5A
008E50  3A0002     BRA NZ, 0x8E56
008E52  110F90     SUBR W2, [W0], [W15]
008E54  390002     BRA NC, 0x8E5A
163:                       history.read_ptr=history.start_ptr;
008E56  892EA6     MOV W6, 0x25D4
008E58  892EB7     MOV W7, 0x25D6
164:                   }
165:                   if(param3<0x3FFF){
008E5A  23FFE0     MOV #0x3FFE, W0
008E5C  520F80     SUB W4, W0, [W15]
008E5E  3C0005     BRA GT, 0x8E6A
166:                       ClipCopy_toeds(STREAMBUF, history.read_ptr, destination);
008E60  812EA2     MOV 0x25D4, W2
008E62  812EB3     MOV 0x25D6, W3
008E64  201000     MOV #0x100, W0
008E66  07FDA2     RCALL ClipCopy_toeds
008E68  370004     BRA 0x8E72
167:                   }
168:                   
169:                   else {
170:                       ClipCopy_eds(STREAMBUF, destination, history.read_ptr);
008E6A  812EA2     MOV 0x25D4, W2
008E6C  812EB3     MOV 0x25D6, W3
008E6E  201000     MOV #0x100, W0
008E70  07FD6D     RCALL ClipCopy_eds
171:                   }
172:                   history.read_ptr+=STREAMBUF;
008E72  225D40     MOV #0x25D4, W0
008E74  BE0210     MOV.D [W0], W4
008E76  202002     MOV #0x200, W2
008E78  200003     MOV #0x0, W3
008E7A  D00304     SL W4, W6
008E7C  D00082     SL W2, W1
008E7E  430101     ADD W6, W1, W2
008E80  A82042     BSET SR, #1
008E82  4A8183     ADDC W5, W3, W3
008E84  A90042     BCLR SR, #0
008E86  AE2042     BTSS SR, #1
008E88  A80042     BSET SR, #0
008E8A  D38102     RRC W2, W2
008E8C  BE8802     MOV.D W2, [W0]
173:               }
008E8E  F90026     POP ACCAU
008E90  F90024     POP ACCAH
008E92  F90022     POP ACCA
008E94  060000     RETURN
174:               
175:               void processAudio(fractional *source, fractional *destination){
008F8E  BE9F88     MOV.D W8, [W15++]
008F90  BE0400     MOV.D W0, W8
176:                   volatile register int result1 asm("A");
177:                   static int i=0;
178:                   volatile fractional sample;
179:                   
180:                   //Run each FX unit
181:                   if(fxUnits[0]==0); else fxFuncPointers[fxUnits[0]](source, source, pots[FX_1], pots[FX_2], pots[FX_3]);
008F92  808070     MOV fxUnits, W0
008F94  E00000     CP0 W0
008F96  32000A     BRA Z, 0x8FAC
008F98  D00000     SL W0, W0
008F9A  225D81     MOV #0x25D8, W1
008F9C  400001     ADD W0, W1, W0
008F9E  780290     MOV [W0], W5
008FA0  809424     MOV 0x1284, W4
008FA2  809403     MOV 0x1280, W3
008FA4  8093E2     MOV pots, W2
008FA6  780088     MOV W8, W1
008FA8  780008     MOV W8, W0
008FAA  010005     CALL W5
182:                   if(fxUnits[1]==0); else fxFuncPointers[fxUnits[1]](source, source, pots[FX_4], pots[FX_5], pots[FX_6]);
008FAC  808080     MOV 0x1010, W0
008FAE  E00000     CP0 W0
008FB0  32000A     BRA Z, 0x8FC6
008FB2  D00000     SL W0, W0
008FB4  225D81     MOV #0x25D8, W1
008FB6  400001     ADD W0, W1, W0
008FB8  780290     MOV [W0], W5
008FBA  809434     MOV 0x1286, W4
008FBC  809413     MOV 0x1282, W3
008FBE  8093F2     MOV 0x127E, W2
008FC0  780088     MOV W8, W1
008FC2  780008     MOV W8, W0
008FC4  010005     CALL W5
183:                  
184:                   if(kick.playing==TRUE){
008FC6  225860     MOV #0x2586, W0
008FC8  EBC080     SETM.B W1
008FCA  10CF90     SUBR.B W1, [W0], [W15]
008FCC  3A001F     BRA NZ, 0x900C
185:                       ClipCopy_psv(STREAMBUF, psvbuf, kick.read_ptr);
008FCE  812C72     MOV 0x258E, W2
008FD0  812C83     MOV 0x2590, W3
008FD2  21AE81     MOV #0x1AE8, W1
008FD4  201000     MOV #0x100, W0
008FD6  07FC96     RCALL ClipCopy_psv
186:                          
187:                       //ClipCopy_psv(STREAMBUF, source, sine.read_ptr);
188:                       kick.block_index++;
008FD8  225881     MOV #0x2588, W1
008FDA  E80011     INC [W1], W0
008FDC  780880     MOV W0, [W1]
189:                       if(kick.block_index==kick.blocks) {
008FDE  5080E4     SUB W1, #0x4, W1
008FE0  500F91     SUB W0, [W1], [W15]
008FE2  3A0009     BRA NZ, 0x8FF6
190:                           kick.read_ptr=kick.start_ptr;
008FE4  812C54     MOV 0x258A, W4
008FE6  812C65     MOV 0x258C, W5
008FE8  892C74     MOV W4, 0x258E
008FEA  892C85     MOV W5, 0x2590
191:                           kick.block_index=0;
008FEC  EB0000     CLR W0
008FEE  892C40     MOV W0, 0x2588
192:                           kick.playing=FALSE;
008FF0  E88081     INC2 W1, W1
008FF2  784880     MOV.B W0, [W1]
008FF4  370006     BRA 0x9002
193:                       }
194:                       else kick.read_ptr+=STREAMBUF;
008FF6  2258E0     MOV #0x258E, W0
008FF8  BE0110     MOV.D [W0], W2
008FFA  BE0202     MOV.D W2, W4
008FFC  B02004     ADD #0x200, W4
008FFE  B08005     ADDC #0x0, W5
009000  BE8804     MOV.D W4, [W0]
195:                               
196:                       //VectorScale(STREAMBUF, psvbuf, psvbuf, Q15(0.9));
197:                       VectorAdd(STREAMBUF, source, source, psvbuf);
009002  21AE83     MOV #0x1AE8, W3
009004  780108     MOV W8, W2
009006  780088     MOV W8, W1
009008  201000     MOV #0x100, W0
00900A  07BA68     RCALL _VectorAdd
198:                               
199:                       //result1 =__builtin_mpy(sample,Q15(0.85), NULL, NULL, 0, NULL, NULL, 0);
200:                       //result1 = __builtin_add(result1,kick[kick_ptr++],0);
201:                       //sample=__builtin_sac(result1, 0);
202:                   }
203:                   /*
204:                   else if (pad[0]==1&&kick_playing==TRUE&&kick_ptr==kick_max){
205:                       kick_playing=FALSE;
206:                       kick_ptr=0;
207:                   }
208:               
209:                   if(snare.playing==TRUE){
210:                       result1 =__builtin_mpy(sample,Q15(0.85), NULL, NULL, 0, NULL, NULL, 0);
211:               
212:                       result1 = __builtin_add(result1,snare[snare_ptr++],0);
213:                       sample=__builtin_sac(result1, 0);
214:               
215:                       snare_playing=FALSE;
216:                   }
217:                   */
218:               
219:                   if (TEST_SIN==TRUE){
00900C  BFD00A     MOV.B TEST_SIN, WREG
00900E  404FE1     ADD.B W0, #0x1, [W15]
009010  3A0018     BRA NZ, 0x9042
220:                       ClipCopy_psv(STREAMBUF, source, sine.read_ptr);
009012  812BF2     MOV 0x257E, W2
009014  812C03     MOV 0x2580, W3
009016  780088     MOV W8, W1
009018  201000     MOV #0x100, W0
00901A  07FC74     RCALL ClipCopy_psv
221:                       sine.block_index++;
00901C  225781     MOV #0x2578, W1
00901E  E80011     INC [W1], W0
009020  780880     MOV W0, [W1]
222:                       if(sine.block_index==sine.blocks) {
009022  5080E4     SUB W1, #0x4, W1
009024  500F91     SUB W0, [W1], [W15]
009026  3A0007     BRA NZ, 0x9036
223:                           sine.read_ptr=sine.start_ptr;
009028  812BD0     MOV 0x257A, W0
00902A  812BE1     MOV 0x257C, W1
00902C  892BF0     MOV W0, 0x257E
00902E  892C01     MOV W1, 0x2580
224:                           sine.block_index=0;
009030  225780     MOV #0x2578, W0
009032  EB0800     CLR [W0]
009034  370006     BRA 0x9042
225:                       }
226:                       else sine.read_ptr+=STREAMBUF;
009036  2257E0     MOV #0x257E, W0
009038  BE0110     MOV.D [W0], W2
00903A  BE0202     MOV.D W2, W4
00903C  B02004     ADD #0x200, W4
00903E  B08005     ADDC #0x0, W5
009040  BE8804     MOV.D W4, [W0]
227:                   }
228:                       
229:                   VectorCopy(STREAMBUF, destination, source);     //copy from ping to pong buffer
009042  780108     MOV W8, W2
009044  780089     MOV W9, W1
009046  201000     MOV #0x100, W0
009048  07BA5B     RCALL _VectorCopy
230:                   
231:                   //VOLUME CONTROL
232:                   //if(pots[POT_VOLUME]<=0x000F); 
233:                   if(pots[POT_VOLUME]>=0x7FF7);
00904A  809453     MOV 0x128A, W3
00904C  27FF60     MOV #0x7FF6, W0
00904E  518F80     SUB W3, W0, [W15]
009050  3C0004     BRA GT, 0x905A
234:                   else{
235:                       VectorScale(STREAMBUF, destination, destination, pots[POT_VOLUME]);
009052  780109     MOV W9, W2
009054  780089     MOV W9, W1
009056  201000     MOV #0x100, W0
009058  07BA5C     RCALL _VectorScale
236:                   }
237:               }
00905A  BE044F     MOV.D [--W15], W8
00905C  060000     RETURN
