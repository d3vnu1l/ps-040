Disassembly Listing for sampler_0.49.2
Generated From:
C:/Users/ryan/Documents/seniorproject/ps-040/dist/default/production/ps-040.production.elf
Feb 8, 2018 6:17:22 PM

---  C:/Users/ryan/Documents/seniorproject/ps-040/utilitites.c  -----------------------------------------
1:                 /*
2:                  General utilities, button and pot scanning
3:                  */
4:                 #include <xc.h>
5:                 #include <p33EP512GM310.h>
6:                 #include <dsp.h>
7:                 #include "common.h"
8:                 #include "sounds.h"
9:                 #include "flash.h"
10:                #include "screens.h"
11:                #include "utilities.h"
12:                
13:                extern enum fxStruct fxUnits[NUMFXUNITS];
14:                extern enum screenStruc state;
15:                extern struct ctrlsrfc ctrl;
16:                extern struct sflags stat;
17:                extern struct clip_psv sine, kick, snare;
18:                
19:                void scanButtons(void){
20:                    
21:                    static unsigned char pad_last[BUTTONS]={1};
22:                    int portrdG, portrdD, portrdF;
23:                
24:                    portrdG = PORTG;
00799C  807313     MOV PORTG, W3
25:                    portrdD = PORTD;
00799E  807191     MOV PORTD, W1
26:                    portrdF = PORTF;
0079A0  807292     MOV PORTF, W2
27:                    
28:                    ctrl.pad[34]=(portrdF>>7)&1;     // Special function button
0079A2  DE9247     ASR W2, #7, W4
0079A4  624261     AND.B W4, #0x1, W4
0079A6  216585     MOV #0x1658, W5
0079A8  784A84     MOV.B W4, [W5]
29:                    
30:                    if(ctrl.pad[34]){
0079AA  320033     BRA Z, 0x7A12
31:                        ctrl.pad[6]=(portrdF>>6)&1;
0079AC  DE92C6     ASR W2, #6, W5
0079AE  2163C4     MOV #0x163C, W4
0079B0  62CA61     AND.B W5, #0x1, [W4]
32:                        ctrl.pad[5]=(portrdF>>5)&1;
0079B2  DE92C5     ASR W2, #5, W5
0079B4  E90204     DEC W4, W4
0079B6  62CA61     AND.B W5, #0x1, [W4]
33:                        ctrl.pad[4]=(portrdF>>4)&1;
0079B8  DE9144     ASR W2, #4, W2
0079BA  E90204     DEC W4, W4
0079BC  614A61     AND.B W2, #0x1, [W4]
34:                        ctrl.pad[0]=(portrdG)&1;
0079BE  520164     SUB W4, #0x4, W2
0079C0  61C961     AND.B W3, #0x1, [W2]
35:                        ctrl.pad[1]=(portrdG>>1)&1;
0079C2  D18203     ASR W3, W4
0079C4  E80102     INC W2, W2
0079C6  624961     AND.B W4, #0x1, [W2]
36:                        ctrl.pad[2]=(portrdG>>2)&1;
0079C8  DE9A42     ASR W3, #2, W4
0079CA  E80102     INC W2, W2
0079CC  624961     AND.B W4, #0x1, [W2]
37:                        ctrl.pad[3]=(portrdG>>3)&1;
0079CE  DE9A43     ASR W3, #3, W4
0079D0  E80102     INC W2, W2
0079D2  624961     AND.B W4, #0x1, [W2]
38:                        ctrl.pad[16]=(portrdG>>10)&1;    // Encoder button
0079D4  DE9A4A     ASR W3, #10, W4
0079D6  41016D     ADD W2, #0xD, W2
0079D8  624961     AND.B W4, #0x1, [W2]
39:                        ctrl.pad[11]=(portrdG>>11)&1;
0079DA  DE9A4B     ASR W3, #11, W4
0079DC  510165     SUB W2, #0x5, W2
0079DE  624961     AND.B W4, #0x1, [W2]
40:                        ctrl.pad[12]=(portrdG>>12)&1;
0079E0  DE9A4C     ASR W3, #12, W4
0079E2  E80102     INC W2, W2
0079E4  624961     AND.B W4, #0x1, [W2]
41:                        ctrl.pad[13]=(portrdG>>13)&1;
0079E6  DE9A4D     ASR W3, #13, W4
0079E8  E80102     INC W2, W2
0079EA  624961     AND.B W4, #0x1, [W2]
42:                        ctrl.pad[14]=(portrdG>>14)&1;
0079EC  DE984E     ASR W3, #14, W0
0079EE  E80102     INC W2, W2
0079F0  604961     AND.B W0, #0x1, [W2]
43:                        ctrl.pad[15]=(portrdG>>15)&1;
0079F2  DE19CF     LSR W3, #15, W3
0079F4  E80002     INC W2, W0
0079F6  784803     MOV.B W3, [W0]
44:                        ctrl.pad[7]=(portrdD>>1)&1;
0079F8  D18101     ASR W1, W2
0079FA  500068     SUB W0, #0x8, W0
0079FC  614861     AND.B W2, #0x1, [W0]
45:                        ctrl.pad[8]=(portrdD>>2)&1;
0079FE  DE8942     ASR W1, #2, W2
007A00  E80000     INC W0, W0
007A02  614861     AND.B W2, #0x1, [W0]
46:                        ctrl.pad[9]=(portrdD>>3)&1;
007A04  DE8943     ASR W1, #3, W2
007A06  E80000     INC W0, W0
007A08  614861     AND.B W2, #0x1, [W0]
47:                        ctrl.pad[10]=(portrdD>>4)&1;
007A0A  DE88C4     ASR W1, #4, W1
007A0C  E80000     INC W0, W0
007A0E  60C861     AND.B W1, #0x1, [W0]
007A10  370032     BRA 0x7A76
48:                    } else {
49:                        ctrl.pad[23]=(portrdF>>6)&1;
007A12  DE92C6     ASR W2, #6, W5
007A14  2164D4     MOV #0x164D, W4
007A16  62CA61     AND.B W5, #0x1, [W4]
50:                        ctrl.pad[22]=(portrdF>>5)&1;
007A18  DE92C5     ASR W2, #5, W5
007A1A  E90204     DEC W4, W4
007A1C  62CA61     AND.B W5, #0x1, [W4]
51:                        ctrl.pad[21]=(portrdF>>4)&1;
007A1E  DE9144     ASR W2, #4, W2
007A20  E90204     DEC W4, W4
007A22  614A61     AND.B W2, #0x1, [W4]
52:                        ctrl.pad[17]=(portrdG)&1;
007A24  520164     SUB W4, #0x4, W2
007A26  61C961     AND.B W3, #0x1, [W2]
53:                        ctrl.pad[18]=(portrdG>>1)&1;
007A28  D18203     ASR W3, W4
007A2A  E80102     INC W2, W2
007A2C  624961     AND.B W4, #0x1, [W2]
54:                        ctrl.pad[19]=(portrdG>>2)&1;
007A2E  DE9A42     ASR W3, #2, W4
007A30  E80102     INC W2, W2
007A32  624961     AND.B W4, #0x1, [W2]
55:                        ctrl.pad[20]=(portrdG>>3)&1;
007A34  DE9A43     ASR W3, #3, W4
007A36  E80102     INC W2, W2
007A38  624961     AND.B W4, #0x1, [W2]
56:                        ctrl.pad[33]=(portrdG>>10)&1;    // Encoder button
007A3A  DE9A4A     ASR W3, #10, W4
007A3C  41016D     ADD W2, #0xD, W2
007A3E  624961     AND.B W4, #0x1, [W2]
57:                        ctrl.pad[28]=(portrdG>>11)&1;
007A40  DE9A4B     ASR W3, #11, W4
007A42  510165     SUB W2, #0x5, W2
007A44  624961     AND.B W4, #0x1, [W2]
58:                        ctrl.pad[29]=(portrdG>>12)&1;
007A46  DE9A4C     ASR W3, #12, W4
007A48  E80102     INC W2, W2
007A4A  624961     AND.B W4, #0x1, [W2]
59:                        ctrl.pad[30]=(portrdG>>13)&1;
007A4C  DE9A4D     ASR W3, #13, W4
007A4E  E80102     INC W2, W2
007A50  624961     AND.B W4, #0x1, [W2]
60:                        ctrl.pad[31]=(portrdG>>14)&1;
007A52  DE984E     ASR W3, #14, W0
007A54  E80102     INC W2, W2
007A56  604961     AND.B W0, #0x1, [W2]
61:                        ctrl.pad[32]=(portrdG>>15)&1;
007A58  DE19CF     LSR W3, #15, W3
007A5A  E80002     INC W2, W0
007A5C  784803     MOV.B W3, [W0]
62:                        ctrl.pad[24]=(portrdD>>1)&1;
007A5E  D18101     ASR W1, W2
007A60  500068     SUB W0, #0x8, W0
007A62  614861     AND.B W2, #0x1, [W0]
63:                        ctrl.pad[25]=(portrdD>>2)&1;
007A64  DE8942     ASR W1, #2, W2
007A66  E80000     INC W0, W0
007A68  614861     AND.B W2, #0x1, [W0]
64:                        ctrl.pad[26]=(portrdD>>3)&1;
007A6A  DE8943     ASR W1, #3, W2
007A6C  E80000     INC W0, W0
007A6E  614861     AND.B W2, #0x1, [W0]
65:                        ctrl.pad[27]=(portrdD>>4)&1;
007A70  DE88C4     ASR W1, #4, W1
007A72  E80000     INC W0, W0
007A74  60C861     AND.B W1, #0x1, [W0]
66:                    }
67:                    
68:                    // SAMPLE TRIGGERS 
69:                    if(ctrl.pad[0]==0){                                         //kick
007A76  216360     MOV #0x1636, W0
007A78  E00410     CP0.B [W0]
007A7A  3A0002     BRA NZ, 0x7A80
70:                        kick.playing=TRUE;
007A7C  222B80     MOV #0x22B8, W0
007A7E  EBC800     SETM.B [W0]
71:                    }
72:                    /*
73:                    if(controls.pad[2]==0&&hat_playing==FALSE){                                          //hat
74:                        hat_playing=TRUE;
75:                    }
76:                    */
77:                    if(ctrl.pad[1]==0&&snare.playing==FALSE){                                        //snare
007A80  216370     MOV #0x1637, W0
007A82  E00410     CP0.B [W0]
007A84  3A0004     BRA NZ, 0x7A8E
007A86  222C80     MOV #0x22C8, W0
007A88  E00410     CP0.B [W0]
007A8A  3A0001     BRA NZ, 0x7A8E
78:                        snare.playing=TRUE;
007A8C  EBC800     SETM.B [W0]
79:                    }
80:                }
007A8E  060000     RETURN
81:                
82:                void readPots(void){
007A90  4787F2     ADD W15, #0x12, W15
007A92  BE9F88     MOV.D W8, [W15++]
007A94  BE9F8A     MOV.D W10, [W15++]
007A96  BE9F8C     MOV.D W12, [W15++]
007A98  781F8E     MOV W14, [W15++]
007A9A  F80022     PUSH ACCA
007A9C  F80024     PUSH ACCAH
007A9E  F80026     PUSH ACCAU
83:                    volatile register int result asm("A");
84:                    fractional pots_buf[POTS/2]; 
85:                    fractional pots_last[POTS/2];
86:                    static fractional pots_smoothed[POTS/2];
87:                    const fractional pot_alpha = 0x0F80;    //larger = rougher, lower = more latency
88:                    const fractional pot_alpha_inv = 32767-pot_alpha;
89:                    const unsigned int shift = 0xFE00;
90:                    int i;
91:                    _AD1IF = 0; // Clear conversion done status bit
007AA0  A9A801     BCLR 0x801, #5
92:                    if(ctrl.pad[34])i=0;
007AA4  216580     MOV #0x1658, W0
007AA6  E00410     CP0.B [W0]
007AA8  320001     BRA Z, 0x7AAC
007AAA  EB0080     CLR W1
93:                    else i=POTS/2;
007AA2  200061     MOV #0x6, W1
94:                    pots_buf[0]=(ADC1BUF5>>1)|0x7;
007AAC  D5030A     LSR ADC1BUF5, WREG
007AAE  780680     MOV W0, W13
007AB0  B3007D     IOR #0x7, W13
95:                    pots_buf[1]=(ADC1BUF2>>1)|0x7;
007AB2  D50304     LSR ADC1BUF2, WREG
007AB4  780600     MOV W0, W12
007AB6  B3007C     IOR #0x7, W12
96:                    pots_buf[2]=(ADC1BUF4>>1)|0x7;
007AB8  D50308     LSR ADC1BUF4, WREG
007ABA  780580     MOV W0, W11
007ABC  B3007B     IOR #0x7, W11
97:                    pots_buf[3]=(ADC1BUF1>>1)|0x7;
007ABE  D50302     LSR ADC1BUF1, WREG
007AC0  780200     MOV W0, W4
007AC2  B30074     IOR #0x7, W4
007AC4  9FB7D4     MOV W4, [W15-22]
98:                    pots_buf[4]=(ADC1BUF3>>1)|0x7;
007AC6  D50306     LSR ADC1BUF3, WREG
007AC8  780280     MOV W0, W5
007ACA  B30075     IOR #0x7, W5
007ACC  9FB7C5     MOV W5, [W15-24]
99:                    pots_buf[5]=(ADC1BUF0>>1)|0x7;
007ACE  D50300     LSR ADC1BUF0, WREG
007AD0  780500     MOV W0, W10
007AD2  B3007A     IOR #0x7, W10
100:                   
101:                   pots_last[0]=(pots_smoothed[0]&shift);
007AD4  222F22     MOV #0x22F2, W2
007AD6  2FE000     MOV #0xFE00, W0
007AD8  600312     AND W0, [W2], W6
007ADA  9FB7B6     MOV W6, [W15-26]
102:                   pots_last[1]=(pots_smoothed[1]&shift);
007ADC  E88482     INC2 W2, W9
007ADE  600199     AND W0, [W9], W3
007AE0  9FB7A3     MOV W3, [W15-28]
103:                   pots_last[2]=(pots_smoothed[2]&shift);
007AE2  410464     ADD W2, #0x4, W8
007AE4  600218     AND W0, [W8], W4
007AE6  9FB794     MOV W4, [W15-30]
104:                   pots_last[3]=(pots_smoothed[3]&shift);
007AE8  4103E6     ADD W2, #0x6, W7
007AEA  600297     AND W0, [W7], W5
007AEC  9FB785     MOV W5, [W15-32]
105:                   pots_last[4]=(pots_smoothed[4]&shift);
007AEE  410368     ADD W2, #0x8, W6
007AF0  600316     AND W0, [W6], W6
007AF2  9FAFF6     MOV W6, [W15-34]
106:                   pots_last[5]=(pots_smoothed[5]&shift);
007AF4  4101EA     ADD W2, #0xA, W3
007AF6  600213     AND W0, [W3], W4
007AF8  9FAFE4     MOV W4, [W15-36]
107:                   
108:                   result =__builtin_mpy(pots_buf[0],pot_alpha, NULL, NULL, 0, NULL, NULL, 0);
007AFA  20F805     MOV #0xF80, W5
007AFC  78030D     MOV W13, W6
007AFE  C40113     MPY W5*W6, A
109:                   result =__builtin_mac(result, pots_smoothed[0], pot_alpha_inv, NULL, NULL, 0, NULL, NULL, 0, 0, result);
007B00  780712     MOV [W2], W14
007B02  2707F4     MOV #0x707F, W4
007B04  78030E     MOV W14, W6
007B06  C10112     MAC W4*W6, A
110:                   pots_smoothed[0]=__builtin_sac(result, 0);
007B08  CC0012     SAC A, [W2]
111:                   result =__builtin_mpy(pots_buf[1],pot_alpha, NULL, NULL, 0, NULL, NULL, 0);
007B0A  78030C     MOV W12, W6
007B0C  C40113     MPY W5*W6, A
112:                   result =__builtin_mac(result, pots_smoothed[1], pot_alpha_inv, NULL, NULL, 0, NULL, NULL, 0, 0, result);
007B0E  780319     MOV [W9], W6
007B10  C10112     MAC W4*W6, A
113:                   pots_smoothed[1]=__builtin_sac(result, 0);
007B12  CC0019     SAC A, [W9]
114:                   result =__builtin_mpy(pots_buf[2],pot_alpha, NULL, NULL, 0, NULL, NULL, 0);
007B14  78030B     MOV W11, W6
007B16  C40113     MPY W5*W6, A
115:                   result =__builtin_mac(result, pots_smoothed[2], pot_alpha_inv, NULL, NULL, 0, NULL, NULL, 0, 0, result);
007B18  780318     MOV [W8], W6
007B1A  C10112     MAC W4*W6, A
116:                   pots_smoothed[2]=__builtin_sac(result, 0);
007B1C  CC0018     SAC A, [W8]
117:                   result =__builtin_mpy(pots_buf[3],pot_alpha, NULL, NULL, 0, NULL, NULL, 0);
007B1E  97B35F     MOV [W15-22], W6
007B20  C40113     MPY W5*W6, A
118:                   result =__builtin_mac(result, pots_smoothed[3], pot_alpha_inv, NULL, NULL, 0, NULL, NULL, 0, 0, result);
007B22  780317     MOV [W7], W6
007B24  C10112     MAC W4*W6, A
119:                   pots_smoothed[3]=__builtin_sac(result, 0);
007B26  CC0017     SAC A, [W7]
120:                   result =__builtin_mpy(pots_buf[4],pot_alpha, NULL, NULL, 0, NULL, NULL, 0);
007B28  97B34F     MOV [W15-24], W6
007B2A  C40113     MPY W5*W6, A
121:                   result =__builtin_mac(result, pots_smoothed[4], pot_alpha_inv, NULL, NULL, 0, NULL, NULL, 0, 0, result);
007B2C  410368     ADD W2, #0x8, W6
007B2E  780396     MOV [W6], W7
007B30  C20112     MAC W4*W7, A
122:                   pots_smoothed[4]=__builtin_sac(result, 0);
007B32  CC0016     SAC A, [W6]
123:                   result =__builtin_mpy(pots_buf[5],pot_alpha, NULL, NULL, 0, NULL, NULL, 0);
007B34  78030A     MOV W10, W6
007B36  C40113     MPY W5*W6, A
124:                   result =__builtin_mac(result, pots_smoothed[5], pot_alpha_inv, NULL, NULL, 0, NULL, NULL, 0, 0, result);
007B38  780293     MOV [W3], W5
007B3A  C00112     MAC W4*W5, A
125:                   pots_smoothed[5]=__builtin_sac(result, 0);
007B3C  CC0004     SAC A, W4
007B3E  780984     MOV W4, [W3]
126:                   
127:                   if((pots_smoothed[0]&shift)!=pots_last[0]) 
007B40  600012     AND W0, [W2], W0
007B42  97B13F     MOV [W15-26], W2
007B44  500F82     SUB W0, W2, [W15]
007B46  320008     BRA Z, 0x7B58
128:                       ctrl.pots[i]=pots_buf[0];
007B48  B90961     MUL.SU W1, #1, W2
007B4A  410172     ADD W2, #0x12, W2
007B4C  4981E0     ADDC W3, #0x0, W3
007B4E  410102     ADD W2, W2, W2
007B50  498183     ADDC W3, W3, W3
007B52  216360     MOV #0x1636, W0
007B54  400102     ADD W0, W2, W2
007B56  78090D     MOV W13, [W2]
129:                   if((pots_smoothed[1]&shift)!=pots_last[1]) 
007B58  2FE000     MOV #0xFE00, W0
007B5A  222F42     MOV #0x22F4, W2
007B5C  600012     AND W0, [W2], W0
007B5E  97B1AF     MOV [W15-28], W3
007B60  500F83     SUB W0, W3, [W15]
007B62  320009     BRA Z, 0x7B76
130:                       ctrl.pots[i+1]=pots_buf[1];
007B64  E80101     INC W1, W2
007B66  DE91CF     ASR W2, #15, W3
007B68  410172     ADD W2, #0x12, W2
007B6A  4981E0     ADDC W3, #0x0, W3
007B6C  410102     ADD W2, W2, W2
007B6E  498183     ADDC W3, W3, W3
007B70  216360     MOV #0x1636, W0
007B72  400002     ADD W0, W2, W0
007B74  78080C     MOV W12, [W0]
131:                   if((pots_smoothed[2]&shift)!=pots_last[2]) 
007B76  2FE000     MOV #0xFE00, W0
007B78  222F62     MOV #0x22F6, W2
007B7A  600012     AND W0, [W2], W0
007B7C  97B29F     MOV [W15-30], W5
007B7E  500F85     SUB W0, W5, [W15]
007B80  320009     BRA Z, 0x7B94
132:                       ctrl.pots[i+2]=pots_buf[2];
007B82  E88101     INC2 W1, W2
007B84  DE91CF     ASR W2, #15, W3
007B86  410172     ADD W2, #0x12, W2
007B88  4981E0     ADDC W3, #0x0, W3
007B8A  410102     ADD W2, W2, W2
007B8C  498183     ADDC W3, W3, W3
007B8E  216360     MOV #0x1636, W0
007B90  400002     ADD W0, W2, W0
007B92  78080B     MOV W11, [W0]
133:                   if((pots_smoothed[3]&shift)!=pots_last[3]) 
007B94  2FE000     MOV #0xFE00, W0
007B96  222F82     MOV #0x22F8, W2
007B98  600012     AND W0, [W2], W0
007B9A  97B30F     MOV [W15-32], W6
007B9C  500F86     SUB W0, W6, [W15]
007B9E  32000A     BRA Z, 0x7BB4
134:                       ctrl.pots[i+3]=pots_buf[3];
007BA0  408163     ADD W1, #0x3, W2
007BA2  DE91CF     ASR W2, #15, W3
007BA4  410172     ADD W2, #0x12, W2
007BA6  4981E0     ADDC W3, #0x0, W3
007BA8  410102     ADD W2, W2, W2
007BAA  498183     ADDC W3, W3, W3
007BAC  216360     MOV #0x1636, W0
007BAE  400002     ADD W0, W2, W0
007BB0  97B2DF     MOV [W15-22], W5
007BB2  780805     MOV W5, [W0]
135:                   if((pots_smoothed[4]&shift)!=pots_last[4]) 
007BB4  2FE000     MOV #0xFE00, W0
007BB6  222FA2     MOV #0x22FA, W2
007BB8  600012     AND W0, [W2], W0
007BBA  97AB7F     MOV [W15-34], W6
007BBC  500F86     SUB W0, W6, [W15]
007BBE  32000A     BRA Z, 0x7BD4
136:                       ctrl.pots[i+4]=pots_buf[4];
007BC0  408164     ADD W1, #0x4, W2
007BC2  DE91CF     ASR W2, #15, W3
007BC4  410172     ADD W2, #0x12, W2
007BC6  4981E0     ADDC W3, #0x0, W3
007BC8  410102     ADD W2, W2, W2
007BCA  498183     ADDC W3, W3, W3
007BCC  216360     MOV #0x1636, W0
007BCE  400002     ADD W0, W2, W0
007BD0  97B2CF     MOV [W15-24], W5
007BD2  780805     MOV W5, [W0]
137:                   if((pots_smoothed[5]&shift)!=pots_last[5]) 
007BD4  2FE000     MOV #0xFE00, W0
007BD6  620200     AND W4, W0, W4
007BD8  97AB6F     MOV [W15-36], W6
007BDA  520F86     SUB W4, W6, [W15]
007BDC  320009     BRA Z, 0x7BF0
138:                       ctrl.pots[i+5]=pots_buf[5];     
007BDE  408065     ADD W1, #0x5, W0
007BE0  DE80CF     ASR W0, #15, W1
007BE2  400072     ADD W0, #0x12, W0
007BE4  4880E0     ADDC W1, #0x0, W1
007BE6  400000     ADD W0, W0, W0
007BE8  488081     ADDC W1, W1, W1
007BEA  216362     MOV #0x1636, W2
007BEC  410080     ADD W2, W0, W1
007BEE  78088A     MOV W10, [W1]
139:               }
007BF0  F90026     POP ACCAU
007BF2  F90024     POP ACCAH
007BF4  F90022     POP ACCA
007BF6  78074F     MOV [--W15], W14
007BF8  BE064F     MOV.D [--W15], W12
007BFA  BE054F     MOV.D [--W15], W10
007BFC  BE044F     MOV.D [--W15], W8
007BFE  B1012F     SUB #0x12, W15
007C00  060000     RETURN
140:               
141:               void scalePots(void){
007C02  F80022     PUSH ACCA
007C04  F80024     PUSH ACCAH
007C06  F80026     PUSH ACCAU
142:                   /* Potentiometer scaling for fx or lcd display */
143:                   volatile register int scaled asm("A");
144:                   
145:                   scaled=__builtin_mpy(ctrl.pots[0],POT_PERCENT, NULL, NULL, 0, NULL, NULL, 0);
007C08  232644     MOV #0x3264, W4
007C0A  80B2D5     MOV 0x165A, W5
007C0C  C00113     MPY W4*W5, A
146:                   ctrl.pots_scaled[0]=__builtin_sac(scaled, 7);
007C0E  216720     MOV #0x1672, W0
007C10  CC0390     SAC A, #7, [W0]
147:                   scaled=__builtin_mpy(ctrl.pots[1],POT_PERCENT, NULL, NULL, 0, NULL, NULL, 0);
007C12  80B2E5     MOV 0x165C, W5
007C14  C00113     MPY W4*W5, A
148:                   ctrl.pots_scaled[1]=__builtin_sac(scaled, 7);
007C16  E88000     INC2 W0, W0
007C18  CC0390     SAC A, #7, [W0]
149:                   scaled=__builtin_mpy(ctrl.pots[2],POT_PERCENT, NULL, NULL, 0, NULL, NULL, 0);
007C1A  80B2F5     MOV 0x165E, W5
007C1C  C00113     MPY W4*W5, A
150:                   ctrl.pots_scaled[2]=__builtin_sac(scaled, 7);
007C1E  E88000     INC2 W0, W0
007C20  CC0390     SAC A, #7, [W0]
151:                   scaled=__builtin_mpy(ctrl.pots[3],POT_PERCENT, NULL, NULL, 0, NULL, NULL, 0);
007C22  80B305     MOV 0x1660, W5
007C24  C00113     MPY W4*W5, A
152:                   ctrl.pots_scaled[3]=__builtin_sac(scaled, 7);
007C26  E88000     INC2 W0, W0
007C28  CC0390     SAC A, #7, [W0]
153:                   scaled=__builtin_mpy(ctrl.pots[4],POT_PERCENT, NULL, NULL, 0, NULL, NULL, 0);
007C2A  80B315     MOV 0x1662, W5
007C2C  C00113     MPY W4*W5, A
154:                   ctrl.pots_scaled[4]=__builtin_sac(scaled, 7);
007C2E  E88000     INC2 W0, W0
007C30  CC0390     SAC A, #7, [W0]
155:                   scaled=__builtin_mpy(ctrl.pots[5],POT_PERCENT, NULL, NULL, 0, NULL, NULL, 0);
007C32  80B325     MOV 0x1664, W5
007C34  C00113     MPY W4*W5, A
156:                   ctrl.pots_scaled[5]=__builtin_sac(scaled, 7);
007C36  E88000     INC2 W0, W0
007C38  CC0390     SAC A, #7, [W0]
157:                   
158:                   scaled=__builtin_mpy(ctrl.pots[POT_FX_SELECT1],FXSCALE, NULL, NULL, 0, NULL, NULL, 0);
007C3A  200055     MOV #0x5, W5
007C3C  80B376     MOV 0x166E, W6
007C3E  C40113     MPY W5*W6, A
159:                   ctrl.pots_scaled[POT_FX_SELECT1]=__builtin_sac(scaled, 0);
007C40  40006A     ADD W0, #0xA, W0
007C42  CC0010     SAC A, [W0]
160:                   scaled=__builtin_mpy(ctrl.pots[POT_FX_SELECT2],FXSCALE, NULL, NULL, 0, NULL, NULL, 0);
007C44  80B386     MOV 0x1670, W6
007C46  C40113     MPY W5*W6, A
161:                   ctrl.pots_scaled[POT_FX_SELECT2]=__builtin_sac(scaled, 0);
007C48  E88000     INC2 W0, W0
007C4A  CC0010     SAC A, [W0]
162:                   
163:                   scaled=__builtin_mpy(ctrl.pots[POT_VOLUME],POT_PERCENT, NULL, NULL, 0, NULL, NULL, 0);
007C4C  80B345     MOV 0x1668, W5
007C4E  C00113     MPY W4*W5, A
164:                   ctrl.pots_scaled[POT_VOLUME]=__builtin_sac(scaled, 0);
007C50  500068     SUB W0, #0x8, W0
007C52  CC0010     SAC A, [W0]
165:               }
007C54  F90026     POP ACCAU
007C56  F90024     POP ACCAH
007C58  F90022     POP ACCA
007C5A  060000     RETURN
166:               
167:               fractional scalePotsCustom(unsigned int steps, fractional scaleme){
007C5C  781F88     MOV W8, [W15++]
007C5E  F80022     PUSH ACCA
007C60  F80024     PUSH ACCAH
007C62  F80026     PUSH ACCAU
007C64  780100     MOV W0, W2
007C66  780401     MOV W1, W8
168:                   volatile register int scaled asm("A");
169:                   fractional scale = Q15(steps*0.000030518509476);
007C68  B81061     MUL.UU W2, #1, W0
007C6A  07C4B1     RCALL ___floatunsisf
007C6C  201002     MOV #0x100, W2
007C6E  238003     MOV #0x3800, W3
007C70  07C503     RCALL ___mulsf3
007C72  2FE002     MOV #0xFE00, W2
007C74  246FF3     MOV #0x46FF, W3
007C76  07C500     RCALL ___mulsf3
007C78  200002     MOV #0x0, W2
007C7A  23F003     MOV #0x3F00, W3
007C7C  07C42A     RCALL ___addsf3
007C7E  07C486     RCALL ___fixsfsi
170:                   
171:                   scaled=__builtin_mpy(scaleme,scale, NULL, NULL, 0, NULL, NULL, 0);
007C80  780208     MOV W8, W4
007C82  780280     MOV W0, W5
007C84  C00113     MPY W4*W5, A
172:                   return(__builtin_sac(scaled, 0));
007C86  CC0000     SAC A, W0
173:               }
007C88  F90026     POP ACCAU
007C8A  F90024     POP ACCAH
007C8C  F90022     POP ACCA
007C8E  78044F     MOV [--W15], W8
007C90  060000     RETURN
174:               
175:               void changeFX(void){
176:                   fxUnits[0]=ctrl.pots_scaled[POT_FX_SELECT1];
007C92  80B430     MOV 0x1686, W0
007C94  88B050     MOV W0, fxUnits
177:                   fxUnits[1]=ctrl.pots_scaled[POT_FX_SELECT2];
007C96  80B440     MOV 0x1688, W0
007C98  88B060     MOV W0, 0x160C
178:               }
007C9A  060000     RETURN
179:               
180:               void checkFunctions(){
181:                   //if
182:               }
007C9C  060000     RETURN
183:               
184:               void display(void){
185:                   scalePots();
007C9E  07FFB1     RCALL scalePots
186:                   changeFX();
007CA0  07FFF8     RCALL changeFX
187:                   // Update ui state logic here
188:                   state = (ENCODERCNTL/4)+1;
007CA2  800E30     MOV POS1CNTL, W0
007CA4  DE0042     LSR W0, #2, W0
007CA6  E80000     INC W0, W0
007CA8  88B1A0     MOV W0, 0x1634
189:                   if(!ctrl.pad[BTN_ENC]) state = scrnSHIFT;
007CAA  216461     MOV #0x1646, W1
007CAC  E00411     CP0.B [W1]
007CAE  3A0003     BRA NZ, 0x7CB6
007CB0  200020     MOV #0x2, W0
007CB2  88B1A0     MOV W0, 0x1634
007CB4  37001B     BRA 0x7CEC
190:                   
191:                   if(state==debugscrnFLASH){
007CB6  500FE4     SUB W0, #0x4, [W15]
007CB8  3A0019     BRA NZ, 0x7CEC
192:                       if(!ctrl.pad[33]) flashBulkErase();
007CBA  216570     MOV #0x1657, W0
007CBC  E00410     CP0.B [W0]
007CBE  3A0001     BRA NZ, 0x7CC2
007CC0  070529     RCALL flashBulkErase
193:                       if(!ctrl.pad[3])flashWritePage(NULL, 0);
007CC2  216390     MOV #0x1639, W0
007CC4  E00410     CP0.B [W0]
007CC6  3A0003     BRA NZ, 0x7CCE
007CC8  B81160     MUL.UU W2, #0, W2
007CCA  EB0000     CLR W0
007CCC  07044D     RCALL flashWritePage
194:                       if(!ctrl.pad[4])flashStartRead((long)(0));     // READBACK
007CCE  2163A0     MOV #0x163A, W0
007CD0  E00410     CP0.B [W0]
007CD2  3A0002     BRA NZ, 0x7CD8
007CD4  B80060     MUL.UU W0, #0, W0
007CD6  070495     RCALL flashStartRead
195:                       if(!ctrl.pad[5])flashEraseSector((long)(0));
007CD8  2163B0     MOV #0x163B, W0
007CDA  E00410     CP0.B [W0]
007CDC  3A0002     BRA NZ, 0x7CE2
007CDE  B80060     MUL.UU W0, #0, W0
007CE0  0704E9     RCALL flashEraseSector
196:                       if(!ctrl.pad[6])flashWriteReg(FLASH_WREN);
007CE2  2163C0     MOV #0x163C, W0
007CE4  E00410     CP0.B [W0]
007CE6  3A0002     BRA NZ, 0x7CEC
007CE8  B3C060     MOV.B #0x6, W0
007CEA  0703F8     RCALL flashWriteReg
197:                   }
198:                   // Update screen here
199:                   checkFunctions();
200:                   screenUpdate();
007CEC  07FE34     RCALL screenUpdate
201:                  
202:                  if(stat.UART_ON==TRUE){
007CEE  223080     MOV #0x2308, W0
007CF0  EBC080     SETM.B W1
007CF2  10CF90     SUBR.B W1, [W0], [W15]
007CF4  3A0002     BRA NZ, 0x7CFA
203:                       U1TXREG = 0x61;
007CF6  200610     MOV #0x61, W0
007CF8  881120     MOV W0, U1TXREG
204:                   }
205:                  
206:                  SLED=~SLED;
007CFA  8072A0     MOV LATF, W0
007CFC  EA8000     COM W0, W0
007CFE  600061     AND W0, #0x1, W0
007D00  8072A1     MOV LATF, W1
007D02  A10001     BCLR W1, #0
007D04  700081     IOR W0, W1, W1
007D06  8872A1     MOV W1, LATF
207:               }
007D08  060000     RETURN
208:               
209:               void processRxData(fractional *sourceBuffer, fractional *targetBuffer){
210:                   /* This procedure loops back the received data to the*/
211:                   /* the codec output. The user application could process*/
212:                   /* this data as per application requirements.*/
213:                   int index;
214:                   for(index = 0;index < STREAMBUF;index ++)
007D0A  EB0100     CLR W2
007D0C  201006     MOV #0x100, W6
007D1A  E80102     INC W2, W2
007D1C  510F86     SUB W2, W6, [W15]
007D1E  3AFFF7     BRA NZ, 0x7D0E
215:                   {
216:                       targetBuffer[index] = sourceBuffer[index];
007D0E  B91261     MUL.SU W2, #1, W4
007D10  420204     ADD W4, W4, W4
007D12  4A8285     ADDC W5, W5, W5
007D14  408184     ADD W1, W4, W3
007D16  400204     ADD W0, W4, W4
007D18  780994     MOV [W4], [W3]
217:                   }
218:               }
007D20  060000     RETURN
219:               
220:               void ClipCopy_psv(int numElems, fractional * dstV, __psv__ fractional * srcV){
007D22  781F88     MOV W8, [W15++]
007D24  BE9F8A     MOV.D W10, [W15++]
007D26  BE0202     MOV.D W2, W4
007D2E  B80D61     MUL.UU W1, #1, W10
007D30  D00103     SL W3, W2
221:                   int i;
222:                   
223:                   for(i=0; i<numElems; i++){
007D28  E00000     CP0 W0
007D2A  340013     BRA LE, 0x7D52
007D2C  EB0180     CLR W3
007D4C  E80183     INC W3, W3
007D4E  518F80     SUB W3, W0, [W15]
007D50  3AFFEF     BRA NZ, 0x7D30
224:                       *dstV++=*srcV++;
007D32  41010A     ADD W2, W10, W2
007D34  800198     MOV DSRPAG, W8
007D36  780304     MOV W4, W6
007D38  A4F006     BTSTS.C W6, #15
007D3A  D28385     RLC W5, W7
007D3C  880197     MOV W7, DSRPAG
007D3E  000000     NOP
007D40  780316     MOV [W6], W6
007D42  880198     MOV W8, DSRPAG
007D44  000000     NOP
007D46  780906     MOV W6, [W2]
007D48  420262     ADD W4, #0x2, W4
007D4A  4A82E0     ADDC W5, #0x0, W5
225:                   }
226:               }
007D52  BE054F     MOV.D [--W15], W10
007D54  78044F     MOV [--W15], W8
007D56  060000     RETURN
227:               
228:               void ClipCopy_eds(int numElems, fractional * dstV, __eds__ fractional * srcV){
007D58  BE9F88     MOV.D W8, [W15++]
007D60  B80C61     MUL.UU W1, #1, W8
007D62  D00304     SL W4, W6
229:                   int i;
230:                   
231:                   for(i=0; i<numElems; i++){
007D5A  E00000     CP0 W0
007D5C  340014     BRA LE, 0x7D86
007D5E  EB0200     CLR W4
007D80  E80204     INC W4, W4
007D82  520F80     SUB W4, W0, [W15]
007D84  3AFFEE     BRA NZ, 0x7D62
232:                       *dstV++=*srcV++;
007D64  430308     ADD W6, W8, W6
007D66  800195     MOV DSRPAG, W5
007D68  880193     MOV W3, DSRPAG
007D6A  000000     NOP
007D6C  780B12     MOV [W2], [W6]
007D6E  880195     MOV W5, DSRPAG
007D70  000000     NOP
007D72  780082     MOV W2, W1
007D74  B00022     ADD #0x2, W2
007D76  688082     XOR W1, W2, W1
007D78  AF6042     BTSC SR, #3
007D7A  A0F002     BSET W2, #15
007D7C  D28081     RLC W1, W1
007D7E  B08003     ADDC #0x0, W3
233:                   } 
234:               }
007D86  BE044F     MOV.D [--W15], W8
007D88  060000     RETURN
235:               
236:               void ClipCopy_toeds(int numElems, __eds__ fractional * dstV, fractional * srcV){
007D8A  BE9F88     MOV.D W8, [W15++]
007D92  B80C61     MUL.UU W1, #1, W8
007D94  D00384     SL W4, W7
237:                   int i;
238:                   
239:                   for(i=0; i<numElems; i++){
007D8C  E00000     CP0 W0
007D8E  340012     BRA LE, 0x7DB4
007D90  EB0200     CLR W4
007DAE  E80204     INC W4, W4
007DB0  520F80     SUB W4, W0, [W15]
007DB2  3AFFF0     BRA NZ, 0x7D94
240:                       *dstV++=*srcV++;
007D96  438388     ADD W7, W8, W7
007D98  8001A5     MOV DSWPAG, W5
007D9A  8801A3     MOV W3, DSWPAG
007D9C  780917     MOV [W7], [W2]
007D9E  8801A5     MOV W5, DSWPAG
007DA0  780082     MOV W2, W1
007DA2  B00022     ADD #0x2, W2
007DA4  688082     XOR W1, W2, W1
007DA6  AF6042     BTSC SR, #3
007DA8  A0F002     BSET W2, #15
007DAA  D28081     RLC W1, W1
007DAC  B08003     ADDC #0x0, W3
241:                   } 
242:               }
007DB4  BE044F     MOV.D [--W15], W8
007DB6  060000     RETURN
243:               
244:               //A blocking delay function. Not very accurate but good enough.
245:               void Delay_us(unsigned int delay)
246:               {
247:                   int i;
248:                   for (i = 0; i < delay; i++)
007DB8  E00000     CP0 W0
007DBA  320006     BRA Z, 0x7DC8
007DBC  EB0080     CLR W1
007DC2  E80081     INC W1, W1
007DC4  500F81     SUB W0, W1, [W15]
007DC6  3EFFFB     BRA GTU, 0x7DBE
249:                   {
250:                       __asm__ volatile ("repeat #50");
007DBE  090032     REPEAT #0x32
251:                       __asm__ volatile ("nop");
007DC0  000000     NOP
252:                   }
253:               }
007DC8  060000     RETURN
---  C:/Users/ryan/Documents/seniorproject/ps-040/sounds.c  ---------------------------------------------
1:                 /*
2:                  * File:   sounds.c
3:                  * Author: ThinkPad-OwnerX220
4:                  *
5:                  * Created on February 16, 2017, 2:48 PM
6:                  */
7:                 #include "xc.h"
8:                 #include "common.h"
9:                 #include "sounds.h"
10:                #include "dsp.h"
11:                
12:                fractional __attribute__((space(psv))) sintab[SINRES] = {
13:                     0,     201,     402,     603,     804,    1005,    1206,    1406,
14:                  1607,    1808,    2009,    2209,    2410,    2610,    2811,    3011,
15:                  3211,    3411,    3611,    3811,    4011,    4210,    4409,    4608,
16:                  4807,    5006,    5205,    5403,    5601,    5799,    5997,    6195,
17:                  6392,    6589,    6786,    6982,    7179,    7375,    7571,    7766,
18:                  7961,    8156,    8351,    8545,    8739,    8932,    9126,    9319,
19:                  9511,    9703,    9895,   10087,   10278,   10469,   10659,   10849,
20:                 11038,   11227,   11416,   11604,   11792,   11980,   12166,   12353,
21:                 12539,   12724,   12909,   13094,   13278,   13462,   13645,   13827,
22:                 14009,   14191,   14372,   14552,   14732,   14911,   15090,   15268,
23:                 15446,   15623,   15799,   15975,   16150,   16325,   16499,   16672,
24:                 16845,   17017,   17189,   17360,   17530,   17699,   17868,   18036,
25:                 18204,   18371,   18537,   18702,   18867,   19031,   19194,   19357,
26:                 19519,   19680,   19840,   20000,   20159,   20317,   20474,   20631,
27:                 20787,   20942,   21096,   21249,   21402,   21554,   21705,   21855,
28:                 22004,   22153,   22301,   22448,   22594,   22739,   22883,   23027,
29:                 23169,   23311,   23452,   23592,   23731,   23869,   24006,   24143,
30:                 24278,   24413,   24546,   24679,   24811,   24942,   25072,   25201,
31:                 25329,   25456,   25582,   25707,   25831,   25954,   26077,   26198,
32:                 26318,   26437,   26556,   26673,   26789,   26905,   27019,   27132,
33:                 27244,   27355,   27466,   27575,   27683,   27790,   27896,   28001,
34:                 28105,   28208,   28309,   28410,   28510,   28608,   28706,   28802,
35:                 28897,   28992,   29085,   29177,   29268,   29358,   29446,   29534,
36:                 29621,   29706,   29790,   29873,   29955,   30036,   30116,   30195,
37:                 30272,   30349,   30424,   30498,   30571,   30643,   30713,   30783,
38:                 30851,   30918,   30984,   31049,   31113,   31175,   31236,   31297,
39:                 31356,   31413,   31470,   31525,   31580,   31633,   31684,   31735,
40:                 31785,   31833,   31880,   31926,   31970,   32014,   32056,   32097,
41:                 32137,   32176,   32213,   32249,   32284,   32318,   32350,   32382,
42:                 32412,   32441,   32468,   32495,   32520,   32544,   32567,   32588,
43:                 32609,   32628,   32646,   32662,   32678,   32692,   32705,   32717,
44:                 32727,   32736,   32744,   32751,   32757,   32761,   32764,   32766,
45:                 32767,   32766,   32764,   32761,   32757,   32751,   32744,   32736,
46:                 32727,   32717,   32705,   32692,   32678,   32662,   32646,   32628,
47:                 32609,   32588,   32567,   32544,   32520,   32495,   32468,   32441,
48:                 32412,   32382,   32350,   32318,   32284,   32249,   32213,   32176,
49:                 32137,   32097,   32056,   32014,   31970,   31926,   31880,   31833,
50:                 31785,   31735,   31684,   31633,   31580,   31525,   31470,   31413,
51:                 31356,   31297,   31236,   31175,   31113,   31049,   30984,   30918,
52:                 30851,   30783,   30713,   30643,   30571,   30498,   30424,   30349,
53:                 30272,   30195,   30116,   30036,   29955,   29873,   29790,   29706,
54:                 29621,   29534,   29446,   29358,   29268,   29177,   29085,   28992,
55:                 28897,   28802,   28706,   28608,   28510,   28410,   28309,   28208,
56:                 28105,   28001,   27896,   27790,   27683,   27575,   27466,   27355,
57:                 27244,   27132,   27019,   26905,   26789,   26673,   26556,   26437,
58:                 26318,   26198,   26077,   25954,   25831,   25707,   25582,   25456,
59:                 25329,   25201,   25072,   24942,   24811,   24679,   24546,   24413,
60:                 24278,   24143,   24006,   23869,   23731,   23592,   23452,   23311,
61:                 23169,   23027,   22883,   22739,   22594,   22448,   22301,   22153,
62:                 22004,   21855,   21705,   21554,   21402,   21249,   21096,   20942,
63:                 20787,   20631,   20474,   20317,   20159,   20000,   19840,   19680,
64:                 19519,   19357,   19194,   19031,   18867,   18702,   18537,   18371,
65:                 18204,   18036,   17868,   17699,   17530,   17360,   17189,   17017,
66:                 16845,   16672,   16499,   16325,   16150,   15975,   15799,   15623,
67:                 15446,   15268,   15090,   14911,   14732,   14552,   14372,   14191,
68:                 14009,   13827,   13645,   13462,   13278,   13094,   12909,   12724,
69:                 12539,   12353,   12166,   11980,   11792,   11604,   11416,   11227,
70:                 11038,   10849,   10659,   10469,   10278,   10087,    9895,    9703,
71:                  9511,    9319,    9126,    8932,    8739,    8545,    8351,    8156,
72:                  7961,    7766,    7571,    7375,    7179,    6982,    6786,    6589,
73:                  6392,    6195,    5997,    5799,    5601,    5403,    5205,    5006,
74:                  4807,    4608,    4409,    4210,    4011,    3811,    3611,    3411,
75:                  3211,    3011,    2811,    2610,    2410,    2209,    2009,    1808,
76:                  1607,    1406,    1206,    1005,     804,     603,     402,     201,
77:                     0,    -201,    -402,    -603,    -804,   -1005,   -1206,   -1406,
78:                 -1607,   -1808,   -2009,   -2209,   -2410,   -2610,   -2811,   -3011,
79:                 -3211,   -3411,   -3611,   -3811,   -4011,   -4210,   -4409,   -4608,
80:                 -4807,   -5006,   -5205,   -5403,   -5601,   -5799,   -5997,   -6195,
81:                 -6392,   -6589,   -6786,   -6982,   -7179,   -7375,   -7571,   -7766,
82:                 -7961,   -8156,   -8351,   -8545,   -8739,   -8932,   -9126,   -9319,
83:                 -9511,   -9703,   -9895,  -10087,  -10278,  -10469,  -10659,  -10849,
84:                -11038,  -11227,  -11416,  -11604,  -11792,  -11980,  -12166,  -12353,
85:                -12539,  -12724,  -12909,  -13094,  -13278,  -13462,  -13645,  -13827,
86:                -14009,  -14191,  -14372,  -14552,  -14732,  -14911,  -15090,  -15268,
87:                -15446,  -15623,  -15799,  -15975,  -16150,  -16325,  -16499,  -16672,
88:                -16845,  -17017,  -17189,  -17360,  -17530,  -17699,  -17868,  -18036,
89:                -18204,  -18371,  -18537,  -18702,  -18867,  -19031,  -19194,  -19357,
90:                -19519,  -19680,  -19840,  -20000,  -20159,  -20317,  -20474,  -20631,
91:                -20787,  -20942,  -21096,  -21249,  -21402,  -21554,  -21705,  -21855,
92:                -22004,  -22153,  -22301,  -22448,  -22594,  -22739,  -22883,  -23027,
93:                -23169,  -23311,  -23452,  -23592,  -23731,  -23869,  -24006,  -24143,
94:                -24278,  -24413,  -24546,  -24679,  -24811,  -24942,  -25072,  -25201,
95:                -25329,  -25456,  -25582,  -25707,  -25831,  -25954,  -26077,  -26198,
96:                -26318,  -26437,  -26556,  -26673,  -26789,  -26905,  -27019,  -27132,
97:                -27244,  -27355,  -27466,  -27575,  -27683,  -27790,  -27896,  -28001,
98:                -28105,  -28208,  -28309,  -28410,  -28510,  -28608,  -28706,  -28802,
99:                -28897,  -28992,  -29085,  -29177,  -29268,  -29358,  -29446,  -29534,
100:               -29621,  -29706,  -29790,  -29873,  -29955,  -30036,  -30116,  -30195,
101:               -30272,  -30349,  -30424,  -30498,  -30571,  -30643,  -30713,  -30783,
102:               -30851,  -30918,  -30984,  -31049,  -31113,  -31175,  -31236,  -31297,
103:               -31356,  -31413,  -31470,  -31525,  -31580,  -31633,  -31684,  -31735,
104:               -31785,  -31833,  -31880,  -31926,  -31970,  -32014,  -32056,  -32097,
105:               -32137,  -32176,  -32213,  -32249,  -32284,  -32318,  -32350,  -32382,
106:               -32412,  -32441,  -32468,  -32495,  -32520,  -32544,  -32567,  -32588,
107:               -32609,  -32628,  -32646,  -32662,  -32678,  -32692,  -32705,  -32717,
108:               -32727,  -32736,  -32744,  -32751,  -32757,  -32761,  -32764,  -32766,
109:               -32767,  -32766,  -32764,  -32761,  -32757,  -32751,  -32744,  -32736,
110:               -32727,  -32717,  -32705,  -32692,  -32678,  -32662,  -32646,  -32628,
111:               -32609,  -32588,  -32567,  -32544,  -32520,  -32495,  -32468,  -32441,
112:               -32412,  -32382,  -32350,  -32318,  -32284,  -32249,  -32213,  -32176,
113:               -32137,  -32097,  -32056,  -32014,  -31970,  -31926,  -31880,  -31833,
114:               -31785,  -31735,  -31684,  -31633,  -31580,  -31525,  -31470,  -31413,
115:               -31356,  -31297,  -31236,  -31175,  -31113,  -31049,  -30984,  -30918,
116:               -30851,  -30783,  -30713,  -30643,  -30571,  -30498,  -30424,  -30349,
117:               -30272,  -30195,  -30116,  -30036,  -29955,  -29873,  -29790,  -29706,
118:               -29621,  -29534,  -29446,  -29358,  -29268,  -29177,  -29085,  -28992,
119:               -28897,  -28802,  -28706,  -28608,  -28510,  -28410,  -28309,  -28208,
120:               -28105,  -28001,  -27896,  -27790,  -27683,  -27575,  -27466,  -27355,
121:               -27244,  -27132,  -27019,  -26905,  -26789,  -26673,  -26556,  -26437,
122:               -26318,  -26198,  -26077,  -25954,  -25831,  -25707,  -25582,  -25456,
123:               -25329,  -25201,  -25072,  -24942,  -24811,  -24679,  -24546,  -24413,
124:               -24278,  -24143,  -24006,  -23869,  -23731,  -23592,  -23452,  -23311,
125:               -23169,  -23027,  -22883,  -22739,  -22594,  -22448,  -22301,  -22153,
126:               -22004,  -21855,  -21705,  -21554,  -21402,  -21249,  -21096,  -20942,
127:               -20787,  -20631,  -20474,  -20317,  -20159,  -20000,  -19840,  -19680,
128:               -19519,  -19357,  -19194,  -19031,  -18867,  -18702,  -18537,  -18371,
129:               -18204,  -18036,  -17868,  -17699,  -17530,  -17360,  -17189,  -17017,
130:               -16845,  -16672,  -16499,  -16325,  -16150,  -15975,  -15799,  -15623,
131:               -15446,  -15268,  -15090,  -14911,  -14732,  -14552,  -14372,  -14191,
132:               -14009,  -13827,  -13645,  -13462,  -13278,  -13094,  -12909,  -12724,
133:               -12539,  -12353,  -12166,  -11980,  -11792,  -11604,  -11416,  -11227,
134:               -11038,  -10849,  -10659,  -10469,  -10278,  -10087,   -9895,   -9703,
135:                -9511,   -9319,   -9126,   -8932,   -8739,   -8545,   -8351,   -8156,
136:                -7961,   -7766,   -7571,   -7375,   -7179,   -6982,   -6786,   -6589,
137:                -6392,   -6195,   -5997,   -5799,   -5601,   -5403,   -5205,   -5006,
138:                -4807,   -4608,   -4409,   -4210,   -4011,   -3811,   -3611,   -3411,
139:                -3211,   -3011,   -2811,   -2610,   -2410,   -2209,   -2009,   -1808,
140:                -1607,   -1406,   -1206,   -1005,    -804,    -603,    -402,    -201
141:               };
142:               
143:               
144:               void genSine(unsigned int size){
145:                   /*
146:                   long int counter=0;
147:                   for(; counter<size; counter++)
148:                       sintab[counter]=Q15(0.5);
149:                   */
150:                   
151:               }
008938  060000     RETURN
152:               
153:               fractional __attribute__((space(psv))) kicksamp[5552] = {-1, 3, -5, 6, -6, 5, -4, 3, -2, 2, -3, 3, -3, 3, -2, 1, -1, 1, -1, 1, -1, 1, 0, -1, 1, -1, 1, -1, 1, -1, 1, -1, -12, -49, -72, -26, 132, 337, 578, 813, 1029, 1202, 1334, 1425, 1472, 1501, 1469, 1438, 1379, 1328, 1269, 1219, 1160, 1107, 1062, 1037, 1044, 1066, 1113, 1167, 1197, 1225, 1192, 1142, 1026, 882, 702, 498, 284, 66, -161, -419, -722, -1087, -1515, -1991, -2511, -3042, -3581, -4092, -4567, -4994, -5360, -5668, -5909, -6102, -6234, -6326, -6368, -6385, -6362, -6325, -6260, -6176, -6079, -5957, -5825, -5677, -5504, -5322, -5107, -4882, -4635, -4390, -4128, -3866, -3580, -3281, -2946, -2589, -2195, -1767, -1312, -808, -293, 274, 825, 1423, 1995, 2597, 3189, 3791, 4385, 4987, 5577, 6174, 6749, 7328, 7886, 8429, 8966, 9467, 9965, 10417, 10859, 11272, 11669, 12031, 12370, 12672, 12946, 13178, 13386, 13547, 13684, 13787, 13846, 13892, 13887, 13868, 13812, 13731, 13620, 13485, 13324, 13140, 12928, 12687, 12415, 12115, 11780, 11428, 11054, 10668, 10272, 9871, 9460, 9060, 8646, 8243, 7834, 7425, 7019, 6605, 6195, 5779, 5356, 4936, 4500, 4075, 3628, 3190, 2737, 2287, 1829, 1370, 904, 440, -31, -496, -969, -1432, -1906, -2362, -2834, -3285, -3748, -4195, -4650, -5085, -5536, -5960, -6395, -6816, -7236, -7648, -8053, -8453, -8846, -9232, -9611, -9981, -10342, -10708, -11055, -11397, -11723, -12065, -12435, -12841, -13293, -13758, -14251, -14717, -15172, -15590, -15951, -16259, -16496, -16647, -16729, -16708, -16632, -16478, -16263, -15984, -15654, -15281, -14906, -14526, -14175, -13866, -13608, -13426, -13311, -13290, -13337, -13474, -13681, -13954, -14281, -14663, -15072, -15516, -15971, -16435, -16903, -17356, -17799, -18230, -18625, -19012, -19354, -19677, -19968, -20221, -20452, -20645, -20808, -20940, -21045, -21109, -21163, -21162, -21164, -21102, -21045, -20934, -20806, -20645, -20448, -20228, -19968, -19687, -19356, -19011, -18614, -18199, -17742, -17248, -16732, -16168, -15587, -14960, -14315, -13632, -12924, -12192, -11429, -10645, -9847, -9014, -8185, -7321, -6463, -5586, -4707, -3826, -2938, -2059, -1178, -299, 579, 1392, 2246, 3094, 3949, 4745, 5556, 6311, 7043, 7767, 8436, 9113, 9743, 10360, 10966, 11530, 12107, 12635, 13167, 13672, 14165, 14643, 15109, 15550, 15993, 16414, 16846, 17265, 17681, 18099, 18491, 18892, 19259, 19621, 19965, 20288, 20596, 20890, 21162, 21426, 21671, 21903, 22131, 22338, 22548, 22735, 22927, 23101, 23275, 23442, 23596, 23755, 23897, 24041, 24175, 24318, 24427, 24533, 24656, 24785, 24890, 25004, 25092, 25173, 25250, 25300, 25361, 25394, 25427, 25459, 25464, 25487, 25478, 25481, 25470, 25451, 25436, 25402, 25377, 25331, 25300, 25245, 25204, 25144, 25088, 25021, 24956, 24872, 24798, 24706, 24613, 24505, 24402, 24290, 24198, 24100, 24009, 23918, 23817, 23705, 23584, 23434, 23279, 23094, 22898, 22678, 22451, 22203, 21958, 21692, 21427, 21154, 20892, 20622, 20359, 20065, 19788, 19484, 19203, 18917, 18662, 18412, 18208, 18008, 17858, 17713, 17608, 17517, 17442, 17389, 17336, 17299, 17263, 17221, 17184, 17135, 17079, 17012, 16930, 16830, 16711, 16540, 16436, 16275, 16005, 15745, 15436, 15124, 14796, 14449, 14092, 13711, 13313, 12895, 12449, 11987, 11488, 10980, 10431, 9869, 9279, 8664, 8035, 7374, 6706, 6016, 5306, 4602, 3856, 3137, 2381, 1640, 891, 136, -609, -1351, -2096, -2818, -3543, -4252, -4941, -5637, -6289, -6959, -7580, -8215, -8807, -9405, -9967, -10531, -11061, -11590, -12094, -12590, -13068, -13533, -13986, -14428, -14853, -15281, -15681, -16091, -16480, -16866, -17251, -17611, -17985, -18332, -18683, -19025, -19353, -19683, -19999, -20306, -20614, -20897, -21194, -21471, -21753, -22028, -22298, -22557, -22814, -23048, -23282, -23500, -23693, -23896, -24057, -24231, -24375, -24514, -24640, -24754, -24862, -24951, -25048, -25109, -25198, -25239, -25313, -25342, -25396, -25420, -25450, -25467, -25481, -25480, -25488, -25461, -25465, -25418, -25406, -25354, -25314, -25265, -25198, -25142, -25067, -24993, -24914, -24824, -24737, -24641, -24535, -24449, -24340, -24226, -24082, -23986, -23911, -23814, -23727, -23611, -23493, -23367, -23221, -23082, -22929, -22775, -22623, -22463, -22305, -22156, -21989, -21847, -21683, -21538, -21386, -21234, -21097, -20944, -20808, -20666, -20527, -20392, -20255, -20122, -19989, -19859, -19727, -19601, -19466, -19344, -19209, -19084, -18954, -18820, -18691, -18560, -18419, -18296, -18125, -17998, -17899, -17743, -17552, -17343, -17140, -16942, -16753, -16565, -16389, -16198, -16026, -15822, -15637, -15416, -15203, -14959, -14711, -14439, -14146, -13840, -13502, -13156, -12776, -12382, -11952, -11515, -11045, -10568, -10065, -9543, -9005, -8433, -7854, -7229, -6604, -5932, -5263, -4554, -3846, -3110, -2377, -1620, -881, -116, 619, 1378, 2106, 2854, 3574, 4302, 5008, 5702, 6381, 7035, 7675, 8280, 8879, 9436, 9987, 10500, 11003, 11476, 11938, 12375, 12795, 13203, 13591, 13967, 14335, 14679, 15025, 15350, 15674, 15988, 16289, 16594, 16879, 17175, 17449, 17736, 18002, 18274, 18542, 18792, 19061, 19301, 19553, 19800, 20029, 20276, 20496, 20730, 20947, 21169, 21381, 21592, 21798, 21996, 22198, 22385, 22578, 22756, 22935, 23111, 23273, 23445, 23592, 23754, 23896, 24036, 24175, 24302, 24424, 24545, 24652, 24757, 24857, 24944, 25031, 25107, 25176, 25240, 25297, 25343, 25390, 25415, 25452, 25465, 25475, 25489, 25473, 25475, 25449, 25428, 25393, 25360, 25304, 25265, 25190, 25134, 25055, 24980, 24907, 24816, 24738, 24639, 24547, 24439, 24331, 24210, 24085, 23950, 23811, 23659, 23510, 23346, 23183, 23016, 22837, 22670, 22480, 22312, 22120, 21945, 21759, 21575, 21398, 21212, 21033, 20859, 20671, 20510, 20322, 20164, 19984, 19823, 19657, 19490, 19338, 19173, 19023, 18868, 18720, 18573, 18433, 18284, 18157, 18012, 17888, 17754, 17628, 17499, 17379, 17245, 17134, 16992, 16882, 16746, 16620, 16491, 16353, 16220, 16082, 15932, 15792, 15630, 15481, 15308, 15139, 14965, 14771, 14586, 14381, 14166, 13957, 13712, 13485, 13223, 12961, 12684, 12386, 12119, 11793, 11398, 11060, 10751, 10469, 10134, 9784, 9403, 8978, 8536, 8066, 7564, 7067, 6523, 5997, 5439, 4881, 4321, 3738, 3171, 2578, 2004, 1412, 829, 242, -338, -926, -1496, -2079, -2639, -3214, -3761, -4322, -4859, -5398, -5924, -6442, -6977, -7477, -7909, -8342, -8906, -9438, -9951, -10431, -10872, -11277, -11658, -12005, -12337, -12647, -12939, -13229, -13496, -13765, -14018, -14268, -14510, -14743, -14979, -15199, -15427, -15636, -15852, -16060, -16260, -16466, -16656, -16855, -17043, -17225, -17419, -17586, -17778, -17943, -18122, -18295, -18457, -18630, -18784, -18953, -19100, -19266, -19406, -19564, -19702, -19850, -19990, -20128, -20263, -20401, -20527, -20665, -20789, -20920, -21046, -21170, -21297, -21418, -21546, -21666, -21789, -21910, -22034, -22154, -22277, -22397, -22520, -22643, -22755, -22891, -22993, -23134, -23239, -23363, -23485, -23591, -23723, -23819, -23944, -24045, -24153, -24262, -24355, -24460, -24552, -24641, -24735, -24809, -24899, -24963, -25044, -25103, -25170, -25223, -25278, -25323, -25369, -25403, -25428, -25452, -25469, -25471, -25489, -25475, -25490, -25471, -25474, -25458, -25446, -25430, -25407, -25383, -25351, -25317, -25277, -25229, -25183, -25117, -25070, -24985, -24928, -24839, -24764, -24673, -24581, -24489, -24383, -24285, -24174, -24066, -23952, -23835, -23715, -23595, -23469, -23345, -23212, -23085, -22952, -22821, -22678, -22551, -22398, -22270, -22116, -21975, -21826, -21679, -21534, -21387, -21241, -21098, -20953, -20812, -20668, -20525, -20380, -20235, -20085, -19938, -19784, -19631, -19476, -19317, -19158, -18996, -18835, -18667, -18506, -18337, -18170, -18008, -17831, -17674, -17496, -17332, -17156, -16984, -16808, -16628, -16449, -16262, -16074, -15884, -15685, -15487, -15281, -15069, -14860, -14632, -14414, -14179, -13941, -13699, -13449, -13197, -12935, -12665, -12393, -12098, -11813, -11499, -11188, -10866, -10523, -10188, -9824, -9466, -9087, -8711, -8311, -7922, -7503, -7097, -6674, -6247, -5817, -5374, -4941, -4488, -4047, -3589, -3138, -2684, -2222, -1764, -1316, -864, -412, 125, 555, 944, 1339, 1745, 2163, 2604, 3043, 3510, 3963, 4437, 4900, 5363, 5832, 6277, 6736, 7170, 7612, 8036, 8452, 8867, 9263, 9655, 10041, 10405, 10775, 11120, 11467, 11795, 12119, 12428, 12733, 13023, 13306, 13577, 13840, 14096, 14338, 14578, 14798, 15024, 15229, 15431, 15629, 15802, 15993, 16146, 16323, 16452, 16666, 16753, 16804, 16991, 17158, 17332, 17479, 17598, 17712, 17777, 17860, 17899, 17951, 17987, 18015, 18051, 18073, 18102, 18133, 18158, 18195, 18217, 18263, 18291, 18334, 18383, 18416, 18482, 18523, 18586, 18645, 18702, 18772, 18839, 18910, 18990, 19066, 19148, 19242, 19320, 19430, 19506, 19619, 19708, 19812, 19913, 20010, 20116, 20211, 20316, 20411, 20511, 20608, 20701, 20798, 20891, 20978, 21076, 21154, 21250, 21328, 21419, 21496, 21582, 21657, 21742, 21814, 21896, 21971, 22046, 22125, 22197, 22273, 22349, 22423, 22497, 22575, 22647, 22724, 22798, 22878, 22947, 23034, 23103, 23185, 23266, 23337, 23427, 23496, 23585, 23662, 23741, 23829, 23898, 23992, 24059, 24147, 24222, 24296, 24379, 24446, 24526, 24593, 24663, 24732, 24798, 24858, 24925, 24972, 25041, 25081, 25140, 25182, 25227, 25267, 25305, 25336, 25371, 25391, 25422, 25435, 25456, 25467, 25474, 25484, 25480, 25482, 25477, 25464, 25456, 25435, 25417, 25394, 25362, 25339, 25295, 25266, 25217, 25177, 25127, 25077, 25020, 24963, 24906, 24833, 24780, 24694, 24634, 24555, 24474, 24404, 24305, 24238, 24135, 24061, 23957, 23873, 23774, 23678, 23584, 23479, 23376, 23275, 23159, 23060, 22948, 22838, 22744, 22619, 22541, 22411, 22331, 22217, 22119, 22025, 21918, 21818, 21723, 21609, 21523, 21401, 21311, 21197, 21096, 20990, 20883, 20777, 20669, 20565, 20452, 20350, 20235, 20134, 20017, 19916, 19796, 19697, 19573, 19474, 19350, 19244, 19124, 19013, 18895, 18782, 18662, 18546, 18422, 18303, 18178, 18049, 17926, 17785, 17655, 17513, 17363, 17225, 17063, 16908, 16752, 16568, 16415, 16216, 16041, 15847, 15646, 15446, 15231, 15013, 14788, 14550, 14312, 14062, 13802, 13542, 13267, 12984, 12700, 12401, 12099, 11791, 11466, 11145, 10808, 10466, 10122, 9763, 9401, 9040, 8656, 8286, 7895, 7503, 7115, 6702, 6310, 5890, 5488, 5072, 4656, 4242, 3820, 3396, 2976, 2537, 2113, 1678, 1238, 807, 362, -73, -508, -952, -1378, -1822, -2244, -2677, -3107, -3509, -3918, -4389, -4798, -5160, -5531, -5905, -6276, -6662, -7044, -7437, -7821, -8212, -8604, -8980, -9369, -9735, -10117, -10469, -10841, -11181, -11536, -11869, -12205, -12532, -12851, -13161, -13475, -13764, -14067, -14345, -14629, -14900, -15166, -15427, -15682, -15924, -16170, -16400, -16629, -16850, -17062, -17275, -17472, -17672, -17859, -18043, -18220, -18388, -18556, -18710, -18867, -19009, -19152, -19281, -19417, -19528, -19655, -19755, -19865, -19962, -20053, -20146, -20218, -20305, -20368, -20439, -20496, -20555, -20607, -20653, -20696, -20736, -20768, -20802, -20832, -20876, -20872, -20834, -20907, -20958, -21007, -21042, -21065, -21065, -21071, -21048, -21040, -21012, -20989, -20969, -20939, -20920, -20897, -20880, -20863, -20848, -20836, -20829, -20821, -20822, -20817, -20826, -20833, -20850, -20860, -20890, -20905, -20946, -20968, -21012, -21044, -21094, -21132, -21188, -21233, -21291, -21346, -21399, -21466, -21520, -21590, -21653, -21718, -21793, -21855, -21934, -22005, -22078, -22160, -22228, -22317, -22387, -22475, -22550, -22637, -22715, -22803, -22884, -22970, -23051, -23144, -23215, -23315, -23385, -23476, -23561, -23638, -23728, -23803, -23887, -23968, -24044, -24125, -24200, -24273, -24353, -24416, -24496, -24559, -24626, -24695, -24754, -24815, -24879, -24923, -24994, -25028, -25088, -25129, -25174, -25216, -25254, -25286, -25324, -25349, -25379, -25401, -25423, -25440, -25456, -25464, -25479, -25479, -25485, -25483, -25478, -25474, -25461, -25451, -25433, -25416, -25392, -25370, -25341, -25313, -25276, -25245, -25202, -25162, -25122, -25067, -25031, -24966, -24929, -24856, -24814, -24741, -24690, -24619, -24559, -24486, -24422, -24349, -24276, -24208, -24127, -24057, -23976, -23899, -23823, -23737, -23667, -23575, -23501, -23415, -23330, -23255, -23159, -23087, -22993, -22915, -22826, -22743, -22656, -22574, -22482, -22405, -22311, -22230, -22142, -22051, -21972, -21875, -21796, -21706, -21618, -21540, -21446, -21369, -21279, -21193, -21116, -21019, -20946, -20851, -20768, -20681, -20595, -20502, -20422, -20321, -20242, -20142, -20054, -19964, -19864, -19780, -19674, -19588, -19481, -19383, -19284, -19173, -19073, -18956, -18845, -18730, -18609, -18484, -18363, -18223, -18096, -17952, -17808, -17661, -17505, -17347, -17183, -17014, -16838, -16657, -16474, -16276, -16084, -15878, -15668, -15453, -15232, -15001, -14776, -14526, -14290, -14035, -13780, -13519, -13250, -12979, -12698, -12420, -12129, -11836, -11543, -11235, -10939, -10618, -10314, -9985, -9676, -9336, -9022, -8673, -8353, -8000, -7668, -7315, -6974, -6616, -6268, -5908, -5554, -5192, -4831, -4465, -4103, -3733, -3367, -2995, -2626, -2252, -1881, -1505, -1132, -756, -384, -4, 365, 747, 1110, 1495, 1855, 2241, 2598, 2981, 3335, 3715, 4067, 4440, 4795, 5156, 5513, 5866, 6221, 6571, 6915, 7264, 7602, 7947, 8278, 8618, 8943, 9275, 9593, 9914, 10251, 10578, 10874, 11164, 11456, 11745, 12046, 12340, 12641, 12943, 13240, 13533, 13838, 14117, 14417, 14694, 14980, 15255, 15532, 15795, 16066, 16321, 16579, 16831, 17072, 17322, 17547, 17789, 18010, 18236, 18450, 18664, 18869, 19075, 19271, 19464, 19654, 19834, 20020, 20186, 20365, 20519, 20690, 20831, 20993, 21123, 21275, 21399, 21538, 21660, 21789, 21908, 22030, 22143, 22261, 22365, 22479, 22574, 22677, 22772, 22866, 22951, 23043, 23116, 23205, 23275, 23350, 23422, 23487, 23555, 23616, 23679, 23732, 23796, 23841, 23903, 23945, 23999, 24044, 24089, 24139, 24175, 24226, 24262, 24304, 24345, 24378, 24420, 24453, 24490, 24529, 24553, 24596, 24618, 24656, 24680, 24715, 24730, 24773, 24777, 24823, 24828, 24859, 24876, 24890, 24910, 24928, 24936, 24959, 24957, 24982, 24977, 24994, 24992, 25001, 25002, 25004, 25002, 25026, 24981, 24958, 24984, 25008, 25018, 25024, 25025, 25007, 24995, 24967, 24941, 24913, 24876, 24849, 24810, 24783, 24745, 24719, 24685, 24655, 24631, 24599, 24579, 24554, 24530, 24517, 24494, 24485, 24468, 24460, 24449, 24446, 24442, 24439, 24442, 24439, 24448, 24449, 24457, 24469, 24472, 24498, 24499, 24529, 24538, 24564, 24591, 24605, 24646, 24657, 24697, 24722, 24748, 24788, 24807, 24849, 24872, 24905, 24937, 24968, 24995, 25030, 25053, 25091, 25112, 25144, 25172, 25195, 25225, 25248, 25269, 25301, 25311, 25346, 25352, 25381, 25395, 25407, 25429, 25433, 25455, 25455, 25472, 25471, 25481, 25482, 25481, 25486, 25476, 25480, 25463, 25464, 25451, 25435, 25430, 25403, 25395, 25368, 25348, 25326, 25295, 25274, 25237, 25212, 25173, 25140, 25102, 25064, 25020, 24984, 24931, 24894, 24842, 24794, 24747, 24690, 24643, 24587, 24527, 24479, 24411, 24360, 24295, 24239, 24170, 24116, 24041, 23989, 23916, 23854, 23786, 23722, 23652, 23587, 23514, 23450, 23378, 23308, 23242, 23166, 23100, 23024, 22955, 22882, 22808, 22733, 22659, 22578, 22506, 22417, 22345, 22250, 22179, 22077, 22000, 21900, 21810, 21714, 21613, 21509, 21411, 21292, 21193, 21064, 20961, 20830, 20712, 20581, 20448, 20318, 20177, 20037, 19893, 19744, 19594, 19440, 19282, 19122, 18957, 18788, 18615, 18445, 18259, 18094, 17900, 17731, 17541, 17357, 17180, 16980, 16807, 16606, 16422, 16227, 16034, 15835, 15641, 15435, 15242, 15029, 14833, 14616, 14415, 14202, 13988, 13779, 13560, 13343, 13128, 12901, 12684, 12458, 12230, 12006, 11776, 11538, 11314, 11068, 10841, 10591, 10359, 10108, 9866, 9616, 9365, 9113, 8861, 8599, 8349, 8079, 7824, 7554, 7289, 7019, 6750, 6478, 6204, 5925, 5650, 5365, 5090, 4805, 4520, 4237, 3946, 3659, 3374, 3074, 2791, 2495, 2200, 1910, 1609, 1319, 1022, 723, 432, 127, -160, -465, -757, -1052, -1353, -1642, -1943, -2234, -2528, -2823, -3112, -3404, -3694, -3983, -4271, -4557, -4843, -5128, -5407, -5696, -5964, -6259, -6518, -6810, -7073, -7351, -7618, -7889, -8153, -8424, -8679, -8951, -9199, -9471, -9714, -9980, -10223, -10479, -10727, -10969, -11219, -11458, -11696, -11942, -12168, -12412, -12635, -12870, -13097, -13319, -13550, -13763, -13984, -14205, -14409, -14636, -14829, -15049, -15248, -15452, -15656, -15848, -16049, -16239, -16435, -16619, -16812, -16993, -17177, -17356, -17537, -17708, -17891, -18052, -18228, -18395, -18554, -18727, -18877, -19044, -19195, -19351, -19504, -19652, -19797, -19946, -20081, -20228, -20360, -20490, -20635, -20746, -20888, -21003, -21125, -21247, -21356, -21475, -21582, -21690, -21795, -21898, -21995, -22092, -22187, -22273, -22368, -22444, -22530, -22612, -22683, -22765, -22828, -22905, -22970, -23034, -23099, -23162, -23210, -23285, -23314, -23387, -23440, -23497, -23538, -23563, -23613, -23636, -23689, -23723, -23771, -23815, -23862, -23904, -23956, -23990, -24044, -24080, -24123, -24170, -24201, -24250, -24283, -24319, -24363, -24388, -24429, -24460, -24491, -24523, -24555, -24578, -24616, -24632, -24668, -24686, -24714, -24736, -24756, -24781, -24796, -24823, -24833, -24857, -24868, -24888, -24899, -24916, -24927, -24942, -24954, -24966, -24978, -24989, -24997, -25012, -25018, -25029, -25040, -25046, -25060, -25064, -25076, -25077, -25094, -25094, -25110, -25108, -25123, -25124, -25137, -25141, -25145, -25161, -25155, -25176, -25170, -25183, -25193, -25190, -25213, -25204, -25222, -25225, -25232, -25242, -25249, -25256, -25265, -25269, -25278, -25292, -25289, -25311, -25308, -25322, -25332, -25332, -25350, -25350, -25365, -25365, -25378, -25387, -25390, -25404, -25401, -25417, -25419, -25429, -25429, -25443, -25438, -25455, -25450, -25461, -25460, -25467, -25466, -25474, -25472, -25475, -25478, -25477, -25477, -25479, -25473, -25477, -25471, -25471, -25464, -25483, -25465, -25418, -25427, -25456, -25462, -25482, -25475, -25477, -25456, -25446, -25416, -25402, -25364, -25349, -25313, -25288, -25265, -25228, -25213, -25178, -25156, -25133, -25106, -25084, -25066, -25039, -25022, -25005, -24982, -24974, -24950, -24938, -24928, -24908, -24904, -24885, -24877, -24870, -24852, -24854, -24831, -24833, -24817, -24810, -24801, -24792, -24778, -24777, -24753, -24757, -24729, -24729, -24702, -24700, -24672, -24666, -24637, -24628, -24593, -24587, -24546, -24535, -24499, -24473, -24439, -24414, -24372, -24344, -24302, -24263, -24226, -24175, -24140, -24079, -24045, -23984, -23935, -23878, -23820, -23760, -23699, -23629, -23568, -23492, -23426, -23346, -23270, -23185, -23107, -23015, -22929, -22835, -22741, -22641, -22540, -22431, -22331, -22210, -22107, -21975, -21864, -21733, -21605, -21479, -21338, -21205, -21060, -20920, -20773, -20620, -20474, -20311, -20161, -19997, -19833, -19671, -19502, -19333, -19163, -18989, -18813, -18639, -18457, -18281, -18096, -17918, -17727, -17551, -17352, -17179, -16977, -16795, -16604, -16405, -16225, -16018, -15832, -15633, -15435, -15241, -15041, -14837, -14646, -14431, -14243, -14025, -13829, -13618, -13408, -13203, -12986, -12780, -12560, -12353, -12125, -11921, -11686, -11475, -11247, -11021, -10804, -10562, -10347, -10103, -9877, -9645, -9399, -9175, -8923, -8687, -8446, -8193, -7959, -7700, -7459, -7204, -6950, -6700, -6444, -6184, -5929, -5665, -5410, -5140, -4884, -4615, -4353, -4082, -3815, -3548, -3278, -3009, -2738, -2464, -2195, -1920, -1650, -1374, -1102, -829, -551, -285, 0, 258, 548, 807, 1090, 1353, 1632, 1898, 2173, 2437, 2714, 2973, 3245, 3513, 3773, 4047, 4300, 4569, 4831, 5084, 5353, 5601, 5865, 6118, 6369, 6629, 6873, 7132, 7373, 7628, 7868, 8120, 8359, 8606, 8844, 9084, 9326, 9554, 9803, 10023, 10263, 10495, 10716, 10957, 11170, 11403, 11625, 11845, 12065, 12288, 12497, 12722, 12925, 13148, 13346, 13568, 13762, 13978, 14173, 14379, 14577, 14775, 14975, 15165, 15363, 15552, 15740, 15933, 16112, 16301, 16482, 16660, 16843, 17017, 17193, 17368, 17536, 17708, 17877, 18036, 18212, 18359, 18539, 18678, 18848, 18997, 19152, 19307, 19451, 19602, 19749, 19891, 20034, 20178, 20311, 20452, 20586, 20711, 20856, 20968, 21112, 21222, 21356, 21469, 21593, 21705, 21822, 21932, 22046, 22150, 22259, 22362, 22462, 22564, 22659, 22756, 22846, 22940, 23026, 23115, 23199, 23279, 23363, 23438, 23516, 23589, 23662, 23733, 23803, 23865, 23934, 23992, 24059, 24115, 24172, 24234, 24277, 24346, 24381, 24446, 24485, 24536, 24582, 24625, 24673, 24709, 24757, 24791, 24831, 24873, 24901, 24945, 24973, 25005, 25044, 25064, 25104, 25123, 25143, 25199, 25216, 25234, 25244, 25248, 25274, 25278, 25305, 25319, 25340, 25358, 25379, 25392, 25413, 25424, 25439, 25451, 25459, 25469, 25473, 25482, 25480, 25483, 25482, 25477, 25474, 25466, 25455, 25449, 25430, 25421, 25401, 25385, 25362, 25346, 25316, 25301, 25264, 25248, 25210, 25187, 25157, 25120, 25094, 25053, 25027, 24984, 24952, 24913, 24877, 24837, 24799, 24759, 24717, 24680, 24635, 24595, 24553, 24508, 24466, 24421, 24377, 24334, 24285, 24242, 24193, 24146, 24101, 24047, 24008, 23947, 23907, 23852, 23800, 23754, 23694, 23648, 23588, 23540, 23483, 23429, 23371, 23316, 23258, 23201, 23142, 23081, 23026, 22961, 22906, 22839, 22781, 22718, 22652, 22595, 22523, 22469, 22396, 22336, 22270, 22204, 22138, 22074, 22005, 21942, 21873, 21806, 21741, 21672, 21610, 21538, 21474, 21405, 21339, 21271, 21203, 21139, 21067, 21007, 20930, 20874, 20798, 20735, 20668, 20598, 20535, 20459, 20423, 20330, 20231, 20183, 20135, 20095, 20042, 19986, 19921, 19852, 19776, 19704, 19622, 19545, 19467, 19385, 19312, 19227, 19158, 19076, 19009, 18932, 18861, 18794, 18720, 18662, 18589, 18534, 18463, 18413, 18348, 18294, 18241, 18182, 18139, 18078, 18037, 17984, 17940, 17889, 17850, 17799, 17762, 17717, 17672, 17637, 17588, 17556, 17506, 17476, 17428, 17392, 17348, 17311, 17267, 17228, 17184, 17143, 17097, 17057, 17009, 16966, 16918, 16874, 16820, 16778, 16719, 16674, 16617, 16564, 16507, 16451, 16392, 16330, 16273, 16207, 16142, 16079, 16007, 15943, 15868, 15797, 15723, 15649, 15569, 15495, 15406, 15334, 15242, 15160, 15078, 14979, 14902, 14801, 14710, 14620, 14513, 14430, 14316, 14226, 14119, 14015, 13912, 13801, 13696, 13585, 13473, 13358, 13250, 13121, 13021, 12885, 12775, 12650, 12524, 12404, 12273, 12149, 12016, 11891, 11750, 11627, 11484, 11352, 11215, 11070, 10938, 10788, 10654, 10500, 10363, 10206, 10069, 9910, 9764, 9610, 9455, 9304, 9142, 8991, 8830, 8669, 8508, 8345, 8183, 8015, 7853, 7681, 7517, 7347, 7170, 7008, 6824, 6661, 6480, 6301, 6134, 5941, 5780, 5585, 5413, 5230, 5043, 4866, 4679, 4492, 4314, 4118, 3941, 3745, 3567, 3370, 3190, 2993, 2810, 2617, 2429, 2238, 2046, 1860, 1667, 1476, 1288, 1094, 906, 714, 526, 333, 146, -48, -233, -426, -612, -805, -992, -1179, -1372, -1552, -1749, -1930, -2120, -2306, -2494, -2672, -2869, -3042, -3234, -3416, -3598, -3781, -3967, -4140, -4333, -4503, -4690, -4868, -5045, -5225, -5405, -5575, -5766, -5921, -6117, -6274, -6459, -6628, -6796, -6973, -7142, -7310, -7482, -7648, -7817, -7984, -8148, -8315, -8478, -8642, -8806, -8965, -9126, -9290, -9441, -9610, -9755, -9924, -10068, -10232, -10378, -10538, -10683, -10837, -10986, -11130, -11286, -11423, -11576, -11720, -11856, -12011, -12139, -12291, -12426, -12563, -12702, -12839, -12972, -13111, -13241, -13375, -13505, -13635, -13767, -13888, -14023, -14142, -14272, -14392, -14518, -14633, -14763, -14873, -14996, -15111, -15229, -15345, -15455, -15570, -15682, -15792, -15899, -16011, -16115, -16221, -16332, -16424, -16543, -16627, -16741, -16837, -16928, -17042, -17117, -17230, -17315, -17407, -17505, -17588, -17684, -17770, -17856, -17942, -18031, -18108, -18200, -18273, -18359, -18434, -18513, -18590, -18665, -18737, -18811, -18882, -18951, -19025, -19088, -19161, -19225, -19288, -19356, -19416, -19478, -19539, -19599, -19656, -19718, -19768, -19828, -19881, -19935, -19984, -20043, -20082, -20145, -20181, -20233, -20281, -20318, -20375, -20402, -20460, -20485, -20536, -20570, -20608, -20646, -20682, -20715, -20749, -20784, -20809, -20852, -20865, -20911, -20924, -20960, -20984, -21003, -21037, -21050, -21078, -21097, -21112, -21141, -21146, -21178, -21180, -21205, -21212, -21230, -21238, -21254, -21257, -21275, -21276, -21289, -21290, -21301, -21301, -21308, -21311, -21308, -21317, -21309, -21312, -21302, -21309, -21324, -21297, -21292, -21272, -21256, -21252, -21236, -21233, -21221, -21220, -21202, -21207, -21187, -21184, -21170, -21156, -21147, -21127, -21118, -21094, -21084, -21057, -21040, -21014, -20997, -20962, -20947, -20908, -20886, -20851, -20823, -20785, -20758, -20714, -20684, -20642, -20603, -20567, -20519, -20483, -20433, -20397, -20340, -20306, -20248, -20206, -20159, -20101, -20061, -20004, -19955, -19900, -19852, -19789, -19745, -19685, -19629, -19582, -19512, -19470, -19401, -19352, -19291, -19234, -19176, -19117, -19059, -18995, -18929, -18868, -18796, -18739, -18665, -18608, -18532, -18477, -18401, -18342, -18271, -18208, -18136, -18078, -18004, -17941, -17878, -17803, -17749, -17671, -17613, -17543, -17476, -17414, -17341, -17284, -17211, -17151, -17080, -17017, -16955, -16882, -16824, -16751, -16692, -16621, -16561, -16493, -16427, -16369, -16293, -16242, -16166, -16111, -16042, -15980, -15917, -15848, -15795, -15721, -15666, -15601, -15537, -15479, -15412, -15352, -15294, -15224, -15176, -15101, -15054, -14984, -14930, -14869, -14807, -14750, -14688, -14657, -14572, -14481, -14439, -14415, -14372, -14339, -14289, -14230, -14180, -14106, -14048, -13976, -13908, -13843, -13771, -13707, -13641, -13572, -13514, -13444, -13389, -13326, -13265, -13214, -13153, -13099, -13051, -12992, -12951, -12899, -12854, -12809, -12762, -12723, -12682, -12639, -12605, -12558, -12532, -12487, -12458, -12421, -12385, -12355, -12317, -12289, -12255, -12220, -12193, -12153, -12126, -12095, -12053, -12037, -11983, -11968, -11920, -11890, -11860, -11812, -11790, -11736, -11715, -11663, -11631, -11587, -11544, -11503, -11460, -11411, -11371, -11316, -11277, -11217, -11177, -11115, -11070, -11013, -10955, -10905, -10838, -10787, -10723, -10659, -10602, -10532, -10467, -10406, -10329, -10266, -10197, -10116, -10060, -9968, -9906, -9822, -9744, -9671, -9584, -9507, -9422, -9340, -9252, -9173, -9074, -8998, -8898, -8809, -8707, -8608, -8510, -8409, -8305, -8207, -8098, -7997, -7892, -7781, -7683, -7566, -7463, -7353, -7239, -7135, -7013, -6910, -6787, -6682, -6560, -6447, -6331, -6213, -6095, -5982, -5852, -5747, -5615, -5502, -5378, -5260, -5134, -5018, -4889, -4773, -4643, -4523, -4400, -4270, -4156, -4019, -3907, -3774, -3653, -3526, -3403, -3275, -3154, -3022, -2903, -2774, -2651, -2524, -2399, -2277, -2148, -2029, -1897, -1778, -1652, -1528, -1403, -1280, -1155, -1036, -909, -788, -668, -542, -422, -303, -176, -65, 67, 178, 305, 415, 547, 650, 783, 888, 1015, 1124, 1247, 1357, 1476, 1592, 1702, 1820, 1931, 2043, 2159, 2266, 2380, 2490, 2600, 2707, 2822, 2921, 3039, 3138, 3249, 3354, 3458, 3564, 3669, 3768, 3881, 3971, 4083, 4175, 4280, 4377, 4481, 4571, 4676, 4767, 4865, 4965, 5049, 5154, 5240, 5332, 5432, 5511, 5612, 5694, 5787, 5872, 5963, 6044, 6136, 6215, 6306, 6381, 6472, 6547, 6631, 6712, 6789, 6872, 6946, 7025, 7098, 7179, 7250, 7325, 7400, 7466, 7545, 7611, 7681, 7753, 7816, 7889, 7950, 8021, 8079, 8148, 8200, 8272, 8315, 8391, 8433, 8502, 8547, 8609, 8657, 8715, 8762, 8818, 8864, 8918, 8960, 9015, 9055, 9107, 9148, 9193, 9238, 9276, 9325, 9358, 9404, 9442, 9475, 9520, 9550, 9589, 9625, 9657, 9690, 9726, 9752, 9787, 9816, 9843, 9876, 9897, 9928, 9953, 9977, 10005, 10024, 10050, 10072, 10092, 10114, 10133, 10153, 10170, 10189, 10205, 10221, 10236, 10249, 10265, 10279, 10289, 10304, 10310, 10325, 10331, 10340, 10352, 10352, 10369, 10365, 10376, 10379, 10384, 10385, 10391, 10389, 10393, 10392, 10394, 10390, 10392, 10386, 10388, 10381, 10379, 10374, 10368, 10365, 10355, 10350, 10343, 10332, 10321, 10320, 10313, 10300, 10276, 10263, 10245, 10229, 10220, 10201, 10197, 10176, 10168, 10154, 10138, 10131, 10106, 10103, 10073, 10069, 10043, 10028, 10012, 9984, 9971, 9946, 9921, 9905, 9871, 9855, 9824, 9800, 9771, 9745, 9714, 9687, 9656, 9624, 9596, 9561, 9532, 9495, 9464, 9427, 9396, 9359, 9323, 9290, 9248, 9221, 9172, 9144, 9101, 9068, 9025, 8990, 8950, 8910, 8876, 8828, 8800, 8748, 8720, 8672, 8635, 8600, 8550, 8521, 8471, 8441, 8392, 8362, 8313, 8282, 8237, 8200, 8159, 8121, 8079, 8047, 8004, 7972, 7930, 7899, 7855, 7828, 7781, 7755, 7710, 7680, 7643, 7605, 7576, 7533, 7506, 7466, 7433, 7400, 7363, 7332, 7297, 7262, 7231, 7197, 7163, 7132, 7099, 7062, 7037, 6999, 6972, 6938, 6904, 6880, 6840, 6818, 6781, 6753, 6724, 6689, 6665, 6632, 6605, 6573, 6548, 6514, 6493, 6457, 6435, 6403, 6377, 6351, 6326, 6310, 6253, 6225, 6222, 6202, 6189, 6169, 6142, 6121, 6087, 6066, 6028, 6005, 5968, 5945, 5913, 5885, 5856, 5828, 5804, 5777, 5751, 5729, 5703, 5684, 5658, 5640, 5620, 5600, 5582, 5565, 5545, 5534, 5513, 5504, 5484, 5473, 5459, 5446, 5434, 5420, 5409, 5399, 5386, 5374, 5364, 5353, 5340, 5333, 5316, 5312, 5294, 5288, 5273, 5263, 5252, 5239, 5227, 5214, 5200, 5189, 5170, 5163, 5140, 5133, 5112, 5098, 5082, 5062, 5049, 5028, 5008, 4994, 4966, 4954, 4929, 4906, 4890, 4859, 4845, 4814, 4795, 4769, 4740, 4722, 4685, 4670, 4631, 4613, 4577, 4554, 4521, 4491, 4463, 4427, 4401, 4365, 4333, 4301, 4267, 4234, 4199, 4163, 4130, 4092, 4059, 4019, 3986, 3946, 3911, 3869, 3835, 3793, 3756, 3717, 3675, 3638, 3595, 3556, 3515, 3474, 3431, 3390, 3349, 3305, 3264, 3220, 3176, 3138, 3088, 3048, 3003, 2959, 2917, 2869, 2829, 2779, 2740, 2689, 2648, 2603, 2554, 2514, 2462, 2427, 2381, 2343, 2297, 2261, 2210, 2178, 2126, 2089, 2045, 2001, 1961, 1914, 1875, 1827, 1788, 1741, 1700, 1656, 1612, 1569, 1523, 1484, 1435, 1397, 1347, 1309, 1261, 1219, 1179, 1131, 1091, 1044, 1003, 960, 917, 873, 828, 791, 740, 706, 656, 618, 575, 532, 491, 449, 407, 364, 326, 281, 243, 199, 160, 118, 79, 37, -2, -42, -83, -121, -163, -198, -241, -276, -317, -358, -389, -436, -466, -508, -544, -580, -618, -655, -689, -731, -760, -801, -835, -869, -906, -939, -975, -1007, -1044, -1074, -1113, -1140, -1179, -1205, -1245, -1270, -1307, -1337, -1367, -1401, -1431, -1459, -1494, -1519, -1554, -1579, -1612, -1639, -1669, -1695, -1727, -1750, -1783, -1806, -1835, -1863, -1887, -1914, -1940, -1964, -1994, -2014, -2043, -2064, -2091, -2112, -2139, -2159, -2185, -2205, -2228, -2254, -2269, -2299, -2311, -2339, -2356, -2380, -2397, -2420, -2436, -2458, -2477, -2494, -2516, -2528, -2554, -2564, -2585, -2603, -2615, -2638, -2648, -2669, -2681, -2699, -2713, -2726, -2745, -2755, -2773, -2783, -2799, -2809, -2826, -2835, -2849, -2861, -2873, -2885, -2895, -2907, -2916, -2929, -2939, -2948, -2959, -2967, -2979, -2985, -2995, -3003, -3010, -3022, -3024, -3039, -3038, -3052, -3055, -3061, -3071, -3072, -3083, -3084, -3092, -3096, -3101, -3105, -3111, -3113, -3120, -3120, -3128, -3127, -3134, -3134, -3138, -3140, -3143, -3145, -3145, -3148, -3149, -3150, -3153, -3151, -3155, -3152, -3154, -3154, -3153, -3156, -3149, -3154, -3149, -3151, -3148, -3147, -3144, -3145, -3139, -3141, -3137, -3132, -3134, -3125, -3127, -3122, -3118, -3117, -3109, -3109, -3103, -3098, -3096, -3088, -3087, -3078, -3078, -3074, -3066, -3059, -3051, -3047, -3038, -3032, -3029, -3016, -3021, -3004, -3009, -2993, -2996, -2983, -2982, -2973, -2966, -2961, -2951, -2947, -2938, -2931, -2922, -2914, -2907, -2897, -2890, -2879, -2871, -2862, -2851, -2842, -2833, -2820, -2814, -2801, -2791, -2782, -2768, -2759, -2747, -2737, -2723, -2716, -2699, -2693, -2677, -2669, -2652, -2648, -2631, -2630, -2614, -2610, -2599, -2590, -2580, -2572, -2561, -2554, -2543, -2536, -2525, -2514, -2510, -2494, -2491, -2478, -2470, -2461, -2450, -2442, -2433, -2423, -2415, -2404, -2395, -2388, -2377, -2370, -2360, -2349, -2343, -2332, -2325, -2314, -2307, -2296, -2290, -2279, -2272, -2261, -2257, -2243, -2241, -2225, -2224, -2210, -2205, -2198, -2185, -2184, -2168, -2167, -2156, -2149, -2139, -2134, -2124, -2119, -2109, -2102, -2095, -2087, -2081, -2072, -2066, -2058, -2050, -2044, -2036, -2029, -2024, -2012, -2012, -1996, -1999, -1985, -1983, -1974, -1967, -1961, -1955, -1947, -1941, -1933, -1929, -1922, -1915, -1914, -1902, -1887, -1891, -1885, -1887, -1880, -1876, -1870, -1862, -1858, -1847, -1841, -1832, -1826, -1816, -1811, -1799, -1799, -1784, -1786, -1768, -1773, -1758, -1759, -1748, -1747, -1739, -1737, -1730, -1729, -1722, -1721, -1715, -1714, -1708, -1709, -1703, -1703, -1701, -1696, -1697, -1691, -1694, -1688, -1690, -1687, -1684, -1685, -1680, -1683, -1678, -1678, -1675, -1675, -1671, -1672, -1667, -1668, -1664, -1664, -1659, -1658, -1657, -1652, -1650, -1648, -1643, -1642, -1636, -1635, -1630, -1628, -1621, -1620, -1610, -1612, -1601, -1602, -1592, -1591, -1581, -1579, -1570, -1566, -1559, -1553, -1546, -1539, -1533, -1525, -1518, -1510, -1502, -1494, -1486, -1477, -1469, -1460, -1451, -1442, -1432, -1426, -1413, -1405, -1396, -1381, -1379, -1360, -1357, -1341, -1334, -1319, -1312, -1299, -1288, -1276, -1265, -1253, -1242, -1229, -1217, -1207, -1191, -1182, -1166, -1157, -1143, -1130, -1117, -1105, -1090, -1081, -1064, -1052, -1039, -1022, -1013, -996, -984, -970, -957, -941, -929, -914, -899, -887, -870, -859, -842, -830, -813, -800, -787, -770, -758, -741, -729, -712, -701, -682, -670, -655, -641, -626, -612, -596, -583, -568, -555, -538, -526, -508, -499, -478, -469, -451, -441, -424, -408, -398, -379, -371, -352, -340, -326, -312, -299, -282, -274, -254, -246, -229, -217, -204, -189, -176, -165, -148, -140, -122, -113, -98, -85, -73, -60, -49, -35, -24, -9, -1, 16, 25, 38, 50, 60, 73, 86, 94, 109, 118, 130, 143, 150, 167, 171, 188, 192, 210, 213, 230, 234, 251, 256, 268, 278, 287, 298, 305, 318, 324, 336, 344, 351, 366, 368, 381, 388, 396, 407, 414, 422, 430, 437, 447, 454, 462, 468, 478, 483, 493, 497, 506, 515, 517, 531, 528, 543, 547, 552, 561, 563, 573, 575, 586, 586, 597, 598, 605, 612, 615, 622, 626, 629, 639, 639, 646, 650, 652, 661, 660, 669, 669, 675, 678, 683, 686, 688, 694, 695, 700, 702, 704, 709, 710, 715, 715, 720, 720, 726, 723, 732, 725, 737, 729, 741, 733, 742, 738, 745, 740, 748, 744, 747, 750, 746, 753, 748, 754, 750, 754, 753, 752, 755, 753, 753, 755, 753, 755, 754, 752, 753, 753, 751, 752, 750, 751, 748, 750, 747, 748, 746, 744, 745, 741, 742, 740, 736, 738, 732, 734, 728, 730, 729, 731, 731, 732, 733, 735, 734, 736, 734, 738, 736, 738, 736, 740, 736, 740, 737, 738, 738, 737, 737, 737, 737, 736, 735, 736, 731, 738, 729, 735, 730, 729, 732, 724, 730, 724, 726, 723, 722, 720, 720, 717, 717, 715, 713, 714, 708, 712, 704, 709, 702, 703, 700, 700, 696, 695, 695, 691, 692, 685, 688, 684, 683, 684, 674, 681, 673, 676, 672, 668, 670, 666, 664, 665, 657, 663, 654, 657, 653, 653, 649, 649, 647, 645, 644, 640, 641, 635, 641, 629, 639, 626, 633, 627, 625, 626, 622, 622, 620, 617, 617, 614, 614, 611, 611, 609, 606, 608, 601, 606, 599, 601, 598, 597, 595, 593, 593, 591, 589, 591, 583, 588, 582, 584, 581, 580, 578, 579, 574, 577, 572, 572, 570, 570, 571, 569, 571, 565, 569, 562, 566, 560, 561, 557, 558, 555, 552, 554, 548, 552, 545, 550, 545, 543, 544, 542, 543, 541, 540, 539, 541, 537, 539, 537, 539, 535, 539, 535, 538, 537, 537, 537, 537, 537, 537, 538, 535, 540, 533, 541, 535, 537, 538, 535, 539, 536, 538, 535, 539, 534, 537, 537, 534, 537, 533, 535, 534, 533, 533, 531, 532, 530, 529, 530, 525, 529, 523, 525, 523, 521, 521, 519, 516, 518, 511, 515, 508, 512, 505, 506, 503, 500, 501, 494, 496, 491, 488, 489, 482, 484, 477, 477, 474, 470, 470, 462, 466, 455, 459, 451, 451, 447, 442, 438, 439, 431, 431, 425, 422, 419, 415, 413, 406, 407, 397, 398, 391, 390, 383, 384, 373, 377, 365, 366, 361, 355, 353, 348, 343, 342, 333, 332, 326, 324, 317, 315, 310, 304, 302, 295, 293, 287, 283, 279, 273, 271, 265, 260, 256, 251, 246, 244, 235, 234, 228, 224, 219, 214, 212, 202, 204, 195, 191, 189, 181, 180, 171, 170, 164, 160, 156, 148, 150, 140, 140, 131, 131, 122, 122, 115, 111, 107, 103, 97, 96, 88, 86, 80, 78, 72, 70, 63, 61, 56, 51, 49, 44, 40, 36, 31, 30, 23, 20, 16, 13, 8, 5, 1, -3, -5, -11, -14, -17, -21, -24, -29, -32, -34, -41, -40, -48, -48, -51, -58, -57, -63, -67, -66, -76, -71, -81, -78, -88, -83, -93, -91, -96, -101, -100, -106, -108, -109, -114, -116, -118, -123, -122, -129, -127, -134, -132, -139, -137, -144, -142, -149, -146, -152, -153, -155, -160, -158, -163, -164, -165, -171, -165, -177, -171, -177, -178, -179, -183, -184, -186, -186, -189, -193, -189, -197, -193, -200, -196, -202, -201, -203, -207, -203, -210, -208, -210, -212, -212, -215, -214, -216, -219, -218, -220, -222, -220, -225, -224, -223, -228, -225, -229, -230, -227, -233, -229, -234, -230, -235, -234, -235, -235, -235, -238, -237, -238, -239, -238, -241, -238, -242, -240, -240, -245, -239, -244, -241, -245, -241, -246, -240, -247, -242, -246, -243, -243, -246, -241, -248, -243, -243, -248, -240, -250, -241, -246, -243, -245, -243, -245, -243, -245, -244, -241, -245, -242, -242, -243, -240, -244, -240, -241, -241, -240, -241, -238, -243, -233, -245, -233, -241, -234, -236, -236, -233, -237, -231, -235, -232, -233, -232, -230, -232, -229, -230, -229, -228, -227, -229, -223, -229, -223, -224, -225, -222, -223, -221, -218, -222, -216, -221, -215, -216, -217, -212, -214, -212, -209, -213, -207, -209, -207, -205, -206, -203, -204, -201, -203, -197, -202, -195, -200, -194, -196, -194, -191, -195, -187, -193, -184, -189, -185, -185, -185, -182, -182, -182, -178, -182, -174, -179, -174, -174, -175, -169, -174, -167, -171, -168, -166, -167, -165, -163, -164, -161, -162, -160, -158, -159, -156, -156, -156, -153, -151, -154, -147, -154, -147, -148, -148, -144, -147, -143, -144, -141, -141, -140, -139, -138, -138, -134, -137, -133, -133, -132, -131, -131, -128, -131, -126, -129, -125, -125, -124, -122, -123, -121, -121, -116, -123, -113, -122, -113, -116, -114, -112, -114, -109, -112, -108, -111, -107, -106, -109, -102, -107, -100, -104, -101, -102, -99, -100, -98, -98, -98, -94, -98, -91, -96, -90, -90, -93, -86, -91, -85, -85, -87, -83, -83, -84, -79, -85, -77, -80, -79, -76, -79, -75, -76, -74, -75, -72};
154:               
155:               fractional __attribute__((space(psv))) snaresamp[6252] = {-114, -124, -115, -131, -144, -136, -135, -170, -178, -207, -251, -275, -274, -301, -315, -333, -325, -312, -293, -279, -277, -286, -323, -338, -293, -297, -291, -259, -296, -338, -343, -340, -380, -402, -403, -417, -417, -398, -419, -423, -410, -422, -432, -407, -397, -438, -479, -457, -451, -525, -526, -498, -517, -502, -502, -542, -522, -518, -504, -452, -426, -443, -460, -502, -509, -537, -540, -553, -576, -547, -530, -536, -541, -544, -520, -473, -501, -502, -483, -507, -506, -522, -559, -517, -534, -524, -489, -512, -481, -462, -501, -497, -597, -645, -539, -533, -608, -700, -701, -735, -900, -778, -455, -301, -235, -530, -927, -965, -997, -1004, -849, -786, -729, -752, -825, -785, -905, -890, -682, -539, -240, 53, 247, 425, 468, 542, 524, 333, 458, 988, 1849, 2512, 2504, 2200, 1661, 602, -1048, -2812, -3350, -2694, -1975, -1151, -382, -244, -522, -821, -965, -919, -818, -749, -726, -689, -772, -966, -1177, -1518, -1733, -1665, -1668, -1762, -2098, -2425, -1951, -1017, -688, -961, -1454, -2310, -3287, -3560, -3208, -2774, -2421, -2080, -1729, -1369, -988, -695, -619, -593, -512, -286, 7, 46, -108, -393, -687, -737, -854, -916, -765, -843, -875, -823, -798, -660, -928, -1424, -2217, -3921, -4833, -4068, -2939, -1986, -1289, -624, -61, 241, 934, 1513, 1659, 1949, 2058, 2331, 2836, 2963, 3326, 3494, 3258, 3181, 2657, 2160, 2309, 2458, 2456, 1941, 926, -449, -2116, -2312, -1187, -545, -486, -980, -827, 876, 2041, 1930, 1475, 511, -319, -181, -236, -1682, -2420, -677, 934, 1090, 1453, 2095, 2638, 3199, 3207, 3069, 3283, 3282, 2869, 2347, 2096, 2229, 2232, 1629, 520, -1068, -2920, -3975, -3543, -2693, -2359, -2013, -1058, -113, 212, -63, -995, -2846, -5067, -5791, -4103, -2398, -1892, -1211, -614, -547, -376, -303, -169, 405, 863, 994, 746, -361, -2380, -4311, -4112, -1440, 1036, 1323, 687, 567, 560, 376, 265, 899, 2633, 4364, 5496, 6185, 6291, 6425, 6982, 8002, 9603, 11032, 11991, 12217, 11866, 11654, 10310, 7183, 1736, -5379, -6259, 832, 5958, 7075, 8767, 10689, 11559, 11277, 10996, 10946, 9658, 6927, 1473, -3510, -1412, 2852, 3443, 4466, 5623, 3785, 1304, -754, -3540, -6268, -7811, -8565, -8132, -5399, -2526, -1159, 754, 2625, 2703, 2337, 2394, 2277, 1247, -876, -3366, -6410, -9741, -11685, -12466, -12694, -11826, -10476, -9332, -8162, -7201, -7198, -8633, -10542, -11790, -12574, -12580, -11861, -11364, -10679, -9555, -8636, -7667, -6826, -6699, -6837, -6744, -6407, -6254, -6850, -8117, -9927, -11810, -13114, -13725, -13688, -13118, -12256, -11534, -11025, -9896, -8063, -6573, -5666, -5106, -4761, -5202, -6847, -8513, -9055, -7931, -5523, -3204, -1442, -1589, -3992, -4081, -178, 3656, 5352, 5616, 5588, 5173, 3754, 3567, 6177, 8196, 6054, 2440, 2727, 3912, 431, -2124, 1628, 6944, 10218, 12120, 12689, 11407, 8380, 4829, 1145, -1796, -1237, 1232, 2146, 2914, 4509, 6239, 9083, 12491, 14528, 14938, 14924, 15195, 14860, 13910, 13298, 12538, 11158, 9031, 6263, 4006, 2433, 1619, 2776, 4696, 5598, 6255, 7289, 8438, 9429, 10097, 10553, 10770, 11101, 11664, 11841, 11389, 10419, 9491, 9453, 9730, 9086, 7419, 5434, 4459, 5103, 5895, 5271, 3592, 1647, -857, -3244, -2870, 406, 3187, 4101, 4639, 5229, 5242, 4571, 4220, 5394, 7219, 7788, 6921, 5211, 2880, 920, 353, 738, 744, -90, -1414, -3304, -5997, -8704, -10287, -10212, -8891, -6879, -4646, -2632, -1169, -646, -1280, -2647, -4243, -6072, -7883, -9320, -10216, -10300, -9474, -8579, -8568, -9247, -10039, -10454, -9736, -8256, -7311, -6982, -6822, -6756, -6520, -6329, -6218, -5793, -5510, -6096, -7549, -9700, -12266, -14162, -14286, -13362, -12902, -12714, -12770, -13196, -12719, -10637, -7796, -5416, -4703, -5293, -6416, -8281, -10664, -13103, -14946, -15771, -16277, -16344, -15561, -14847, -14351, -13752, -13395, -13062, -12478, -11306, -9535, -8257, -8197, -9111, -10296, -10629, -10014, -9031, -8252, -8203, -8425, -8443, -8291, -7999, -8214, -9031, -9520, -9199, -8224, -6964, -4848, -1803, 208, 1262, 2124, 1322, 478, 1174, 565, -1605, -3489, -5557, -6417, -4819, -3300, -3159, -2404, -340, 1674, 3898, 6876, 8475, 7875, 6675, 5423, 4469, 4037, 2872, 1078, 172, 709, 1834, 2170, 2012, 2523, 3417, 4079, 4662, 5499, 7010, 9077, 10815, 12229, 13815, 14733, 14348, 13841, 13670, 13011, 12042, 11344, 10519, 8986, 7056, 6502, 8139, 10536, 12438, 13126, 12417, 11449, 10896, 11218, 12987, 14115, 13173, 12410, 12357, 11565, 11618, 13181, 13557, 12780, 13134, 13544, 12182, 10274, 9895, 10940, 11274, 9857, 7643, 5419, 4708, 6700, 8772, 9185, 9764, 10721, 10828, 10467, 9922, 9077, 8102, 7002, 6037, 5205, 4356, 3734, 3158, 2551, 2288, 1979, 1280, 648, 724, 1832, 3437, 4874, 5969, 6008, 4434, 1833, -1106, -3402, -4234, -4154, -4334, -5372, -6122, -4467, -1295, 412, 292, -462, -1841, -3316, -3268, -1895, -1655, -3981, -8525, -14173, -18241, -18180, -15249, -12289, -9981, -7801, -5884, -4097, -1868, -161, -271, -1542, -3267, -5583, -7363, -8182, -9619, -12595, -16200, -18918, -19937, -19202, -16747, -12858, -9362, -7787, -6367, -3922, -3296, -5358, -7249, -8561, -10179, -11782, -13638, -16010, -18424, -19792, -18992, -17132, -15510, -14019, -13211, -13026, -12731, -12735, -12897, -12759, -12408, -11990, -12124, -12771, -13185, -13479, -13481, -12728, -11544, -10495, -9940, -9521, -8897, -8700, -8978, -9396, -9870, -9976, -10002, -10469, -11163, -12223, -13283, -12849, -10963, -9382, -8479, -7313, -6362, -6240, -6258, -6266, -6689, -7219, -7690, -8041, -8123, -7893, -7353, -7075, -7132, -6506, -4861, -2913, -1586, -1075, -1259, -1923, -1847, -372, 1435, 2950, 3585, 3831, 4923, 5247, 3311, 827, -254, 943, 2917, 4160, 5803, 7762, 9683, 12250, 13887, 14192, 14349, 13898, 12863, 11345, 9565, 8320, 6365, 2821, -2237, -7384, -6821, -1209, 2012, 3671, 7395, 10986, 13493, 16020, 18422, 19766, 19573, 19043, 18458, 17603, 16863, 15410, 13071, 7944, -1278, -6705, -4582, -3206, -3263, 1197, 6793, 9696, 12473, 15852, 18244, 19730, 20551, 20429, 19490, 18279, 17578, 17242, 16582, 15876, 15337, 14658, 13921, 12514, 10264, 9036, 9082, 7151, 2755, 2146, 7777, 12277, 13025, 14174, 14474, 13443, 14439, 15992, 16511, 16617, 15123, 12447, 9174, 5220, 2257, 942, 1474, 3555, 4745, 4973, 5455, 5847, 6321, 6226, 5286, 4581, 3852, 3256, 3269, 3171, 3415, 4092, 4485, 4597, 3989, 3056, 2352, 1251, 39, -1207, -3045, -4999, -6390, -5687, -2516, 468, 2152, 3084, 2515, 733, -1340, -3708, -5624, -5854, -4667, -3807, -4180, -5134, -6081, -6506, -5963, -4894, -3744, -2695, -2029, -1838, -2260, -3246, -3965, -3832, -3721, -4585, -6327, -8247, -8428, -5688, -3294, -3936, -5689, -7645, -10070, -10318, -8077, -7492, -9315, -11188, -13383, -14560, -11505, -6913, -4835, -3929, -3250, -3596, -4173, -4410, -4495, -4727, -5662, -7163, -9288, -12312, -15008, -15672, -14602, -13955, -13454, -10544, -6450, -4113, -3292, -2804, -3022, -4558, -6559, -9095, -13033, -14843, -12976, -12261, -12993, -11858, -9322, -5333, -1166, 700, 2022, 3250, 2443, 548, -1091, -1951, -1983, -2274, -3002, -3700, -3575, -2267, -1351, -1480, -2493, -4830, -6546, -5922, -4304, -2506, -284, 2134, 4872, 7851, 10280, 11917, 13147, 14007, 14339, 14115, 13317, 12527, 11661, 9920, 7097, 3360, 1358, 3437, 5747, 5901, 6801, 8658, 10070, 10943, 10286, 7780, 4302, 3319, 7249, 11087, 11898, 12962, 13927, 13562, 13480, 13715, 13293, 11794, 9265, 5227, 206, -1308, 1247, 2972, 4262, 6654, 8282, 9885, 11647, 11460, 9472, 7139, 6357, 7397, 7527, 5590, 3265, 2699, 4639, 7439, 9383, 9580, 7534, 4422, 1841, 1078, 2489, 3651, 2666, 1179, -284, -3393, -5584, -2791, 1589, 3033, 3972, 5204, 4254, 2020, -274, -3535, -6735, -7142, -4022, -615, 696, 1618, 3229, 4806, 5768, 4847, 2282, -795, -4602, -7902, -8999, -8492, -7502, -6801, -6663, -5865, -3698, -1544, -868, -1516, -2483, -2346, -381, 1148, -148, -2840, -5197, -6840, -6192, -4271, -4368, -6084, -8094, -9971, -8947, -5205, -2758, -2003, -2513, -4844, -7511, -10836, -13793, -11597, -6583, -4442, -3224, -1662, -2429, -4272, -5124, -6209, -7949, -9430, -10719, -11782, -12158, -11405, -8325, -4012, -1998, -1644, -116, 549, -1483, -3666, -4389, -5103, -6710, -8007, -8731, -9898, -11153, -11900, -10789, -6633, -2127, 481, 2140, 3075, 3758, 4152, 2453, -166, -2115, -4716, -7965, -9888, -9825, -8963, -8356, -7796, -6970, -4711, -340, 4128, 7109, 8371, 8331, 7753, 4874, 28, -1743, -55, 1265, 1599, 1007, -951, -3590, -6535, -8252, -5814, -516, 2408, 2726, 3594, 3284, 1311, 1224, 2306, 2677, 2539, 1072, -1154, -3573, -6705, -7177, -2884, 2180, 5309, 7896, 10416, 11685, 12065, 12316, 11869, 10878, 9160, 6408, 3719, 683, -2905, -6629, -10471, -9442, -1810, 3516, 3883, 4785, 6222, 7342, 9615, 11698, 12193, 11312, 8989, 5553, 2907, 3220, 4640, 3794, 1613, -376, -2428, -3490, -2911, -2675, -4106, -4524, -692, 5117, 8357, 9455, 10422, 10378, 9508, 9491, 9087, 6571, 3346, 1452, 725, -488, -2857, -5435, -7118, -7131, -5663, -4260, -3223, -732, 3358, 6602, 7662, 7274, 5518, 2964, 1672, 1587, 704, -1484, -4454, -7892, -10425, -9710, -6824, -5395, -5388, -4323, -1942, 218, 312, -1967, -4864, -7927, -10480, -8784, -3597, -618, -518, -975, -1820, -1807, -196, 570, -947, -3400, -6244, -9979, -12965, -11985, -8100, -5250, -3288, -981, 165, -444, -2150, -3838, -4245, -4354, -5929, -8299, -10607, -12174, -10068, -5324, -2790, -1945, -1171, -1328, -1616, -2036, -3682, -6000, -8192, -10088, -11464, -11812, -11684, -12199, -11543, -7598, -2998, -562, 450, 439, -1084, -3384, -5220, -6758, -8729, -10707, -11946, -10334, -5997, -3475, -2906, -1499, -229, 500, 1127, 842, -884, -3493, -6017, -7921, -7895, -5751, -4148, -3805, -3110, -2153, -1462, -612, -24, -195, -609, -265, 1543, 3399, 3228, 1011, -2205, -5880, -9558, -11030, -9570, -8281, -8407, -7188, -3455, 150, 2002, 3144, 4250, 6279, 9173, 10382, 8968, 5728, 1036, -2666, -2059, 624, 517, -1577, -3504, -5744, -5921, -2629, 287, 1309, 2567, 3701, 4208, 4462, 3623, 2343, 2395, 3737, 4516, 3623, 2391, 1139, -199, 765, 3589, 5052, 4946, 4284, 4081, 5561, 7451, 7951, 6906, 5039, 3898, 3108, 1378, -439, -2117, -2669, 207, 4387, 6116, 6070, 5813, 5136, 5456, 7433, 8037, 6315, 3864, 941, 656, 5389, 9548, 9897, 9397, 7897, 5553, 4934, 5609, 5860, 5026, 3496, 1744, 217, 1200, 4860, 7763, 8717, 9055, 9627, 10837, 11851, 11169, 8425, 4633, 929, -2146, -2992, -727, 2109, 4564, 7053, 8699, 9475, 9129, 8616, 8852, 8023, 6550, 4780, 1863, -663, -2105, -2268, -701, 1245, 2760, 3654, 5170, 9069, 12619, 12926, 11338, 8621, 6549, 7832, 9972, 8956, 5395, 1425, -4860, -11226, -8456, -1032, 77, -886, 188, 1263, 4043, 7740, 9066, 8105, 6050, 3649, 2115, 2290, 3477, 4344, 4354, 3701, 1827, -1355, -5038, -9220, -13136, -14932, -14185, -12753, -11779, -9033, -4883, -2637, -2286, -2505, -2762, -2563, -1768, -813, -754, -1876, -3444, -4816, -5190, -3978, -3470, -5379, -7763, -10265, -10890, -6816, -2638, -1896, -2447, -3788, -5549, -5049, -2518, -2342, -4556, -6156, -7130, -6017, -2638, -972, -1790, -3493, -5012, -4666, -2094, 1126, 3176, 2900, 1452, 970, 1614, 1673, 45, -2202, -4329, -5392, -3668, -2186, -3572, -5486, -6990, -6432, -3014, -248, 568, 340, -367, -338, 804, 1804, 1444, 719, 763, 821, 649, 99, -1129, -2631, -3942, -4018, -2497, -1280, -1114, -786, 65, 1123, 1691, 1587, 1393, 1329, 1762, 2772, 3274, 2490, 522, -1967, -2825, -114, 3767, 5533, 5792, 5075, 3272, 1574, 122, -772, -260, 321, 45, -202, 92, 1046, 1994, 2412, 2784, 3131, 3671, 4502, 4711, 3862, 2335, 1766, 3298, 5230, 5723, 4956, 3791, 2982, 3474, 5150, 6665, 8173, 10720, 13522, 14011, 11772, 8533, 4503, 1649, 1893, 2039, 201, -1393, -1754, -1226, 118, 1414, 2601, 4722, 6743, 7418, 7119, 5945, 4461, 3406, 3300, 4232, 5394, 6795, 7912, 7745, 6435, 4846, 3350, 2387, 3053, 4075, 3622, 2183, 169, -2067, -3969, -5056, -5638, -5662, -3275, 528, 2840, 3893, 4761, 5453, 5631, 5135, 3757, 1782, 224, 568, 2845, 3507, 1185, -1775, -5198, -8957, -11011, -9163, -4408, -871, 902, 2555, 4496, 6777, 7924, 6388, 3014, -1040, -5872, -9626, -10019, -9285, -9381, -9177, -7713, -4688, -1123, 877, 813, -202, -1475, -2006, -1884, -3015, -5304, -7819, -8519, -5985, -4047, -4729, -6101, -6604, -4654, -1557, -279, -1294, -3467, -5822, -8111, -10056, -10728, -9311, -7181, -6264, -5450, -3912, -2608, -1806, -1989, -2643, -2353, -2085, -3517, -5975, -8435, -9545, -7362, -3751, -1958, -1942, -2857, -4624, -5814, -5061, -4020, -3934, -3902, -4208, -4508, -3910, -3280, -3225, -3521, -3824, -3875, -3792, -3862, -4355, -5058, -5860, -6403, -5874, -4332, -2805, -2599, -3867, -5682, -7264, -6110, -1737, 1262, 1301, 332, -1255, -2154, -2408, -4053, -6262, -7827, -8390, -6789, -4005, -2782, -3273, -2985, -888, 1456, 2546, 2076, 486, -1451, -3267, -4582, -4943, -4273, -3512, -2984, -1855, -341, 671, 1439, 2090, 2487, 3357, 4619, 5506, 5134, 3126, 851, -1384, -2686, -1284, 670, 1233, 1655, 2642, 3732, 4300, 4252, 3754, 3294, 3639, 4808, 5572, 4493, 2153, -382, -1711, 567, 4490, 6223, 6117, 5185, 3089, 574, -1010, -1272, 80, 2799, 5906, 8597, 9698, 8956, 7274, 5365, 3932, 2997, 2499, 1914, 734, -722, -1379, 470, 3460, 4880, 5327, 5747, 5818, 5240, 4618, 4594, 4482, 3707, 2055, -57, -1885, -2879, -2469, -1749, -1356, -443, 1768, 5399, 8555, 9508, 8264, 5615, 3096, 1503, 212, -1873, -4752, -7081, -7179, -4954, -2808, -1785, -1160, -975, -689, 25, 655, 701, 143, -872, -2421, -4050, -5004, -4140, -2065, -1412, -2324, -3801, -5630, -7143, -7592, -6833, -5942, -5242, -4008, -2934, -2747, -3382, -3954, -3676, -3097, -2869, -2998, -3026, -2485, -1324, -706, -1837, -3876, -6137, -7734, -7068, -5288, -4712, -5115, -5013, -3483, -808, 1064, 847, -785, -2987, -4021, -2804, -1921, -3215, -5243, -6649, -6505, -4365, -2245, -2218, -3306, -4516, -5653, -5590, -4602, -4301, -5005, -5294, -3866, -1974, -1132, -1028, -1407, -2251, -3260, -4253, -4969, -5302, -5776, -6709, -6692, -4308, -1438, -449, -931, -1869, -2053, -616, 926, 794, -714, -2495, -4122, -4617, -3040, -776, 178, -34, -142, 323, 1055, 1426, 826, -217, -837, -620, 219, 932, 1141, 836, 358, 724, 2123, 3427, 3761, 3272, 2325, 1357, 773, 246, -399, -1234, -1750, -729, 1193, 2676, 3451, 3790, 3961, 4264, 4934, 5156, 4293, 3006, 1774, 924, 357, -358, -946, -101, 2668, 5189, 6055, 6048, 5597, 4923, 4151, 3671, 4097, 4617, 4259, 3415, 2944, 3123, 3820, 4173, 3508, 2642, 2071, 2033, 2371, 2257, 1418, -47, -791, 111, 986, 488, -706, -1631, -1239, 1438, 4929, 6715, 6999, 6434, 5408, 4830, 4143, 2779, 1434, 935, 968, 463, -525, -1581, -2060, -1202, 703, 2621, 3609, 3724, 3115, 1643, 242, 179, 1372, 2263, 2259, 1981, 1370, 611, 798, 2162, 3662, 4592, 4973, 4405, 2731, 456, -1876, -3787, -4190, -2757, -1543, -1621, -1995, -2124, -703, 2428, 4165, 3142, 1017, -1259, -2732, -1763, 20, -4, -841, -1314, -1735, -1458, 22, 1735, 2022, 827, -1033, -3407, -5359, -5556, -4837, -4831, -5442, -5572, -4616, -3064, -2116, -2149, -1768, 333, 2725, 3001, 1419, -995, -4219, -7080, -8252, -8564, -8987, -8755, -7459, -5819, -4601, -4230, -4006, -2410, 63, 1202, 318, -1617, -4193, -6201, -5470, -3532, -3882, -5871, -7361, -7314, -5128, -2934, -2795, -3308, -3409, -3564, -3539, -3445, -3671, -3655, -3264, -2935, -2840, -3275, -3546, -2478, -572, 628, 100, -1958, -4284, -6160, -7182, -6211, -3641, -1833, -1613, -2467, -3732, -3121, 557, 3874, 4115, 3244, 2457, 990, 524, 2186, 3226, 2313, 612, -1520, -3170, -2593, -1153, -1480, -2939, -3315, -1606, 1136, 2217, 1179, -510, -1909, -1576, 622, 1855, 1436, 982, 696, 1383, 3467, 4414, 3385, 1513, -1241, -2921, -1164, 1909, 3222, 3052, 2325, 464, -2042, -2582, -772, 545, 255, -647, -1089, 289, 2630, 3227, 1985, -60, -1391, 161, 2828, 3106, 1884, 1359, 2006, 3491, 4067, 2851, 1223, 106, 319, 1961, 2870, 2193, 1487, 1246, 1301, 1722, 2050, 2309, 2906, 3471, 3588, 3380, 2948, 2526, 2556, 3103, 3307, 2476, 1142, 233, 537, 1968, 3095, 3399, 3423, 3264, 3446, 4570, 5253, 4342, 2636, 928, -10, 232, 541, -160, -1359, -1923, -718, 1835, 3898, 4881, 5234, 4785, 3635, 2385, 1261, 388, -75, -320, -872, -2018, -2328, -463, 1583, 1549, 561, -81, -226, 584, 1481, 777, -1018, -2833, -4291, -3870, -1285, 975, 1586, 1590, 1435, 837, 106, -312, -441, -662, -1331, -2460, -3485, -3398, -2094, -675, 444, 1728, 2821, 3209, 3115, 2568, 1455, 66, -899, -1033, -991, -1592, -2524, -3249, -3602, -3621, -3722, -3232, -956, 1776, 3117, 3534, 3397, 2681, 2379, 2369, 1373, -336, -1753, -2777, -3360, -3152, -2262, -1563, -1465, -999, 511, 2080, 2611, 2253, 1663, 999, 79, -770, -1174, -1457, -1957, -2593, -2970, -2277, -295, 1865, 3464, 4543, 4824, 3876, 2055, 654, 712, 1447, 1218, 32, -797, -432, 805, 1706, 1518, 839, 319, -49, -431, -870, -906, -121, 762, 953, 543, -154, -472, 491, 2220, 3434, 3921, 4180, 4254, 3874, 3002, 1797, 318, -1333, -2914, -4003, -3891, -2439, -673, 702, 2097, 3730, 5006, 5384, 4959, 3906, 2093, 251, -339, -64, -366, -1201, -1530, -751, 644, 1488, 1403, 1113, 1108, 1485, 2310, 3304, 4300, 5038, 5019, 4186, 2876, 1797, 1897, 2590, 2390, 1493, 282, -1510, -2424, -1055, 629, 630, 218, 1307, 3649, 5727, 6645, 6653, 6171, 5664, 5492, 5404, 4813, 3930, 3048, 2347, 2308, 2704, 2527, 1833, 1620, 2172, 3023, 3605, 3654, 3273, 2363, 1427, 1860, 3543, 4528, 4159, 3153, 1613, -4, -311, 683, 1183, 630, 651, 2268, 4340, 5634, 5975, 5484, 4104, 2289, 1112, 1207, 1485, 920, 288, 797, 2171, 3228, 3403, 3192, 3214, 3545, 3999, 3907, 2737, 871, -1480, -3794, -4036, -1922, 112, 1190, 2492, 3890, 4630, 4634, 3866, 2511, 1201, 332, 13, 128, 408, 466, 49, -190, 536, 1430, 1566, 1591, 2091, 2454, 2237, 1700, 1252, 955, 482, -387, -1453, -1946, -1162, 252, 842, 680, 661, 1157, 2172, 3244, 3756, 3803, 3523, 2818, 1816, 888, 445, 741, 1247, 1383, 1067, 397, -458, -1290, -1605, -975, 10, 478, 582, 742, 1106, 1652, 2044, 2057, 1812, 1333, 906, 805, 707, 231, -561, -1088, -827, -153, 381, 933, 1686, 2316, 2504, 2060, 1110, 108, -354, -134, -10, -412, -778, -929, -1208, -1813, -2476, -2196, -662, 729, 1258, 1728, 2479, 3099, 3279, 2855, 1864, 411, -964, -1404, -982, -816, -1543, -2591, -2447, -663, 1081, 1639, 1879, 2336, 2710, 3226, 3757, 3625, 2870, 1750, 338, -498, -272, 37, -609, -1992, -2869, -1939, 215, 1541, 2074, 2971, 3922, 4442, 4722, 4480, 3656, 2776, 2221, 2194, 2382, 2126, 1290, 412, 157, 798, 1779, 2553, 3263, 3834, 3992, 3644, 2858, 2137, 1929, 2049, 2298, 2856, 3443, 3656, 3531, 3217, 2659, 1901, 1201, 1074, 1658, 2401, 2599, 2295, 1979, 2017, 2705, 3718, 4292, 4354, 3986, 3078, 2261, 1997, 1590, 647, -570, -1281, -230, 2243, 4109, 4813, 5137, 5046, 4410, 3630, 2819, 1877, 1001, 379, -139, -571, -498, 185, 755, 673, 175, 212, 1471, 2968, 3444, 3141, 2719, 2496, 2944, 3538, 3187, 1981, 619, -289, -146, 513, 475, 239, 960, 2250, 3152, 3544, 3487, 2861, 2019, 1394, 859, 123, -505, -527, -135, 33, -99, 188, 1068, 1723, 1697, 1574, 1803, 2153, 2118, 1680, 1322, 1371, 1397, 1055, 569, 302, 221, 197, 78, -227, -754, -1384, -1953, -2085, -1419, -477, -269, -784, -1156, -1007, -586, -32, 593, 1165, 1597, 1825, 1721, 1316, 808, 350, 5, -258, -602, -907, -897, -649, -351, -52, 102, -60, -565, -1231, -1374, -695, 56, 177, -69, -281, -302, -156, -27, -165, -490, -620, -308, 91, 230, 122, -148, -220, 412, 1347, 1629, 993, -71, -895, -996, -454, 210, 517, 381, 49, -87, 152, 558, 852, 1094, 1356, 1367, 1019, 670, 877, 1615, 2255, 2362, 1980, 1418, 1223, 1567, 1850, 1660, 1281, 1248, 1714, 2298, 2288, 1482, 593, 608, 1643, 2787, 3425, 3681, 3497, 2730, 1799, 1380, 1395, 1148, 516, 136, 266, 445, 469, 691, 1421, 2371, 2940, 3213, 3723, 4345, 4490, 3895, 2682, 1165, -294, -1378, -1789, -1545, -1021, -436, 434, 1507, 2451, 3002, 3020, 2576, 1967, 1386, 1026, 930, 914, 762, 633, 902, 1771, 2762, 3268, 3177, 2636, 1874, 1296, 980, 540, -143, -524, 20, 1161, 1893, 1770, 1134, 691, 974, 1651, 1971, 1974, 2050, 2105, 2005, 2050, 2455, 2908, 2977, 2641, 2128, 1676, 1462, 1273, 734, -149, -998, -1444, -1300, -897, -510, 214, 1322, 2154, 2217, 1797, 1200, 777, 656, 506, 36, -545, -1057, -1250, -855, -557, -1076, -1922, -2143, -1477, -441, 152, 140, -151, -437, -521, -503, -684, -1015, -1363, -1845, -2305, -2470, -2505, -2756, -3087, -2824, -1702, -427, 396, 805, 914, 738, 427, 26, -558, -1476, -2545, -3462, -3885, -3423, -2238, -1218, -811, -844, -1295, -1818, -1582, -655, -70, -310, -1045, -1555, -1266, -565, -337, -760, -1392, -2017, -2344, -1872, -1247, -1551, -2087, -1615, -880, -757, -531, -7, 179, 232, 312, 47, -365, -463, -192, 329, 708, 550, -36, -725, -968, -579, -227, -454, -904, -961, -251, 956, 1860, 2067, 1702, 1145, 770, 641, 493, 347, 406, 490, 430, 399, 555, 687, 516, -6, -408, -33, 803, 1308, 1507, 1783, 2139, 2476, 2524, 2082, 1376, 755, 541, 804, 947, 511, -199, -624, -321, 557, 1245, 1435, 1332, 1254, 1724, 2576, 2911, 2446, 1446, 478, 330, 884, 986, 384, -295, -551, -176, 680, 1379, 1692, 1719, 1644, 1793, 2281, 2644, 2404, 1720, 729, -322, -1107, -1558, -1742, -1493, -848, -201, 298, 708, 1057, 1436, 1714, 1559, 979, 357, 168, 574, 1024, 969, 452, -315, -1119, -1572, -1492, -1074, -609, -244, -4, 123, 268, 550, 836, 879, 598, 67, -594, -1071, -1325, -1681, -2193, -2389, -2011, -1269, -624, -374, -486, -757, -934, -658, 9, 489, 438, 116, -71, 51, 295, 296, -108, -704, -1117, -1196, -1223, -1509, -1887, -2133, -2233, -2277, -2194, -1705, -800, 83, 536, 591, 538, 671, 874, 681, -18, -763, -1297, -1742, -2159, -2210, -1750, -1296, -1153, -1057, -986, -1284, -1866, -2301, -2093, -984, 481, 1481, 1853, 1809, 1493, 1246, 1080, 567, -364, -1401, -2171, -2377, -2127, -1891, -1824, -1730, -1330, -478, 440, 833, 684, 419, 401, 673, 1006, 1187, 1199, 1049, 782, 647, 785, 1006, 994, 634, 48, -467, -803, -1172, -1595, -1723, -1434, -932, -269, 450, 951, 1216, 1552, 2053, 2376, 2291, 1962, 1573, 1133, 627, 20, -490, -698, -720, -542, 40, 776, 1148, 1103, 860, 709, 830, 995, 1004, 954, 818, 633, 655, 820, 615, 28, -468, -612, -548, -549, -622, -473, 56, 762, 1287, 1679, 2020, 2019, 1412, 443, -388, -716, -603, -497, -566, -453, 118, 974, 1743, 2088, 2065, 1790, 1481, 1360, 1325, 1032, 568, 20, -600, -1311, -1916, -1932, -1067, -77, 299, 229, 163, 372, 825, 1155, 1314, 1465, 1532, 1351, 937, 388, -194, -795, -1290, -1461, -1352, -1141, -846, -403, 214, 981, 1552, 1660, 1343, 900, 591, 405, 14, -645, -1244, -1570, -1648, -1531, -1301, -1034, -787, -568, -395, -225, 30, 336, 474, 479, 457, 245, -309, -772, -635, -99, 144, -190, -884, -1685, -2209, -2086, -1585, -1145, -803, -522, -238, 162, 503, 448, -40, -728, -1089, -1081, -1121, -1403, -1698, -1938, -1907, -1296, -319, -52, -1030, -1970, -1727, -1203, -1113, -905, -704, -884, -928, -832, -1031, -1369, -1597, -1606, -1251, -836, -803, -1149, -1625, -1792, -1211, -54, 952, 1427, 1455, 1243, 895, 370, -471, -1504, -2255, -2484, -2305, -1923, -1421, -983, -832, -874, -601, 150, 762, 796, 327, -312, -580, -316, 36, 136, 105, -17, -185, -353, -502, -643, -685, -542, -316, -189, 42, 737, 1255, 905, 417, 510, 423, -189, -579, -627, -675, -505, -122, 167, 527, 1065, 1513, 1852, 2021, 1815, 1388, 1074, 913, 764, 433, -52, -474, -703, -527, -107, -45, -340, -391, -54, 259, 383, 540, 702, 701, 551, 364, 244, 324, 438, 314, 81, 70, 267, 464, 547, 561, 540, 438, 201, -49, -261, -419, -481, -481, -423, -241, -45, -125, -550, -959, -994, -820, -771, -746, -713, -579, -320, -197, -258, -245, -121, -42, -156, -394, -573, -636, -473, -205, -228, -587, -861, -803, -571, -501, -543, -535, -586, -542, -270, -24, -70, -345, -618, -751, -859, -1048, -1255, -1373, -1334, -1109, -742, -455, -440, -687, -995, -1118, -868, -403, -82, 52, -86, -521, -867, -852, -848, -1117, -1458, -1593, -1438, -1141, -850, -648, -629, -756, -840, -748, -628, -803, -1191, -1352, -1004, -365, 34, 2, -184, -529, -894, -872, -569, -508, -775, -1148, -1337, -1263, -1196, -1145, -943, -610, -327, -64, 73, 74, 160, 400, 673, 619, 192, -356, -921, -958, -146, 638, 435, -1328, -3113, -2058, -46, -323, -443, 836, 612, -532, -609, -679, -856, -414, -191, -506, -851, -1075, -830, -152, 207, 21, -284, -475, -438, -217, -100, -234, -376, -402, -570, -809, -852, -977, -1298, -1471, -1356, -1012, -721, -596, -391, -140, 7, 250, 499, 642, 731, 593, 271, -85, -416, -659, -823, -1032, -1291, -1385, -1119, -741, -460, -204, -21, 120, 381, 706, 937, 870, 389, -224, -604, -662, -564, -491, -548, -619, -588, -532, -344, 42, 386, 657, 865, 931, 860, 712, 544, 372, 121, -96, -286, -439, -384, -260, -202, -91, -64, -57, 1, 122, 320, 422, 356, 195, -107, -73, 347, 479, 269, 104, 109, 194, 176, 114, 58, -15, 188, 597, 891, 978, 848, 589, 425, 275, -36, -592, -1105, -1133, -781, -415, -253, -197, -37, 256, 504, 628, 570, 394, 243, 262, 402, 396, 111, -333, -642, -462, -11, 173, 34, -162, -205, -58, 135, 154, 125, 291, 579, 627, 316, -56, -262, -368, -417, -275, 84, 314, 186, 13, -209, -527, -317, 451, 827, 276, -709, -1070, -743, -692, -680, -172, 107, -51, -123, -207, -418, -492, -343, 28, 248, 28, -487, -916, -936, -491, -139, -166, -79, 288, 569, 588, 256, -19, 205, 275, -418, -1551, -2222, -1612, -820, -1106, -1092, -289, -181, -345, 148, 559, 575, 581, 375, -114, -434, -459, -549, -678, -634, -482, -278, -44, 98, -23, -356, -463, -107, 302, 571, 661, 428, -85, -597, -828, -768, -559, -384, -432, -634, -728, -486, -1, 383, 501, 412, 199, 126, 258, 370, 351, 243, 81, -98, -266, -274, -234, -333, -425, -448, -459, -361, -83, 266, 553, 566, 397, 244, 120, 104, 282, 482, 443, 176, -73, -182, -79, 129, 196, 40, -166, -338, -473, -487, -502, -548, -465, -235, -121, -89, 21, 7, -101, -70, 73, 118, 132, 197, 324, 463, 498, 295, -208, -879, -1371, -1399, -1208, -1161, -1189, -1045, -754, -567, -558, -503, -199, 178, 422, 467, 323, -69, -604, -757, -427, -157, -261, -566, -784, -783, -684, -615, -497, -340, -292, -338, -358, -262, -127, -34, 23, -109, -273, -367, -431, -334, -131, -65, -86, -139, -139, -11, 80, 83, 62, -184, -493, -598, -563, -466, -256, 40, 243, 81, -319, -475, -202, 174, 385, 457, 456, 336, 319, 379, 328, 178, 26, -140, -155, 56, 263, 341, 504, 692, 679, 632, 713, 767, 648, 283, -206, -404, -86, 413, 693, 789, 876, 998, 1006, 735, 422, 287, 192, 102, 158, 220, 137, 15, 38, 166, 324, 582, 847, 983, 1005, 882, 530, 110, -103, -5, 56, -22, -59, -113, -89, 63, 186, 336, 524, 636, 685, 704, 659, 544, 236, -57, -139, -74, 19, -32, -214, -177, 79, 245, 215, 143, 225, 404, 514, 529, 498, 465, 372, 156, 37, 82, 116, 186, 288, 180, -107, -331, -212, 191, 360, 225, -32, -322, -268, 165, 407, 493, 582, 555, 476, 331, 165, 118, 141, 138, 13, -190, -239, -205, -229, -322, -412, -455, -470, -389, -216, -12, 190, 320, 444, 519, 506, 491, 468, 452, 530, 529, 291, -12, -326, -361, -58, 165, 121, -23, -136, -139, 70, 322, 342, 193, -89, -404, -387, -168, 153, 847, 1477, 1045, -771, -1999, -685, 479, -686, -1072, -277, -589, -519, 472, 452, 15, 144, 263, 325, 440, 312, -37, -204, -185, -153, -66, 67, 72, -40, -233, -344, -185, 12, 22, -104, -143, -48, -3, -86, -185, -174, 45, 268, 295, 326, 325, 260, 139, -107, -435, -563, -490, -510, -741, -902, -813, -557, -228, 75, 210, 263, 379, 514, 541, 468, 341, 267, 157, -76, -296, -417, -546, -585, -455, -243, -77, -111, -169, -243, -333, -294, -69, 71, 81, 1, 17, 177, 342, 350, 122, -195, -346, -372, -373, -295, -209, -35, 174, 313, 351, 303, 201, 270, 406, 358, 97, -189, -378, -366, -169, 0, 16, -172, -297, 94, 806, 1026, 343, -305, -114, 43, -270, -129, 226, 34, -250, -339, -345, -16, 246, -92, -545, -367, 95, 190, 268, 471, 248, -183, -280, -234, -188, -74, -82, -220, -170, 58, 86, -47, -155, -199, -147, -53, -13, -38, -156, -331, -380, -315, -264, -218, -281, -543, -663, -405, -165, -136, 32, 135, -99, -431, -641, -725, -682, -566, -544, -712, -777, -660, -587, -543, -435, -380, -479, -673, -842, -906, -803, -457, -112, -131, -461, -748, -861, -834, -339, 560, 721, -577, -2086, -1575, 182, 536, 146, -503, -2468, -2674, -156, 11, -1443, -635, -109, -1079, -751, 14, -346, -482, -261, -572, -928, -898, -727, -555, -460, -596, -704, -723, -806, -843, -836, -867, -784, -537, -373, -411, -419, -314, -238, -217, -186, -169, -182, -296, -455, -527, -470, -354, -352, -495, -630, -748, -724, -509, -335, -234, -94, -61, -76, -35, 86, 197, 263, 185, -180, -563, -526, -190, -105, -240, -351, -459, -416, -233, -182, -264, -361, -490, -573, -523, -354, -248, -236, -176, -163, -266, -393, -353, -243, -252, -372, -477, -571, -588, -460, -326, -295, -299, -481, -763, -840, -699, -419, -272, -357, -430, -507, -584, -547, -581, -715, -748, -739, -859, -1100, -1209, -1118, -976, -853, -700, -657, -720, -722, -694, -672, -660, -745, -843, -866, -951, -1093, -1209, -1138, -855, -676, -748, -953, -1156, -1166, -1047, -920, -887, -840, -766, -754, -808, -885, -1075, -1375, -1555, -1479, -1346, -1194, -1043, -969, -949, -932, -900, -790, -636, -593, -650, -749, -966, -1179, -1252, -1232, -1135, -1025, -982, -905, -823, -789, -787, -863, -981, -1146, -1275, -1252, -1081, -860, -795, -790, -728, -734, -761, -638, -510, -487, -533, -642, -777, -849, -910, -1045, -1108, -1202, -1335, -1212, -845, -539, -456, -503, -679, -802, -683, -529, -457, -411, -455, -514, -464, -408, -483, -550, -490, -529, -629, -662, -680, -471, -53, 239, 1, -742, -1193, -849, -410, -451, -375, -38, -136, -384, -277, -210, -309, -255, -199, -267, -182, 21, 53, 28, -16, -149, -201, -136, -67, -87, -148, -163, -105, -27, 57, 144, 202, 133, -27, -136, -171, -115, 85, 296, 374, 270, 161, 137, 135, 81, 50, 204, 320, 316, 322, 282, 133, -44, -142, -178, -233, -373, -481, -539, -512, -383, -144, 70, 242, 351, 354, 362, 410, 439, 442, 380, 310, 220, 178, 137, -5, -152, -194, -145, -65, 72, 239, 327, 282, 190, 101, 68, 62, 54, 32, -19, -74, -41, 112, 212, 191, 214, 167, 5, -89, -86, -108, -154, -170, -194, -222, -247, -303, -329, -285, -212, -163, -90, 21, 158, 257, 227, 155, 84, 66, 153, 283, 270, 142, -51, -337, -461, -342, -223, -255, -336, -457, -522, -422, -274, -166, -111, -123, -169, -123, -26, 12, 43, 85, 83, 75, 41, -110, -299, -369, -328, -222, -156, -173, -291, -435, -490, -473, -470, -402, -305, -278, -266, -207, -137, -74, -76, -104, -46, 24, 10, -87, -242, -375, -456, -525, -560, -540, -450, -290, -147, -102, -76, -62, -67, -70, -122, -190, -243, -265, -220, -165, -149, -92, -48, 4, 94, 160, 173, 238, 312, 328, 217, 26, -63, -5, 71, 97, 67, -17, -90, -163, -183, -133, 20, 203, 238, 139, 88, 119, 210, 355, 414, 358, 265, 123, 13, 0, 21, -18, -54, -24, 36, 38, 73, 108, 39, -20, 29, 155, 261, 291, 186, 53, 87, 240, 354, 299, 124, -42, -184, -247, -221, -175, -210, -254, -181, -37, 176, 487, 711, 702, 574, 379, 206, 200, 278, 238, 58, -174, -340, -387, -385, -416, -428, -349, -148, 32, 118, 124, 66, 3, 4, 9, -44, -147, -251, -303, -295, -326, -315, -297, -397, -510, -535, -530, -561, -527, -458, -393, -315, -235, -292, -334, -320, -301, -311, -329, -299, -163, -63, -96, -168, -262, -341, -330, -337, -456, -485, -419, -396, -315, -241, -285, -285, -202, -171, -219, -375, -620, -739, -682, -578, -556, -582, -606, -568, -515, -466, -409, -340, -318, -311, -345, -400, -412, -380, -367, -427, -564, -697, -727, -653, -543, -497, -570, -675, -769, -733, -665, -579, -454, -332, -275, -274, -286, -328, -349, -287, -262, -319, -344, -335, -337, -289, -243, -318, -460, -536, -547, -564, -475, -313, -201, -209, -292, -420, -461, -288, -48, 80, 45, -108, -241, -281, -228, -210, -333, -498, -548, -485, -413, -384, -357, -318, -255, -195, -202, -263, -353, -382, -349, -316, -239, -196, -284, -421, -480, -408, -340, -284, -252, -275, -289, -242, -218, -198, -154, -198, -333, -442, -452, -421, -436, -532, -596, -610, -608, -622, -606, -601, -560, -499, -449, -456, -473, -461, -466, -424, -396, -442, -489, -484, -521, -609, -665, -679, -666, -672, -680, -578, -390, -243, -148, -57, -73, -164, -277, -347, -337, -229, -151, -223, -225, -169, -203, -239, -268, -355, -404, -383, -408, -505, -596, -594, -441, -304, -270, -179, -98, -56, 1, -34, -203, -378, -478, -546, -593, -606, -514, -316, -182, -213, -276, -353, -401, -403, -327, -319, -352, -375, -367, -381, -364, -357, -314, -262, -213, -135, -106, -157, -225, -357, -513, -638, -698, -680, -604, -472, -330, -258, -290, -337, -323, -282, -240, -254, -348, -462, -522, -531, -501, -476, -446, -450, -605, -750, -750, -668, -592, -531, -405, -281, -224, -181, -148, -203, -320, -400, -469, -522, -598, -687, -726, -711, -672, -560, -461, -387, -340, -341, -325, -292, -313, -314, -219, -150, -164, -188, -284, -372, -409, -471, -498, -472, -482, -537, -597, -572, -519, -461, -345, -270, -315, -389, -427, -360, -222, -94, -52, -134, -300, -420, -383, -347, -378, -427, -478, -537, -529, -412, -302, -262, -209, -69, -3, -23, -95, -160, -171, -125, -72, -108, -236, -292, -293, -363, -401, -324, -204, -162, -212, -369, -480, -519, -444, -268, -72, 52, 101, -7, -178, -349, -438, -502, -552, -455, -299, -241, -236, -249, -243, -209, -145, -101, -39, -23, -88, -134, -130, -143, -71, -2, 27, 38, 37, 35, 51, 69, 59, -49, -193, -278, -333, -315, -170, 17, 113, 136, 144, 130, 156, 248, 363, 408, 408, 339, 242, 239, 226, 131, 83, 76, 69, 97, 165, 263, 313, 312, 266, 199, 142, 165, 223, 307, 374, 321, 249, 229, 187, 143, 150, 171, 191, 209, 275, 351, 368, 295, 191, 68, -50, -62, -13, 31, 33, 67, 136, 207, 310, 412, 455, 425, 413, 410, 364, 226, 69, -55, -103, -58, 14, 75, 195, 292, 246, 198, 187, 168, 193, 248, 311, 303, 256, 180, 97, 69, 66, 76, 101, 100, 92, 118, 115, 86, 79, 160, 208, 189, 223, 242, 240, 268, 321, 374, 319, 255, 288, 263, 206, 191, 189, 172, 163, 145, 151, 123, 26, 28, 98, 166, 164, 127, 89, 111, 197, 299, 365, 394, 392, 427, 504, 451, 287, 168, 109, 36, 67, 170, 194, 185, 245, 329, 357, 308, 306, 323, 319, 295, 189, 78, 122, 256, 339, 350, 269, 151, 84, 79, 58, 51, 23, -5, 55, 153, 247, 325, 381, 382, 371, 338, 333, 320, 240, 146, 92, 86, 197, 262, 225, 189, 273, 384, 449, 492, 529, 555, 586, 613, 574, 512, 484, 480, 482, 461, 360, 297, 311, 300, 330, 381, 414, 423, 422, 411, 390, 421, 472, 558, 630, 654, 707, 751, 689, 608, 553, 439, 396, 460, 444, 352, 275, 303, 403, 487, 549, 633, 735, 768, 733, 720, 750, 757, 712, 626, 610, 629, 553, 438, 388, 350, 342, 329, 346, 354, 389, 426, 501, 539, 538, 532, 559, 581, 550, 517, 507, 520, 484, 437, 373, 279, 197, 209, 310, 403, 411, 421, 431, 384, 367, 444, 498, 471, 397, 306, 307, 380, 465, 548, 633, 632, 542, 562, 548, 417, 271, 195, 175, 217, 288, 365, 383, 380, 394, 430, 534, 610, 604, 573, 533, 517, 546, 599, 594, 548, 515, 546, 571, 570, 522, 451, 382, 349, 358, 391, 518, 637, 645, 578, 506, 457, 421, 410, 448, 517, 539, 534, 545, 568, 564, 603, 618, 599, 664, 746, 719, 653, 609, 630, 710, 791, 800, 766, 725, 686, 649, 588, 628, 757, 784, 668, 630, 676, 670, 678, 731, 789, 822, 842, 843, 832, 870, 909, 919, 877, 775, 723, 706, 619, 580, 610, 594, 598, 650, 706, 739, 777, 808, 804, 755, 758, 775, 821, 921, 1004, 1026, 989, 943, 932, 934, 905, 874, 826, 799, 834, 881, 875, 839, 843, 799, 732, 697, 716, 744, 748, 758, 826, 899, 962, 999, 1035, 1097, 1113, 1063, 960, 846, 739, 702, 716, 715, 720, 683, 638, 671, 780, 903, 949, 921, 821, 775, 819, 872, 892, 883, 862, 835, 792, 777, 792, 821, 805, 737, 615, 564, 563, 561, 569, 576, 551, 591, 660, 646, 671, 747, 799, 777, 706, 628, 570, 598, 683, 661, 517, 443, 494, 573, 639, 691, 717, 742, 732, 747, 769, 760, 767, 732, 683, 660, 648, 667, 645, 643, 687, 650, 595, 660, 730, 695, 638, 682, 788, 885, 966, 956, 860, 794, 818, 814, 741, 676, 643, 577, 522, 546, 586, 662, 815, 874, 861, 849, 794, 722, 702, 734, 746, 690, 665, 653, 591, 545, 556, 570, 643, 729, 700, 682, 705, 733, 767, 735, 624, 590, 654, 705, 658, 609, 623, 646, 649, 629, 580, 562, 546, 459, 364, 345, 386, 474, 544, 613, 683, 707, 704, 679, 572, 467, 490, 569, 570, 520, 493, 476, 439, 450, 499, 497, 508, 536, 535, 539, 572, 564, 583, 616, 595, 563, 554, 548, 520, 517, 543, 553, 567, 567, 532, 519, 489, 451, 449, 525, 552, 527, 511, 454, 429, 442, 421, 422, 426, 368, 310, 235, 256, 337, 355, 327, 265, 263, 303, 291, 260, 242, 196, 181, 188, 188, 242, 267, 189, 111, 69, 41, 51, 89, 127, 171, 217, 235, 195, 133, 164, 232, 217, 180, 151, 97, 63, 17, -84, -162, -119, -83, -130, -155, -171, -214, -229, -151, -37, -1, -27, -46, -110, -177, -198, -218, -244, -195, -162, -217, -217, -170, -168, -218, -255, -259, -293, -257, -219, -214, -258, -301, -345, -369, -392, -337, -351, -421, -433, -409, -405, -362, -334, -319, -262, -165, -65, -22, -92, -239, -427, -579, -583, -546, -513, -474, -442, -385, -310, -266, -241, -278, -369, -499, -611, -611, -511, -481, -456, -402, -375, -327, -312, -357, -380, -372, -351, -283, -238, -274, -404, -582, -608, -511, -482, -481, -412, -305, -247, -211, -191, -196, -213, -208, -181, -268, -339, -328, -337, -295, -217, -243, -296, -337, -329, -342, -324, -231, -258, -349, -282, -217, -229, -182, -82, -95, -160, -169, -192, -156, -74, -52, -92, -56, -17, -18, -24, -8, -25, -85, -81, -38, -21, 35, 104, 137, 99, 55, 79, 76, 103, 114, 57, 31, 33, 11, -37, -18, 14, 43, 40, 68, 97, 103, 37, 64, 137, 87, 8, 33, 118, 142, 69, 2, -47, -120, -124, -66, -69, -70, -36, -9, -7, -7, -9, -4, 26, -15, -87, -106, -120, -110, -61, -46, -51, -58, -89, -158};
156:               
157:               //fractional hat[6662] __attribute__((space(psv))) = {186, 238, 114, -17 -82, -173, -121, -48, -207, -1141, -2167, -3315, -3790, -2701, 213, 1875, 2372, 2238, 1599, 2599, 4745, 4546, 1617, -1717, -3467, -1918, 1438, 2260, 1559, 1261, 1213, 776, 6, -1236, -1427, -875, 422, 1186, 1208, 765, -37, 415, 1645, 2086, 877, -911, -2576, -2320, 623, 2781, 2350, 1596, 629, -216, -351, -457, -1639, -2609, -2842, -1228, 1591, 4815, 5987, 5493, 1623, -2849, -4961, -5170, -3798, -2830, -2289, -1407, -43, 449, 103, -854, -1778, -2454, -2251, -1419, -340, 543, 533, 240, 723, -428, -3227, -4912, -5025, -2784, 827, 2258, 2009, 723, -1883, -3699, -4072, -3097, -1237, 255, 2325, 3795, 3518, 2079, 379, -1351, -3091, -4068, -3733, -2217, 202, 2905, 4550, 4784, 2368, -1734, -4416, -4319, -2628, -1408, -180, 2398, 3397, 2781, 1125, -1638, -3019, -2705, -944, 1075, 2813, 4039, 4419, 3677, 1527, -931, -2467, -2293, -1040, 139, 697, 1325, 2081, 1965, 1736, 1335, 376, -683, -1207, -1455, -1126, 864, 2569, 2594, 1877, 703, 479, 1360, 1454, 487, -199, -994, -950, -383, 562, 1010, 485, -269, -498, 397, 1429, 2225, 2106, 1835, 1063, 923, 1226, 1593, 1201, -1162, -2916, -3327, -1591, 817, 2710, 4105, 4757, 4392, 2321, -984, -3725, -4181, -2906, -734, 651, 2966, 5013, 4484, 4165, 2160, -1216, -3899, -4987, -3839, -929, 1644, 2245, 2790, 2010, 180, -1236, -2485, -2167, -662, 864, 736, 89, -181, -346, -272, -566, -617, -874, -876, -523, -306, 154, 658, 1153, 58, -1442, -1719, -813, 95, 410, 905, 1108, 35, -1903, -2933, -2656, -555, 2215, 3069, 2772, 1611, 442, -288, -1735, -2769, -2600, -1462, 110, 1913, 2684, 1695, 377, -569, -934, -1202, -288, 1020, 1432, 1187, 441, 195, 1548, 1452, -960, -3081, -4089, -3448, 993, 3775, 3581, 2360, 595, -377, -1419, -3405, -4750, -4375, -2136, 2490, 4815, 5255, 2907, -399, -2444, -2071, -2012, -2666, -4074, -2246, 904, 2350, 2956, 1481, -1267, -3553, -4017, -2840, 761, 2995, 2498, 205, -3000, -3815, -2869, -3650, -3683, -2513, -101, 3013, 4471, 4333, 2072, -1770, -3428, -3162, -2805, -2269, -803, 684, 1120, 1296, 1707, 1476, -524, -2156, -3035, -2625, -615, 2333, 4066, 3946, 1062, -3203, -6151, -6440, -2439, 1592, 1949, 2048, 1170, 1386, 3088, 3920, 3256, 622, -3835, -6216, -5580, -1887, 2748, 4570, 4763, 2317, -968, -2185, -1940, -1050, 453, 2031, 3566, 3896, 3472, 1428, -602, -1102, -418, 151, 334, 1452, 2098, 1455, 1182, 546, 892, 1123, 1695, 1884, 677, -1259, -2426, -1517, 1706, 4632, 4330, 2753, -815, -3494, -3658, -990, -325, -2010, -2969, -1715, 1609, 2699, 2531, 2194, 912, -631, -2012, -1818, 328, 2124, 1988, 663, -1193, -3102, -4106, -2480, 674, 1217, 147, -174, 898, 2777, 3543, 1385, -2075, -4870, -3858, -1420, 188, 2092, 3632, 4555, 4157, 2182, -1798, -4135, -4248, -2175, -429, 814, 2350, 3737, 4706, 4809, 1947, -2715, -5635, -6362, -6101, -2825, 1687, 4302, 4962, 4408, 1678, -1885, -4340, -6235, -6043, -4410, -167, 2957, 4920, 6361, 6274, 3950, -17, -5823, -9922, -10645, -4474, 1957, 4850, 7729, 6955, 3312, -54, -3051, -4324, -3842, -2655, 906, 3863, 5867, 6151, 4350, -530, -4877, -7081, -8095, -4178, 2099, 4915, 6040, 5639, 4104, 1831, -1951, -5039, -6476, -6460, -1715, 1904, 4138, 5064, 4339, 1611, -2521, -4374, -4350, -643, 3540, 5289, 5219, 3250, 948, -2666, -4888, -5480, -4559, -2621, 911, 3568, 5116, 4468, 1095, -1859, -3103, -2600, -971, 834, 1714, 1274, -83, -628, 269, 401, -758, -1786, -2119, -1911, -1442, -534, 1034, 1474, 1212, 567, -962, -1905, -1839, -906, -362, -598, -1029, -245, 120, 9, -1038, -1220, -1612, -1689, -646, 1084, 2070, -152, -1499, -2385, -1544, -17, 209, 1137, 385, -1937, -3903, -5438, -3193, 731, 3347, 4858, 4969, 2866, -258, -3626, -3731, -1053, 1789, 2016, 417, -528, -2694, -3068, -1825, 1336, 4827, 4020, 2462, -1008, -1629, 523, 2349, 3843, 3799, 2037, -1618, -3925, -3160, 1147, 4755, 4956, 3300, -717, -3064, -2025, 839, 2424, 1756, -81, -1593, -857, 2129, 3023, 1119, -969, -2607, -913, 1262, 2584, 2289, 1228, -789, -1075, -575, 850, 1413, -232, -1648, -2419, -1311, 1835, 5004, 5529, 4619, 1505, -1900, -3617, -3968, -2668, -1425, -89, 1873, 3329, 3460, 2721, 1154, -1652, -2583, -2766, -764, 1927, 2603, 2824, 1145, -1058, -2124, -2426, -1788, -258, 2199, 3185, 2319, 1022, -133, 340, 1420, 1796, -199, -1910, -2352, -1431, -3, 889, 2226, 2458, 475, -1924, -2834, -332, 1309, 171, -747, -579, 739, 686, 392, 1490, 1761, 931, 60, -1080, -2091, -3727, -3709, -895, 2559, 3859, 3029, 140, -2867, -3281, -2214, -730, 161, 598, 74, 129, 616, 1336, 108, -2576, -4130, -5236, -3729, 144, 2987, 3319, 1286, -1037, -1627, -770, -994, -898, 130, 897, 1574, 1678, 2389, 2576, 2173, 720, -856, -1926, -2337, -937, 2138, 3841, 3063, 993, -884, -543, -154, -1758, -1913, -561, 1418, 2981, 3680, 2980, 830, -1667, -3422, -3238, -2091, -1412, -1041, 730, 2580, 1982, 497, -1271, -2088, -1755, -1547, -1669, -1119, -1134, -1409, 106, 1080, 2008, 1224, -1730, -4635, -6123, -4922, -1040, 2982, 4288, 3479, 743, -2139, -3198, -3124, -2782, -1857, -1149, -782, 616, 3090, 3931, 2436, 149, -900, -957, -1900, -2200, -1098, -455, -70, 148, 2072, 4058, 4448, 4730, 2951, -150, -3382, -5878, -3768, 529, 2520, 1951, 974, 271, -929, -1166, -794, 1908, 2048, -537, -2381, -2885, -654, 2854, 4455, 3834, 580, -2615, -4171, -2962, -622, -249, -782, 1840, 3742, 4414, 3902, -282, -3403, -3750, -2413, -950, 418, 1911, 3335, 1746, -126, -1977, -1749, 1350, 3278, 3149, 1447, -143, -224, 575, -736, -2373, -1855, -305, 1068, 1231, 2724, 3938, 3191, 918, -2187, -3752, -4381, -3655, -361, 3459, 4033, 2907, 1281, 997, 1259, -324, -2305, -3490, -2715, 845, 2883, 2885, 2433, 1768, 1291, 1737, 964, -1337, -2919, -3903, -2783, 480, 3834, 5169, 4842, 1552, -2219, -3983, -3549, -1040, 508, 1057, 1798, 1591, 2228, 2280, 241, -2187, -4057, -3716, -1547, 534, 611, 1111, 2834, 2698, 1062, -766, -1132, -954, -1920, -2907, -1749, -71, 352, 1033, 348, -1530, -3225, -3060, -1268, 1786, 3400, 3354, 2459, 721, -1030, -3099, -3564, -3942, -3258, 549, 3404, 4848, 4994, 3354, -1207, -4628, -5752, -3755, 781, 4295, 5662, 4925, 1255, -1550, -3263, -4711, -4054, -1585, 968, 1904, 3381, 4703, 4101, 1645, -1976, -5027, -5550, -3889, -2226, -1329, 593, 3200, 4604, 4697, 2711, 156, -2227, -3769, -3983, -3784, -2643, 248, 2616, 3956, 3411, 121, -2862, -3746, -3403, -1697, 1040, 2180, 1959, 589, -957, -2155, -3008, -2098, -270, 1687, 1116, -362, -1254, -638, 839, 541, -615, -1278, -2360, -3105, -3309, -1815, 1675, 3522, 2696, 561, -1635, -2789, -2661, -2161, -1629, -815, 1210, 2867, 2203, 70, -2046, -3332, -2399, 284, 1397, 1245, 1377, 1666, 1715, 1042, -1143, -2863, -3332, -2347, 14, 2172, 3012, 3117, 2185, 434, -637, -1147, -1268, -1195, -23, 1959, 2493, 2239, 1557, 615, -330, -51, 197, -534, -1904, -1913, 643, 3271, 4108, 2006, -979, -2646, -2774, -1756, 173, 1703, 1261, 337, 156, 1428, 1844, 134, -1547, -2455, -1323, 585, 1345, 563, 579, 351, 336, 526, 1294, 1526, 516, -374, -944, 199, 1372, 1692, 427, -272, -721, -1008, 28, 1352, 2533, 1447, 215, -769, -376, 814, 1747, 1936, 418, -750, -1843, -1313, 415, 1791, 1352, -21, -565, -813, -253, -128, 681, 1014, 0, -1015, -1473, 373, 2021, 1952, 65, -1877, -3120, -3182, -2102, -72, 1846, 2014, 1463, -23, -1559, -2009, -1178, -1296, -1827, -1815, -312, 1975, 2901, 2091, -490, -3053, -4400, -3907, -2075, -230, 715, 2045, 3033, 2274, 768, -733, -1510, -2418, -2940, -2158, -747, 1268, 2572, 3638, 2766, 543, -2116, -3936, -2881, -305, 272, -306, 65, 1024, 2614, 2730, 1771, 393, -1364, -2119, -2438, -1645, 288, 1838, 2817, 1677, 511, -647, -867, -674, 55, 585, -75, -315, -959, 492, 2076, 3114, 3260, 1348, -1391, -3680, -2836, 845, 2963, 2233, 504, -1148, -811, 329, -457, -1160, -749, 578, 935, -33, -467, -224, -262, -515, -3, 625, 560, 225, 740, 1566, 1796, 1205, 183, -711, -1241, -1283, -935, -620, -468, -362, -432, -1050, -1360, -881, -86, 648, 1526, 1999, 1771, 631, -456, -1612, -2425, -1870, -60, 468, -80, 173, 322, 478, 193, 429, -635, -1735, -2918, -3438, -1386, 999, 2707, 1361, -487, -1347, -1535, -409, 284, 1318, 601, -1048, -1881, -2624, -1478, 1264, 3047, 2045, 93, -1313, -1549, -635, 101, 521, 138, -1142, -1960, -1993, -567, 1258, 1607, 1536, 1614, 1157, 514, -353, -1205, -943, -439, 528, 2047, 3002, 2684, 1259, 80, -304, -514, -412, -158, 813, 1132, 889, 17, -110, 1021, 1678, 1193, -705, -1431, -1704, -1203, 576, 3146, 4302, 2477, -166, -2306, -2251, -1636, -1772, -1641, -946, -816, -745, 1353, 2875, 3304, 2688, 311, -1819, -3566, -3241, -360, 1978, 3319, 2514, 321, -1920, -3164, -1548, 717, 1680, 1517, 642, -413, -883, -528, 508, 673, -442, -1310, -1500, -735, 577, 1496, 1576, 1598, 1400, 340, -798, -1211, -789, 182, 951, 1262, 784, -511, -1513, -1414, -67, 1385, 1725, 1605, 906, -306, -1203, -1763, -1728, -1600, -1099, -130, 981, 1333, 1060, 565, 204, 4, -500, -862, -1478, -1750, -2079, -1154, 1112, 2685, 2453, 815, -708, -1700, -1517, -747, 102, 437, 435, 541, 646, 927, 1140, 717, -309, -1470, -2313, -2438, -1622, 243, 1561, 1720, 1527, 946, 240, -238, -732, -1254, -1664, -1575, -427, 1359, 2005, 1564, 891, 129, -232, -562, -1120, -1467, -1147, -153, 1095, 1634, 1550, 930, 433, 385, 839, 302, -778, -1404, -717, 1059, 2556, 2711, 1582, -248, -2173, -3099, -1994, 188, 676, 96, 123, 1346, 2719, 2253, 379, -1377, -2549, -2395, -1065, -335, -66, -38, 241, 919, 1312, 417, -1261, -2531, -2717, -1408, 524, 1238, 774, 320, -582, -1774, -2694, -2185, -596, 195, 200, 584, 906, 306, -629, -1933, -3121, -3402, -2520, -522, 1141, 2091, 2585, 2619, 1440, -655, -2595, -3550, -3093, -1636, 70, 1228, 2461, 2842, 1783, 128, -1436, -2238, -2249, -1761, -759, 1367, 2780, 2281, 1053, -392, -1292, -1608, -1583, -1042, -7, 1076, 1822, 1896, 1234, -57, -1534, -2350, -2085, -1053, -179, 444, 1814, 2570, 1130, -691, -1847, -1827, -532, 201, -106, -469, -595, -273, 600, 818, 169, -501, -580, -186, 111, 168, 51, 168, 51, -376, -463, -260, 13, 32, 341, 966, 1107, 406, -718, -1307, -1439, -1143, 46, 1425, 1572, 521, -584, -883, -636, -37, 724, 1047, 526, -350, -1097, -1451, -1049, 233, 1434, 1660, 1104, 239, -529, -992, -1042, -406, 413, 654, 425, 455, 776, 863, 247, -592, -944, -646, -23, 351, 644, 771, 682, 813, 973, 83, -1341, -2208, -2057, -372, 1597, 2148, 1814, 1293, 800, 406, -632, -1891, -2488, -2214, -990, 916, 2193, 2058, 1148, 148, -419, -597, -362, 62, 337, 277, 7, 514, 1475, 1760, 1100, 42, -642, -671, -629, -1164, -1321, -490, 1098, 2100, 2025, 1454, 665, -233, -954, -1016, -420, 86, 288, 466, 382, 47, -46, 34, -19, -62, -96, 56, 100, 39, 15, 194, 173, -414, -752, -648, -144, 474, 897, 815, 134, -645, -1169, -1239, -915, -499, -198, 122, 562, 888, 683, -86, -916, -1423, -1797, -1959, -1696, -749, 557, 1038, 541, -493, -1639, -2274, -2016, -1220, -729, -580, -214, 565, 1048, 521, -411, -1220, -1463, -1387, -1144, -1260, -1148, -564, 155, 780, 572, 304, -339, -1454, -2600, -2943, -1557, 457, 1605, 1169, 217, -912, -1731, -872, 951, 1411, 401, -590, -920, -426, 638, 730, 37, -419, -545, -21, 569, 758, 522, 84, -258, -162, 218, 596, 768, 534, 23, -389, -394, -203, -61, -77, 26, 15, -198, -133, 120, 710, 957, 617, -392, -1410, -1899, -1389, -411, 258, 355, 740, 1216, 1263, 984, -159, -1420, -2589, -2203, -447, 1616, 1770, 822, -101, -601, 300, 1773, 1374, -442, -1617, -1479, -313, 1079, 1483, 1367, 804, -327, -789, -322, 641, 851, 742, 1044, 1039, 847, 811, 769, 531, 143, -374, -646, -563, -66, 594, 760, 752, 1111, 1552, 1342, 474, -267, -561, -484, -245, 308, 800, 672, 179, -98, 378, 992, 820, 182, -137, -102, -196, -214, 14, 456, 444, 320, 599, 816, 551, 28, -232, -163, 67, 220, 145, 218, 329, 329, 197, 313, 768, 534, -171, -690, -579, -48, 59, -235, -264, -26, 134, 174, 169, 394, 560, 387, 156, -120, -147, 72, 558, 752, 350, -147, -265, 210, 576, 486, 118, -106, -221, -55, 715, 1605, 1550, 594, -600, -1537, -1769, -1006, 124, 495, 305, 283, 196, 129, 186, 104, -190, -463, -533, -474, -467, -363, -62, 76, -302, -797, -870, -516, -235, -251, -384, -303, -145, -118, -540, -953, -1030, -921, -484, -388, -374, -758, -967, -891, -297, 700, 1260, 1124, 116, -879, -1749, -1760, -860, 457, 476, -609, -1444, -1421, -38, 1852, 2271, 1254, 91, -1024, -1634, -1501, -831, -70, 219, 232, 425, 597, 450, 64, -212, -468, -752, -723, -175, 314, 188, 30, 26, 102, 53, -16, -120, -572, -1171, -1178, -230, 1166, 1335, 534, -43, -516, -764, -687, -629, -295, 355, 790, 721, 664, 677, 576, 312, -82, -223, -126, -81, -145, -193, -239, -269, 167, 1096, 1681, 1107, 173, -436, -882, -1133, -1127, -497, 448, 1023, 1169, 1128, 727, 85, -373, -641, -607, -354, -152, 5, 116, 407, 666, 800, 676, 174, -487, -892, -810, -470, 17, 461, 821, 696, 195, -430, -878, -971, -698, -9, 535, 695, 419, 160, 63, -264, -693, -1087, -1175, -632, 278, 380, -402, -903, -936, -477, 254, 739, 829, 516, -122, -686, -852, -583, -518, -827, -1071, -632, 378, 1178, 1074, 515, -315, -1019, -1218, -618, -2, 67, -3, 215, 943, 1362, 1039, 78, -679, -978, -710, 170, 1009, 1308, 722, -33, -422, -357, 223, 825, 1103, 545, -92, -355, 123, 1157, 1793, 1466, 549, -403, -982, -692, 465, 1248, 997, 487, -124, -503, -218, 716, 1115, 591, -100, -226, 441, 965, 368, -494, -889, -870, -327, 401, 647, 438, 103, 172, 534, 377, -308, -873, -790, -482, -173, 346, 931, 804, 103, -478, -680, -302, 174, 414, 463, 412, 142, -24, -70, 24, -84, -470, -614, -398, 74, 657, 1143, 1182, 589, -287, -997, -1051, -458, 85, 174, 421, 771, 751, 169, -592, -1095, -1163, -539, 510, 1112, 487, -607, -1336, -1381, -340, 947, 1120, 550, -211, -988, -1198, -788, -446, -737, -994, -890, -142, 1018, 1583, 1032, -107, -1074, -1503, -998, -200, -42, -124, -47, -127, -249, -340, -285, -155, -301, -499, -377, -5, 577, 1063, 1160, 850, 243, -420, -951, -1073, -399, 491, 604, 248, 67, 189, 465, 561, 427, 45, -473, -689, -481, -243, -93, 180, 642, 841, 491, -185, -688, -651, -4, 598, 526, 233, 11, 69, 116, -192, -533, -605, -370, 35, 438, 429, 92, -386, -542, -233, 162, 124, -244, -535, -503, 26, 548, 368, -207, -668, -911, -669, 68, 1007, 1356, 815, 248, -171, -562, -920, -1344, -876, 286, 1193, 848, 162, -462, -699, -329, 133, -17, -579, -883, -717, 325, 1519, 1689, 685, -381, -1139, -1121, -312, 402, 327, -27, -118, 47, 415, 877, 1212, 1092, 514, -159, -603, -647, -264, 384, 719, 489, -26, -240, 195, 693, 630, 172, 128, 412, 538, 409, 163, 198, 156, 146, 75, 29, -57, -212, -2, 330, 450, 295, 268, 471, 661, 574, 440, 360, -31, -497, -800, -646, -127, 398, 568, 580, 695, 688, 453, 56, -417, -743, -895, -663, -220, 228, 375, 293, 321, 431, 289, -316, -830, -952, -407, 319, 532, 372, 112, -85, -25, 292, 424, 177, -207, -542, -637, -434, -202, -159, -226, -84, 239, 506, 339, -50, -381, -428, -161, 376, 818, 787, 376, -19, -80, 136, 238, -13, -308, -495, -423, 188, 961, 1067, 572, 53, -361, -414, -175, 23, 47, 138, 418, 759, 901, 604, 183, -141, -361, -450, -428, -120, 428, 959, 1000, 582, -43, -596, -684, -402, -85, 131, 450, 743, 767, 556, 71, -480, -847, -873, -374, 329, 727, 700, 483, 194, -110, -301, -229, -52, -42, -135, -203, -28, 281, 288, -78, -460, -498, -91, 407, 538, 531, 577, 482, 178, -328, -685, -737, -649, -541, -458, -177, 258, 613, 602, 345, 14, -223, -300, -462, -563, -514, -377, -199, 92, 326, 340, 25, -442, -737, -780, -543, -371, -344, -248, -31, 135, 88, -150, -364, -602, -689, -553, -131, 231, 146, -158, -299, -222, -285, -512, -643, -502, -280, -260, -337, -315, -201, 6, 121, 8, -339, -647, -629, -324, -246, -438, -463, -237, 102, 367, 552, 388, -108, -620, -718, -464, -153, -180, -315, -385, -401, -226, -24, 11, -55, -138, -157, 55, 216, 192, -72, -353, -482, -533, -435, -376, -207, 42, 350, 540, 483, 165, -231, -583, -692, -583, -345, -67, 218, 442, 459, 266, 108, 17, -61, -50, -9, 101, 124, 157, 243, 239, 16, -344, -461, -240, 168, 435, 530, 643, 548, 270, -33, -247, -384, -497, -376, 96, 612, 720, 499, 168, -52, -192, -275, -270, 38, 486, 632, 434, 173, 81, 101, 24, -189, -388, -285, 122, 701, 1127, 1099, 597, 30, -383, -393, -243, -140, -107, -24, 89, 249, 494, 758, 678, 75, -631, -1042, -862, 32, 890, 1029, 598, 50, -181, 74, 544, 639, 382, 89, -144, -400, -476, -279, 34, 199, 133, 68, -70, -276, -439, -403, -132, 256, 529, 633, 334, -5, -127, -13, 34, -100, -196, -203, -30, 130, 154, -70, -373, -562, -443, -295, -332, -338, -183, 22, 22, -173, -453, -670, -717, -372, 167, 582, 542, 175, -120, -262, -307, -386, -456, -505, -501, -440, -132, 117, 58, -128, -213, -145, -251, -504, -545, -317, -34, 149, 223, 97, -231, -601, -760, -634, -81, 402, 451, 96, -279, -427, -480, -449, -477, -389, -299, -183, 39, 250, 234, -13, -242, -184, 32, 58, -142, -344, -374, -332, -170, 143, 394, 328, -74, -511, -802, -813, -589, -150, 372, 610, 457, 155, -145, -372, -345, -274, -207, -270, -359, -381, -299, -146, -132, -277, -293, -143, 136, 360, 389, 202, -126, -436, -682, -742, -594, -434, -236, -8, 85, 74, 2, -10, -14, -98, -310, -435, -483, -330, -61, 178, 207, 141, 71, -87, -317, -438, -361, -135, 59, 117, 154, 189, 200, 128, -46, -291, -459, -462, -175, 199, 394, 263, -30, -301, -453, -292, 22, 184, 104, 30, 177, 442, 639, 590, 264, -106, -406, -532, -539, -406, -110, 394, 746, 830, 605, 232, -120, -325, -299, -127, 95, 275, 457, 535, 452, 184, -74, -181, -231, -187, 44, 348, 510, 406, 174, 21, 24, 82, 45, -153, -340, -275, 87, 475, 547, 283, 6, -111, -41, 132, 209, 217, 209, 176, 170, 200, 238, 201, 63, -109, -176, -18, 295, 424, 252, -31, -123, 0, 190, 192, 23, -28, 125, 354, 405, 291, 157, 70, 132, 211, 158, 57, -1, 114, 182, 181, 74, -12, -104, -125, -6, 52, 71, 33, 100, 252, 477, 460, 270, -14, -214, -278, -359, -394, -333, -62, 232, 372, 279, 96, -66, -189, -210, -238, -258, -204, -49, 221, 293, 148, -146, -385, -462, -344, -135, 39, 179, 116, -21, -233, -355, -277, -50, 166, 168, 1, -119, -131, -71, 1, 17, 18, 50, 46, -12, -43, -54, 9, 95, 197, 215, 134, -18, -238, -375, -418, -262, -19, 66, -65, -240, -287, -75, 230, 359, 281, 94, -125, -248, -311, -260, -206, -204, -254, -241, -199, -153, -94, -196, -342, -368, -206, 101, 235, 138, -83, -161, -130, -29, -215, -397, -483, -364, -33, 167, 240, 59, -137, -250, -193, -88, 24, 53, -26, -200, -409, -429, -328, -230, -48, 184, 307, 273, 74, -190, -336, -332, -184, -51, -57, -152, -149, -13, 71, -38, -213, -280, -216, -88, -7, 19, 47, 118, 199, 251, 192, 4, -164, -278, -215, -68, 150, 344, 436, 284, -3, -277, -302, -137, 22, 3, 0, 32, 75, 109, 171, 158, 40, -23, 56, 206, 244, 161, -52, -243, -283, -167, 12, 107, 113, 72, 15, 27, 28, -32, -103, -45, 40, 165, 155, 74, 64, 118, 116, 107, 86, 112, 195, 314, 407, 278, 150, 60, 132, 214, 172, 37, -51, -3, 123, 235, 347, 455, 521, 470, 299, 76, -13, 45, 181, 246, 253, 273, 253, 286, 370, 384, 210, -10, -124, -115, 1, 263, 576, 699, 534, 286, 79, 75, 154, 190, 134, 86, 131, 246, 341, 338, 294, 279, 207, 146, 152, 207, 218, 132, 54, 133, 330, 584, 723, 667, 396, 5, -246, -209, 65, 335, 380, 336, 305, 341, 375, 438, 360, 205, 34, -49, 49, 188, 311, 331, 372, 438, 460, 372, 209, 56, -23, 131, 362, 515, 412, 131, -92, -186, -55, 112, 204, 152, 172, 140, 173, 223, 238, 173, 71, 3, 55, 138, 204, 145, 66, 30, 89, 158, 107, -16, -106, -72, 17, 96, 68, 3, -29, -17, -21, -23, -11, 36, 30, 32, 9, -52, -80, -66, -77, -150, -253, -320, -249, -136, -3, 35, -4, -153, -297, -301, -212, -41, 124, 140, 6, -161, -199, -209, -124, -40, -31, -12, -21, -18, 27, 54, 3, -114, -284, -454, -513, -382, -181, 25, 95, 84, 31, 112, 195, 163, 38, -122, -211, -240, -208, -136, -25, 34, 98, 163, 166, 46, -37, -70, -175, -253, -234, -67, 108, 141, 162, 161, 172, 95, -19, -96, -85, -26, 22, 47, 41, 32, 41, 137, 156, 51, -155, -268, -187, 14, 286, 478, 453, 194, -160, -366, -369, -177, -7, 142, 227, 190, 139, -21, -136, -203, -248, -230, -191, -121, 32, 114, 45, -57, -201, -154, 20, 191, 232, 148, -10, -113, -60, 42, 121, 115, 86, 44, 71, 48, -46, -98, -169, -174, -97, 54, 160, 196, 127, 70, 20, -31, 36, 123, 269, 270, 153, 18, 38, 95, 90, -61, -212, -255, -212, -96, 63, 229, 263, 153, -33, -169, -168, -30, 210, 351, 378, 254, 83, -46, -121, -115, -54, 9, 22, 11, 71, 155, 244, 271, 197, 61, -34, -8, 109, 259, 336, 201, 19, -150, -101, 77, 147, 169, 112, 42, 14, 77, 185, 282, 214, 120, 137, 133, 149, 111, 100, 168, 181, 141, 1, 2, 32, 81, 136, 80, 50, 25, 80, 91, 117, 81, 15, 7, 7, -5, -105, -117, 3, 199, 337, 366, 366, 318, 218, 47, -133, -132, -52, 90, 274, 335, 311, 202, 63, -78, -187, -181, -97, 69, 196, 282, 332, 227, 48, -175, -241, -71, 196, 325, 317, 163, -44, -141, -121, -70, -64, -84, -52, 33, 99, 84, -71, -230, -269, -191, 14, 200, 238, 138, -29, -129, -131, 25, 84, 24, -80, -144, -146, -22, 72, 12, -124, -237, -252, -204, -56, 56, 100, 99, 102, 106, 81, 46, -13, -43, -24, 14, 5, -69, -89, -96, -99, -63, 4, 51, 32, -18, -66, -29, -8, 24, 36, 99, 125, 106, 42, -81, -173, -184, -115, -7, 64, 141, 208, 161, 13, -110, -180, -163, -138, -121, -46, 33, 95, 42, -31, -105, -61, 3, -3, 0, 9, -6, -68, -118, -103, -45, -11, -76, -148, -190, -142, 12, 73, 50, -44, -110, -107, -43, 12, 7, -9, 1, 48, 89, 84, 70, 27, 29, 48, 26, -6, -49, -41, -49, -19, 36, 154, 256, 331, 322, 232, 126, 49, 81, 123, 230, 177, 180, 140, 91, 110, 132, 129, 142, 148, 224, 318, 322, 333, 258, 177, 123, 111, 167, 265, 309, 357, 342, 337, 303, 197, 226, 295, 316, 304, 208, 155, 202, 225, 248, 246, 244, 285, 306, 354, 418, 408, 364, 259, 203, 243, 283, 299, 276, 264, 246, 281, 319, 372, 363, 266, 192, 181, 177, 197, 215, 199, 196, 200, 229, 241, 223, 202, 169, 202, 197, 156, 161, 151, 172, 131, 103, 58, 21, 54, 118, 169, 178, 119, 93, 59, 21, 17, -23, -34, -7, 121, 221, 172, 69, -33, -70, -11, 61, 110, 97, 16, 2, -12, -25, -83, -138, -201, -124, -38, 37, 25, -3, -19, -1, 8, -1, -34, -81, -51, -23, 46, 103, 59, 3, -75, -164, -182, -116, -9, 96, 149, 131, 75, -9, -69, -109, -107, -63, 33, 107, 173, 182, 125, -4, -129, -165, -101, -16, 14, 35, 20, 44, 60, 101, 192, 231, 168, 74, 0, -1, -24, -29, -22, 25, 80, 135, 127, 74, 15, -1, 21, -17, -98, -125, -86, -13, 29, -46, -100, -158, -133, -8, 95, 127, 55, -78, -167, -258, -245, -220, -223, -228, -187, -104, 12, 62, 51, -79, -269, -391, -387, -206, -73, -32, -90, -118, -129, -113, -160, -247, -354, -453, -388, -287, -179, -129, -212, -342, -426, -464, -389, -281, -180, -78, -76, -129, -211, -284, -353, -362, -283, -232, -185, -154, -151, -192, -167, -243, -243, -253, -269, -193, -132, -13, 9, -11, -61, -136, -164, -183, -164, -73, -34, -9, 15, 0, -35, -31, 24, 46, 25, -30, -30, -49, -36, -27, -33, 1, 59, 139, 202, 184, 118, 37, 8, 39, 126, 174, 189, 171, 134, 49, 31, 14, 19, 38, 101, 172, 213, 170, 87, 42, 32, 72, 125, 195, 242, 242, 224, 138, 105, 74, 27, 47, 77, 127, 169, 200, 199, 212, 141, 105, 66, 46, 87, 113, 145, 187, 166, 98, 117, 129, 10, 9, 4, 41, 116, 132, 152, 115, 77, -14, -104, -71, -26, 68, 131, 114, 78, 25, -8, -37, 0, 35, 83, 111, 116, 120, 143, 116, 109, 70, 56, 2, 37, 138, 71, 49, -30, 0, -24, -5, 23, 30, 21, 31, 100, 178, 210, 187, 130, 100, 56, 118, 156, 144, 77, 9, -41, -14, 24, 31, 53, 31, 34, -4, 19, 22, 55, 88, 66, 69, 73, 57, 56, 49, 22, 1, 25, 51, 77, 70, -10, -72, -69, -19, 85, 124, 121, 60, -11, -81, -102, -45, 3, 69, 93, 99, 96, 34, -3, -65, -73, -82, 4, 58, 69, 54, -46, -93, -77, -89, -65, -81, -109, -79, -36, 13, 6, -47, -80, -120, -101, -89, -96, -138, -127, -122, -58, -83, -118, -150, -183, -100, -89, -70, -137, -138, -117, -73, -32, -62, -58, -100, -125, -155, -97, -69, 11, -64, -161, -120, -184, -128, -123, -43, -68, -82, -116, -73, -72, 19, 47, 22, -47, -143, -148, -79, -21, 7, 39, 53, 50, 36, -1, -11, -32, -42, -13, 39, 56, 63, 41, 87, 120, 121, 114, 104, 74, 77, 143, 205, 176, 87, 6, -39, -27, 37, 129, 139, 178, 131, 97, 41, -6, 21, 3, 35, 92, 113, 153, 142, 121, 89, 51, 54, 59, 85, 113, 131, 130, 110, 56, 97, 83, 90, 97, 89, 101, 97, 98, 108, 160, 179, 185, 148, 119, 61, 11, 12, 38, 113, 169, 177, 177, 138, 65, 23, -21, -26, -2, 46, 66, 57, 72, 81, 65, -6, -70, -44, 7, 106, 145, 145, 115, 45, 28, -40, -102, -134, -128, -131, -45, 45, 88, 89, 48, 31, -77, -57, -72, -64, -70, -26, 30, 56, 74, 45, 2, -64, -75, -81, -62, -46, 2, 16, 38, 9, 25, -7, -39, -42, -46, -47, -79, -109, -133, -127, -50, -35, -30, -20, 0, 8, -25, -33, -75, -39, -27, -52, -76, -127, -159, -143, -118, -71, -67, -89, -86, -116, -107, -89, -77, -62, -69, -54, -81, -107, -120, -124, -137, -181, -206, -232, -201, -123, -110, -89, -118, -156, -157, -186, -189, -213, -198, -212, -236, -246, -202, -185, -192, -154, -188, -192, -249, -226, -223, -219, -190, -191, -141, -179, -223, -229, -229, -168, -114, -107, -154, -213, -249, -249, -247, -195, -158, -174, -146, -179, -170, -199, -233, -283, -255, -271, -231, -221, -216, -214, -195, -192, -174, -185, -212, -265, -294, -317, -266, -206, -201, -167, -187, -215, -218, -229, -188, -179, -148, -185, -215, -218, -190, -169, -166, -173, -223, -248, -262, -246, -220, -195, -193, -216, -248, -251, -246, -263, -259, -236, -246, -250, -289, -273, -287, -263, -245, -240, -205, -230, -197, -195, -181, -142, -97, -152, -205, -276, -312, -284, -274, -246, -237, -234, -196, -157, -151, -123, -145, -160, -176, -247, -228, -230, -218, -153, -137, -140, -142, -201, -220, -209, -214, -180, -142, -140, -158, -165, -134, -97, -99, -107, -141, -187, -222, -175, -114, -44, -51, -48, -90, -131, -126, -110, -92, -70, -70, -44, -53, -33, -66, -73, -84, -100, -61, -33, -20, 7, -6, -40, -91, -129, -102, -51, -26, -8, 1, 15, -12, 13, 53, 20, -26, -60, -32, -34, -2, 14, 79, 106, 112, 83, 59, 1, -31, -16, 4, 41, 74, 60, 31, 34, 2, 12, 20, 30, 27, 20, 11, -4, 8, 25, 43, 64, 15, 22, -3, -21, -19, 28, 53, 57, -6, -57, -69, -50, -19, 29, 14, -12, -75, -72, -35, 18, 14, -18, -107, -158, -146, -133, -97, -39, -13, -60, -61, -81, -96, -125, -109, -142, -147, -135, -109, -51, -33, -71, -117, -150, -165, -163, -79, -48, -50, -110, -129, -178, -187, -212, -205, -173, -159, -124, -125, -76, -87, -75, -134, -207, -234, -238, -196, -163, -143, -113, -139, -162, -177, -183, -171, -185, -165, -165, -155, -138, -143, -178, -154, -176, -152, -178, -148, -152, -194, -223, -218, -197, -173, -160, -166, -177, -187, -162, -147, -106, -83, -98, -123, -198, -211, -193, -127, -79, -108, -108, -126, -73, -57, -51, -52, -103, -147, -156, -183, -193, -182, -159, -60, -75, -56, -52, -131, -140, -189, -191, -226, -173, -141, -133, -134, -156, -210, -249, -224, -210, -164, -145, -137, -154, -153, -160, -149, -161, -179, -186, -213, -202, -192, -184, -174, -158, -117, -117, -122, -123, -110, -138, -111, -129, -103, -117, -151, -143, -126, -112, -93, -64, -58, -67, -103, -135, -115, -86, -72, -75, -64, -36, -45, -41, -32, -33, 7, -28, -41, -57, -52, -35, -27, 6, -10, -41, -18, -73, -41, 3, 17, 6, 10, -13, -7, 9, -1, 4, -23, 3, 32, 36, 13, -29, -42, -18, -34, -15, -25, -17, 2, 22, -7, 31, 21, -3, -13, -52, -44, -52, -9, 4, 20, 12, 6, -51, -67, -109, -142, -98, -96, -64, -15, -7, -38, -49, -100, -137, -148, -123, -98, -105, -131, -120, -142, -128, -79, -116, -73, -112, -147, -158, -159, -151, -124, -126, -137, -129, -141, -145, -133, -130, -122, -111, -134, -110, -161, -153, -187, -179, -155, -151, -124, -136, -96, -89, -83, -144, -191, -201, -155, -121, -120, -100, -79, -101, -140, -157, -149, -144, -122, -91, -110, -98, -102, -109, -107, -115, -134, -134, -113, -81, -75, -67, -92, -98, -91, -78, -60, -68, -81, -90, -101, -67, -48, -37, -72, -28, -72, -48, -67, -94, -91, -132, -126, -106, -68, -66, -45, -70, -70, -74, -76, -63, -72, -52, -60, -73, -115, -155, -172, -139, -132, -128, -117, -118, -121, -117, -129, -146, -151, -176, -167, -169, -173, -138, -178, -152, -167, -153, -180, -199, -202, -205, -174, -147, -132, -148, -174, -180, -175, -178, -164, -194, -167, -164, -165, -226, -189, -216, -214, -221, -229, -201, -206, -201, -231, -219, -217, -207, -210, -210, -231, -233, -241, -221, -181, -175, -150, -149, -156, -180, -198, -182, -176, -185, -164, -139, -137, -117, -91, -122, -175, -195, -207, -184, -123, -123, -88, -128, -128, -156, -152, -161, -175, -141, -111, -74, -34, -30, -50, -42, -110, -116, -85, -75, -47, -56, -50, -37, -29, -38, -43, -72, -44, -14, -23, -17, -3, -10, 5, 5, -3, 19, 5, 12, -5, -35, -29, -37, 10, 39, 55, 55, 56, 29, 4, -26, -21, -15, -5, 34, 42, 42, 60, 57, 47, 32, 19, 40, 33, 56, 66, 30, 5, -17, -10, -1, 36, 25, -3, 8, 24, 32, 56, 38, -10, -30, -47, -24, -25, -26, 19, 27, 31, 23, -18, -2, -12, -19, -33, -26, 18, -7, 5, -4, -9, -16, -15, -23, -4, -10, 3, -11, 4, -8, -37, -39, -16, 3, 13, 4, -31, -6, 5, -12, -7, -17, -39, -65, -40, 3, -1, 27, 15, 52, -30, -31, -67, -69, -13, -17, -23, -25, -31, -8, -17, 9, 30, 1, -21, -55, -41, -54, -2, 1, 34, 28, -9, -7, -20, 28, -1, 26, -5, -9, -18, -48, -35, -21, -38, -36, -23, -42, -67, -54, -59, -38, -82, -91, -69, -54, -17, 3, -12, 1, -22, -50, -85, -77, -49, -37, -25, -27, -69, -66, -81, -22, 18, 22, 10, -19, -48, -69, -101, -88, -69, -53, -49, -41, -53, -66, -61, -46, -47, -71, -67, -87, -103, -83, -69, -62, -61, -70, -74, -64, -77, -91, -110, -113, -74, -92, -86, -106, -133, -115, -83, -102, -58, -50, -53, -37, -52, -81, -124, -134, -146, -106, -118, -86, -54, -52, -44, -56, -81, -99, -86, -103, -115, -108, -111, -93, -78, -71, -75, -75, -62, -66, -38, -8, -13, -47, -38, -65, -81, -47, -10, -60, -38, -34, -18, -39, -42, -27, -81, -87, -103, -76, -29, 1, -18, -38, -94, -112, -103, -81, -33, -13, -22, -5, -41, -59, -69, -72, -56, -68, -66, -68, -37, -70, -76, -72, -75, -59, -47, -40, -20, -53, -63, -104, -102, -77, -67, -48, -49, -53, -67, -75, -105, -93, -74, -66, -73, -75, -75, -110, -106, -142, -123, -122, -92, -78, -86, -51, -41, -57, -19, -68, -63, -61, -36, -17, -22, -20, -5, -36, -35, -33, -37, -29, -34, -28, -15, 20, -11, 10, -2, -15, -40, -54, -54, -52, -23, -23, -24, 18, 13, 25, 21, 8, 18, 16, 5, -23, -19, -15, 32, 2, -15, 1, -12, -26, 9, 36, 49, 42, 25, 24, 5, 53, 45, 67, 59, 59, 29, 56, 47, 100, 13, 142, -436, 219, 206, -21, 170, 21, 152, 44, 123, 53, 82, 25, 60, 40, 71, 41, 45, 51, 88, 93, 108, 106, 109, 81, 80, 78, 79, 104, 93, 131, 126, 99, 82, 74, 24, 47, 32, 46, 59, 57, 95, 69, 62, 14, 42, 56, 56, 35, 41, 76, 54, 20, 26, 16, 3, -25, -14, 23, 5, 22, 18, -2, 8, -20, -42, -71, -43, -38, 4, 40, -9, 5, -9, -17, -49, -54, -21, -21, -12, -15, -18, -19, -25, -67, -65, -77, -76, -45, -65, -30, -15, -14, -12, -27, -51, -49, -53, -69, -68, -44, -28, -52, -55, -24, -34, -32, -58, -30, -68, -44, -32, -32, -11, 4, -25, -20, 19, -7, 10, 4, 20, 23, 18, 16, 23, 28, 41, 47, 58, 56, 46, 61, 66, 49, 71, 52, 40, 69, 103, 127, 110, 107, 97, 87, 114, 147, 128, 136, 72, 74, 98, 96, 126, 130, 153, 175, 188, 175, 168, 147, 145, 131, 137, 140, 131, 129, 123, 161, 138, 169, 106, 115, 152, 142, 180, 167, 161, 134, 133, 133, 135, 122, 146, 146, 118, 127, 114, 109, 127, 127, 142, 134, 129, 141, 129, 113, 119, 126, 144, 194, 206, 207, 179, 154, 182, 156, 145, 136, 124, 141, 120, 146, 118, 147, 122, 131, 151, 146, 158, 142, 155, 117, 142, 124, 164, 152, 128, 108, 150, 146, 150, 146, 129, 120, 95, 109, 134, 140, 127, 108, 65, 118, 115, 102, 153, 135, 143, 161, 128, 131, 114, 116, 131, 120, 141, 118, 115, 114, 111, 156, 171, 184, 134, 141, 143, 148, 158, 154, 144, 130, 116, 78, 104, 158, 149, 133, 145, 118, 107, 85, 71, 65, 63, 67, 47, 35, 28, 84, 72, 79, 50, 48, 45, 52, 52, 74, 45, 10, 11, 9, 28, 20, 3, -9, 26, 45, 45, 19, 1, -32, -22, -38, -11, 11, 14, 28, 16, 9, -5, 11, -42, -19, -50, -4, -1, -4, -23, -43, -46, -57, -63, -28, -44, -39, -8, -17, 17, -13, -30, -47, -46, -27, -33, 1, -22, 5, 9, 7, -6, 13, -4, 0, -13, -42, -62, -76, -55, -60, -42, -32, -18, 5, 5, -27, -56, -48, -23, -21, -18, -34, -61, -80, -59, -56, -34, -27, -15, -34, 5, -7, -9, 4, -16, -51, -47, -44, -50, -57, -40, -21, -38, -40, -41, -24, -22, -8, -26, -23, -18, -16, 6, 30, 30, 25, -41, -43, -60, -21, -9, -6, 0, -6, -17, -26, -6, -15, -4, -14, -53, -29, -13, -17, -2, 8, 8, -31, -3, -38, -18, -12, -12, -39, -40, -32, -30, -27, -26, -40, -39, -65, -42, -43, -30, -22, 22, 14, -2, -14, -32, -47, -37, -29, -37, -31, -27, -27, 13, 3, -34, -64, -52, -9, 13, 48, 61, 29, 14, 68, 26, 10, 10, -9, -10, -4, 26, 13, 35, 29, 27, 19, 45, 49, 68, 42, 41, 46, 62, 62, 28, 47, 25, 56, 49, 47, 67, 84, 89, 125, 83, 82, 60, 76, 82, 109, 120, 122, 134, 128, 128, 134, 118, 112, 108, 105, 143, 128, 147, 160, 159, 155, 153, 143, 143, 138, 129, 152, 119, 195, 159, 159, 175, 183, 162, 156, 160, 159, 178, 168, 214, 229, 214, 174, 172, 187, 174, 198, 189, 151, 154, 200, 187, 185, 163, 154, 177, 148, 153, 177, 190, 186, 203, 193, 171, 171, 156, 151, 146, 129, 108, 129, 157, 155, 180, 151, 143, 130, 147, 133, 143, 155, 159, 155, 151, 163, 143, 140, 132, 125, 131, 135, 127, 159, 186, 183, 156, 129, 135, 124, 123, 128, 117, 111, 100, 76, 90, 77, 83, 96, 119, 104, 94, 83, 88, 55, 47, 62, 55, 56, 38, 57, 30, 34, 53, 61, 57, 41, 40, 42, 28, 47, 62, 26, 29, 20, 6, 56, 50, 47, 76, 84, 84, 76, 42, 52, 42, 35, 44, 60, 59, 71, 41, 70, 82, 68, 52, 71, 79, 83, 83, 64, 68, 68, 84, 68, 83, 82, 73, 102, 113, 95, 97, 94, 71, 87, 42, 115, 124, 114, 147, 102, 114, 102, 86, 101, 102, 102, 106, 133, 137, 129, 147, 133, 132, 147, 128, 125, 125, 104, 139, 137, 127, 142, 151, 149, 162, 164, 151, 137, 150, 174, 154, 169, 171, 159, 169, 182, 187, 167, 177, 136, 135, 132, 153, 179, 193, 192, 191, 184, 155, 139, 128, 168, 178, 170, 193, 190, 173, 188, 176, 152, 129, 131, 132, 155, 173, 160, 178, 176, 150, 130, 132, 127, 135, 156, 143, 136, 115, 102, 133, 123, 116, 120, 127, 146, 121, 106, 110, 71, 67, 62, 120, 122, 91, 95, 94, 85, 70, 67, 74, 67, 72, 70, 72, 73, 80, 86, 79, 100, 99, 100, 82, 68, 86, 60, 58, 79, 52, 38, 64, 53, 74, 70, 68, 82, 57, 68, 88, 72, 90, 61, 75, 79, 61, 28, 26, 51, 77, 80, 51, 84, 100, 82, 111, 121, 116, 98, 98, 79, 92, 85, 117, 136, 116, 98, 78, 63, 52, 83, 79, 107, 94, 76, 79, 88, 68, 30, 55, 84, 81, 89, 96, 67, 73, 82, 71, 71, 57, 48, 53, 57, 36, 52, 18, 41, 57, 25, 44, 39, 11, 35, 28, 44, -5, 14, 41, 13, -1, -31, -15, -13, -6, 24, -20, -4, -17, -29, -35, -48, -28, -30, -45, -34, 30, -72, -62, 16, -61, -16, -50, -47, -67, -60, -40, -32, -33, -23, -24, -27, -39, -34, -34, -44, -46, -11, 3, -19, -5, -42, -38, -43, -67, -41, -35, -15, -22, -6, 7, 6, -19, -17, -7, -22, -10, -15, -11, -11, -1, 16, 1, 4, 5, 11, 18, 28, 57, 37, 35, 13, 26, 34, 36, 49, 35, 54, 58, 41, 60, 53, 16, 39, 44, 88, 100, 99, 87, 116, 94, 94, 88, 50, 54, 42, 64, 56, 99, 87, 103, 104, 106, 120, 88, 98, 69, 87, 89, 94, 101, 88, 99, 107, 114, 115, 94, 83, 82, 86, 105, 108, 98, 104, 86, 83, 74, 84, 84, 103, 127, 125, 120, 122, 108, 111, 82, 113, 92, 105, 120, 117, 131, 127, 123, 101, 103, 127, 116, 106, 119, 161, 137, 143, 154, 143, 139, 137, 180, 151, 147, 165, 135, 136, 127, 112, 129, 151, 159, 159, 167, 162, 174, 169, 169, 179, 169, 151, 161, 157, 155, 147, 160, 176, 185, 195, 170, 162, 180, 159, 161, 173, 149, 178, 205, 208, 180, 157, 151, 151, 170, 162, 171, 182, 174, 170, 138, 154, 162, 166, 140, 140, 146, 119, 133, 160, 153, 160, 149, 153, 150, 107, 134, 68, 121, 116, 113, 137, 91, 117, 107, 120, 123, 124, 78, 107, 109, 121, 122, 114, 102, 63, 68, 80, 97, 95, 103, 109, 93, 90, 75, 29, 41, 19, 39, 57, 44, 101, 81, 99, 63, 52, 53, 46, 47, 51, 49, 28, 17, 13, 10, -3, 18, 34, 55, 60, 39, 33, 25, 1, -6, -36, -20, 3, -10, 13, 13, 16, 60, 52, 65, 63, 39, 23, 16, 27, 42, 49, 77, 104, 101, 128, 101, 102, 93, 117, 130, 91, 93, 88, 106, 138, 152, 134, 113, 100, 94, 90, 124, 141, 134, 155, 130, 149, 138, 153, 140, 120, 154, 133, 125, 129, 116, 139, 143, 121, 125, 120, 114, 133, 155, 151, 157, 143, 135, 128, 126, 111, 112, 123, 129, 139, 106, 136, 140, 141, 112, 129, 118, 127, 114, 72, 102, 84, 86, 94, 97, 59, 76, 87, 59, 80, 71, 85, 92, 92, 79, 83, 88, 67, 82, 51, 37, 29, 60, 73, 61, 74, 65, 78, 77, 81, 80, 68, 49, 30, 15, -7, 4, 57, 57, 39, 45, 51, 43, 51, 56, 75, 49, 47, 49, 39, 58, 62, 84, 59, 85, 100, 75, 84, 79, 70, 67, 55, 70, 103, 66, 49, 32, 26, 46, 41, 74, 74, 75, 78, 56, 49, 34, 33, 31, 44, 41, 58, 72, 47, 65, 67, 49, 44, 48, 46, 46, 47, 42, 52, 24, 41, 27, 59, 66, 38, 24, -7, 6, -10, 5, -17, -29, -26, 9, 5, 9, 21, 10, 5, 30, 0, -19, -17, -11, -21, -2, -20, 10, 14, -31, -7, -4, 1, 9, -8, 0, 3, 11, -2, -7, 0, 8, -28, -51, -46, -85, -64, -32, -74, -16, -43, -43, -48, -65, -67, -83, -74, -119, -93, -86, -68, -91, -74, -84, -71, -78, -77, -67, -76, -53, -70, -77, -98, -84, -82, -102, -84, -79, -78, -94, -68, -57, -68, -68, -53, -65, -68, -62, -78, -66, -63, -87, -48, -55, -43, -49, -52, -41, -35, -47, -43, -24, -14, -4, -2, -13, -14, -39, -12, 0, 2, 15, 9, 3, 7, 2, 10, 19, 11, 2, -15, 4, -22, -29, 2, 11, -5, 3, -3, -4, -12, -3, -5, 15, 1, 10, -18, -16, -14, -8, 7, 5, 11, 26, -1, 13, 18, 14, 37, 0, 5, -7, -19, -23, -3, 1, -6, 1, -23, -7, -4, 4, 3, 7, -7, -1, 4, 15, 38, 9, 13, 24, 6, 44, 60, 34, 76, 68, 46, 33, 45, 54, 70, 61, 50, 35, 57, 60, 60, 72, 57, 56, 42, 66, 53, 64, 75, 75, 69, 78, 68, 67, 60, 65, 64, 86, 98, 92, 100, 117, 98, 87, 110, 89, 102, 99, 119, 133, 116, 126, 141, 128, 104, 104, 111, 110, 133, 137, 117, 101, 110, 110, 129, 134, 162, 153, 140, 159, 156, 139, 143, 174, 157, 150, 166, 151, 152, 156, 138, 160, 160, 180, 168, 160, 127, 141, 155, 109, 136, 134, 136, 124, 137, 123, 90, 101, 108, 96, 72, 102, 80, 79, 84, 62, 102, 99, 104, 94, 76, 94, 91, 71, 74, 74, 76, 75, 89, 65, 61, 79, 86, 86, 85, 80, 74, 63, 38, 52, 64, 33, 48, 75, 67, 71, 66, 59, 50, 67, 78, 50, 57, 74, 54, 55, 39, 29, 31, 22, 38, 36, 33, 18, 36, 25, 15, -19, -13, 1, -2, -24, 0, -15, -17, -33, -30, -38, -33, -27, -32, -41, -1, -30, 2, -41, -38, -5, -44, -21, -42, -25, -19, -40, -43, -53, -34, -35, -19, -29, -50, -45, -15, -7, -24, -30, -27, -20, -35, -30, -61, -52, -70, -82, -80, -81, -78, -28, -40, -32, -45, -65, -71, -88, -95, -87, -58, -55, -64, -50, -44, -61, -72, -69, -76, -42, -79, -76, -82, -68, -61, -65, -93, -103, -122, -104, -98, -109, -112, -93, -96, -85, -92, -106, -109, -105, -44, -75, -63, -119, -74, -45, -82, -54, -53, -45, -78, -75, -87, -64, -71, -72, -71, -74, -108, -65, -73, -68, -40, -58, -63, -49, -89, -95, -110, -117, -81, -96, -96, -110, -88, -93, -69, -83, -96, -87, -74, -56, -32, -17, -41, -63, -39, -38, -72, -82, -77, -85, -73, -54, -44, -22, -47, -28, -39, -32, -30, -49, -55, -49};
158:               
159:               struct clip_psv sine = {.size = SINRES, .blocks=SINRES/STREAMBUF, .playing=FALSE, .flash=FALSE, .block_index=0, .start_ptr=sintab, .read_ptr=sintab};
160:               
161:               struct clip_psv kick = {.size = 5552, .blocks=5552/STREAMBUF, .playing=FALSE, .flash=FALSE, .block_index=0, .start_ptr=kicksamp, .read_ptr=kicksamp};
162:               struct clip_psv snare = {.size = 6252, .blocks=6252/STREAMBUF, .playing=FALSE, .flash=FALSE, .block_index=0, .start_ptr=snaresamp, .read_ptr=snaresamp};
---  C:/Users/ryan/Documents/seniorproject/ps-040/screens.c  --------------------------------------------
1:                 /*
2:                  * File:   screens.c
3:                  * Author: ryan
4:                  *
5:                  * Created on January 28, 2018, 11:17 PM
6:                  */
7:                 
8:                 
9:                 #include <xc.h>
10:                #include "screens.h"
11:                #include "common.h"
12:                #include "plcd.h"
13:                #include "dsp.h"
14:                #include "flash.h"
15:                
16:                #include "sounds.h"
17:                
18:                extern unsigned int process_time;
19:                extern unsigned char btread;
20:                
21:                extern unsigned char    TxBufferA[FLASH_DMAXFER_BYTES]__attribute__((space(xmemory))), 
22:                                        RxBufferA[FLASH_DMAXFER_BYTES]__attribute__((space(xmemory)));
23:                extern fractional       RxBufferB[STREAMBUF] __attribute__((space(xmemory)));
24:                
25:                extern enum screenStruc state, laststate;
26:                extern enum fxStruct fxUnits[NUMFXUNITS];
27:                extern struct clip sine;
28:                extern struct ctrlsrfc ctrl;
29:                extern struct sflags stat;
30:                
31:                int fxLast=0, fxNow=0;
32:                
33:                void (*fxModPointers[NUMFX])(unsigned int, fractional, fractional, fractional) = {screenNoFXmod, screenLPFmod, screenTRMmod, screenLOPmod, screenBTCmod};
34:                
35:                void screenDebugAudio(){
36:                
37:                }
007556  060000     RETURN
38:                
39:                void screenDebugBuffers(){
40:                    if(state!=laststate){
007558  80B040     MOV laststate, W0
00755A  E31634     CP 0x1634
00755C  32001B     BRA Z, 0x7594
41:                        //setup here
42:                        lcdClearQ();
00755E  07FB7E     RCALL lcdClearQ
43:                        lcdSetCursorQ(0,0);
007560  EB4080     CLR.B W1
007562  784001     MOV.B W1, W0
007564  07FB86     RCALL lcdSetCursorQ
44:                        lcdWriteStringQ("Buffer Debug");
007566  2EBAF0     MOV #0xEBAF, W0
007568  07FB98     RCALL lcdWriteStringQ
45:                        lcdSetCursorQ(0,1);
00756A  B3C011     MOV.B #0x1, W1
00756C  EB4000     CLR.B W0
00756E  07FB81     RCALL lcdSetCursorQ
46:                        lcdWriteStringQ("FX time:");
007570  2EBBC0     MOV #0xEBBC, W0
007572  07FB93     RCALL lcdWriteStringQ
47:                        lcdSetCursorQ(11,1);
007574  B3C011     MOV.B #0x1, W1
007576  B3C0B0     MOV.B #0xB, W0
007578  07FB7C     RCALL lcdSetCursorQ
48:                        lcdWriteStringQ("/256");
00757A  2EBC50     MOV #0xEBC5, W0
00757C  07FB8E     RCALL lcdWriteStringQ
49:                        lcdSetCursorQ(0,2);
00757E  B3C021     MOV.B #0x2, W1
007580  EB4000     CLR.B W0
007582  07FB77     RCALL lcdSetCursorQ
50:                        lcdWriteStringQ("LCD:");
007584  2EBCA0     MOV #0xEBCA, W0
007586  07FB89     RCALL lcdWriteStringQ
51:                        lcdSetCursorQ(0,3);
007588  B3C031     MOV.B #0x3, W1
00758A  EB4000     CLR.B W0
00758C  07FB72     RCALL lcdSetCursorQ
52:                        lcdWriteStringQ("btRd:");
00758E  2EBCF0     MOV #0xEBCF, W0
007590  07FB84     RCALL lcdWriteStringQ
007592  37000B     BRA 0x75AA
53:                    } else {
54:                        //update here
55:                        lcdSetCursorQ(8,1);
007594  B3C011     MOV.B #0x1, W1
007596  B3C080     MOV.B #0x8, W0
007598  07FB6C     RCALL lcdSetCursorQ
56:                        lcdWriteDecimalQ(process_time,3);
00759A  200031     MOV #0x3, W1
00759C  BFD606     MOV.B process_time, WREG
00759E  07FC97     RCALL lcdWriteDecimalQ
57:                        lcdSetCursorQ(6,3);
0075A0  B3C031     MOV.B #0x3, W1
0075A2  B3C060     MOV.B #0x6, W0
0075A4  07FB66     RCALL lcdSetCursorQ
58:                        lcdWriteByteQ(btread);
0075A6  BFD60E     MOV.B btread, WREG
0075A8  07FC0D     RCALL lcdWriteByteQ
59:                        //lcdWriteDecimalQ();
60:                        //lcdSetCursorQ(6,3);
61:                        //lcdWriteDecimalQ();
62:                        
63:                    }
64:                }
0075AA  060000     RETURN
65:                
66:                void screenDebugPots(void){
0075AC  BE9F88     MOV.D W8, [W15++]
0075AE  BE9F8A     MOV.D W10, [W15++]
67:                    int bank=0;
0075EA  EB0480     CLR W9
68:                    
69:                    if(state!=laststate){
0075B0  80B040     MOV laststate, W0
0075B2  E31634     CP 0x1634
0075B4  320016     BRA Z, 0x75E2
70:                        // Setup here
71:                        lcdClearQ();
0075B6  07FB52     RCALL lcdClearQ
72:                        lcdSetCursorQ(0,0);
0075B8  EB4080     CLR.B W1
0075BA  784001     MOV.B W1, W0
0075BC  07FB5A     RCALL lcdSetCursorQ
73:                        lcdWriteStringQ("Potentiometer Debug");
0075BE  2EBD50     MOV #0xEBD5, W0
0075C0  07FB6C     RCALL lcdWriteStringQ
74:                        lcdSetCursorQ(9,1);
0075C2  B3C011     MOV.B #0x1, W1
0075C4  B3C090     MOV.B #0x9, W0
0075C6  07FB55     RCALL lcdSetCursorQ
75:                        lcdWriteStringQ("|");
0075C8  2EBE90     MOV #0xEBE9, W0
0075CA  07FB67     RCALL lcdWriteStringQ
76:                         lcdSetCursorQ(9,2);
0075CC  B3C021     MOV.B #0x2, W1
0075CE  B3C090     MOV.B #0x9, W0
0075D0  07FB50     RCALL lcdSetCursorQ
77:                        lcdWriteStringQ("|");
0075D2  2EBE90     MOV #0xEBE9, W0
0075D4  07FB62     RCALL lcdWriteStringQ
78:                         lcdSetCursorQ(9,3);
0075D6  B3C031     MOV.B #0x3, W1
0075D8  B3C090     MOV.B #0x9, W0
0075DA  07FB4B     RCALL lcdSetCursorQ
79:                        lcdWriteStringQ("|");
0075DC  2EBE90     MOV #0xEBE9, W0
0075DE  07FB5D     RCALL lcdWriteStringQ
0075E0  370089     BRA 0x76F4
80:                    } else {
81:                        // Update here
82:                        if(!ctrl.pad[34])bank=POTS/2;
0075E2  200069     MOV #0x6, W9
0075E4  216580     MOV #0x1658, W0
0075E6  E00410     CP0.B [W0]
0075E8  320001     BRA Z, 0x75EC
83:                        lcdSetCursorQ(0,1);
0075EC  B3C011     MOV.B #0x1, W1
0075EE  EB4000     CLR.B W0
0075F0  07FB40     RCALL lcdSetCursorQ
84:                        lcdWriteDecimalQ(ctrl.pots_scaled[bank], 3);
0075F2  B94D61     MUL.SU W9, #1, W10
0075F4  45007E     ADD W10, #0x1E, W0
0075F6  4D80E0     ADDC W11, #0x0, W1
0075F8  400000     ADD W0, W0, W0
0075FA  488081     ADDC W1, W1, W1
0075FC  216368     MOV #0x1636, W8
0075FE  440000     ADD W8, W0, W0
007600  780010     MOV [W0], W0
007602  200031     MOV #0x3, W1
007604  07FC64     RCALL lcdWriteDecimalQ
85:                        lcdWriteQ(',');
007606  B3C2C0     MOV.B #0x2C, W0
007608  07FB14     RCALL lcdWriteQ
86:                        lcdWriteWordUnsignedQ(ctrl.pots[bank++]);
00760A  E80489     INC W9, W9
00760C  450572     ADD W10, #0x12, W10
00760E  4D85E0     ADDC W11, #0x0, W11
007610  45050A     ADD W10, W10, W10
007612  4D858B     ADDC W11, W11, W11
007614  44050A     ADD W8, W10, W10
007616  78001A     MOV [W10], W0
007618  07FC00     RCALL lcdWriteWordUnsignedQ
87:                        lcdSetCursorQ(11,1);
00761A  B3C011     MOV.B #0x1, W1
00761C  B3C0B0     MOV.B #0xB, W0
00761E  07FB29     RCALL lcdSetCursorQ
88:                        lcdWriteDecimalQ(ctrl.pots_scaled[bank], 3);
007620  B94D61     MUL.SU W9, #1, W10
007622  45007E     ADD W10, #0x1E, W0
007624  4D80E0     ADDC W11, #0x0, W1
007626  400000     ADD W0, W0, W0
007628  488081     ADDC W1, W1, W1
00762A  440000     ADD W8, W0, W0
00762C  780010     MOV [W0], W0
00762E  200031     MOV #0x3, W1
007630  07FC4E     RCALL lcdWriteDecimalQ
89:                        lcdWriteQ(',');
007632  B3C2C0     MOV.B #0x2C, W0
007634  07FAFE     RCALL lcdWriteQ
90:                        lcdWriteWordUnsignedQ(ctrl.pots[bank++]);
007636  E80489     INC W9, W9
007638  450572     ADD W10, #0x12, W10
00763A  4D85E0     ADDC W11, #0x0, W11
00763C  45050A     ADD W10, W10, W10
00763E  4D858B     ADDC W11, W11, W11
007640  44050A     ADD W8, W10, W10
007642  78001A     MOV [W10], W0
007644  07FBEA     RCALL lcdWriteWordUnsignedQ
91:                        lcdSetCursorQ(0,2);
007646  B3C021     MOV.B #0x2, W1
007648  EB4000     CLR.B W0
00764A  07FB13     RCALL lcdSetCursorQ
92:                        lcdWriteDecimalQ(ctrl.pots_scaled[bank], 3);
00764C  B94D61     MUL.SU W9, #1, W10
00764E  45007E     ADD W10, #0x1E, W0
007650  4D80E0     ADDC W11, #0x0, W1
007652  400000     ADD W0, W0, W0
007654  488081     ADDC W1, W1, W1
007656  440000     ADD W8, W0, W0
007658  780010     MOV [W0], W0
00765A  200031     MOV #0x3, W1
00765C  07FC38     RCALL lcdWriteDecimalQ
93:                        lcdWriteQ(',');
00765E  B3C2C0     MOV.B #0x2C, W0
007660  07FAE8     RCALL lcdWriteQ
94:                        lcdWriteWordUnsignedQ(ctrl.pots[bank++]);
007662  E80489     INC W9, W9
007664  450572     ADD W10, #0x12, W10
007666  4D85E0     ADDC W11, #0x0, W11
007668  45050A     ADD W10, W10, W10
00766A  4D858B     ADDC W11, W11, W11
00766C  44050A     ADD W8, W10, W10
00766E  78001A     MOV [W10], W0
007670  07FBD4     RCALL lcdWriteWordUnsignedQ
95:                        lcdSetCursorQ(11,2);
007672  B3C021     MOV.B #0x2, W1
007674  B3C0B0     MOV.B #0xB, W0
007676  07FAFD     RCALL lcdSetCursorQ
96:                        lcdWriteDecimalQ(ctrl.pots_scaled[bank], 3);
007678  B94D61     MUL.SU W9, #1, W10
00767A  45007E     ADD W10, #0x1E, W0
00767C  4D80E0     ADDC W11, #0x0, W1
00767E  400000     ADD W0, W0, W0
007680  488081     ADDC W1, W1, W1
007682  440000     ADD W8, W0, W0
007684  780010     MOV [W0], W0
007686  200031     MOV #0x3, W1
007688  07FC22     RCALL lcdWriteDecimalQ
97:                        lcdWriteQ(',');
00768A  B3C2C0     MOV.B #0x2C, W0
00768C  07FAD2     RCALL lcdWriteQ
98:                        lcdWriteWordUnsignedQ(ctrl.pots[bank++]);
00768E  E80489     INC W9, W9
007690  450572     ADD W10, #0x12, W10
007692  4D85E0     ADDC W11, #0x0, W11
007694  45050A     ADD W10, W10, W10
007696  4D858B     ADDC W11, W11, W11
007698  44050A     ADD W8, W10, W10
00769A  78001A     MOV [W10], W0
00769C  07FBBE     RCALL lcdWriteWordUnsignedQ
99:                        lcdSetCursorQ(0,3);
00769E  B3C031     MOV.B #0x3, W1
0076A0  EB4000     CLR.B W0
0076A2  07FAE7     RCALL lcdSetCursorQ
100:                       lcdWriteDecimalQ(ctrl.pots_scaled[bank], 3);
0076A4  B94D61     MUL.SU W9, #1, W10
0076A6  45007E     ADD W10, #0x1E, W0
0076A8  4D80E0     ADDC W11, #0x0, W1
0076AA  400000     ADD W0, W0, W0
0076AC  488081     ADDC W1, W1, W1
0076AE  440000     ADD W8, W0, W0
0076B0  780010     MOV [W0], W0
0076B2  200031     MOV #0x3, W1
0076B4  07FC0C     RCALL lcdWriteDecimalQ
101:                       lcdWriteQ(',');
0076B6  B3C2C0     MOV.B #0x2C, W0
0076B8  07FABC     RCALL lcdWriteQ
102:                       lcdWriteWordUnsignedQ(ctrl.pots[bank++]);
0076BA  E80489     INC W9, W9
0076BC  450572     ADD W10, #0x12, W10
0076BE  4D85E0     ADDC W11, #0x0, W11
0076C0  45050A     ADD W10, W10, W10
0076C2  4D858B     ADDC W11, W11, W11
0076C4  44050A     ADD W8, W10, W10
0076C6  78001A     MOV [W10], W0
0076C8  07FBA8     RCALL lcdWriteWordUnsignedQ
103:                       lcdSetCursorQ(11,3);
0076CA  B3C031     MOV.B #0x3, W1
0076CC  B3C0B0     MOV.B #0xB, W0
0076CE  07FAD1     RCALL lcdSetCursorQ
104:                       lcdWriteDecimalQ(ctrl.pots_scaled[bank], 3);
0076D0  B94D61     MUL.SU W9, #1, W10
0076D2  45007E     ADD W10, #0x1E, W0
0076D4  4D80E0     ADDC W11, #0x0, W1
0076D6  400000     ADD W0, W0, W0
0076D8  488081     ADDC W1, W1, W1
0076DA  440000     ADD W8, W0, W0
0076DC  780010     MOV [W0], W0
0076DE  200031     MOV #0x3, W1
0076E0  07FBF6     RCALL lcdWriteDecimalQ
105:                       lcdWriteQ(',');
0076E2  B3C2C0     MOV.B #0x2C, W0
0076E4  07FAA6     RCALL lcdWriteQ
106:                       lcdWriteWordUnsignedQ(ctrl.pots[bank++]);
0076E6  450572     ADD W10, #0x12, W10
0076E8  4D85E0     ADDC W11, #0x0, W11
0076EA  45050A     ADD W10, W10, W10
0076EC  4D858B     ADDC W11, W11, W11
0076EE  44040A     ADD W8, W10, W8
0076F0  780018     MOV [W8], W0
0076F2  07FB93     RCALL lcdWriteWordUnsignedQ
107:                   }
108:               }
0076F4  BE054F     MOV.D [--W15], W10
0076F6  BE044F     MOV.D [--W15], W8
0076F8  060000     RETURN
109:               
110:               
111:               void screenDebugFlash(void){
112:                       if(state!=laststate){
0076FA  80B040     MOV laststate, W0
0076FC  E31634     CP 0x1634
0076FE  320056     BRA Z, 0x77AC
113:                       //setup here
114:                       lcdClearQ();
007700  07FAAD     RCALL lcdClearQ
115:                       lcdSetCursorQ(0,0);
007702  EB4080     CLR.B W1
007704  784001     MOV.B W1, W0
007706  07FAB5     RCALL lcdSetCursorQ
116:                       lcdWriteByteQ(RxBufferA[0]);
007708  212000     MOV #0x1200, W0
00770A  784010     MOV.B [W0], W0
00770C  07FB5B     RCALL lcdWriteByteQ
117:                        lcdSetCursorQ(3,0);
00770E  EB4080     CLR.B W1
007710  B3C030     MOV.B #0x3, W0
007712  07FAAF     RCALL lcdSetCursorQ
118:                       lcdWriteByteQ(RxBufferA[1]);
007714  212010     MOV #0x1201, W0
007716  784010     MOV.B [W0], W0
007718  07FB55     RCALL lcdWriteByteQ
119:                        lcdSetCursorQ(6,0);
00771A  EB4080     CLR.B W1
00771C  B3C060     MOV.B #0x6, W0
00771E  07FAA9     RCALL lcdSetCursorQ
120:                       lcdWriteByteQ(RxBufferA[2]);
007720  212020     MOV #0x1202, W0
007722  784010     MOV.B [W0], W0
007724  07FB4F     RCALL lcdWriteByteQ
121:                        lcdSetCursorQ(9,0);
007726  EB4080     CLR.B W1
007728  B3C090     MOV.B #0x9, W0
00772A  07FAA3     RCALL lcdSetCursorQ
122:                       lcdWriteByteQ(RxBufferA[3]);
00772C  212030     MOV #0x1203, W0
00772E  784010     MOV.B [W0], W0
007730  07FB49     RCALL lcdWriteByteQ
123:                       lcdSetCursorQ(12,0);
007732  EB4080     CLR.B W1
007734  B3C0C0     MOV.B #0xC, W0
007736  07FA9D     RCALL lcdSetCursorQ
124:                       lcdWriteByteQ(RxBufferA[4]);
007738  212040     MOV #0x1204, W0
00773A  784010     MOV.B [W0], W0
00773C  07FB43     RCALL lcdWriteByteQ
125:                       lcdSetCursorQ(15,0);
00773E  EB4080     CLR.B W1
007740  B3C0F0     MOV.B #0xF, W0
007742  07FA97     RCALL lcdSetCursorQ
126:                       lcdWriteByteQ(RxBufferA[5]);
007744  212050     MOV #0x1205, W0
007746  784010     MOV.B [W0], W0
007748  07FB3D     RCALL lcdWriteByteQ
127:                       lcdSetCursorQ(18,0);
00774A  EB4080     CLR.B W1
00774C  B3C120     MOV.B #0x12, W0
00774E  07FA91     RCALL lcdSetCursorQ
128:                       lcdWriteByteQ(RxBufferA[6]);
007750  212060     MOV #0x1206, W0
007752  784010     MOV.B [W0], W0
007754  07FB37     RCALL lcdWriteByteQ
129:                       lcdSetCursorQ(0,1);
007756  B3C011     MOV.B #0x1, W1
007758  EB4000     CLR.B W0
00775A  07FA8B     RCALL lcdSetCursorQ
130:                       lcdWriteByteQ(RxBufferA[7]);
00775C  212070     MOV #0x1207, W0
00775E  784010     MOV.B [W0], W0
007760  07FB31     RCALL lcdWriteByteQ
131:                        lcdSetCursorQ(3,1);
007762  B3C011     MOV.B #0x1, W1
007764  B3C030     MOV.B #0x3, W0
007766  07FA85     RCALL lcdSetCursorQ
132:                       lcdWriteByteQ(RxBufferA[8]);
007768  212080     MOV #0x1208, W0
00776A  784010     MOV.B [W0], W0
00776C  07FB2B     RCALL lcdWriteByteQ
133:                        lcdSetCursorQ(6,1);
00776E  B3C011     MOV.B #0x1, W1
007770  B3C060     MOV.B #0x6, W0
007772  07FA7F     RCALL lcdSetCursorQ
134:                       lcdWriteByteQ(RxBufferA[9]);
007774  212090     MOV #0x1209, W0
007776  784010     MOV.B [W0], W0
007778  07FB25     RCALL lcdWriteByteQ
135:                        lcdSetCursorQ(9,1);
00777A  B3C011     MOV.B #0x1, W1
00777C  B3C090     MOV.B #0x9, W0
00777E  07FA79     RCALL lcdSetCursorQ
136:                       lcdWriteByteQ(RxBufferA[10]);
007780  2120A0     MOV #0x120A, W0
007782  784010     MOV.B [W0], W0
007784  07FB1F     RCALL lcdWriteByteQ
137:                       lcdSetCursorQ(12,1);
007786  B3C011     MOV.B #0x1, W1
007788  B3C0C0     MOV.B #0xC, W0
00778A  07FA73     RCALL lcdSetCursorQ
138:                       lcdWriteByteQ(RxBufferA[11]);
00778C  2120B0     MOV #0x120B, W0
00778E  784010     MOV.B [W0], W0
007790  07FB19     RCALL lcdWriteByteQ
139:                       lcdSetCursorQ(15,1);
007792  B3C011     MOV.B #0x1, W1
007794  B3C0F0     MOV.B #0xF, W0
007796  07FA6D     RCALL lcdSetCursorQ
140:                       lcdWriteByteQ(RxBufferA[12]);
007798  2120C0     MOV #0x120C, W0
00779A  784010     MOV.B [W0], W0
00779C  07FB13     RCALL lcdWriteByteQ
141:                       lcdSetCursorQ(18,1);
00779E  B3C011     MOV.B #0x1, W1
0077A0  B3C120     MOV.B #0x12, W0
0077A2  07FA67     RCALL lcdSetCursorQ
142:                       lcdWriteByteQ(RxBufferA[13]);
0077A4  2120D0     MOV #0x120D, W0
0077A6  784010     MOV.B [W0], W0
0077A8  07FB0D     RCALL lcdWriteByteQ
0077AA  37005D     BRA 0x7866
143:                   } else {
144:                       //update here
145:                       lcdSetCursorQ(0,0);
0077AC  EB4080     CLR.B W1
0077AE  784001     MOV.B W1, W0
0077B0  07FA60     RCALL lcdSetCursorQ
146:                       lcdWriteByteQ(RxBufferA[0]);
0077B2  212000     MOV #0x1200, W0
0077B4  784010     MOV.B [W0], W0
0077B6  07FB06     RCALL lcdWriteByteQ
147:                        lcdSetCursorQ(3,0);
0077B8  EB4080     CLR.B W1
0077BA  B3C030     MOV.B #0x3, W0
0077BC  07FA5A     RCALL lcdSetCursorQ
148:                       lcdWriteByteQ(RxBufferA[1]);
0077BE  212010     MOV #0x1201, W0
0077C0  784010     MOV.B [W0], W0
0077C2  07FB00     RCALL lcdWriteByteQ
149:                        lcdSetCursorQ(6,0);
0077C4  EB4080     CLR.B W1
0077C6  B3C060     MOV.B #0x6, W0
0077C8  07FA54     RCALL lcdSetCursorQ
150:                       lcdWriteByteQ(RxBufferA[2]);
0077CA  212020     MOV #0x1202, W0
0077CC  784010     MOV.B [W0], W0
0077CE  07FAFA     RCALL lcdWriteByteQ
151:                        lcdSetCursorQ(9,0);
0077D0  EB4080     CLR.B W1
0077D2  B3C090     MOV.B #0x9, W0
0077D4  07FA4E     RCALL lcdSetCursorQ
152:                       lcdWriteByteQ(RxBufferA[3]);
0077D6  212030     MOV #0x1203, W0
0077D8  784010     MOV.B [W0], W0
0077DA  07FAF4     RCALL lcdWriteByteQ
153:                       lcdSetCursorQ(12,0);
0077DC  EB4080     CLR.B W1
0077DE  B3C0C0     MOV.B #0xC, W0
0077E0  07FA48     RCALL lcdSetCursorQ
154:                       lcdWriteByteQ(RxBufferA[4]);
0077E2  212040     MOV #0x1204, W0
0077E4  784010     MOV.B [W0], W0
0077E6  07FAEE     RCALL lcdWriteByteQ
155:                       lcdSetCursorQ(15,0);
0077E8  EB4080     CLR.B W1
0077EA  B3C0F0     MOV.B #0xF, W0
0077EC  07FA42     RCALL lcdSetCursorQ
156:                       lcdWriteByteQ(RxBufferA[5]);
0077EE  212050     MOV #0x1205, W0
0077F0  784010     MOV.B [W0], W0
0077F2  07FAE8     RCALL lcdWriteByteQ
157:                       lcdSetCursorQ(18,0);
0077F4  EB4080     CLR.B W1
0077F6  B3C120     MOV.B #0x12, W0
0077F8  07FA3C     RCALL lcdSetCursorQ
158:                       lcdWriteByteQ(RxBufferA[6]);
0077FA  212060     MOV #0x1206, W0
0077FC  784010     MOV.B [W0], W0
0077FE  07FAE2     RCALL lcdWriteByteQ
159:                       lcdSetCursorQ(0,1);
007800  B3C011     MOV.B #0x1, W1
007802  EB4000     CLR.B W0
007804  07FA36     RCALL lcdSetCursorQ
160:                       lcdWriteByteQ(RxBufferA[7]);
007806  212070     MOV #0x1207, W0
007808  784010     MOV.B [W0], W0
00780A  07FADC     RCALL lcdWriteByteQ
161:                        lcdSetCursorQ(3,1);
00780C  B3C011     MOV.B #0x1, W1
00780E  B3C030     MOV.B #0x3, W0
007810  07FA30     RCALL lcdSetCursorQ
162:                       lcdWriteByteQ(RxBufferA[8]);
007812  212080     MOV #0x1208, W0
007814  784010     MOV.B [W0], W0
007816  07FAD6     RCALL lcdWriteByteQ
163:                        lcdSetCursorQ(6,1);
007818  B3C011     MOV.B #0x1, W1
00781A  B3C060     MOV.B #0x6, W0
00781C  07FA2A     RCALL lcdSetCursorQ
164:                       lcdWriteByteQ(RxBufferA[9]);
00781E  212090     MOV #0x1209, W0
007820  784010     MOV.B [W0], W0
007822  07FAD0     RCALL lcdWriteByteQ
165:                        lcdSetCursorQ(9,1);
007824  B3C011     MOV.B #0x1, W1
007826  B3C090     MOV.B #0x9, W0
007828  07FA24     RCALL lcdSetCursorQ
166:                       lcdWriteByteQ(RxBufferA[10]);
00782A  2120A0     MOV #0x120A, W0
00782C  784010     MOV.B [W0], W0
00782E  07FACA     RCALL lcdWriteByteQ
167:                       lcdSetCursorQ(12,1);
007830  B3C011     MOV.B #0x1, W1
007832  B3C0C0     MOV.B #0xC, W0
007834  07FA1E     RCALL lcdSetCursorQ
168:                       lcdWriteByteQ(RxBufferA[11]);
007836  2120B0     MOV #0x120B, W0
007838  784010     MOV.B [W0], W0
00783A  07FAC4     RCALL lcdWriteByteQ
169:                       lcdSetCursorQ(15,1);
00783C  B3C011     MOV.B #0x1, W1
00783E  B3C0F0     MOV.B #0xF, W0
007840  07FA18     RCALL lcdSetCursorQ
170:                       lcdWriteByteQ(RxBufferA[12]);
007842  2120C0     MOV #0x120C, W0
007844  784010     MOV.B [W0], W0
007846  07FABE     RCALL lcdWriteByteQ
171:                       lcdSetCursorQ(18,1);
007848  B3C011     MOV.B #0x1, W1
00784A  B3C120     MOV.B #0x12, W0
00784C  07FA12     RCALL lcdSetCursorQ
172:                       lcdWriteByteQ(RxBufferA[13]);
00784E  2120D0     MOV #0x120D, W0
007850  784010     MOV.B [W0], W0
007852  07FAB8     RCALL lcdWriteByteQ
173:               
174:                       lcdSetCursorQ(9,3);
007854  B3C031     MOV.B #0x3, W1
007856  B3C090     MOV.B #0x9, W0
007858  07FA0C     RCALL lcdSetCursorQ
175:                       lcdWriteStringQ("Stat:");
00785A  2EBEB0     MOV #0xEBEB, W0
00785C  07FA1E     RCALL lcdWriteStringQ
176:                       lcdWriteWordQ(flashStatusCheck(FLASH_RDSR1));
00785E  B3C050     MOV.B #0x5, W0
007860  070668     RCALL flashStatusCheck
007862  FB0000     SE W0, W0
007864  07FA3D     RCALL lcdWriteWordQ
177:                       //lcdWriteWordQ(flashStatusCheck(FLASH_BRRD));
178:                   }
179:               }
007866  060000     RETURN
180:               
181:               void screenDebugInput(void){
182:                   if(state!=laststate){
007868  80B040     MOV laststate, W0
00786A  E31634     CP 0x1634
00786C  320016     BRA Z, 0x789A
183:                       //setup here
184:                       lcdClearQ();
00786E  07F9F6     RCALL lcdClearQ
185:                       lcdSetCursorQ(0,0);
007870  EB4080     CLR.B W1
007872  784001     MOV.B W1, W0
007874  07F9FE     RCALL lcdSetCursorQ
186:                       lcdWriteStringQ("Input Debug");
007876  2EBF10     MOV #0xEBF1, W0
007878  07FA10     RCALL lcdWriteStringQ
187:                       lcdSetCursorQ(0,1);
00787A  B3C011     MOV.B #0x1, W1
00787C  EB4000     CLR.B W0
00787E  07F9F9     RCALL lcdSetCursorQ
188:                       lcdWriteStringQ("Size:");
007880  2EBFD0     MOV #0xEBFD, W0
007882  07FA0B     RCALL lcdWriteStringQ
189:                       lcdSetCursorQ(0,2);
007884  B3C021     MOV.B #0x2, W1
007886  EB4000     CLR.B W0
007888  07F9F4     RCALL lcdSetCursorQ
190:                       lcdWriteStringQ("Playing:");
00788A  2EC030     MOV #0xEC03, W0
00788C  07FA06     RCALL lcdWriteStringQ
191:                       lcdSetCursorQ(0,3);
00788E  B3C031     MOV.B #0x3, W1
007890  EB4000     CLR.B W0
007892  07F9EF     RCALL lcdSetCursorQ
192:                       lcdWriteStringQ("Blocks:");
007894  2EC0C0     MOV #0xEC0C, W0
007896  07FA01     RCALL lcdWriteStringQ
007898  370013     BRA 0x78C0
193:                   } else {
194:                       //update here
195:                       lcdSetCursorQ(5,1);
00789A  B3C011     MOV.B #0x1, W1
00789C  B3C050     MOV.B #0x5, W0
00789E  07F9E9     RCALL lcdSetCursorQ
196:                       lcdWriteWordUnsignedQ(sine.size);
0078A0  811520     MOV 0x22A4, W0
0078A2  07FABB     RCALL lcdWriteWordUnsignedQ
197:                       lcdSetCursorQ(8,2);
0078A4  B3C021     MOV.B #0x2, W1
0078A6  B3C080     MOV.B #0x8, W0
0078A8  07F9E4     RCALL lcdSetCursorQ
198:                       lcdWriteWordUnsignedQ(sine.playing);
0078AA  222A80     MOV #0x22A8, W0
0078AC  FB8010     ZE [W0], W0
0078AE  07FAB5     RCALL lcdWriteWordUnsignedQ
199:                       lcdSetCursorQ(7,3);
0078B0  B3C031     MOV.B #0x3, W1
0078B2  B3C070     MOV.B #0x7, W0
0078B4  07F9DE     RCALL lcdSetCursorQ
200:                       lcdWriteDecimalQ(sine.block_index, 3);
0078B6  200031     MOV #0x3, W1
0078B8  811550     MOV 0x22AA, W0
0078BA  07FB09     RCALL lcdWriteDecimalQ
201:                       
202:                       lcdDrawPads(16);
0078BC  B3C100     MOV.B #0x10, W0
0078BE  07FB39     RCALL lcdDrawPads
203:                   }
204:               }
0078C0  060000     RETURN
205:               
206:               void screenNoFXmod(unsigned int col, fractional param1, fractional param2, fractional param3){
00732E  781F88     MOV W8, [W15++]
007330  780400     MOV W0, W8
207:                       if(fxNow!=fxLast || state!=laststate){
007332  80B180     MOV fxLast, W0
007334  E31632     CP fxNow
007336  3A0003     BRA NZ, 0x733E
007338  80B040     MOV laststate, W0
00733A  E31634     CP 0x1634
00733C  320015     BRA Z, 0x7368
208:                       // Setup here
209:                           
210:                       lcdSetCursorQ(col+5,0);
00733E  444065     ADD.B W8, #0x5, W0
007340  EB4080     CLR.B W1
007342  07FC97     RCALL lcdSetCursorQ
211:                       lcdWriteStringQ("OFF");
007344  2EB760     MOV #0xEB76, W0
007346  07FCA9     RCALL lcdWriteStringQ
212:                       lcdSetCursorQ(col,1);
007348  B3C011     MOV.B #0x1, W1
00734A  784008     MOV.B W8, W0
00734C  07FC92     RCALL lcdSetCursorQ
213:                       lcdWriteStringQ("        ");
00734E  2EB7A0     MOV #0xEB7A, W0
007350  07FCA4     RCALL lcdWriteStringQ
214:                       lcdSetCursorQ(col,2);
007352  B3C021     MOV.B #0x2, W1
007354  784008     MOV.B W8, W0
007356  07FC8D     RCALL lcdSetCursorQ
215:                       lcdWriteStringQ("        ");
007358  2EB7A0     MOV #0xEB7A, W0
00735A  07FC9F     RCALL lcdWriteStringQ
216:                       lcdSetCursorQ(col,3);
00735C  B3C031     MOV.B #0x3, W1
00735E  784008     MOV.B W8, W0
007360  07FC88     RCALL lcdSetCursorQ
217:                       lcdWriteStringQ("        ");
007362  2EB7A0     MOV #0xEB7A, W0
007364  07FC9A     RCALL lcdWriteStringQ
007366  370005     BRA 0x7372
218:               
219:                   } else {
220:                       // Update here
221:                       lcdSetCursorQ(col+5,0);
007368  444065     ADD.B W8, #0x5, W0
00736A  EB4080     CLR.B W1
00736C  07FC82     RCALL lcdSetCursorQ
222:                       lcdWriteStringQ("OFF");
00736E  2EB760     MOV #0xEB76, W0
007370  07FC94     RCALL lcdWriteStringQ
223:                   }
224:               }
007372  78044F     MOV [--W15], W8
007374  060000     RETURN
225:               
226:               void screenLPFmod(unsigned int col, fractional param1, fractional param2, fractional param3){
0074DE  BE9F88     MOV.D W8, [W15++]
0074E0  BE9F8A     MOV.D W10, [W15++]
0074E2  780400     MOV W0, W8
0074E4  780501     MOV W1, W10
0074E6  780582     MOV W2, W11
0074E8  780483     MOV W3, W9
227:                   if(fxNow!=fxLast || state!=laststate){
0074EA  80B180     MOV fxLast, W0
0074EC  E31632     CP fxNow
0074EE  3A0003     BRA NZ, 0x74F6
0074F0  80B040     MOV laststate, W0
0074F2  E31634     CP 0x1634
0074F4  320015     BRA Z, 0x7520
228:                       // Setup here
229:                       lcdSetCursorQ(col+5,0);
0074F6  444065     ADD.B W8, #0x5, W0
0074F8  EB4080     CLR.B W1
0074FA  07FBBB     RCALL lcdSetCursorQ
230:                       lcdWriteStringQ("LPF");
0074FC  2EBA70     MOV #0xEBA7, W0
0074FE  07FBCD     RCALL lcdWriteStringQ
231:                       lcdSetCursorQ(col,1);
007500  B3C011     MOV.B #0x1, W1
007502  784008     MOV.B W8, W0
007504  07FBB6     RCALL lcdSetCursorQ
232:                       lcdWriteStringQ("frq");
007506  2EBAB0     MOV #0xEBAB, W0
007508  07FBC8     RCALL lcdWriteStringQ
233:                       lcdSetCursorQ(col,2);
00750A  B3C021     MOV.B #0x2, W1
00750C  784008     MOV.B W8, W0
00750E  07FBB1     RCALL lcdSetCursorQ
234:                       lcdWriteStringQ("d/w");
007510  2EB8B0     MOV #0xEB8B, W0
007512  07FBC3     RCALL lcdWriteStringQ
235:                       lcdSetCursorQ(col,3);
007514  B3C031     MOV.B #0x3, W1
007516  784008     MOV.B W8, W0
007518  07FBAC     RCALL lcdSetCursorQ
236:                       lcdWriteStringQ("pwr");
00751A  2EB8F0     MOV #0xEB8F, W0
00751C  07FBBE     RCALL lcdWriteStringQ
00751E  370018     BRA 0x7550
237:                   } else {
238:                       // Update here
239:                       lcdSetCursorQ(col+5,1);
007520  444465     ADD.B W8, #0x5, W8
007522  B3C011     MOV.B #0x1, W1
007524  784008     MOV.B W8, W0
007526  07FBA5     RCALL lcdSetCursorQ
240:                       lcdWriteDecimalQ(param1, 3);
007528  200031     MOV #0x3, W1
00752A  78400A     MOV.B W10, W0
00752C  07FCD0     RCALL lcdWriteDecimalQ
241:                       lcdSetCursorQ(col+5,2);
00752E  B3C021     MOV.B #0x2, W1
007530  784008     MOV.B W8, W0
007532  07FB9F     RCALL lcdSetCursorQ
242:                       lcdWriteDecimalQ(param2, 3);
007534  200031     MOV #0x3, W1
007536  78400B     MOV.B W11, W0
007538  07FCCA     RCALL lcdWriteDecimalQ
243:                       lcdSetCursorQ(col+5,3);
00753A  B3C031     MOV.B #0x3, W1
00753C  784008     MOV.B W8, W0
00753E  07FB99     RCALL lcdSetCursorQ
244:                       if(param3>=50)
007540  200310     MOV #0x31, W0
007542  548F80     SUB W9, W0, [W15]
007544  340003     BRA LE, 0x754C
245:                           lcdWriteStringQ(" ON");
007546  2EB930     MOV #0xEB93, W0
007548  07FBA8     RCALL lcdWriteStringQ
00754A  370002     BRA 0x7550
246:                       else lcdWriteStringQ("OFF");
00754C  2EB760     MOV #0xEB76, W0
00754E  07FBA5     RCALL lcdWriteStringQ
247:                   }
248:               }
007550  BE054F     MOV.D [--W15], W10
007552  BE044F     MOV.D [--W15], W8
007554  060000     RETURN
249:               
250:               void screenTRMmod(unsigned int col, fractional param1, fractional param2, fractional param3){
007466  BE9F88     MOV.D W8, [W15++]
007468  BE9F8A     MOV.D W10, [W15++]
00746A  780400     MOV W0, W8
00746C  780501     MOV W1, W10
00746E  780582     MOV W2, W11
007470  780483     MOV W3, W9
251:                   if(fxNow!=fxLast || state!=laststate){
007472  80B180     MOV fxLast, W0
007474  E31632     CP fxNow
007476  3A0003     BRA NZ, 0x747E
007478  80B040     MOV laststate, W0
00747A  E31634     CP 0x1634
00747C  320015     BRA Z, 0x74A8
252:                       // Setup here
253:                       lcdSetCursorQ(col+5,0);
00747E  444065     ADD.B W8, #0x5, W0
007480  EB4080     CLR.B W1
007482  07FBF7     RCALL lcdSetCursorQ
254:                       lcdWriteStringQ("TRM");
007484  2EB9B0     MOV #0xEB9B, W0
007486  07FC09     RCALL lcdWriteStringQ
255:                       lcdSetCursorQ(col,1);
007488  B3C011     MOV.B #0x1, W1
00748A  784008     MOV.B W8, W0
00748C  07FBF2     RCALL lcdSetCursorQ
256:                       lcdWriteStringQ("rat");
00748E  2EB9F0     MOV #0xEB9F, W0
007490  07FC04     RCALL lcdWriteStringQ
257:                       lcdSetCursorQ(col,2);
007492  B3C021     MOV.B #0x2, W1
007494  784008     MOV.B W8, W0
007496  07FBED     RCALL lcdSetCursorQ
258:                       lcdWriteStringQ("dep");
007498  2EBA30     MOV #0xEBA3, W0
00749A  07FBFF     RCALL lcdWriteStringQ
259:                       lcdSetCursorQ(col,3);
00749C  B3C031     MOV.B #0x3, W1
00749E  784008     MOV.B W8, W0
0074A0  07FBE8     RCALL lcdSetCursorQ
260:                       lcdWriteStringQ("pwr");
0074A2  2EB8F0     MOV #0xEB8F, W0
0074A4  07FBFA     RCALL lcdWriteStringQ
0074A6  370018     BRA 0x74D8
261:                   } else {
262:                       // Update here
263:                       lcdSetCursorQ(col+5,1);
0074A8  444465     ADD.B W8, #0x5, W8
0074AA  B3C011     MOV.B #0x1, W1
0074AC  784008     MOV.B W8, W0
0074AE  07FBE1     RCALL lcdSetCursorQ
264:                       lcdWriteDecimalQ(param1, 3);
0074B0  200031     MOV #0x3, W1
0074B2  78400A     MOV.B W10, W0
0074B4  07FD0C     RCALL lcdWriteDecimalQ
265:                       lcdSetCursorQ(col+5,2);
0074B6  B3C021     MOV.B #0x2, W1
0074B8  784008     MOV.B W8, W0
0074BA  07FBDB     RCALL lcdSetCursorQ
266:                       lcdWriteDecimalQ(param2, 3);
0074BC  200031     MOV #0x3, W1
0074BE  78400B     MOV.B W11, W0
0074C0  07FD06     RCALL lcdWriteDecimalQ
267:                       lcdSetCursorQ(col+5,3);
0074C2  B3C031     MOV.B #0x3, W1
0074C4  784008     MOV.B W8, W0
0074C6  07FBD5     RCALL lcdSetCursorQ
268:                       if(param3>=50)
0074C8  200310     MOV #0x31, W0
0074CA  548F80     SUB W9, W0, [W15]
0074CC  340003     BRA LE, 0x74D4
269:                           lcdWriteStringQ(" ON");
0074CE  2EB930     MOV #0xEB93, W0
0074D0  07FBE4     RCALL lcdWriteStringQ
0074D2  370002     BRA 0x74D8
270:                       else lcdWriteStringQ("OFF");
0074D4  2EB760     MOV #0xEB76, W0
0074D6  07FBE1     RCALL lcdWriteStringQ
271:                   }
272:               }
0074D8  BE054F     MOV.D [--W15], W10
0074DA  BE044F     MOV.D [--W15], W8
0074DC  060000     RETURN
273:               
274:               void screenLOPmod(unsigned int col, fractional param1, fractional param2, fractional param3){
0073EE  BE9F88     MOV.D W8, [W15++]
0073F0  BE9F8A     MOV.D W10, [W15++]
0073F2  780400     MOV W0, W8
0073F4  780501     MOV W1, W10
0073F6  780582     MOV W2, W11
0073F8  780483     MOV W3, W9
275:                   if(fxNow!=fxLast || state!=laststate){
0073FA  80B180     MOV fxLast, W0
0073FC  E31632     CP fxNow
0073FE  3A0003     BRA NZ, 0x7406
007400  80B040     MOV laststate, W0
007402  E31634     CP 0x1634
007404  320015     BRA Z, 0x7430
276:                       // Setup here
277:                       lcdSetCursorQ(col+5,0);
007406  444065     ADD.B W8, #0x5, W0
007408  EB4080     CLR.B W1
00740A  07FC33     RCALL lcdSetCursorQ
278:                       lcdWriteStringQ("LOP");
00740C  2EB970     MOV #0xEB97, W0
00740E  07FC45     RCALL lcdWriteStringQ
279:                       lcdSetCursorQ(col,1);
007410  B3C011     MOV.B #0x1, W1
007412  784008     MOV.B W8, W0
007414  07FC2E     RCALL lcdSetCursorQ
280:                       lcdWriteStringQ("siz");
007416  2EB870     MOV #0xEB87, W0
007418  07FC40     RCALL lcdWriteStringQ
281:                       lcdSetCursorQ(col,2);
00741A  B3C021     MOV.B #0x2, W1
00741C  784008     MOV.B W8, W0
00741E  07FC29     RCALL lcdSetCursorQ
282:                       lcdWriteStringQ("d/w");
007420  2EB8B0     MOV #0xEB8B, W0
007422  07FC3B     RCALL lcdWriteStringQ
283:                       lcdSetCursorQ(col,3);
007424  B3C031     MOV.B #0x3, W1
007426  784008     MOV.B W8, W0
007428  07FC24     RCALL lcdSetCursorQ
284:                       lcdWriteStringQ("pwr");
00742A  2EB8F0     MOV #0xEB8F, W0
00742C  07FC36     RCALL lcdWriteStringQ
00742E  370018     BRA 0x7460
285:                   } else {
286:                       // Update here
287:                       lcdSetCursorQ(col+5,1);
007430  444465     ADD.B W8, #0x5, W8
007432  B3C011     MOV.B #0x1, W1
007434  784008     MOV.B W8, W0
007436  07FC1D     RCALL lcdSetCursorQ
288:                       lcdWriteDecimalQ(param1, 3);
007438  200031     MOV #0x3, W1
00743A  78400A     MOV.B W10, W0
00743C  07FD48     RCALL lcdWriteDecimalQ
289:                       lcdSetCursorQ(col+5,2);
00743E  B3C021     MOV.B #0x2, W1
007440  784008     MOV.B W8, W0
007442  07FC17     RCALL lcdSetCursorQ
290:                       lcdWriteDecimalQ(param2, 3);
007444  200031     MOV #0x3, W1
007446  78400B     MOV.B W11, W0
007448  07FD42     RCALL lcdWriteDecimalQ
291:                       lcdSetCursorQ(col+5,3);
00744A  B3C031     MOV.B #0x3, W1
00744C  784008     MOV.B W8, W0
00744E  07FC11     RCALL lcdSetCursorQ
292:                       if(param3>=50)
007450  200310     MOV #0x31, W0
007452  548F80     SUB W9, W0, [W15]
007454  340003     BRA LE, 0x745C
293:                           lcdWriteStringQ(" ON");
007456  2EB930     MOV #0xEB93, W0
007458  07FC20     RCALL lcdWriteStringQ
00745A  370002     BRA 0x7460
294:                       else lcdWriteStringQ("OFF");
00745C  2EB760     MOV #0xEB76, W0
00745E  07FC1D     RCALL lcdWriteStringQ
295:                   }
296:               }
007460  BE054F     MOV.D [--W15], W10
007462  BE044F     MOV.D [--W15], W8
007464  060000     RETURN
297:               
298:               void screenBTCmod(unsigned int col, fractional param1, fractional param2, fractional param3){
007376  BE9F88     MOV.D W8, [W15++]
007378  BE9F8A     MOV.D W10, [W15++]
00737A  780400     MOV W0, W8
00737C  780501     MOV W1, W10
00737E  780582     MOV W2, W11
007380  780483     MOV W3, W9
299:                   if(fxNow!=fxLast || state!=laststate){
007382  80B180     MOV fxLast, W0
007384  E31632     CP fxNow
007386  3A0003     BRA NZ, 0x738E
007388  80B040     MOV laststate, W0
00738A  E31634     CP 0x1634
00738C  320015     BRA Z, 0x73B8
300:                       // Setup here
301:                       lcdSetCursorQ(col+5,0);
00738E  444065     ADD.B W8, #0x5, W0
007390  EB4080     CLR.B W1
007392  07FC6F     RCALL lcdSetCursorQ
302:                       lcdWriteStringQ("BIT");
007394  2EB830     MOV #0xEB83, W0
007396  07FC81     RCALL lcdWriteStringQ
303:                       lcdSetCursorQ(col,1);
007398  B3C011     MOV.B #0x1, W1
00739A  784008     MOV.B W8, W0
00739C  07FC6A     RCALL lcdSetCursorQ
304:                       lcdWriteStringQ("siz");
00739E  2EB870     MOV #0xEB87, W0
0073A0  07FC7C     RCALL lcdWriteStringQ
305:                       lcdSetCursorQ(col,2);
0073A2  B3C021     MOV.B #0x2, W1
0073A4  784008     MOV.B W8, W0
0073A6  07FC65     RCALL lcdSetCursorQ
306:                       lcdWriteStringQ("d/w");
0073A8  2EB8B0     MOV #0xEB8B, W0
0073AA  07FC77     RCALL lcdWriteStringQ
307:                       lcdSetCursorQ(col,3);
0073AC  B3C031     MOV.B #0x3, W1
0073AE  784008     MOV.B W8, W0
0073B0  07FC60     RCALL lcdSetCursorQ
308:                       lcdWriteStringQ("pwr");
0073B2  2EB8F0     MOV #0xEB8F, W0
0073B4  07FC72     RCALL lcdWriteStringQ
0073B6  370018     BRA 0x73E8
309:                   } else {
310:                       // Update here
311:                       lcdSetCursorQ(col+5,1);
0073B8  444465     ADD.B W8, #0x5, W8
0073BA  B3C011     MOV.B #0x1, W1
0073BC  784008     MOV.B W8, W0
0073BE  07FC59     RCALL lcdSetCursorQ
312:                       lcdWriteDecimalQ(param1, 3);
0073C0  200031     MOV #0x3, W1
0073C2  78400A     MOV.B W10, W0
0073C4  07FD84     RCALL lcdWriteDecimalQ
313:                       lcdSetCursorQ(col+5,2);
0073C6  B3C021     MOV.B #0x2, W1
0073C8  784008     MOV.B W8, W0
0073CA  07FC53     RCALL lcdSetCursorQ
314:                       lcdWriteDecimalQ(param2, 3);
0073CC  200031     MOV #0x3, W1
0073CE  78400B     MOV.B W11, W0
0073D0  07FD7E     RCALL lcdWriteDecimalQ
315:                       lcdSetCursorQ(col+5,3);
0073D2  B3C031     MOV.B #0x3, W1
0073D4  784008     MOV.B W8, W0
0073D6  07FC4D     RCALL lcdSetCursorQ
316:                       if(param3>=50)
0073D8  200310     MOV #0x31, W0
0073DA  548F80     SUB W9, W0, [W15]
0073DC  340003     BRA LE, 0x73E4
317:                           lcdWriteStringQ(" ON");
0073DE  2EB930     MOV #0xEB93, W0
0073E0  07FC5C     RCALL lcdWriteStringQ
0073E2  370002     BRA 0x73E8
318:                       else lcdWriteStringQ("OFF");
0073E4  2EB760     MOV #0xEB76, W0
0073E6  07FC59     RCALL lcdWriteStringQ
319:                   }
320:               }
0073E8  BE054F     MOV.D [--W15], W10
0073EA  BE044F     MOV.D [--W15], W8
0073EC  060000     RETURN
321:               
322:               void screenFX(void){
0078C2  781F88     MOV W8, [W15++]
323:                   if(state!=laststate){
0078C4  80B040     MOV laststate, W0
0078C6  E31634     CP 0x1634
0078C8  32001D     BRA Z, 0x7904
324:                       //setup here
325:                       lcdClearQ();
0078CA  07F9C8     RCALL lcdClearQ
326:                       lcdSetCursorQ(0,0);
0078CC  EB4080     CLR.B W1
0078CE  784001     MOV.B W1, W0
0078D0  07F9D0     RCALL lcdSetCursorQ
327:                       lcdWriteStringQ("Fx1:");
0078D2  2EC140     MOV #0xEC14, W0
0078D4  07F9E2     RCALL lcdWriteStringQ
328:                       lcdSetCursorQ(10,0);
0078D6  EB4080     CLR.B W1
0078D8  B3C0A0     MOV.B #0xA, W0
0078DA  07F9CB     RCALL lcdSetCursorQ
329:                       lcdWriteStringQ("Fx2:");
0078DC  2EC190     MOV #0xEC19, W0
0078DE  07F9DD     RCALL lcdWriteStringQ
330:                       fxModPointers[fxUnits[0]](0,  ctrl.pots_scaled[FX_1], ctrl.pots_scaled[FX_2], ctrl.pots_scaled[FX_3]);
0078E0  D4160A     SL fxUnits, WREG
0078E2  222FE8     MOV #0x22FE, W8
0078E4  400008     ADD W0, W8, W0
0078E6  780210     MOV [W0], W4
0078E8  80B3D3     MOV 0x167A, W3
0078EA  80B3B2     MOV 0x1676, W2
0078EC  80B391     MOV 0x1672, W1
0078EE  EB0000     CLR W0
0078F0  010004     CALL W4
331:                       fxModPointers[fxUnits[1]](10, ctrl.pots_scaled[FX_4], ctrl.pots_scaled[FX_5], ctrl.pots_scaled[FX_6]);
0078F2  D4160C     SL 0x160C, WREG
0078F4  400408     ADD W0, W8, W8
0078F6  780218     MOV [W8], W4
0078F8  80B3E3     MOV 0x167C, W3
0078FA  80B3C2     MOV 0x1678, W2
0078FC  80B3A1     MOV 0x1674, W1
0078FE  2000A0     MOV #0xA, W0
007900  010004     CALL W4
007902  370011     BRA 0x7926
332:                       
333:                   } else {
334:                       //update here 
335:                       fxModPointers[fxUnits[0]](0,  ctrl.pots_scaled[FX_1], ctrl.pots_scaled[FX_2], ctrl.pots_scaled[FX_3]);
007904  D4160A     SL fxUnits, WREG
007906  222FE8     MOV #0x22FE, W8
007908  400008     ADD W0, W8, W0
00790A  780210     MOV [W0], W4
00790C  80B3D3     MOV 0x167A, W3
00790E  80B3B2     MOV 0x1676, W2
007910  80B391     MOV 0x1672, W1
007912  EB0000     CLR W0
007914  010004     CALL W4
336:                       fxModPointers[fxUnits[1]](10, ctrl.pots_scaled[FX_4], ctrl.pots_scaled[FX_5], ctrl.pots_scaled[FX_6]);
007916  D4160C     SL 0x160C, WREG
007918  400408     ADD W0, W8, W8
00791A  780218     MOV [W8], W4
00791C  80B3E3     MOV 0x167C, W3
00791E  80B3C2     MOV 0x1678, W2
007920  80B3A1     MOV 0x1674, W1
007922  2000A0     MOV #0xA, W0
007924  010004     CALL W4
337:                   }
338:                        
339:               }
007926  78044F     MOV [--W15], W8
007928  060000     RETURN
340:               
341:               void screenSHIFT(void){
342:                   if(state!=laststate){
00792A  80B040     MOV laststate, W0
00792C  E31634     CP 0x1634
00792E  32000C     BRA Z, 0x7948
343:                       //setup here
344:                       lcdClearQ();
007930  07F995     RCALL lcdClearQ
345:                       lcdSetCursorQ(0,0);
007932  EB4080     CLR.B W1
007934  784001     MOV.B W1, W0
007936  07F99D     RCALL lcdSetCursorQ
346:                       lcdWriteStringQ("SHIFT");
007938  2EC1E0     MOV #0xEC1E, W0
00793A  07F9AF     RCALL lcdWriteStringQ
347:                       lcdSetCursorQ(0,1);
00793C  B3C011     MOV.B #0x1, W1
00793E  EB4000     CLR.B W0
007940  07F998     RCALL lcdSetCursorQ
348:                       lcdWriteStringQ("Volume: ");
007942  2EC240     MOV #0xEC24, W0
007944  07F9AA     RCALL lcdWriteStringQ
007946  370006     BRA 0x7954
349:                   } else {
350:                       //update here 
351:                       lcdSetCursorQ(8,1);
007948  B3C011     MOV.B #0x1, W1
00794A  B3C080     MOV.B #0x8, W0
00794C  07F992     RCALL lcdSetCursorQ
352:                       lcdWriteDecimalQ(ctrl.pots_scaled[POT_VOLUME], 3);
00794E  200031     MOV #0x3, W1
007950  80B400     MOV 0x1680, W0
007952  07FABD     RCALL lcdWriteDecimalQ
353:                   }
354:               }
007954  060000     RETURN
355:               
356:               void screenUpdate(void){
357:                   fxNow=fxUnits[0]+fxUnits[1];
007956  80B050     MOV fxUnits, W0
007958  B4160C     ADD 0x160C, WREG
00795A  88B190     MOV W0, fxNow
358:                   
359:                   switch(state){
00795C  80B1A0     MOV 0x1634, W0
00795E  500FE3     SUB W0, #0x3, [W15]
007960  320010     BRA Z, 0x7982
007962  3E0005     BRA GTU, 0x796E
007964  500FE1     SUB W0, #0x1, [W15]
007966  320009     BRA Z, 0x797A
007968  500FE2     SUB W0, #0x2, [W15]
00796A  3A0012     BRA NZ, 0x7990
00796C  370008     BRA 0x797E
00796E  500FE5     SUB W0, #0x5, [W15]
007970  32000C     BRA Z, 0x798A
007972  390009     BRA NC, 0x7986
007974  500FE6     SUB W0, #0x6, [W15]
007976  3A000C     BRA NZ, 0x7990
007978  37000A     BRA 0x798E
360:                       case start: break;
361:                       case scrnFX:            screenFX(); 
00797A  07FFA3     RCALL screenFX
362:                       break;
00797C  370009     BRA 0x7990
363:                       case scrnSHIFT:         screenSHIFT();
00797E  07FFD5     RCALL screenSHIFT
364:                       break;
007980  370007     BRA 0x7990
365:                       case debugscrnPOTS:     screenDebugPots();
007982  07FE14     RCALL screenDebugPots
366:                       break;
007984  370005     BRA 0x7990
367:                       case debugscrnFLASH:    screenDebugFlash();
007986  07FEB9     RCALL screenDebugFlash
368:                       break;
007988  370003     BRA 0x7990
369:                       case debugscrnBUFFERS:  screenDebugBuffers();
00798A  07FDE6     RCALL screenDebugBuffers
370:                       break;
00798C  370001     BRA 0x7990
371:                       case debugscrnINPUT:    screenDebugInput();
00798E  07FF6C     RCALL screenDebugInput
372:                       break;
373:                                       
374:                       default: break;
375:                   }
376:                   
377:                   laststate=state;
007990  F81634     PUSH 0x1634
007992  F91608     POP laststate
378:                   fxLast=fxUnits[0]+fxUnits[1];
007994  80B050     MOV fxUnits, W0
007996  B4160C     ADD 0x160C, WREG
007998  88B180     MOV W0, fxLast
379:               }
00799A  060000     RETURN
380:                   /*
381:                   lcdSetCursorQ(0,3);
382:                   if(hard_clipped==TRUE){                                                     //CLIP CONTROL    
383:                       lcdWriteStringQ("CLIP");
384:                       hard_clipped=FALSE;  
385:                   }
386:                   else if(TEST_SIN==TRUE)lcdWriteStringQ("SINE");
387:                   else lcdWriteStringQ("THRU");
388:                    * 
389:                    *    lcdSetCursorQ(10,3);
390:                  lcdWriteWordQ(ENCODERCNTL);
391:                   */
392:               
393:               
---  C:/Users/ryan/Documents/seniorproject/ps-040/routines.c  -------------------------------------------
1:                 #include <xc.h>
2:                 #include <p33EP512GM310.h>
3:                 #include <dsp.h>
4:                 #include "common.h"
5:                 #include "routines.h"
6:                 
7:                 extern fractional   outputA[STREAMBUF], outputB[STREAMBUF],
8:                                     streamA[STREAMBUF], streamB[STREAMBUF];
9:                 extern unsigned int write_ptr, rw, frameReady;
10:                
11:                extern unsigned char    TxBufferA[FLASH_DMAXFER_BYTES]__attribute__((space(xmemory))), 
12:                                        RxBufferA[FLASH_DMAXFER_BYTES]__attribute__((space(xmemory)));
13:                
14:                extern struct sflags stat;
15:                
16:                extern unsigned char btread;
17:                
18:                //Description: This interrupt triggers at the completion of DCI output
19:                //Dependancies: initSPI2(); 
20:                void __attribute__ ((interrupt, auto_psv)) _DCIInterrupt(void){
00031E  BE9F80     MOV.D W0, [W15++]
000320  BE9F82     MOV.D W2, [W15++]
000322  BE9F84     MOV.D W4, [W15++]
000324  F80032     PUSH DSRPAG
000326  F80034     PUSH DSWPAG
000328  200010     MOV #0x1, W0
00032A  8801A0     MOV W0, DSWPAG
00032C  202000     MOV #0x200, W0
00032E  880190     MOV W0, DSRPAG
000330  000000     NOP
000332  FA0004     LNK #0x4
21:                    static fractional sampoutA=0, sampoutB=0;
22:                    fractional sampinA=0, sampinB=0;
23:                    
24:                    int trashA=RXBUF0;
000334  801480     MOV RXBUF0, W0
25:                    sampinA=RXBUF1;
000336  801490     MOV RXBUF1, W0
000338  9FBFE0     MOV W0, [W15-4]
26:                    int trashB=RXBUF2;
00033A  8014A0     MOV RXBUF2, W0
27:                    sampinB=RXBUF3;
00033C  8014B5     MOV RXBUF3, W5
00033E  9FBFF5     MOV W5, [W15-2]
28:                    TXBUF0=TXBUF1=sampoutA;                                    //output buffered sample to DAC
000340  F81626     PUSH sampoutA
000342  F9029A     POP TXBUF1
000344  F8029A     PUSH TXBUF1
000346  F90298     POP TXBUF0
29:                    TXBUF2=TXBUF3=sampoutB;
000348  F81624     PUSH sampoutB
00034A  F9029E     POP TXBUF3
00034C  F8029E     PUSH TXBUF3
00034E  F9029C     POP TXBUF2
30:                
31:                    __builtin_btg(&sampinA, 15);                             //convert to Q1.15 compatible format
000350  97B86F     MOV [W15-4], W0
000352  A2F000     BTG W0, #15
000354  9FBFE0     MOV W0, [W15-4]
32:                    __builtin_btg(&sampinB, 15);                             //convert to Q1.15 compatible format
000356  A2F005     BTG W5, #15
000358  9FBFF5     MOV W5, [W15-2]
33:                    
34:                    if(write_ptr== STREAMBUF){                       //reset pointer when out of bounds
00035A  201000     MOV #0x100, W0
00035C  E31600     CP write_ptr
00035E  3A0004     BRA NZ, 0x368
35:                        write_ptr=0;
000360  EF3600     CLR write_ptr
36:                        __builtin_btg(&rw,0);
000362  AA1602     BTG rw, #0
37:                        frameReady=1;
000364  200010     MOV #0x1, W0
000366  88B020     MOV W0, frameReady
38:                    }
39:                   
40:                    if(rw){
000368  E21602     CP0 rw
00036A  320019     BRA Z, 0x39E
41:                        streamB[write_ptr]=sampinA;
00036C  80B000     MOV write_ptr, W0
00036E  B80161     MUL.UU W0, #1, W2
000370  410102     ADD W2, W2, W2
000372  498183     ADDC W3, W3, W3
000374  21CA24     MOV #0x1CA2, W4
000376  420082     ADD W4, W2, W1
000378  97BAEF     MOV [W15-4], W5
00037A  780885     MOV W5, [W1]
42:                        sampoutA=outputA[write_ptr++]; 
00037C  216A21     MOV #0x16A2, W1
00037E  408102     ADD W1, W2, W2
000380  780112     MOV [W2], W2
000382  88B132     MOV W2, sampoutA
000384  E80000     INC W0, W0
43:                        streamB[write_ptr]=sampinB;
000386  B80161     MUL.UU W0, #1, W2
000388  410102     ADD W2, W2, W2
00038A  498183     ADDC W3, W3, W3
00038C  420202     ADD W4, W2, W4
00038E  97BAFF     MOV [W15-2], W5
000390  780A05     MOV W5, [W4]
44:                        sampoutB=outputA[write_ptr++];  
000392  408102     ADD W1, W2, W2
000394  780112     MOV [W2], W2
000396  88B122     MOV W2, sampoutB
000398  E80000     INC W0, W0
00039A  88B000     MOV W0, write_ptr
00039C  370018     BRA 0x3CE
45:                    } else {
46:                        streamA[write_ptr]=sampinA; 
00039E  80B000     MOV write_ptr, W0
0003A0  B80161     MUL.UU W0, #1, W2
0003A2  410102     ADD W2, W2, W2
0003A4  498183     ADDC W3, W3, W3
0003A6  21AA24     MOV #0x1AA2, W4
0003A8  420082     ADD W4, W2, W1
0003AA  97BAEF     MOV [W15-4], W5
0003AC  780885     MOV W5, [W1]
47:                        sampoutA=outputB[write_ptr++];  
0003AE  218A21     MOV #0x18A2, W1
0003B0  408102     ADD W1, W2, W2
0003B2  780112     MOV [W2], W2
0003B4  88B132     MOV W2, sampoutA
0003B6  E80000     INC W0, W0
48:                        streamA[write_ptr]=sampinB; 
0003B8  B80161     MUL.UU W0, #1, W2
0003BA  410102     ADD W2, W2, W2
0003BC  498183     ADDC W3, W3, W3
0003BE  420202     ADD W4, W2, W4
0003C0  97BAFF     MOV [W15-2], W5
0003C2  780A05     MOV W5, [W4]
49:                        sampoutB=outputB[write_ptr++];  
0003C4  408102     ADD W1, W2, W2
0003C6  780112     MOV [W2], W2
0003C8  88B122     MOV W2, sampoutB
0003CA  E80000     INC W0, W0
0003CC  88B000     MOV W0, write_ptr
50:                    } 
51:                    _DCIIF=0;
0003CE  A98807     BCLR 0x807, #4
52:                }
0003D0  FA8000     ULNK
0003D2  F90034     POP DSWPAG
0003D4  F90032     POP DSRPAG
0003D6  BE024F     MOV.D [--W15], W4
0003D8  BE014F     MOV.D [--W15], W2
0003DA  BE004F     MOV.D [--W15], W0
0003DC  064000     RETFIE
53:                
54:                void __attribute__((interrupt, auto_psv)) _DMA0Interrupt(void) {
0003DE  F80032     PUSH DSRPAG
0003E0  F80034     PUSH DSWPAG
0003E2  781F88     MOV W8, [W15++]
0003E4  200018     MOV #0x1, W8
0003E6  8801A8     MOV W8, DSWPAG
0003E8  202008     MOV #0x200, W8
0003EA  880198     MOV W8, DSRPAG
0003EC  000000     NOP
0003EE  78044F     MOV [--W15], W8
55:                    //static unsigned int BufferCount = 0; // Keep record of the buffer that contains TX data
56:                    //if(BufferCount == 0);
57:                    //{
58:                        //TxData(TxBufferA); // Transmit SPI data in DMA RAM Primary buffer
59:                        //TxData(TxBufferB); // Transmit SPI data in DMA RAM Secondary buffer
60:                    //}
61:                    //BufferCount ^= 1;
62:                    IFS0bits.DMA0IF = 0; // Clear the DMA0 Interrupt flag
0003F0  A98800     BCLR IFS0, #4
63:                }
0003F2  F90034     POP DSWPAG
0003F4  F90032     POP DSRPAG
0003F6  064000     RETFIE
64:                
65:                void __attribute__((interrupt, auto_psv)) _DMA1Interrupt(void){
0003F8  BE9F80     MOV.D W0, [W15++]
0003FA  F80032     PUSH DSRPAG
0003FC  F80034     PUSH DSWPAG
0003FE  200010     MOV #0x1, W0
000400  8801A0     MOV W0, DSWPAG
000402  202000     MOV #0x200, W0
000404  880190     MOV W0, DSRPAG
000406  000000     NOP
66:                    //static unsigned int BufferCount = 0; // Keep record of the buffer that contains RX data
67:                    //if(BufferCount == 0) ;
68:                        //ProcessRxData(TxBufferA); // Process received SPI data in DMA RAM Primary buffer
69:                    //else;
70:                        //ProcessRxData(TxBufferB); // Process received SPI data in DMA RAM Secondary buffer
71:                 
72:                    //BufferCount ^= 1;
73:                    IFS0bits.DMA1IF = 0; // Clear the DMA1 Interrupt flag
000408  A9C801     BCLR 0x801, #6
74:                    //BufferCount ^= 1;
75:                    SS3a=SS3b=1;
00040A  A8EE35     BSET 0xE35, #7
00040C  8071A0     MOV LATD, W0
00040E  DE004F     LSR W0, #15, W0
000410  400000     ADD W0, W0, W0
000412  8072A1     MOV LATF, W1
000414  A11001     BCLR W1, #1
000416  700081     IOR W0, W1, W1
000418  8872A1     MOV W1, LATF
76:                    stat.FLASH_DMA=FALSE;
00041A  2230A0     MOV #0x230A, W0
00041C  EB4800     CLR.B [W0]
77:                    
78:                    if(stat.DMA_READING==TRUE){
00041E  E88000     INC2 W0, W0
000420  EBC080     SETM.B W1
000422  10CF90     SUBR.B W1, [W0], [W15]
000424  3A0003     BRA NZ, 0x42C
79:                        stat.DMA_READING=FALSE;
000426  EB4800     CLR.B [W0]
80:                        stat.DMA_JUSTREAD=TRUE;
000428  E90000     DEC W0, W0
00042A  EBC800     SETM.B [W0]
81:                    }
82:                    
83:                    DMA1CONbits.CHEN = 0;
00042C  A9EB11     BCLR 0xB11, #7
84:                    DMA0CONbits.CHEN = 0;
00042E  A9EB01     BCLR 0xB01, #7
85:                    IFS5bits.SPI3IF = 0;        // Clear the Interrupt flag
000430  A9680B     BCLR 0x80B, #3
86:                }
000432  F90034     POP DSWPAG
000434  F90032     POP DSRPAG
000436  BE004F     MOV.D [--W15], W0
000438  064000     RETFIE
87:                
88:                //Description: This interrupt handles UART reception
89:                //Dependencies: initUART1();
90:                void __attribute__ ((interrupt, auto_psv)) _U1RXInterrupt(void){
00043A  781F80     MOV W0, [W15++]
00043C  F80032     PUSH DSRPAG
00043E  F80034     PUSH DSWPAG
000440  200010     MOV #0x1, W0
000442  8801A0     MOV W0, DSWPAG
000444  202000     MOV #0x200, W0
000446  880190     MOV W0, DSRPAG
000448  000000     NOP
91:                    //unsigned char trash;
92:                    btread=U1RXREG;
00044A  801130     MOV U1RXREG, W0
00044C  B7F60E     MOV.B WREG, btread
93:                    IFS0bits.U1RXIF = 0;            //clear flag, restart
00044E  A96801     BCLR 0x801, #3
94:                }
000450  F90034     POP DSWPAG
000452  F90032     POP DSRPAG
000454  78004F     MOV [--W15], W0
000456  064000     RETFIE
95:                
96:                //Description: This interrupt handles UART transmission
97:                //Dependencies: initUART1();
98:                void __attribute__ ((interrupt, auto_psv)) _U1TXInterrupt(void){
000458  F80032     PUSH DSRPAG
00045A  F80034     PUSH DSWPAG
00045C  781F88     MOV W8, [W15++]
00045E  200018     MOV #0x1, W8
000460  8801A8     MOV W8, DSWPAG
000462  202008     MOV #0x200, W8
000464  880198     MOV W8, DSRPAG
000466  000000     NOP
000468  78044F     MOV [--W15], W8
99:                    IFS0bits.U1TXIF = 0;            //clear flag, restart
00046A  A98801     BCLR 0x801, #4
100:               } 
00046C  F90034     POP DSWPAG
00046E  F90032     POP DSRPAG
000470  064000     RETFIE
---  C:/Users/ryan/Documents/seniorproject/ps-040/plcd.c  -----------------------------------------------
1:                 /*
2:                  * File:   plcd.c
3:                  */
4:                 #include "xc.h"
5:                 #include "plcd.h"
6:                 #include "common.h"
7:                 #include "screens.h"
8:                 #include "utilities.h"
9:                 
10:                extern struct ctrlsrfc ctrl;
11:                
12:                int lcdBuf[LCDBUF+1]={0};
13:                int *lcdWritePtr=lcdBuf;
14:                int *lcdReadPtr=lcdBuf;
15:                
16:                // There are write and command macros in the header, make sure these match.
17:                void lcdWriteQ(unsigned char data){
18:                    *lcdWritePtr++=data|0x0000;
006C32  FB8000     ZE W0, W0
006C34  80B161     MOV 0x162C, W1
006C36  781880     MOV W0, [W1++]
006C38  88B161     MOV W1, 0x162C
19:                    if(lcdWritePtr==&lcdBuf[LCDBUF])
006C3A  220A20     MOV #0x20A2, W0
006C3C  508F80     SUB W1, W0, [W15]
006C3E  3A0002     BRA NZ, 0x6C44
20:                        lcdWritePtr=lcdBuf;
006C40  B12000     SUB #0x200, W0
006C42  88B160     MOV W0, 0x162C
21:                }
006C44  060000     RETURN
22:                
23:                // There are write and command macros in the header, make sure these match.
24:                void lcdCommandQ(unsigned char data){
25:                    *lcdWritePtr++=data|0x0100;     //flag for rs=1
006C46  FB8000     ZE W0, W0
006C48  80B161     MOV 0x162C, W1
006C4A  A08000     BSET W0, #8
006C4C  781880     MOV W0, [W1++]
006C4E  88B161     MOV W1, 0x162C
26:                    if(lcdWritePtr==&lcdBuf[LCDBUF])
006C50  220A20     MOV #0x20A2, W0
006C52  508F80     SUB W1, W0, [W15]
006C54  3A0002     BRA NZ, 0x6C5A
27:                        lcdWritePtr=lcdBuf;
006C56  B12000     SUB #0x200, W0
006C58  88B160     MOV W0, 0x162C
28:                }
006C5A  060000     RETURN
29:                
30:                void lcdClearQ(void){
31:                    *lcdWritePtr++=LCD_CLEARDISPLAY|0x0300;     //flag for rs=1 & long delay
006C5C  80B160     MOV 0x162C, W0
006C5E  203011     MOV #0x301, W1
006C60  781801     MOV W1, [W0++]
006C62  88B160     MOV W0, 0x162C
32:                    if(lcdWritePtr==&lcdBuf[LCDBUF])
006C64  220A21     MOV #0x20A2, W1
006C66  500F81     SUB W0, W1, [W15]
006C68  3A0003     BRA NZ, 0x6C70
33:                        lcdWritePtr=lcdBuf;
006C6A  2FE000     MOV #0xFE00, W0
006C6C  400001     ADD W0, W1, W0
006C6E  88B160     MOV W0, 0x162C
34:                }
006C70  060000     RETURN
35:                
36:                void lcdSetCursorQ(unsigned char col, unsigned char row) {
006C72  784101     MOV.B W1, W2
37:                  static unsigned char offsets[] = { 0x00, 0x40, 0x14, 0x54 };
38:                  if (row > 3) {
39:                    row = 3;
40:                  }
41:                  *lcdWritePtr++=(LCD_SETDDRAMADDR | (col + offsets[row]))|0x0100;  //flag for rs=0 
006C74  80B161     MOV 0x162C, W1
006C76  514FE3     SUB.B W2, #0x3, [W15]
006C78  360001     BRA LEU, 0x6C7C
006C7A  B3C032     MOV.B #0x3, W2
006C7C  FB8102     ZE W2, W2
006C7E  2EC2E3     MOV #0xEC2E, W3
006C80  418102     ADD W3, W2, W2
006C82  FB8112     ZE [W2], W2
006C84  FB8000     ZE W0, W0
006C86  410000     ADD W2, W0, W0
006C88  201802     MOV #0x180, W2
006C8A  701882     IOR W0, W2, [W1++]
006C8C  88B161     MOV W1, 0x162C
42:                    if(lcdWritePtr==&lcdBuf[LCDBUF]) 
006C8E  220A20     MOV #0x20A2, W0
006C90  508F80     SUB W1, W0, [W15]
006C92  3A0002     BRA NZ, 0x6C98
43:                        lcdWritePtr=lcdBuf; 
006C94  B12000     SUB #0x200, W0
006C96  88B160     MOV W0, 0x162C
44:                }
006C98  060000     RETURN
45:                
46:                void lcdWriteStringQ(char *string) {
006CA8  E80200     INC W0, W4
006CAA  EB0280     CLR W5
47:                    char *it = string;
48:                    for (; *it; it++) {
006C9A  784090     MOV.B [W0], W1
006C9C  E00401     CP0.B W1
006C9E  320012     BRA Z, 0x6CC4
006CA0  EB0100     CLR W2
006CBA  410004     ADD W2, W4, W0
006CBC  784090     MOV.B [W0], W1
006CBE  E80102     INC W2, W2
006CC0  E00401     CP0.B W1
006CC2  3AFFF4     BRA NZ, 0x6CAC
49:                        lcdWriteQMac(*it);
006CA2  220A23     MOV #0x20A2, W3
006CA4  2FE006     MOV #0xFE00, W6
006CA6  430303     ADD W6, W3, W6
006CAC  FB0081     SE W1, W1
006CAE  80B160     MOV 0x162C, W0
006CB0  781801     MOV W1, [W0++]
006CB2  88B160     MOV W0, 0x162C
006CB4  500F83     SUB W0, W3, [W15]
006CB6  3A0001     BRA NZ, 0x6CBA
006CB8  88B166     MOV W6, 0x162C
50:                  }
51:                }
006CC4  060000     RETURN
52:                
53:                void lcdCustomSymbols(void){
54:                    int i=0;
55:                    lcdCommandQMac(0x40);
006CC6  80B160     MOV 0x162C, W0
006CC8  201401     MOV #0x140, W1
006CCA  781801     MOV W1, [W0++]
006CCC  88B160     MOV W0, 0x162C
006CCE  220A21     MOV #0x20A2, W1
006CD0  500F81     SUB W0, W1, [W15]
006CD2  3A0003     BRA NZ, 0x6CDA
006CD4  2FE000     MOV #0xFE00, W0
006CD6  400001     ADD W0, W1, W0
006CD8  88B160     MOV W0, 0x162C
56:                    Delay_us(200);
006CDA  200C80     MOV #0xC8, W0
006CDC  07086D     RCALL Delay_us
57:                   // for(; i<8; i++)lcdWriteString(loadingOne[i]);
58:                    //lcdWriteString(loadingTwo);
59:                    //lcdWriteString(loadingThree);
60:                    //lcdWriteString(loadingFour);
61:                }
006CDE  060000     RETURN
62:                
63:                void lcdWriteWordQ(int word){
006CE0  FA0004     LNK #0x4
006D22  200011     MOV #0x1, W1
006D24  578164     SUB W15, #0x4, W2
006D26  B81361     MUL.UU W2, #1, W6
006D28  DD0942     SL W1, #2, W2
006D2E  DE89CF     ASR W1, #15, W3
006D30  408206     ADD W1, W6, W4
006D32  498287     ADDC W3, W7, W5
64:                    int i;
65:                    char inchar[4];
66:                    
67:                    if(word<0) {
006CE2  E00000     CP0 W0
006CE4  3D000C     BRA GE, 0x6CFE
68:                        lcdWriteQMac('-');
006CE6  80B161     MOV 0x162C, W1
006CE8  2002D2     MOV #0x2D, W2
006CEA  781882     MOV W2, [W1++]
006CEC  88B161     MOV W1, 0x162C
006CEE  220A22     MOV #0x20A2, W2
006CF0  508F82     SUB W1, W2, [W15]
006CF2  3A0003     BRA NZ, 0x6CFA
006CF4  2FE001     MOV #0xFE00, W1
006CF6  408082     ADD W1, W2, W1
006CF8  88B161     MOV W1, 0x162C
69:                        word=~word+1;
006CFA  EA0000     NEG W0, W0
006CFC  37000A     BRA 0x6D12
70:                    }else lcdWriteQMac(' ');
006CFE  80B161     MOV 0x162C, W1
006D00  200202     MOV #0x20, W2
006D02  781882     MOV W2, [W1++]
006D04  88B161     MOV W1, 0x162C
006D06  220A22     MOV #0x20A2, W2
006D08  508F82     SUB W1, W2, [W15]
006D0A  3A0003     BRA NZ, 0x6D12
006D0C  2FE001     MOV #0xFE00, W1
006D0E  408082     ADD W1, W2, W1
006D10  88B161     MOV W1, 0x162C
71:                   
72:                   inchar[0] = word&0x000F; 
006D12  6040EF     AND.B W0, #0xF, W1
73:                   if (inchar[0] > 9) 
006D14  50CFE9     SUB.B W1, #0x9, [W15]
006D16  340003     BRA LE, 0x6D1E
74:                       inchar[0]+=55;
006D18  B04371     ADD.B #0x37, W1
006D1A  9FFFC1     MOV.B W1, [W15-4]
006D1C  370002     BRA 0x6D22
75:                   else inchar[0]+=48;
006D1E  B04301     ADD.B #0x30, W1
006D20  9FFFC1     MOV.B W1, [W15-4]
76:                   
77:                   for(i=1; i<4; i++){ 
006D44  E80081     INC W1, W1
006D46  508FE4     SUB W1, #0x4, [W15]
006D48  3AFFEF     BRA NZ, 0x6D28
78:                      inchar[i] = ((word>>(i*4))&0x0000F); 
006D2A  DE8102     ASR W0, W2, W2
006D2C  61416F     AND.B W2, #0xF, W2
006D34  784A02     MOV.B W2, [W4]
79:                      if (inchar[i] > 9) 
006D36  514FE9     SUB.B W2, #0x9, [W15]
006D38  340003     BRA LE, 0x6D40
80:                          inchar[i]+=55;
006D3A  B3C373     MOV.B #0x37, W3
006D3C  414A03     ADD.B W2, W3, [W4]
006D3E  370002     BRA 0x6D44
81:                      else inchar[i]+=48;
006D40  B3C303     MOV.B #0x30, W3
006D42  414A03     ADD.B W2, W3, [W4]
82:                   } 
83:                   lcdWriteQMac(inchar[3]);
006D4A  97F8FF     MOV.B [W15-1], W1
006D4C  FB0081     SE W1, W1
006D4E  80B160     MOV 0x162C, W0
006D50  781801     MOV W1, [W0++]
006D52  220A21     MOV #0x20A2, W1
006D54  500F81     SUB W0, W1, [W15]
006D56  3A000A     BRA NZ, 0x6D6C
84:                   lcdWriteQMac(inchar[2]);
006D58  97F86F     MOV.B [W15-2], W0
006D5A  FB0000     SE W0, W0
006D5C  88F510     MOV W0, lcdBuf
006D6C  97F8EF     MOV.B [W15-2], W1
006D6E  FB0081     SE W1, W1
006D70  781801     MOV W1, [W0++]
006D72  88B160     MOV W0, 0x162C
006D74  220A21     MOV #0x20A2, W1
006D76  500F81     SUB W0, W1, [W15]
006D78  3A0009     BRA NZ, 0x6D8C
85:                   lcdWriteQMac(inchar[1]);
006D5E  97F85F     MOV.B [W15-3], W0
006D60  FB0000     SE W0, W0
006D62  88F520     MOV W0, 0x1EA4
006D64  2FE040     MOV #0xFE04, W0
006D66  400001     ADD W0, W1, W0
006D68  88B160     MOV W0, 0x162C
006D6A  37001F     BRA 0x6DAA
006D7A  97F85F     MOV.B [W15-3], W0
006D7C  FB0000     SE W0, W0
006D7E  88F510     MOV W0, lcdBuf
006D8C  97F8DF     MOV.B [W15-3], W1
006D8E  FB0081     SE W1, W1
006D90  80B160     MOV 0x162C, W0
006D92  781801     MOV W1, [W0++]
006D94  88B160     MOV W0, 0x162C
006D96  220A21     MOV #0x20A2, W1
006D98  500F81     SUB W0, W1, [W15]
006D9A  3A0007     BRA NZ, 0x6DAA
86:                   lcdWriteQMac(inchar[0]);
006D80  97F8CF     MOV.B [W15-4], W1
006D82  FB0001     SE W1, W0
006D84  88F520     MOV W0, 0x1EA4
006D86  21EA60     MOV #0x1EA6, W0
006D88  88B160     MOV W0, 0x162C
006D8A  37001A     BRA 0x6DC0
006D9C  97F94F     MOV.B [W15-4], W2
006D9E  FB0002     SE W2, W0
006DA0  88F510     MOV W0, lcdBuf
006DA2  2FE020     MOV #0xFE02, W0
006DA4  400001     ADD W0, W1, W0
006DA6  88B160     MOV W0, 0x162C
006DA8  37000B     BRA 0x6DC0
006DAA  97F9CF     MOV.B [W15-4], W3
006DAC  FB0083     SE W3, W1
006DAE  80B160     MOV 0x162C, W0
006DB0  781801     MOV W1, [W0++]
006DB2  88B160     MOV W0, 0x162C
006DB4  220A21     MOV #0x20A2, W1
006DB6  500F81     SUB W0, W1, [W15]
006DB8  3A0003     BRA NZ, 0x6DC0
006DBA  2FE000     MOV #0xFE00, W0
006DBC  400001     ADD W0, W1, W0
006DBE  88B160     MOV W0, 0x162C
87:                }
006DC0  FA8000     ULNK
006DC2  060000     RETURN
88:                
89:                void lcdWriteByteQ(char word){
006DC4  FA0002     LNK #0x2
90:                    int i;
91:                    char inchar[2];
92:                     
93:                   inchar[0] = word&0x0F; 
006DC6  6040EF     AND.B W0, #0xF, W1
94:                   if (inchar[0] > 9) 
006DC8  50CFE9     SUB.B W1, #0x9, [W15]
006DCA  340003     BRA LE, 0x6DD2
95:                       inchar[0]+=55;
006DCC  B04371     ADD.B #0x37, W1
006DCE  9FFFE1     MOV.B W1, [W15-2]
006DD0  370002     BRA 0x6DD6
96:                   else inchar[0]+=48;
006DD2  B04301     ADD.B #0x30, W1
006DD4  9FFFE1     MOV.B W1, [W15-2]
97:                   
98:                   for(i=1; i<2; i++){ 
99:                      inchar[i] = ((word>>(i*4))&0x0000F); 
006DD6  DE0044     LSR W0, #4, W0
006DD8  60006F     AND W0, #0xF, W0
100:                     if (inchar[i] > 9) 
006DDA  504FE9     SUB.B W0, #0x9, [W15]
006DDC  340003     BRA LE, 0x6DE4
101:                         inchar[i]+=55;
006DDE  B04370     ADD.B #0x37, W0
006DE0  9FFFF0     MOV.B W0, [W15-1]
006DE2  370002     BRA 0x6DE8
102:                     else inchar[i]+=48;
006DE4  B04300     ADD.B #0x30, W0
006DE6  9FFFF0     MOV.B W0, [W15-1]
103:                  } 
104:                  lcdWriteQMac(inchar[1]);
006DE8  97F8FF     MOV.B [W15-1], W1
006DEA  FB0081     SE W1, W1
006DEC  80B160     MOV 0x162C, W0
006DEE  781801     MOV W1, [W0++]
006DF0  220A21     MOV #0x20A2, W1
006DF2  500F81     SUB W0, W1, [W15]
006DF4  3A0006     BRA NZ, 0x6E02
105:                  lcdWriteQMac(inchar[0]);
006DF6  97F8EF     MOV.B [W15-2], W1
006DF8  FB0001     SE W1, W0
006DFA  88F510     MOV W0, lcdBuf
006DFC  21EA40     MOV #0x1EA4, W0
006DFE  88B160     MOV W0, 0x162C
006E00  37000A     BRA 0x6E16
006E02  97F96F     MOV.B [W15-2], W2
006E04  FB0082     SE W2, W1
006E06  781801     MOV W1, [W0++]
006E08  88B160     MOV W0, 0x162C
006E0A  220A21     MOV #0x20A2, W1
006E0C  500F81     SUB W0, W1, [W15]
006E0E  3A0003     BRA NZ, 0x6E16
006E10  2FE000     MOV #0xFE00, W0
006E12  400001     ADD W0, W1, W0
006E14  88B160     MOV W0, 0x162C
106:               }
006E16  FA8000     ULNK
006E18  060000     RETURN
107:               
108:               void lcdWriteWordUnsignedQ(unsigned int word){
006E1A  FA0004     LNK #0x4
006E2C  200011     MOV #0x1, W1
006E2E  578164     SUB W15, #0x4, W2
006E30  B81361     MUL.UU W2, #1, W6
006E32  DD0942     SL W1, #2, W2
006E38  DE89CF     ASR W1, #15, W3
006E3A  408206     ADD W1, W6, W4
006E3C  498287     ADDC W3, W7, W5
109:                   int i;
110:                   char inchar[4];
111:                   
112:                  inchar[0] = word&0x000F; 
006E1C  6040EF     AND.B W0, #0xF, W1
113:                  if (inchar[0] > 9) 
006E1E  50CFE9     SUB.B W1, #0x9, [W15]
006E20  340003     BRA LE, 0x6E28
114:                      inchar[0]+=55;
006E22  B04371     ADD.B #0x37, W1
006E24  9FFFC1     MOV.B W1, [W15-4]
006E26  370002     BRA 0x6E2C
115:                  else inchar[0]+=48;
006E28  B04301     ADD.B #0x30, W1
006E2A  9FFFC1     MOV.B W1, [W15-4]
116:                  
117:                  for(i=1; i<4; i++){ 
006E4E  E80081     INC W1, W1
006E50  508FE4     SUB W1, #0x4, [W15]
006E52  3AFFEF     BRA NZ, 0x6E32
118:                     inchar[i] = ((word>>(i*4))&0x0000F); 
006E34  DE0102     LSR W0, W2, W2
006E36  61416F     AND.B W2, #0xF, W2
006E3E  784A02     MOV.B W2, [W4]
119:                     if (inchar[i] > 9) 
006E40  514FE9     SUB.B W2, #0x9, [W15]
006E42  340003     BRA LE, 0x6E4A
120:                         inchar[i]+=55;
006E44  B3C373     MOV.B #0x37, W3
006E46  414A03     ADD.B W2, W3, [W4]
006E48  370002     BRA 0x6E4E
121:                     else inchar[i]+=48;
006E4A  B3C303     MOV.B #0x30, W3
006E4C  414A03     ADD.B W2, W3, [W4]
122:                  } 
123:                  lcdWriteQMac(inchar[3]);
006E54  97F8FF     MOV.B [W15-1], W1
006E56  FB0081     SE W1, W1
006E58  80B160     MOV 0x162C, W0
006E5A  781801     MOV W1, [W0++]
006E5C  220A21     MOV #0x20A2, W1
006E5E  500F81     SUB W0, W1, [W15]
006E60  3A000A     BRA NZ, 0x6E76
124:                  lcdWriteQMac(inchar[2]);
006E62  97F86F     MOV.B [W15-2], W0
006E64  FB0000     SE W0, W0
006E66  88F510     MOV W0, lcdBuf
006E76  97F8EF     MOV.B [W15-2], W1
006E78  FB0081     SE W1, W1
006E7A  781801     MOV W1, [W0++]
006E7C  88B160     MOV W0, 0x162C
006E7E  220A21     MOV #0x20A2, W1
006E80  500F81     SUB W0, W1, [W15]
006E82  3A0009     BRA NZ, 0x6E96
125:                  lcdWriteQMac(inchar[1]);
006E68  97F85F     MOV.B [W15-3], W0
006E6A  FB0000     SE W0, W0
006E6C  88F520     MOV W0, 0x1EA4
006E6E  2FE040     MOV #0xFE04, W0
006E70  400001     ADD W0, W1, W0
006E72  88B160     MOV W0, 0x162C
006E74  37001F     BRA 0x6EB4
006E84  97F85F     MOV.B [W15-3], W0
006E86  FB0000     SE W0, W0
006E88  88F510     MOV W0, lcdBuf
006E96  97F8DF     MOV.B [W15-3], W1
006E98  FB0081     SE W1, W1
006E9A  80B160     MOV 0x162C, W0
006E9C  781801     MOV W1, [W0++]
006E9E  88B160     MOV W0, 0x162C
006EA0  220A21     MOV #0x20A2, W1
006EA2  500F81     SUB W0, W1, [W15]
006EA4  3A0007     BRA NZ, 0x6EB4
126:                  lcdWriteQMac(inchar[0]);
006E8A  97F8CF     MOV.B [W15-4], W1
006E8C  FB0001     SE W1, W0
006E8E  88F520     MOV W0, 0x1EA4
006E90  21EA60     MOV #0x1EA6, W0
006E92  88B160     MOV W0, 0x162C
006E94  37001A     BRA 0x6ECA
006EA6  97F94F     MOV.B [W15-4], W2
006EA8  FB0002     SE W2, W0
006EAA  88F510     MOV W0, lcdBuf
006EAC  2FE020     MOV #0xFE02, W0
006EAE  400001     ADD W0, W1, W0
006EB0  88B160     MOV W0, 0x162C
006EB2  37000B     BRA 0x6ECA
006EB4  97F9CF     MOV.B [W15-4], W3
006EB6  FB0083     SE W3, W1
006EB8  80B160     MOV 0x162C, W0
006EBA  781801     MOV W1, [W0++]
006EBC  88B160     MOV W0, 0x162C
006EBE  220A21     MOV #0x20A2, W1
006EC0  500F81     SUB W0, W1, [W15]
006EC2  3A0003     BRA NZ, 0x6ECA
006EC4  2FE000     MOV #0xFE00, W0
006EC6  400001     ADD W0, W1, W0
006EC8  88B160     MOV W0, 0x162C
127:               }
006ECA  FA8000     ULNK
006ECC  060000     RETURN
128:               
129:               void lcdWriteDecimalQ(char word, int digits){
006ECE  FA0000     LNK #0x0
006ED0  781F88     MOV W8, [W15++]
006ED2  780381     MOV W1, W7
130:                   const char maxdigits = 4;
131:                   char result[maxdigits];
006ED6  4787E6     ADD W15, #0x6, W15
006ED8  780186     MOV W6, W3
132:                   char i = 3;
006EDA  B3C032     MOV.B #0x3, W2
133:                   do {
134:                       result[i] = '0' + word % 10;
006EDC  2000A4     MOV #0xA, W4
006EDE  FB0282     SE W2, W5
006EE0  418285     ADD W3, W5, W5
006EE2  FB0000     SE W0, W0
006EE4  090011     REPEAT #0x11
006EE6  D80004     DIV.SW W0, W4
006EE8  B3C308     MOV.B #0x30, W8
006EEA  40CA88     ADD.B W1, W8, [W5]
135:                       word /= 10;
136:                       i--;
006EEC  E94102     DEC.B W2, W2
137:                   }
138:                   while (word > 0);
006EEE  E00400     CP0.B W0
006EF0  3CFFF6     BRA GT, 0x6EDE
139:                   while (i>=0) result[i--] = ' '; 
006EF2  E00402     CP0.B W2
006EF4  350007     BRA LT, 0x6F04
006EF6  B3C204     MOV.B #0x20, W4
006EF8  FB0002     SE W2, W0
006EFA  418000     ADD W3, W0, W0
006EFC  784804     MOV.B W4, [W0]
006EFE  E94102     DEC.B W2, W2
006F00  414FE1     ADD.B W2, #0x1, [W15]
006F02  3AFFFA     BRA NZ, 0x6EF8
140:                 
141:                   for (i=maxdigits-digits; i<maxdigits; i++) {
006F04  B3C041     MOV.B #0x4, W1
006F06  50C087     SUB.B W1, W7, W1
006F08  50CFE3     SUB.B W1, #0x3, [W15]
006F0A  3C000F     BRA GT, 0x6F2A
006F24  E84081     INC.B W1, W1
006F26  50CFE4     SUB.B W1, #0x4, [W15]
006F28  3AFFF4     BRA NZ, 0x6F12
142:                       lcdWriteQMac(result[i]);
006F0C  220A24     MOV #0x20A2, W4
006F0E  2FE005     MOV #0xFE00, W5
006F10  428284     ADD W5, W4, W5
006F12  FB0001     SE W1, W0
006F14  418000     ADD W3, W0, W0
006F16  FB0110     SE [W0], W2
006F18  80B160     MOV 0x162C, W0
006F1A  781802     MOV W2, [W0++]
006F1C  88B160     MOV W0, 0x162C
006F1E  500F84     SUB W0, W4, [W15]
006F20  3A0001     BRA NZ, 0x6F24
006F22  88B165     MOV W5, 0x162C
143:                   }
144:               }
006ED4  78030F     MOV W15, W6
006F2A  780786     MOV W6, W15
006F2C  78044F     MOV [--W15], W8
006F2E  FA8000     ULNK
006F30  060000     RETURN
145:               
146:               //4x4 pad debug
147:               void lcdDrawPads(unsigned char col){
006F32  BE9F88     MOV.D W8, [W15++]
006F34  784480     MOV.B W0, W9
148:                   unsigned char block=0xFF;
006F44  EBC400     SETM.B W8
149:                   if(!ctrl.pad[34]||!ctrl.pad[16]) block='*';
006F36  B3C2A8     MOV.B #0x2A, W8
006F38  216580     MOV #0x1658, W0
006F3A  E00410     CP0.B [W0]
006F3C  320004     BRA Z, 0x6F46
006F3E  500072     SUB W0, #0x12, W0
006F40  E00410     CP0.B [W0]
006F42  320001     BRA Z, 0x6F46
150:                   
151:                   lcdSetCursorQ(col, 0);
006F46  EB4080     CLR.B W1
006F48  784009     MOV.B W9, W0
006F4A  07FE93     RCALL lcdSetCursorQ
152:                   if(!ctrl.pad[12]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
006F4C  216420     MOV #0x1642, W0
006F4E  E00410     CP0.B [W0]
006F50  3A000B     BRA NZ, 0x6F68
006F52  80B160     MOV 0x162C, W0
006F54  200201     MOV #0x20, W1
006F56  781801     MOV W1, [W0++]
006F58  88B160     MOV W0, 0x162C
006F5A  220A21     MOV #0x20A2, W1
006F5C  500F81     SUB W0, W1, [W15]
006F5E  3A000E     BRA NZ, 0x6F7C
006F60  2FE000     MOV #0xFE00, W0
006F62  400001     ADD W0, W1, W0
006F64  88B160     MOV W0, 0x162C
006F66  37000A     BRA 0x6F7C
006F68  FB8088     ZE W8, W1
006F6A  80B160     MOV 0x162C, W0
006F6C  781801     MOV W1, [W0++]
006F6E  88B160     MOV W0, 0x162C
006F70  220A21     MOV #0x20A2, W1
006F72  500F81     SUB W0, W1, [W15]
006F74  3A0003     BRA NZ, 0x6F7C
006F76  2FE000     MOV #0xFE00, W0
006F78  400001     ADD W0, W1, W0
006F7A  88B160     MOV W0, 0x162C
153:                   if(!ctrl.pad[13]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
006F7C  216430     MOV #0x1643, W0
006F7E  E00410     CP0.B [W0]
006F80  3A000B     BRA NZ, 0x6F98
006F82  80B160     MOV 0x162C, W0
006F84  200201     MOV #0x20, W1
006F86  781801     MOV W1, [W0++]
006F88  88B160     MOV W0, 0x162C
006F8A  220A21     MOV #0x20A2, W1
006F8C  500F81     SUB W0, W1, [W15]
006F8E  3A000E     BRA NZ, 0x6FAC
006F90  2FE000     MOV #0xFE00, W0
006F92  400001     ADD W0, W1, W0
006F94  88B160     MOV W0, 0x162C
006F96  37000A     BRA 0x6FAC
006F98  FB8088     ZE W8, W1
006F9A  80B160     MOV 0x162C, W0
006F9C  781801     MOV W1, [W0++]
006F9E  88B160     MOV W0, 0x162C
006FA0  220A21     MOV #0x20A2, W1
006FA2  500F81     SUB W0, W1, [W15]
006FA4  3A0003     BRA NZ, 0x6FAC
006FA6  2FE000     MOV #0xFE00, W0
006FA8  400001     ADD W0, W1, W0
006FAA  88B160     MOV W0, 0x162C
154:                   if(!ctrl.pad[14]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
006FAC  216440     MOV #0x1644, W0
006FAE  E00410     CP0.B [W0]
006FB0  3A000B     BRA NZ, 0x6FC8
006FB2  80B160     MOV 0x162C, W0
006FB4  200201     MOV #0x20, W1
006FB6  781801     MOV W1, [W0++]
006FB8  88B160     MOV W0, 0x162C
006FBA  220A21     MOV #0x20A2, W1
006FBC  500F81     SUB W0, W1, [W15]
006FBE  3A000E     BRA NZ, 0x6FDC
006FC0  2FE000     MOV #0xFE00, W0
006FC2  400001     ADD W0, W1, W0
006FC4  88B160     MOV W0, 0x162C
006FC6  37000A     BRA 0x6FDC
006FC8  FB8088     ZE W8, W1
006FCA  80B160     MOV 0x162C, W0
006FCC  781801     MOV W1, [W0++]
006FCE  88B160     MOV W0, 0x162C
006FD0  220A21     MOV #0x20A2, W1
006FD2  500F81     SUB W0, W1, [W15]
006FD4  3A0003     BRA NZ, 0x6FDC
006FD6  2FE000     MOV #0xFE00, W0
006FD8  400001     ADD W0, W1, W0
006FDA  88B160     MOV W0, 0x162C
155:                   if(!ctrl.pad[15]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
006FDC  216450     MOV #0x1645, W0
006FDE  E00410     CP0.B [W0]
006FE0  3A000B     BRA NZ, 0x6FF8
006FE2  80B160     MOV 0x162C, W0
006FE4  200201     MOV #0x20, W1
006FE6  781801     MOV W1, [W0++]
006FE8  88B160     MOV W0, 0x162C
006FEA  220A21     MOV #0x20A2, W1
006FEC  500F81     SUB W0, W1, [W15]
006FEE  3A000E     BRA NZ, 0x700C
006FF0  2FE000     MOV #0xFE00, W0
006FF2  400001     ADD W0, W1, W0
006FF4  88B160     MOV W0, 0x162C
006FF6  37000A     BRA 0x700C
006FF8  FB8088     ZE W8, W1
006FFA  80B160     MOV 0x162C, W0
006FFC  781801     MOV W1, [W0++]
006FFE  88B160     MOV W0, 0x162C
007000  220A21     MOV #0x20A2, W1
007002  500F81     SUB W0, W1, [W15]
007004  3A0003     BRA NZ, 0x700C
007006  2FE000     MOV #0xFE00, W0
007008  400001     ADD W0, W1, W0
00700A  88B160     MOV W0, 0x162C
156:                   lcdSetCursorQ(col, 1);
00700C  B3C011     MOV.B #0x1, W1
00700E  784009     MOV.B W9, W0
007010  07FE30     RCALL lcdSetCursorQ
157:                   if(!ctrl.pad[8]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
007012  2163E0     MOV #0x163E, W0
007014  E00410     CP0.B [W0]
007016  3A000B     BRA NZ, 0x702E
007018  80B160     MOV 0x162C, W0
00701A  200201     MOV #0x20, W1
00701C  781801     MOV W1, [W0++]
00701E  88B160     MOV W0, 0x162C
007020  220A21     MOV #0x20A2, W1
007022  500F81     SUB W0, W1, [W15]
007024  3A000E     BRA NZ, 0x7042
007026  2FE000     MOV #0xFE00, W0
007028  400001     ADD W0, W1, W0
00702A  88B160     MOV W0, 0x162C
00702C  37000A     BRA 0x7042
00702E  FB8088     ZE W8, W1
007030  80B160     MOV 0x162C, W0
007032  781801     MOV W1, [W0++]
007034  88B160     MOV W0, 0x162C
007036  220A21     MOV #0x20A2, W1
007038  500F81     SUB W0, W1, [W15]
00703A  3A0003     BRA NZ, 0x7042
00703C  2FE000     MOV #0xFE00, W0
00703E  400001     ADD W0, W1, W0
007040  88B160     MOV W0, 0x162C
158:                   if(!ctrl.pad[9]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
007042  2163F0     MOV #0x163F, W0
007044  E00410     CP0.B [W0]
007046  3A000B     BRA NZ, 0x705E
007048  80B160     MOV 0x162C, W0
00704A  200201     MOV #0x20, W1
00704C  781801     MOV W1, [W0++]
00704E  88B160     MOV W0, 0x162C
007050  220A21     MOV #0x20A2, W1
007052  500F81     SUB W0, W1, [W15]
007054  3A000E     BRA NZ, 0x7072
007056  2FE000     MOV #0xFE00, W0
007058  400001     ADD W0, W1, W0
00705A  88B160     MOV W0, 0x162C
00705C  37000A     BRA 0x7072
00705E  FB8088     ZE W8, W1
007060  80B160     MOV 0x162C, W0
007062  781801     MOV W1, [W0++]
007064  88B160     MOV W0, 0x162C
007066  220A21     MOV #0x20A2, W1
007068  500F81     SUB W0, W1, [W15]
00706A  3A0003     BRA NZ, 0x7072
00706C  2FE000     MOV #0xFE00, W0
00706E  400001     ADD W0, W1, W0
007070  88B160     MOV W0, 0x162C
159:                   if(!ctrl.pad[10]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
007072  216400     MOV #0x1640, W0
007074  E00410     CP0.B [W0]
007076  3A000B     BRA NZ, 0x708E
007078  80B160     MOV 0x162C, W0
00707A  200201     MOV #0x20, W1
00707C  781801     MOV W1, [W0++]
00707E  88B160     MOV W0, 0x162C
007080  220A21     MOV #0x20A2, W1
007082  500F81     SUB W0, W1, [W15]
007084  3A000E     BRA NZ, 0x70A2
007086  2FE000     MOV #0xFE00, W0
007088  400001     ADD W0, W1, W0
00708A  88B160     MOV W0, 0x162C
00708C  37000A     BRA 0x70A2
00708E  FB8088     ZE W8, W1
007090  80B160     MOV 0x162C, W0
007092  781801     MOV W1, [W0++]
007094  88B160     MOV W0, 0x162C
007096  220A21     MOV #0x20A2, W1
007098  500F81     SUB W0, W1, [W15]
00709A  3A0003     BRA NZ, 0x70A2
00709C  2FE000     MOV #0xFE00, W0
00709E  400001     ADD W0, W1, W0
0070A0  88B160     MOV W0, 0x162C
160:                   if(!ctrl.pad[11]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
0070A2  216410     MOV #0x1641, W0
0070A4  E00410     CP0.B [W0]
0070A6  3A000B     BRA NZ, 0x70BE
0070A8  80B160     MOV 0x162C, W0
0070AA  200201     MOV #0x20, W1
0070AC  781801     MOV W1, [W0++]
0070AE  88B160     MOV W0, 0x162C
0070B0  220A21     MOV #0x20A2, W1
0070B2  500F81     SUB W0, W1, [W15]
0070B4  3A000E     BRA NZ, 0x70D2
0070B6  2FE000     MOV #0xFE00, W0
0070B8  400001     ADD W0, W1, W0
0070BA  88B160     MOV W0, 0x162C
0070BC  37000A     BRA 0x70D2
0070BE  FB8088     ZE W8, W1
0070C0  80B160     MOV 0x162C, W0
0070C2  781801     MOV W1, [W0++]
0070C4  88B160     MOV W0, 0x162C
0070C6  220A21     MOV #0x20A2, W1
0070C8  500F81     SUB W0, W1, [W15]
0070CA  3A0003     BRA NZ, 0x70D2
0070CC  2FE000     MOV #0xFE00, W0
0070CE  400001     ADD W0, W1, W0
0070D0  88B160     MOV W0, 0x162C
161:                   lcdSetCursorQ(col, 2);
0070D2  B3C021     MOV.B #0x2, W1
0070D4  784009     MOV.B W9, W0
0070D6  07FDCD     RCALL lcdSetCursorQ
162:                   if(!ctrl.pad[4]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
0070D8  2163A0     MOV #0x163A, W0
0070DA  E00410     CP0.B [W0]
0070DC  3A000B     BRA NZ, 0x70F4
0070DE  80B160     MOV 0x162C, W0
0070E0  200201     MOV #0x20, W1
0070E2  781801     MOV W1, [W0++]
0070E4  88B160     MOV W0, 0x162C
0070E6  220A21     MOV #0x20A2, W1
0070E8  500F81     SUB W0, W1, [W15]
0070EA  3A000E     BRA NZ, 0x7108
0070EC  2FE000     MOV #0xFE00, W0
0070EE  400001     ADD W0, W1, W0
0070F0  88B160     MOV W0, 0x162C
0070F2  37000A     BRA 0x7108
0070F4  FB8088     ZE W8, W1
0070F6  80B160     MOV 0x162C, W0
0070F8  781801     MOV W1, [W0++]
0070FA  88B160     MOV W0, 0x162C
0070FC  220A21     MOV #0x20A2, W1
0070FE  500F81     SUB W0, W1, [W15]
007100  3A0003     BRA NZ, 0x7108
007102  2FE000     MOV #0xFE00, W0
007104  400001     ADD W0, W1, W0
007106  88B160     MOV W0, 0x162C
163:                   if(!ctrl.pad[5]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
007108  2163B0     MOV #0x163B, W0
00710A  E00410     CP0.B [W0]
00710C  3A000B     BRA NZ, 0x7124
00710E  80B160     MOV 0x162C, W0
007110  200201     MOV #0x20, W1
007112  781801     MOV W1, [W0++]
007114  88B160     MOV W0, 0x162C
007116  220A21     MOV #0x20A2, W1
007118  500F81     SUB W0, W1, [W15]
00711A  3A000E     BRA NZ, 0x7138
00711C  2FE000     MOV #0xFE00, W0
00711E  400001     ADD W0, W1, W0
007120  88B160     MOV W0, 0x162C
007122  37000A     BRA 0x7138
007124  FB8088     ZE W8, W1
007126  80B160     MOV 0x162C, W0
007128  781801     MOV W1, [W0++]
00712A  88B160     MOV W0, 0x162C
00712C  220A21     MOV #0x20A2, W1
00712E  500F81     SUB W0, W1, [W15]
007130  3A0003     BRA NZ, 0x7138
007132  2FE000     MOV #0xFE00, W0
007134  400001     ADD W0, W1, W0
007136  88B160     MOV W0, 0x162C
164:                   if(!ctrl.pad[6]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
007138  2163C0     MOV #0x163C, W0
00713A  E00410     CP0.B [W0]
00713C  3A000B     BRA NZ, 0x7154
00713E  80B160     MOV 0x162C, W0
007140  200201     MOV #0x20, W1
007142  781801     MOV W1, [W0++]
007144  88B160     MOV W0, 0x162C
007146  220A21     MOV #0x20A2, W1
007148  500F81     SUB W0, W1, [W15]
00714A  3A000E     BRA NZ, 0x7168
00714C  2FE000     MOV #0xFE00, W0
00714E  400001     ADD W0, W1, W0
007150  88B160     MOV W0, 0x162C
007152  37000A     BRA 0x7168
007154  FB8088     ZE W8, W1
007156  80B160     MOV 0x162C, W0
007158  781801     MOV W1, [W0++]
00715A  88B160     MOV W0, 0x162C
00715C  220A21     MOV #0x20A2, W1
00715E  500F81     SUB W0, W1, [W15]
007160  3A0003     BRA NZ, 0x7168
007162  2FE000     MOV #0xFE00, W0
007164  400001     ADD W0, W1, W0
007166  88B160     MOV W0, 0x162C
165:                   if(!ctrl.pad[7]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
007168  2163D0     MOV #0x163D, W0
00716A  E00410     CP0.B [W0]
00716C  3A000B     BRA NZ, 0x7184
00716E  80B160     MOV 0x162C, W0
007170  200201     MOV #0x20, W1
007172  781801     MOV W1, [W0++]
007174  88B160     MOV W0, 0x162C
007176  220A21     MOV #0x20A2, W1
007178  500F81     SUB W0, W1, [W15]
00717A  3A000E     BRA NZ, 0x7198
00717C  2FE000     MOV #0xFE00, W0
00717E  400001     ADD W0, W1, W0
007180  88B160     MOV W0, 0x162C
007182  37000A     BRA 0x7198
007184  FB8088     ZE W8, W1
007186  80B160     MOV 0x162C, W0
007188  781801     MOV W1, [W0++]
00718A  88B160     MOV W0, 0x162C
00718C  220A21     MOV #0x20A2, W1
00718E  500F81     SUB W0, W1, [W15]
007190  3A0003     BRA NZ, 0x7198
007192  2FE000     MOV #0xFE00, W0
007194  400001     ADD W0, W1, W0
007196  88B160     MOV W0, 0x162C
166:                   lcdSetCursorQ(col, 3);
007198  B3C031     MOV.B #0x3, W1
00719A  784009     MOV.B W9, W0
00719C  07FD6A     RCALL lcdSetCursorQ
167:                   if(!ctrl.pad[0]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
00719E  216360     MOV #0x1636, W0
0071A0  E00410     CP0.B [W0]
0071A2  3A000B     BRA NZ, 0x71BA
0071A4  80B160     MOV 0x162C, W0
0071A6  200201     MOV #0x20, W1
0071A8  781801     MOV W1, [W0++]
0071AA  88B160     MOV W0, 0x162C
0071AC  220A21     MOV #0x20A2, W1
0071AE  500F81     SUB W0, W1, [W15]
0071B0  3A000E     BRA NZ, 0x71CE
0071B2  2FE000     MOV #0xFE00, W0
0071B4  400001     ADD W0, W1, W0
0071B6  88B160     MOV W0, 0x162C
0071B8  37000A     BRA 0x71CE
0071BA  FB8088     ZE W8, W1
0071BC  80B160     MOV 0x162C, W0
0071BE  781801     MOV W1, [W0++]
0071C0  88B160     MOV W0, 0x162C
0071C2  220A21     MOV #0x20A2, W1
0071C4  500F81     SUB W0, W1, [W15]
0071C6  3A0003     BRA NZ, 0x71CE
0071C8  2FE000     MOV #0xFE00, W0
0071CA  400001     ADD W0, W1, W0
0071CC  88B160     MOV W0, 0x162C
168:                   if(!ctrl.pad[1]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
0071CE  216370     MOV #0x1637, W0
0071D0  E00410     CP0.B [W0]
0071D2  3A000B     BRA NZ, 0x71EA
0071D4  80B160     MOV 0x162C, W0
0071D6  200201     MOV #0x20, W1
0071D8  781801     MOV W1, [W0++]
0071DA  88B160     MOV W0, 0x162C
0071DC  220A21     MOV #0x20A2, W1
0071DE  500F81     SUB W0, W1, [W15]
0071E0  3A000E     BRA NZ, 0x71FE
0071E2  2FE000     MOV #0xFE00, W0
0071E4  400001     ADD W0, W1, W0
0071E6  88B160     MOV W0, 0x162C
0071E8  37000A     BRA 0x71FE
0071EA  FB8088     ZE W8, W1
0071EC  80B160     MOV 0x162C, W0
0071EE  781801     MOV W1, [W0++]
0071F0  88B160     MOV W0, 0x162C
0071F2  220A21     MOV #0x20A2, W1
0071F4  500F81     SUB W0, W1, [W15]
0071F6  3A0003     BRA NZ, 0x71FE
0071F8  2FE000     MOV #0xFE00, W0
0071FA  400001     ADD W0, W1, W0
0071FC  88B160     MOV W0, 0x162C
169:                   if(!ctrl.pad[2]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
0071FE  216380     MOV #0x1638, W0
007200  E00410     CP0.B [W0]
007202  3A000B     BRA NZ, 0x721A
007204  80B160     MOV 0x162C, W0
007206  200201     MOV #0x20, W1
007208  781801     MOV W1, [W0++]
00720A  88B160     MOV W0, 0x162C
00720C  220A21     MOV #0x20A2, W1
00720E  500F81     SUB W0, W1, [W15]
007210  3A000E     BRA NZ, 0x722E
007212  2FE000     MOV #0xFE00, W0
007214  400001     ADD W0, W1, W0
007216  88B160     MOV W0, 0x162C
007218  37000A     BRA 0x722E
00721A  FB8088     ZE W8, W1
00721C  80B160     MOV 0x162C, W0
00721E  781801     MOV W1, [W0++]
007220  88B160     MOV W0, 0x162C
007222  220A21     MOV #0x20A2, W1
007224  500F81     SUB W0, W1, [W15]
007226  3A0003     BRA NZ, 0x722E
007228  2FE000     MOV #0xFE00, W0
00722A  400001     ADD W0, W1, W0
00722C  88B160     MOV W0, 0x162C
170:                   if(!ctrl.pad[3]){lcdWriteQMac(' ');} else lcdWriteQMac(block);
00722E  216390     MOV #0x1639, W0
007230  E00410     CP0.B [W0]
007232  3A000B     BRA NZ, 0x724A
007234  80B160     MOV 0x162C, W0
007236  200201     MOV #0x20, W1
007238  781801     MOV W1, [W0++]
00723A  88B160     MOV W0, 0x162C
00723C  220A21     MOV #0x20A2, W1
00723E  500F81     SUB W0, W1, [W15]
007240  3A000E     BRA NZ, 0x725E
007242  2FE000     MOV #0xFE00, W0
007244  400001     ADD W0, W1, W0
007246  88B160     MOV W0, 0x162C
007248  37000A     BRA 0x725E
00724A  FB8408     ZE W8, W8
00724C  80B160     MOV 0x162C, W0
00724E  781808     MOV W8, [W0++]
007250  88B160     MOV W0, 0x162C
007252  220A21     MOV #0x20A2, W1
007254  500F81     SUB W0, W1, [W15]
007256  3A0003     BRA NZ, 0x725E
007258  2FE000     MOV #0xFE00, W0
00725A  400001     ADD W0, W1, W0
00725C  88B160     MOV W0, 0x162C
171:               }
00725E  BE044F     MOV.D [--W15], W8
007260  060000     RETURN
172:               
173:               void lcdPoll(void){  
174:                   if(lcdWritePtr!=lcdReadPtr){   
007262  80B170     MOV 0x162E, W0
007264  E3162C     CP 0x162C
007266  320018     BRA Z, 0x7298
175:                       if((*lcdReadPtr>>8)&1) LCD_RS=0;
007268  201001     MOV #0x100, W1
00726A  608090     AND W1, [W0], W1
00726C  320002     BRA Z, 0x7272
00726E  A9EE45     BCLR 0xE45, #7
007270  370001     BRA 0x7274
176:                       else LCD_RS=1;
007272  A8EE45     BSET 0xE45, #7
177:                       if((*lcdReadPtr>>9)&1) PR3=0x2DF0; //2DF0 for ~1.3mS
007274  202001     MOV #0x200, W1
007276  608090     AND W1, [W0], W1
007278  320003     BRA Z, 0x7280
00727A  22DF01     MOV #0x2DF0, W1
00727C  880871     MOV W1, PR3
00727E  370002     BRA 0x7284
178:                       else PR3=0x0120; //120 for ~40uS
007280  201201     MOV #0x120, W1
007282  880871     MOV W1, PR3
179:                       PMDIN1=(*lcdReadPtr++)&0x00FF;
007284  200FF1     MOV #0xFF, W1
007286  6080B0     AND W1, [W0++], W1
007288  883041     MOV W1, PMDIN1
00728A  88B170     MOV W0, 0x162E
180:                       if(lcdReadPtr==&lcdBuf[LCDBUF]) lcdReadPtr=lcdBuf;
00728C  220A21     MOV #0x20A2, W1
00728E  500F81     SUB W0, W1, [W15]
007290  3A0003     BRA NZ, 0x7298
007292  2FE000     MOV #0xFE00, W0
007294  400001     ADD W0, W1, W0
007296  88B170     MOV W0, 0x162E
181:                   } 
182:                   TMR3=0x0000; 
007298  EF210A     CLR TMR3
183:               }
00729A  060000     RETURN
184:               
185:               //ALWAYS SENDS, blocks program
186:               void lcdBlockingSend(unsigned char data){
00729C  BE9F88     MOV.D W8, [W15++]
00729E  781F8A     MOV W10, [W15++]
0072A0  784500     MOV.B W0, W10
187:                   while(PMMODEbits.BUSY)Delay_us(2);
0072A2  E20602     CP0 PMMODE
0072A4  3D0007     BRA GE, 0x72B4
0072A6  200028     MOV #0x2, W8
0072A8  280009     MOV #0x8000, W9
0072AA  780008     MOV W8, W0
0072AC  070585     RCALL Delay_us
0072AE  803011     MOV PMMODE, W1
0072B0  648001     AND W9, W1, W0
0072B2  3AFFFB     BRA NZ, 0x72AA
188:                   PMDIN1=data; 
0072B4  FB850A     ZE W10, W10
0072B6  88304A     MOV W10, PMDIN1
189:               }
0072B8  78054F     MOV [--W15], W10
0072BA  BE044F     MOV.D [--W15], W8
0072BC  060000     RETURN
190:               //ALWAYS SENDS, blocks program
191:               void lcdBlockingClear(void){
0072BE  BE9F88     MOV.D W8, [W15++]
192:                   while(PMMODEbits.BUSY)Delay_us(2);
0072C0  E20602     CP0 PMMODE
0072C2  3D0007     BRA GE, 0x72D2
0072C4  200028     MOV #0x2, W8
0072C6  280009     MOV #0x8000, W9
0072C8  780008     MOV W8, W0
0072CA  070576     RCALL Delay_us
0072CC  803011     MOV PMMODE, W1
0072CE  648001     AND W9, W1, W0
0072D0  3AFFFB     BRA NZ, 0x72C8
193:                   PMDIN1=LCD_CLEARDISPLAY; 
0072D2  200010     MOV #0x1, W0
0072D4  883040     MOV W0, PMDIN1
194:               }
0072D6  BE044F     MOV.D [--W15], W8
0072D8  060000     RETURN
195:               
196:               //ALWAYS SENDS, blocks program
197:               void lcdBlockingReturn(void){
0072DA  BE9F88     MOV.D W8, [W15++]
198:                   while(PMMODEbits.BUSY)Delay_us(2);
0072DC  E20602     CP0 PMMODE
0072DE  3D0007     BRA GE, 0x72EE
0072E0  200028     MOV #0x2, W8
0072E2  280009     MOV #0x8000, W9
0072E4  780008     MOV W8, W0
0072E6  070568     RCALL Delay_us
0072E8  803011     MOV PMMODE, W1
0072EA  648001     AND W9, W1, W0
0072EC  3AFFFB     BRA NZ, 0x72E4
199:                   PMDIN1=LCD_RETURNHOME;
0072EE  200020     MOV #0x2, W0
0072F0  883040     MOV W0, PMDIN1
200:               }
0072F2  BE044F     MOV.D [--W15], W8
0072F4  060000     RETURN
201:               
202:               void lcdInit(void){
203:                   LCD_RS=0;
0072F6  A9EE45     BCLR 0xE45, #7
204:                   lcdBlockingSend(0x38);              //function set, 8 bits, 2 line disp, 5x8
0072F8  B3C380     MOV.B #0x38, W0
0072FA  07FFD0     RCALL lcdBlockingSend
205:                   Delay_us(4500);                //>4.1 mS required
0072FC  211940     MOV #0x1194, W0
0072FE  07055C     RCALL Delay_us
206:                   lcdBlockingSend(0x0C);              //display on, cursor on, blink on   (0f for blink+cursor)
007300  B3C0C0     MOV.B #0xC, W0
007302  07FFCC     RCALL lcdBlockingSend
207:                   Delay_us(4500);
007304  211940     MOV #0x1194, W0
007306  070558     RCALL Delay_us
208:                   lcdBlockingClear();                    //Display Clear  
007308  07FFDA     RCALL lcdBlockingClear
209:                   Delay_us(1800);                //>1.64mS required
00730A  207080     MOV #0x708, W0
00730C  070555     RCALL Delay_us
210:                   lcdBlockingSend(0x06);               // entry Mode Set
00730E  B3C060     MOV.B #0x6, W0
007310  07FFC5     RCALL lcdBlockingSend
211:                   Delay_us(200);
007312  200C80     MOV #0xC8, W0
007314  070551     RCALL Delay_us
212:                   lcdBlockingReturn();
007316  07FFE1     RCALL lcdBlockingReturn
213:                   Delay_us(1500);
007318  205DC0     MOV #0x5DC, W0
00731A  07054E     RCALL Delay_us
214:                   
215:                   //lcdCustomSymbols();
216:                   Delay_us(200);
00731C  200C80     MOV #0xC8, W0
00731E  07054C     RCALL Delay_us
217:                   lcdBlockingClear();                         //Display Clear  
007320  07FFCE     RCALL lcdBlockingClear
218:                   Delay_us(1500);
007322  205DC0     MOV #0x5DC, W0
007324  070549     RCALL Delay_us
219:                   lcdBlockingReturn();
007326  07FFD9     RCALL lcdBlockingReturn
220:                   Delay_us(200);
007328  200C80     MOV #0xC8, W0
00732A  070546     RCALL Delay_us
221:               }
00732C  060000     RETURN
---  C:/Users/ryan/Documents/seniorproject/ps-040/main.c  -----------------------------------------------
1:                 #include <xc.h>
2:                 #include <p33EP512GM310.h>
3:                 #include <dsp.h>
4:                 #include "common.h"
5:                 #include "devInits.h"
6:                 #include "utilities.h"
7:                 #include "audio.h"
8:                 #include "sounds.h"
9:                 #include "flash.h"
10:                #include "plcd.h"
11:                
12:                #pragma config ICS = PGD1       //pgeDC 1 is used
13:                #pragma config JTAGEN = OFF     //disable jtag
14:                #pragma config BOREN = OFF      //disable brown out (FYI possible erratta case in 33eMU810)
15:                #pragma config FWDTEN = OFF     //disable watchdog timer 
16:                #pragma config GCP = OFF        //disable general segment code protect
17:                #pragma config PLLKEN = ON      //wait for PLL lock
18:                #pragma config POSCMD = NONE    //no external oscillator
19:                #pragma config OSCIOFNC = OFF   //OSC2 is clock output
20:                #pragma config FNOSC = FRCPLL   //clock source
21:                
22:                /* Data Buffers & index variables */
23:                fractional  outputA[STREAMBUF], outputB[STREAMBUF],
24:                            streamA[STREAMBUF], streamB[STREAMBUF];
25:                unsigned int write_ptr=0, rw=0, frameReady=0;
26:                
27:                unsigned char   TxBufferA[FLASH_DMAXFER_BYTES] __attribute__((space(xmemory))),
28:                                RxBufferA[FLASH_DMAXFER_BYTES] __attribute__((space(xmemory)));
29:                fractional      RxBufferB[STREAMBUF] __attribute__((space(xmemory)));
30:                
31:                /* Debug Variables */
32:                unsigned int process_time=0;
33:                
34:                struct sflags stat = {  .UART_ON = TRUE,
35:                                        .TEST_SIN = FALSE,
36:                                        .FLASH_DMA = FALSE,
37:                                        .DMA_JUSTREAD = FALSE,
38:                                        .DMA_READING = FALSE,
39:                                        .hard_clipped = FALSE};
40:                
41:                
42:                /* Screen state variables */
43:                enum screenStruc state = scrnFX;
44:                enum screenStruc laststate = invalid;
45:                enum fxStruct fxUnits[NUMFXUNITS]={0,0};
46:                
47:                /* Buttons & Potentiometers */
48:                struct ctrlsrfc ctrl = {0};
49:                
50:                unsigned char btread;
51:                
52:                void initBuffers(void){
00879C  BE9F88     MOV.D W8, [W15++]
0087A0  21AA28     MOV #0x1AA2, W8
0087A2  EB0480     CLR W9
0087A6  21CA26     MOV #0x1CA2, W6
0087A8  EB0380     CLR W7
0087AC  B90161     MUL.SU W0, #1, W2
0087AE  410102     ADD W2, W2, W2
0087B0  498183     ADDC W3, W3, W3
0087C2  216364     MOV #0x1636, W4
0087C4  EB0280     CLR W5
0087D6  210008     MOV #0x1000, W8
0087D8  EB0480     CLR W9
0087DC  212006     MOV #0x1200, W6
0087DE  EB0380     CLR W7
0087E2  B90161     MUL.SU W0, #1, W2
53:                    int i;
54:                    
55:                    for(i=0; i<STREAMBUF; i++){
00879E  EB0000     CLR W0
0087AA  201005     MOV #0x100, W5
0087BA  E80000     INC W0, W0
0087BC  500F85     SUB W0, W5, [W15]
0087BE  3AFFF6     BRA NZ, 0x87AC
0087C0  EB0000     CLR W0
56:                        streamA[i]=0;
0087A4  EB0080     CLR W1
0087B2  410208     ADD W2, W8, W4
0087B4  780A01     MOV W1, [W4]
57:                        streamB[i]=0;
0087B6  410106     ADD W2, W6, W2
0087B8  780901     MOV W1, [W2]
58:                    }
59:                    
60:                    for(i=0; i<BUTTONS; i++)
0087C8  200232     MOV #0x23, W2
0087CE  E80000     INC W0, W0
0087D0  500F82     SUB W0, W2, [W15]
0087D2  3AFFFB     BRA NZ, 0x87CA
0087D4  EB0000     CLR W0
61:                        ctrl.pad[i]=1;
0087C6  B3C013     MOV.B #0x1, W3
0087CA  400084     ADD W0, W4, W1
0087CC  784883     MOV.B W3, [W1]
62:                    
63:                    for(i=0; i<FLASH_DMAXFER_BYTES; i++){
0087E0  202005     MOV #0x200, W5
0087EC  E80000     INC W0, W0
0087EE  500F85     SUB W0, W5, [W15]
0087F0  3AFFF8     BRA NZ, 0x87E2
64:                        TxBufferA[i]=0;
0087DA  EB4080     CLR.B W1
0087E4  410208     ADD W2, W8, W4
0087E6  784A01     MOV.B W1, [W4]
65:                        RxBufferA[i]=0;
0087E8  410106     ADD W2, W6, W2
0087EA  784901     MOV.B W1, [W2]
66:                    }
67:                }
0087F2  BE044F     MOV.D [--W15], W8
0087F4  060000     RETURN
68:                
69:                int main(void) {
0087F6  BE9F88     MOV.D W8, [W15++]
0087F8  BE9F8A     MOV.D W10, [W15++]
0087FA  BE9F8C     MOV.D W12, [W15++]
0087FC  781F8E     MOV W14, [W15++]
70:                    initPorts();                    // Configure io device & adc 
0087FE  07FAE5     RCALL initPorts
71:                    initBuffers();
008800  07FFCD     RCALL initBuffers
72:                    initDMA();
008802  07FC93     RCALL initDMA
73:                    initSPI3_MEM();                 // Start flash 
008804  07FCC0     RCALL initSPI3_MEM
74:                    initDCI_DAC();                  // Configure & enable DAC
008806  07FC6B     RCALL initDCI_DAC
75:                    //genSine(STREAMBUF);
76:                    initADC1();                     // Configure & enable internal ADC
008808  07FC0F     RCALL initADC1
77:                    initPMP();
00880A  07FC2A     RCALL initPMP
78:                    initQEI_ENC();
00880C  07FCE0     RCALL initQEI_ENC
79:                    if(stat.UART_ON) initUART1();        // Configure & enable UART
00880E  223080     MOV #0x2308, W0
008810  E00410     CP0.B [W0]
008812  320001     BRA Z, 0x8816
008814  07FBF6     RCALL initUART1
80:                    
81:                    initT1();                       // Configure & start T1 
008816  07FC38     RCALL initT1
82:                    initT2();                       // Configure & start T2 
008818  07FC40     RCALL initT2
83:                    initT3();                       // Configure & start T3 for lcd
00881A  07FC4B     RCALL initT3
84:                    //initT5();
85:                    fractional *ping, *pong;
86:                    
87:                    while(1){    
88:                        if(frameReady) {
008826  E21604     CP0 frameReady
008828  32001B     BRA Z, 0x8860
89:                            if(rw){
00882A  E21602     CP0 rw
00882C  320003     BRA Z, 0x8834
90:                                ping = streamA;
008824  21AA2E     MOV #0x1AA2, W14
008830  78040E     MOV W14, W8
008832  370002     BRA 0x8838
91:                                pong = outputB;
008822  218A2D     MOV #0x18A2, W13
00882E  78048D     MOV W13, W9
92:                            }else{
93:                                ping = streamB;
008820  21CA2C     MOV #0x1CA2, W12
008836  78040C     MOV W12, W8
94:                                pong = outputA;
00881E  216A2B     MOV #0x16A2, W11
008834  78048B     MOV W11, W9
95:                            }
96:                            if(stat.DMA_JUSTREAD==TRUE){    
00881C  2230BA     MOV #0x230B, W10
008838  EBC000     SETM.B W0
00883A  104F9A     SUBR.B W0, [W10], [W15]
00883C  3A0007     BRA NZ, 0x884C
97:                                stat.DMA_JUSTREAD=FALSE;
00883E  EB4D00     CLR.B [W10]
98:                                flashProcessRead();                             // Process DMA requested read data
008840  07FF21     RCALL flashProcessRead
99:                                VectorAdd(STREAMBUF, ping, ping, RxBufferB);
008842  214003     MOV #0x1400, W3
008844  780108     MOV W8, W2
008846  780088     MOV W8, W1
008848  201000     MOV #0x100, W0
00884A  07BE15     RCALL _VectorAdd
100:                           }
101:                           if(state==scrnFX){
00884C  80B1A0     MOV 0x1634, W0
00884E  500FE1     SUB W0, #0x1, [W15]
008850  3A0002     BRA NZ, 0x8856
102:                               flashFXops(ping);
008852  780008     MOV W8, W0
008854  07FF64     RCALL flashFXops
103:                           }
104:                           
105:                           processAudio(ping, pong); 
008856  BE0008     MOV.D W8, W0
008858  07FDD8     RCALL processAudio
106:                           process_time=write_ptr;    //DEBUG
00885A  F81600     PUSH write_ptr
00885C  F91606     POP process_time
107:                           frameReady=0;
00885E  EF3604     CLR frameReady
108:                       }
109:                       if(_T2IF){
008860  ABE800     BTST IFS0, #7
008862  320005     BRA Z, 0x886E
110:                           scanButtons();                   //read button matrix
008864  07F89B     RCALL scanButtons
111:                           if(_AD1IF) readPots();
008866  ABA801     BTST 0x801, #5
008868  320001     BRA Z, 0x886C
00886A  07F912     RCALL readPots
112:                           _T2IF=0;
00886C  A9E800     BCLR IFS0, #7
113:                       }
114:                       if(_T1IF){
00886E  AB6800     BTST IFS0, #3
008870  320002     BRA Z, 0x8876
115:                           display();
008872  07FA15     RCALL display
116:                           _T1IF=0;
008874  A96800     BCLR IFS0, #3
117:                       }
118:                       if(_T3IF) {
008876  AB0801     BTST 0x801, #0
008878  32FFD6     BRA Z, 0x8826
119:                           lcdPoll();
00887A  07F4F3     RCALL lcdPoll
120:                           _T3IF=0;
00887C  A90801     BCLR 0x801, #0
00887E  37FFD3     BRA 0x8826
121:                       }
122:                   }
123:                   return 0;
124:               }
---  C:/Users/ryan/Documents/seniorproject/ps-040/flash.c  ----------------------------------------------
1:                 /*
2:                  This file has hardware routines for flash writing and DMA read/writes
3:                  */
4:                 #include <xc.h>
5:                 #include <dsp.h>
6:                 #include "flash.h"
7:                 #include "common.h"
8:                 
9:                 char receive;
10:                unsigned long  writeAddr=0, readAddr=0, eraseAddr=0;
11:                
12:                extern unsigned char    TxBufferA[FLASH_DMAXFER_BYTES]__attribute__((space(xmemory))), 
13:                                        RxBufferA[FLASH_DMAXFER_BYTES]__attribute__((space(xmemory)));
14:                extern fractional       RxBufferB[STREAMBUF] __attribute__((space(xmemory)));
15:                
16:                extern struct sflags stat;
17:                extern struct ctrlsrfc ctrl;
18:                
19:                
20:                void flashWriteReg(char command) {
21:                    if(stat.FLASH_DMA==FALSE){
0084DC  2230A1     MOV #0x230A, W1
0084DE  E00411     CP0.B [W1]
0084E0  3A000B     BRA NZ, 0x84F8
22:                        SS3a=0;
0084E2  A92E54     BCLR LATF, #1
23:                        SPI3BUF=command;               //WEL=1 for write enable
0084E4  FB0000     SE W0, W0
0084E6  881540     MOV W0, SPI3BUF
24:                        while(!_SPI3IF); _SPI3IF=0;
0084E8  208001     MOV #0x800, W1
0084EA  804052     MOV IFS5, W2
0084EC  608002     AND W1, W2, W0
0084EE  32FFFD     BRA Z, 0x84EA
0084F0  A9680B     BCLR 0x80B, #3
25:                        receive=SPI3BUF;
0084F2  801540     MOV SPI3BUF, W0
0084F4  B7F61C     MOV.B WREG, receive
26:                        SS3a=1;
0084F6  A82E54     BSET LATF, #1
27:                    }
28:                }
0084F8  060000     RETURN
29:                
30:                void flashWriteBreg(char newreg){
0084FA  781F88     MOV W8, [W15++]
0084FC  784400     MOV.B W0, W8
31:                    if(stat.FLASH_DMA==FALSE){
0084FE  2230A0     MOV #0x230A, W0
008500  E00410     CP0.B [W0]
008502  3A0015     BRA NZ, 0x852E
32:                        flashWriteReg(FLASH_WREN);
008504  B3C060     MOV.B #0x6, W0
008506  07FFEA     RCALL flashWriteReg
33:                        SS3a=0;
008508  A92E54     BCLR LATF, #1
34:                        SPI3BUF=FLASH_BRWR;               //WEL=1 for write enable
00850A  200170     MOV #0x17, W0
00850C  881540     MOV W0, SPI3BUF
35:                        while(!_SPI3IF); _SPI3IF=0;
00850E  208001     MOV #0x800, W1
008510  804052     MOV IFS5, W2
008512  608002     AND W1, W2, W0
008514  32FFFD     BRA Z, 0x8510
008516  A9680B     BCLR 0x80B, #3
36:                        receive=SPI3BUF;
008518  801540     MOV SPI3BUF, W0
37:                        SPI3BUF=newreg;               //WEL=1 for write enable
00851A  FB0408     SE W8, W8
00851C  881548     MOV W8, SPI3BUF
38:                        while(!_SPI3IF); _SPI3IF=0;
00851E  208001     MOV #0x800, W1
008520  804052     MOV IFS5, W2
008522  608002     AND W1, W2, W0
008524  32FFFD     BRA Z, 0x8520
008526  A9680B     BCLR 0x80B, #3
39:                        receive=SPI3BUF;
008528  801540     MOV SPI3BUF, W0
00852A  B7F61C     MOV.B WREG, receive
40:                        SS3a=1;
00852C  A82E54     BSET LATF, #1
41:                    }
42:                }
00852E  78044F     MOV [--W15], W8
008530  060000     RETURN
43:                
44:                char flashStatusCheck(char command){
008532  784100     MOV.B W0, W2
45:                    if(stat.FLASH_DMA==FALSE){
008536  2230A1     MOV #0x230A, W1
008538  E00411     CP0.B [W1]
00853A  3A0015     BRA NZ, 0x8566
46:                        SS3a=0;
00853C  A92E54     BCLR LATF, #1
47:                        SPI3BUF=command;               //WEL=1 for write enable
00853E  FB0102     SE W2, W2
008540  881542     MOV W2, SPI3BUF
48:                        while(!_SPI3IF); _SPI3IF=0;
008542  208001     MOV #0x800, W1
008544  804052     MOV IFS5, W2
008546  608002     AND W1, W2, W0
008548  32FFFD     BRA Z, 0x8544
00854A  A9680B     BCLR 0x80B, #3
49:                        receive=SPI3BUF;
00854C  801540     MOV SPI3BUF, W0
50:                        SPI3BUF=0x00;               //WEL=1 for write enable
00854E  EF22A8     CLR SPI3BUF
51:                        while(!_SPI3IF); _SPI3IF=0;
008550  208001     MOV #0x800, W1
008552  804053     MOV IFS5, W3
008554  608003     AND W1, W3, W0
008556  32FFFD     BRA Z, 0x8552
008558  A9680B     BCLR 0x80B, #3
52:                        receive=SPI3BUF;
00855A  801541     MOV SPI3BUF, W1
00855C  784001     MOV.B W1, W0
00855E  784181     MOV.B W1, W3
008560  2161C2     MOV #0x161C, W2
008562  784903     MOV.B W3, [W2]
53:                        SS3a=1;
008564  A82E54     BSET LATF, #1
54:                        return receive;
55:                    }
56:                    return 0;
008534  EB4000     CLR.B W0
57:                }
008566  060000     RETURN
58:                
59:                void flashWritePage(fractional* source, long address){
008568  BE9F88     MOV.D W8, [W15++]
00856A  BE9F8A     MOV.D W10, [W15++]
00856C  BE9F8C     MOV.D W12, [W15++]
00856E  781F8E     MOV W14, [W15++]
008570  780500     MOV W0, W10
008572  BE0402     MOV.D W2, W8
008584  B85661     MUL.UU W10, #1, W12
008586  210001     MOV #0x1000, W1
008588  B80D61     MUL.UU W1, #1, W10
00858A  E80081     INC W1, W1
00858C  B80B61     MUL.UU W1, #1, W6
008590  B90161     MUL.SU W0, #1, W2
0085A0  E88000     INC2 W0, W0
60:                    if(stat.FLASH_DMA==FALSE){
008574  2230A0     MOV #0x230A, W0
008576  E00410     CP0.B [W0]
008578  3A003F     BRA NZ, 0x85F8
61:                        int i;
62:                        fractional sample;
63:                        
64:                        flashWriteReg(FLASH_WREN);
00857A  B3C060     MOV.B #0x6, W0
00857C  07FFAF     RCALL flashWriteReg
65:                        stat.FLASH_DMA=TRUE;
00857E  2230A0     MOV #0x230A, W0
008580  EBC800     SETM.B [W0]
66:                        
67:                        for(i=0; i<FLASH_DMAXFER_BYTES; i++){
008582  EB0000     CLR W0
00858E  202005     MOV #0x200, W5
0085A2  500F85     SUB W0, W5, [W15]
0085A4  3AFFF5     BRA NZ, 0x8590
68:                            sample=*source++;
008592  41008C     ADD W2, W12, W1
008594  780091     MOV [W1], W1
69:                            TxBufferA[i++]=(sample>>8)&0xFF;
008596  41020A     ADD W2, W10, W4
008598  DE0F48     LSR W1, #8, W14
00859A  784A0E     MOV.B W14, [W4]
70:                            TxBufferA[i]=sample&0xFF;
00859C  410106     ADD W2, W6, W2
00859E  784901     MOV.B W1, [W2]
71:                        }
72:                        SS3a=0;
0085A6  A92E54     BCLR LATF, #1
73:                
74:                        SPI3BUF=FLASH_PP;
0085A8  200020     MOV #0x2, W0
0085AA  881540     MOV W0, SPI3BUF
75:                        while(!_SPI3IF); _SPI3IF=0;
0085AC  208001     MOV #0x800, W1
0085AE  804052     MOV IFS5, W2
0085B0  608002     AND W1, W2, W0
0085B2  32FFFD     BRA Z, 0x85AE
0085B4  A9680B     BCLR 0x80B, #3
76:                        receive=SPI3BUF;
0085B6  801540     MOV SPI3BUF, W0
77:                        SPI3BUF=(address>>16)&0xFF;                  
0085B8  FB8009     ZE W9, W0
0085BA  881540     MOV W0, SPI3BUF
78:                        while(!_SPI3IF); _SPI3IF=0;
0085BC  208001     MOV #0x800, W1
0085BE  804052     MOV IFS5, W2
0085C0  608002     AND W1, W2, W0
0085C2  32FFFD     BRA Z, 0x85BE
0085C4  A9680B     BCLR 0x80B, #3
79:                        receive=SPI3BUF;
0085C6  801540     MOV SPI3BUF, W0
80:                        SPI3BUF=(address>>8)&0xFF;                  
0085C8  DD4948     SL W9, #8, W2
0085CA  DE4048     LSR W8, #8, W0
0085CC  710000     IOR W2, W0, W0
0085CE  DEC8C8     ASR W9, #8, W1
0085D0  FB8000     ZE W0, W0
0085D2  881540     MOV W0, SPI3BUF
81:                        while(!_SPI3IF); _SPI3IF=0;
0085D4  208001     MOV #0x800, W1
0085D6  804052     MOV IFS5, W2
0085D8  608002     AND W1, W2, W0
0085DA  32FFFD     BRA Z, 0x85D6
0085DC  A9680B     BCLR 0x80B, #3
82:                        receive=SPI3BUF;
0085DE  801540     MOV SPI3BUF, W0
83:                        SPI3BUF=(address&0xFF);               
0085E0  FB8408     ZE W8, W8
0085E2  881548     MOV W8, SPI3BUF
84:                        while(!_SPI3IF); _SPI3IF=0;
0085E4  208001     MOV #0x800, W1
0085E6  804052     MOV IFS5, W2
0085E8  608002     AND W1, W2, W0
0085EA  32FFFD     BRA Z, 0x85E6
0085EC  A9680B     BCLR 0x80B, #3
85:                        receive=SPI3BUF;
0085EE  801540     MOV SPI3BUF, W0
0085F0  B7F61C     MOV.B WREG, receive
86:                
87:                
88:                        DMA1CONbits.CHEN = 1;
0085F2  A8EB11     BSET 0xB11, #7
89:                        DMA0CONbits.CHEN = 1;
0085F4  A8EB01     BSET 0xB01, #7
90:                        DMA0REQbits.FORCE = 1; // Manual mode: Kick-start the 1st transfer           
0085F6  A8EB03     BSET 0xB03, #7
91:                        //while(!_DMA1IF);  //works  
92:                    }
93:                }
0085F8  78074F     MOV [--W15], W14
0085FA  BE064F     MOV.D [--W15], W12
0085FC  BE054F     MOV.D [--W15], W10
0085FE  BE044F     MOV.D [--W15], W8
008600  060000     RETURN
94:                
95:                void flashStartRead(long address){
008602  BE9F88     MOV.D W8, [W15++]
008604  BE0400     MOV.D W0, W8
00860E  210006     MOV #0x1000, W6
008610  EB0380     CLR W7
96:                    if(stat.FLASH_DMA==FALSE){
008606  2230A0     MOV #0x230A, W0
008608  E00410     CP0.B [W0]
00860A  3A003A     BRA NZ, 0x8680
00860C  EB0080     CLR W1
97:                        int i;
98:                
99:                        for(i=0; i<FLASH_DMAXFER_BYTES; i++){
008614  202003     MOV #0x200, W3
00861A  E80081     INC W1, W1
00861C  508F83     SUB W1, W3, [W15]
00861E  3AFFFB     BRA NZ, 0x8616
100:                           TxBufferA[i]=0;
008612  EB4200     CLR.B W4
008616  408106     ADD W1, W6, W2
008618  784904     MOV.B W4, [W2]
101:                       }
102:               
103:                       stat.FLASH_DMA=TRUE;
008620  EBC000     SETM.B W0
008622  2230A1     MOV #0x230A, W1
008624  784880     MOV.B W0, [W1]
104:                       stat.DMA_READING=TRUE;
008626  E88081     INC2 W1, W1
008628  784880     MOV.B W0, [W1]
105:                       stat.DMA_JUSTREAD=FALSE;
00862A  E90001     DEC W1, W0
00862C  EB4800     CLR.B [W0]
106:                       
107:                       SS3a=0;
00862E  A92E54     BCLR LATF, #1
108:                       SPI3BUF=FLASH_READ;
008630  200030     MOV #0x3, W0
008632  881540     MOV W0, SPI3BUF
109:                       while(!_SPI3IF); _SPI3IF=0;
008634  208002     MOV #0x800, W2
008636  804050     MOV IFS5, W0
008638  610080     AND W2, W0, W1
00863A  32FFFD     BRA Z, 0x8636
00863C  A9680B     BCLR 0x80B, #3
110:                       receive=SPI3BUF;
00863E  801540     MOV SPI3BUF, W0
111:                       SPI3BUF=(address>>16)&0xFF;                  
008640  FB8009     ZE W9, W0
008642  881540     MOV W0, SPI3BUF
112:                       while(!_SPI3IF); _SPI3IF=0;
008644  208002     MOV #0x800, W2
008646  804050     MOV IFS5, W0
008648  610080     AND W2, W0, W1
00864A  32FFFD     BRA Z, 0x8646
00864C  A9680B     BCLR 0x80B, #3
113:                       receive=SPI3BUF;
00864E  801540     MOV SPI3BUF, W0
114:                       SPI3BUF=(address>>8)&0xFF;                  
008650  DD4948     SL W9, #8, W2
008652  DE4048     LSR W8, #8, W0
008654  710000     IOR W2, W0, W0
008656  DEC8C8     ASR W9, #8, W1
008658  FB8000     ZE W0, W0
00865A  881540     MOV W0, SPI3BUF
115:                       while(!_SPI3IF); _SPI3IF=0;
00865C  208002     MOV #0x800, W2
00865E  804050     MOV IFS5, W0
008660  610080     AND W2, W0, W1
008662  32FFFD     BRA Z, 0x865E
008664  A9680B     BCLR 0x80B, #3
116:                       receive=SPI3BUF;
008666  801540     MOV SPI3BUF, W0
117:                       SPI3BUF=(address&0xFF);               
008668  FB8408     ZE W8, W8
00866A  881548     MOV W8, SPI3BUF
118:                       while(!_SPI3IF); _SPI3IF=0;
00866C  208001     MOV #0x800, W1
00866E  804052     MOV IFS5, W2
008670  608002     AND W1, W2, W0
008672  32FFFD     BRA Z, 0x866E
008674  A9680B     BCLR 0x80B, #3
119:                       receive=SPI3BUF;
008676  801540     MOV SPI3BUF, W0
008678  B7F61C     MOV.B WREG, receive
120:               
121:                       //DMA1STAL = (unsigned int)(&RxBufferA);
122:                       //DMA0STAL = (unsigned int)(&outputA);
123:                       //DMA1CNT = (unsigned int)(FLASH_DMAXFERS-1);
124:                       //DMA0CNT = (unsigned int)(FLASH_DMAXFERS-1);
125:               
126:                       /* Kick off dma read here */
127:                       DMA1CONbits.CHEN = 1;
00867A  A8EB11     BSET 0xB11, #7
128:                       DMA0CONbits.CHEN = 1;
00867C  A8EB01     BSET 0xB01, #7
129:                       DMA0REQbits.FORCE = 1; // Manual mode: Kick-start the 1st transfer
00867E  A8EB03     BSET 0xB03, #7
130:                       //while(!_DMA1IF);  //works
131:                   }
132:               }
008680  BE044F     MOV.D [--W15], W8
008682  060000     RETURN
133:               
134:               void flashProcessRead(void){
008684  BE9F88     MOV.D W8, [W15++]
008686  BE9F8A     MOV.D W10, [W15++]
00868A  212001     MOV #0x1200, W1
00868C  21400A     MOV #0x1400, W10
00868E  EB0580     CLR W11
008690  B80C61     MUL.UU W1, #1, W8
008692  E80081     INC W1, W1
008694  B80B61     MUL.UU W1, #1, W6
008698  B90161     MUL.SU W0, #1, W2
0086A8  E88000     INC2 W0, W0
135:                   int i,j; 
136:                   
137:                   for(i=j=0; i<STREAMBUF; i++){
008688  EB0000     CLR W0
008696  202005     MOV #0x200, W5
0086AA  500F85     SUB W0, W5, [W15]
0086AC  3AFFF5     BRA NZ, 0x8698
138:                       unsigned int temp = (RxBufferA[j++]<<8)&0xFF00;
00869C  410208     ADD W2, W8, W4
00869E  FB8214     ZE [W4], W4
0086A0  DD2248     SL W4, #8, W4
139:                       RxBufferB[i]=(temp|RxBufferA[j++]);
00869A  41008A     ADD W2, W10, W1
0086A2  410106     ADD W2, W6, W2
0086A4  FB8112     ZE [W2], W2
0086A6  720882     IOR W4, W2, [W1]
140:                   }    
141:               }
0086AE  BE054F     MOV.D [--W15], W10
0086B0  BE044F     MOV.D [--W15], W8
0086B2  060000     RETURN
142:               
143:               void flashEraseSector(long address){
0086B4  BE9F88     MOV.D W8, [W15++]
0086B6  BE0400     MOV.D W0, W8
144:                   if(stat.FLASH_DMA==FALSE){
0086B8  2230A0     MOV #0x230A, W0
0086BA  E00410     CP0.B [W0]
0086BC  3A0029     BRA NZ, 0x8710
145:                       flashWriteReg(FLASH_WREN);
0086BE  B3C060     MOV.B #0x6, W0
0086C0  07FF0D     RCALL flashWriteReg
146:                       SS3a=0;
0086C2  A92E54     BCLR LATF, #1
147:                       SPI3BUF=FLASH_SE;                 
0086C4  200D80     MOV #0xD8, W0
0086C6  881540     MOV W0, SPI3BUF
148:                       while(!_SPI3IF); _SPI3IF=0;
0086C8  208001     MOV #0x800, W1
0086CA  804052     MOV IFS5, W2
0086CC  608002     AND W1, W2, W0
0086CE  32FFFD     BRA Z, 0x86CA
0086D0  A9680B     BCLR 0x80B, #3
149:                       receive=SPI3BUF;
0086D2  801540     MOV SPI3BUF, W0
150:                       SPI3BUF=(address>>16)&0xFF;                  
0086D4  FB8009     ZE W9, W0
0086D6  881540     MOV W0, SPI3BUF
151:                       while(!_SPI3IF); _SPI3IF=0;
0086D8  208001     MOV #0x800, W1
0086DA  804052     MOV IFS5, W2
0086DC  608002     AND W1, W2, W0
0086DE  32FFFD     BRA Z, 0x86DA
0086E0  A9680B     BCLR 0x80B, #3
152:                       receive=SPI3BUF;
0086E2  801540     MOV SPI3BUF, W0
153:                       SPI3BUF=(address>>8)&0xFF;                  
0086E4  DD4948     SL W9, #8, W2
0086E6  DE4048     LSR W8, #8, W0
0086E8  710000     IOR W2, W0, W0
0086EA  DEC8C8     ASR W9, #8, W1
0086EC  FB8000     ZE W0, W0
0086EE  881540     MOV W0, SPI3BUF
154:                       while(!_SPI3IF); _SPI3IF=0;
0086F0  208001     MOV #0x800, W1
0086F2  804052     MOV IFS5, W2
0086F4  608002     AND W1, W2, W0
0086F6  32FFFD     BRA Z, 0x86F2
0086F8  A9680B     BCLR 0x80B, #3
155:                       receive=SPI3BUF;
0086FA  801540     MOV SPI3BUF, W0
156:                       SPI3BUF=(address&0xFF);               
0086FC  FB8408     ZE W8, W8
0086FE  881548     MOV W8, SPI3BUF
157:                       while(!_SPI3IF); _SPI3IF=0;
008700  208001     MOV #0x800, W1
008702  804052     MOV IFS5, W2
008704  608002     AND W1, W2, W0
008706  32FFFD     BRA Z, 0x8702
008708  A9680B     BCLR 0x80B, #3
158:                       receive=SPI3BUF;
00870A  801540     MOV SPI3BUF, W0
00870C  B7F61C     MOV.B WREG, receive
159:                       SS3a=1;
00870E  A82E54     BSET LATF, #1
160:                   }
161:               }
008710  BE044F     MOV.D [--W15], W8
008712  060000     RETURN
162:               
163:               void flashBulkErase(void) {
164:                   flashWriteReg(FLASH_WREN);
008714  B3C060     MOV.B #0x6, W0
008716  07FEE2     RCALL flashWriteReg
165:                   flashWriteReg(FLASH_FRMT);
008718  B3C600     MOV.B #0x60, W0
00871A  07FEE0     RCALL flashWriteReg
166:               }
00871C  060000     RETURN
167:               
168:               void flashFXops(fractional* stream){
00871E  781F88     MOV W8, [W15++]
008720  780400     MOV W0, W8
169:                   if(!ctrl.pad[33]) flashBulkErase();
008722  216570     MOV #0x1657, W0
008724  E00410     CP0.B [W0]
008726  3A0001     BRA NZ, 0x872A
008728  07FFF5     RCALL flashBulkErase
170:                   if(!ctrl.pad[3]){
00872A  216390     MOV #0x1639, W0
00872C  E00410     CP0.B [W0]
00872E  3A000B     BRA NZ, 0x8746
171:                       flashWritePage(stream, writeAddr);
008730  80B082     MOV writeAddr, W2
008732  80B093     MOV 0x1612, W3
008734  780008     MOV W8, W0
008736  07FF18     RCALL flashWritePage
172:                       writeAddr+=FLASH_PAGE;
008738  80B080     MOV writeAddr, W0
00873A  80B091     MOV 0x1612, W1
00873C  B02000     ADD #0x200, W0
00873E  B08001     ADDC #0x0, W1
008740  88B080     MOV W0, writeAddr
008742  88B091     MOV W1, 0x1612
008744  370002     BRA 0x874A
173:                   } else writeAddr=0;
008746  EF3610     CLR writeAddr
008748  EF3612     CLR 0x1612
174:                   if(!ctrl.pad[4]){
00874A  2163A0     MOV #0x163A, W0
00874C  E00410     CP0.B [W0]
00874E  3A000A     BRA NZ, 0x8764
175:                       flashStartRead(readAddr);     // READBACK
008750  80B0A0     MOV readAddr, W0
008752  80B0B1     MOV 0x1616, W1
008754  07FF56     RCALL flashStartRead
176:                       readAddr+=FLASH_PAGE;
008756  80B0A0     MOV readAddr, W0
008758  80B0B1     MOV 0x1616, W1
00875A  B02000     ADD #0x200, W0
00875C  B08001     ADDC #0x0, W1
00875E  88B0A0     MOV W0, readAddr
008760  88B0B1     MOV W1, 0x1616
008762  370002     BRA 0x8768
177:                   } else readAddr=0;
008764  EF3614     CLR readAddr
008766  EF3616     CLR 0x1616
178:                   if(!ctrl.pad[5]){
008768  2163B0     MOV #0x163B, W0
00876A  E00410     CP0.B [W0]
00876C  3A000E     BRA NZ, 0x878A
179:                       if(flashStatusCheck(FLASH_RDSR1)==0x03);
00876E  B3C050     MOV.B #0x5, W0
008770  07FEE0     RCALL flashStatusCheck
008772  504FE3     SUB.B W0, #0x3, [W15]
008774  32000C     BRA Z, 0x878E
180:                       else{
181:                           flashEraseSector(eraseAddr);
008776  80B0C0     MOV eraseAddr, W0
008778  80B0D1     MOV 0x161A, W1
00877A  07FF9C     RCALL flashEraseSector
182:                           eraseAddr+=FLASH_PAGE;
00877C  80B0C0     MOV eraseAddr, W0
00877E  80B0D1     MOV 0x161A, W1
008780  B02000     ADD #0x200, W0
008782  B08001     ADDC #0x0, W1
008784  88B0C0     MOV W0, eraseAddr
008786  88B0D1     MOV W1, 0x161A
008788  370002     BRA 0x878E
183:                       }
184:                   } else eraseAddr=0;
00878A  EF3618     CLR eraseAddr
00878C  EF361A     CLR 0x161A
185:                   if(!ctrl.pad[6])flashWriteReg(FLASH_WREN);
00878E  2163C0     MOV #0x163C, W0
008790  E00410     CP0.B [W0]
008792  3A0002     BRA NZ, 0x8798
008794  B3C060     MOV.B #0x6, W0
008796  07FEA2     RCALL flashWriteReg
186:               }
008798  78044F     MOV [--W15], W8
00879A  060000     RETURN
---  C:/Users/ryan/Documents/seniorproject/ps-040/devInits.c  -------------------------------------------
1:                 /*
2:                  ** This file contains functions to initialize various peripheral devices
3:                  */
4:                 #include <xc.h>
5:                 #include <p33EP512GM310.h>
6:                 #include "common.h"
7:                 #include "devInits.h"
8:                 #include "utilities.h"
9:                 #include "plcd.h"
10:                #include "screens.h"
11:                #include "flash.h"
12:                #include "dsp.h"
13:                
14:                extern unsigned char    TxBufferA[FLASH_DMAXFER_BYTES]__attribute__((space(xmemory))), 
15:                                        RxBufferA[FLASH_DMAXFER_BYTES]__attribute__((space(xmemory)));
16:                extern fractional       RxBufferB[STREAMBUF] __attribute__((space(xmemory)));
17:                
18:                void initPorts(void){
007DCA  4787E4     ADD W15, #0x4, W15
007DCC  BE9F88     MOV.D W8, [W15++]
007DCE  BE9F8A     MOV.D W10, [W15++]
007DD0  BE9F8C     MOV.D W12, [W15++]
007DD2  781F8E     MOV W14, [W15++]
19:                    /* Clock Setup */
20:                    CLKDIVbits.PLLPOST=0;
007DD4  2FF3F0     MOV #0xFF3F, W0
007DD6  B62744     AND CLKDIV
21:                    CLKDIVbits.PLLPRE=0;
007DD8  2FFE00     MOV #0xFFE0, W0
007DDA  B62744     AND CLKDIV
22:                    PLLFBDbits.PLLDIV = 0x49;       //d_73 for ~140Mhz
007DDC  2FE000     MOV #0xFE00, W0
007DDE  B60746     AND PLLFBD, WREG
007DE0  B30490     IOR #0x49, W0
007DE2  883A30     MOV W0, PLLFBD
23:                    while(OSCCONbits.LOCK!=1) {};   //wait for PLL to lock
007DE4  200201     MOV #0x20, W1
007DE6  803A12     MOV OSCCON, W2
007DE8  608002     AND W1, W2, W0
007DEA  32FFFD     BRA Z, 0x7DE6
24:                    
25:                    /* Remappable Pins*/
26:                	__builtin_write_OSCCONL(OSCCON & ~(1<<6));      // Unlock Registers
007DEC  803A10     MOV OSCCON, W0
007DEE  A16000     BCLR W0, #6
007DF0  200462     MOV #0x46, W2
007DF2  200573     MOV #0x57, W3
007DF4  207421     MOV #0x742, W1
007DF6  784882     MOV.B W2, [W1]
007DF8  784883     MOV.B W3, [W1]
007DFA  784880     MOV.B W0, [W1]
27:                        //RPINR18bits.U1RXR = 0x37; //U1 rx on RP55
28:                        //RPOR6bits.RP54R=0x1;          // U1 tx on RP54 (in use)
29:                        RPINR18bits.U1RXR = 0x48;       // U1 rx on RP72
007DFC  2FF801     MOV #0xFF80, W1
007DFE  803624     MOV RPINR18, W4
007E00  608004     AND W1, W4, W0
007E02  B30480     IOR #0x48, W0
007E04  883620     MOV W0, RPINR18
30:                        RPOR1bits.RP37R = 0x01;         // Pin 70, RP37 U1 tx
007E06  2C0FF0     MOV #0xC0FF, W0
007E08  803415     MOV RPOR1, W5
007E0A  600205     AND W0, W5, W4
007E0C  A08004     BSET W4, #8
007E0E  883414     MOV W4, RPOR1
31:                        RPINR24bits.CSDIR=0x3D;         //DCI IN on RPI61           
007E10  803686     MOV RPINR24, W6
007E12  608206     AND W1, W6, W4
007E14  2003DC     MOV #0x3D, W12
007E16  760204     IOR W12, W4, W4
007E18  883684     MOV W4, RPINR24
32:                        RPOR3bits.RP40R=0x0C;           //DCI clock
007E1A  2FFC05     MOV #0xFFC0, W5
007E1C  803437     MOV RPOR3, W7
007E1E  628207     AND W5, W7, W4
007E20  B300C4     IOR #0xC, W4
007E22  883434     MOV W4, RPOR3
33:                        RPOR2bits.RP39R=0x0D;           //DCI frame sync
007E24  803428     MOV RPOR2, W8
007E26  600208     AND W0, W8, W4
007E28  20D00B     MOV #0xD00, W11
007E2A  758204     IOR W11, W4, W4
007E2C  883424     MOV W4, RPOR2
34:                        RPOR3bits.RP41R=0x0B;           //DCI output
007E2E  803439     MOV RPOR3, W9
007E30  600209     AND W0, W9, W4
007E32  20B00A     MOV #0xB00, W10
007E34  750204     IOR W10, W4, W4
007E36  883434     MOV W4, RPOR3
35:                        RPINR7bits.IC1R=0x5F;           //Capture input on pin 95 re15
007E38  80357D     MOV RPINR7, W13
007E3A  60820D     AND W1, W13, W4
007E3C  2005F9     MOV #0x5F, W9
007E3E  748204     IOR W9, W4, W4
007E40  883574     MOV W4, RPINR7
36:                        RPINR29bits.SCK3R=0x39;         //SCK3 input on pin 84
007E42  280FF4     MOV #0x80FF, W4
007E44  8036DE     MOV RPINR29, W14
007E46  62030E     AND W4, W14, W6
007E48  239008     MOV #0x3900, W8
007E4A  740306     IOR W8, W6, W6
007E4C  8836D6     MOV W6, RPINR29
37:                        RPOR7bits.RP57R=0x20;           //SCK3 output on pin 84
007E4E  803477     MOV RPOR7, W7
007E50  600307     AND W0, W7, W6
007E52  A0D006     BSET W6, #13
007E54  883476     MOV W6, RPOR7
38:                        RPOR8bits.RP70R=0x1F;           //SDO3 on pin 83
007E56  80348D     MOV RPOR8, W13
007E58  60030D     AND W0, W13, W6
007E5A  21F007     MOV #0x1F00, W7
007E5C  738306     IOR W7, W6, W6
007E5E  883486     MOV W6, RPOR8
39:                        RPOR9bits.RP97R=0x21;           //SS3 on pin 88
007E60  80349E     MOV RPOR9, W14
007E62  60068E     AND W0, W14, W13
007E64  221006     MOV #0x2100, W6
007E66  73068D     IOR W6, W13, W13
007E68  88349D     MOV W13, RPOR9
40:                        RPINR29bits.SDI3R=0x4C;         //SDI on pin 79, RPI76
007E6A  8036DE     MOV RPINR29, W14
007E6C  60868E     AND W1, W14, W13
007E6E  2004CE     MOV #0x4C, W14
007E70  77068D     IOR W14, W13, W13
007E72  8836DD     MOV W13, RPINR29
41:                        RPINR14bits.QEA1R=0x10;         //QEA on pin 22, RPI16
007E74  8035EE     MOV RPINR14, W14
007E76  60868E     AND W1, W14, W13
007E78  A0400D     BSET W13, #4
007E7A  8835ED     MOV W13, RPINR14
42:                        RPINR14bits.QEB1R=0x1B;         //QEB on pin 21, RPI27
007E7C  8035EE     MOV RPINR14, W14
007E7E  62068E     AND W4, W14, W13
007E80  21B00E     MOV #0x1B00, W14
007E82  77068D     IOR W14, W13, W13
007E84  8835ED     MOV W13, RPINR14
43:                	__builtin_write_OSCCONL(OSCCON | (1<<6));       // Lock Registers
007E86  803A1D     MOV OSCCON, W13
007E88  A0600D     BSET W13, #6
007E8A  20742E     MOV #0x742, W14
007E8C  784F02     MOV.B W2, [W14]
007E8E  784F03     MOV.B W3, [W14]
007E90  784F0D     MOV.B W13, [W14]
44:                    
45:                    /* PERIPHERAL ENABLE (0) - DISABLE (1) */
46:                    PMD1=PMD2=PMD3=PMD4=PMD6=PMD7=0xFFFF;
007E92  EB8680     SETM W13
007E94  883B6D     MOV W13, PMD7
007E96  F8076C     PUSH PMD7
007E98  F9076A     POP PMD6
007E9A  F8076A     PUSH PMD6
007E9C  F90766     POP PMD4
007E9E  F80766     PUSH PMD4
007EA0  F90764     POP PMD3
007EA2  F80764     PUSH PMD3
007EA4  F90762     POP PMD2
007EA6  F80762     PUSH PMD2
007EA8  F90760     POP PMD1
47:                    PMD1bits.AD1MD=0;
007EAA  A90760     BCLR PMD1, #0
48:                    PMD1bits.SPI1MD=0;
007EAC  A96760     BCLR PMD1, #3
49:                    PMD1bits.SPI2MD=0;
007EAE  A98760     BCLR PMD1, #4
50:                    PMD1bits.U1MD=0;
007EB0  A9A760     BCLR PMD1, #5
51:                    PMD1bits.U2MD=0;
007EB2  A9C760     BCLR PMD1, #6
52:                    PMD1bits.DCIMD=0;
007EB4  A90761     BCLR 0x761, #0
53:                    PMD1bits.T1MD=0;
007EB6  A96761     BCLR 0x761, #3
54:                    PMD1bits.T2MD=0;
007EB8  A98761     BCLR 0x761, #4
55:                    PMD1bits.T3MD=0;
007EBA  A9A761     BCLR 0x761, #5
56:                    PMD1bits.T4MD=0;
007EBC  A9C761     BCLR 0x761, #6
57:                    PMD1bits.T5MD=0;
007EBE  A9E761     BCLR 0x761, #7
58:                    PMD3bits.PMPMD=0;
007EC0  A90765     BCLR 0x765, #0
59:                    PMD3bits.CMPMD=0;
007EC2  A94765     BCLR 0x765, #2
60:                    PMD6bits.SPI3MD=0;
007EC4  A9076A     BCLR PMD6, #0
61:                    PMD7bits.DMA0MD=0;
007EC6  A9876C     BCLR PMD7, #4
62:                    
63:                    /* Digital IO DIRECTION (1 = input) */
64:                    TRISA=TRISB=TRISC=TRISD=TRISE=TRISF=TRISG=0x0000;
007EC8  EF2E60     CLR TRISG
007ECA  F80E60     PUSH TRISG
007ECC  F90E50     POP TRISF
007ECE  F80E50     PUSH TRISF
007ED0  F90E40     POP TRISE
007ED2  F80E40     PUSH TRISE
007ED4  F90E30     POP TRISD
007ED6  F80E30     PUSH TRISD
007ED8  F90E20     POP TRISC
007EDA  F80E20     PUSH TRISC
007EDC  F90E10     POP TRISB
007EDE  F80E10     PUSH TRISB
007EE0  F90E00     POP TRISA
65:                    TRISA=0x1E01; CNPUA=0x0801;
007EE2  21E01E     MOV #0x1E01, W14
007EE4  88700E     MOV W14, TRISA
007EE6  20801E     MOV #0x801, W14
007EE8  88705E     MOV W14, CNPUA
66:                    TRISB=0x0000; CNPUB=0x0000;
007EEA  EF2E10     CLR TRISB
007EEC  EF2E1A     CLR CNPUB
67:                    TRISC=0x2087;
007EEE  22087E     MOV #0x2087, W14
007EF0  88710E     MOV W14, TRISC
68:                    TRISD=0x011E; CNPUD=0x001E;
007EF2  2011EE     MOV #0x11E, W14
007EF4  88718E     MOV W14, TRISD
007EF6  2001EE     MOV #0x1E, W14
007EF8  8871DE     MOV W14, CNPUD
69:                    TRISE=0x7300;
007EFA  27300E     MOV #0x7300, W14
007EFC  88720E     MOV W14, TRISE
70:                    TRISF=0x00F0; CNPUF=0x00F1;
007EFE  200F0E     MOV #0xF0, W14
007F00  88728E     MOV W14, TRISF
007F02  E8070E     INC W14, W14
007F04  8872DE     MOV W14, CNPUF
71:                    TRISG=CNPUG=0xFFFF;   //PORTG all inputs, weak pull ups on all of G
007F06  88735D     MOV W13, CNPUG
007F08  F80E6A     PUSH CNPUG
007F0A  F90E60     POP TRISG
72:                    
73:                    /* DIGITAL OUTPUT LATCH */
74:                    LATA=LATB=LATC=LATD=LATE=LATF=LATG=0x0000;
007F0C  EF2E64     CLR LATG
007F0E  F80E64     PUSH LATG
007F10  F90E54     POP LATF
007F12  F80E54     PUSH LATF
007F14  F90E44     POP LATE
007F16  F80E44     PUSH LATE
007F18  F90E34     POP LATD
007F1A  F80E34     PUSH LATD
007F1C  F90E24     POP LATC
007F1E  F80E24     PUSH LATC
007F20  F90E14     POP LATB
007F22  F80E14     PUSH LATB
007F24  F90E04     POP LATA
75:                    LATA=0x0040;
007F26  20040D     MOV #0x40, W13
007F28  88702D     MOV W13, LATA
76:                    SS3a=SS3b=FLASHCLK=1;            // Keep SPI CS & CLK asserted
007F2A  A82E25     BSET 0xE25, #1
007F2C  80712D     MOV LATC, W13
007F2E  DE6EC9     LSR W13, #9, W13
007F30  DD6ECF     SL W13, #15, W13
007F32  9FBF8D     MOV W13, [W15-16]
007F34  27FFFE     MOV #0x7FFF, W14
007F36  8071AD     MOV LATD, W13
007F38  67070D     AND W14, W13, W14
007F3A  97BE8F     MOV [W15-16], W13
007F3C  76870E     IOR W13, W14, W14
007F3E  8871AE     MOV W14, LATD
007F40  8071AD     MOV LATD, W13
007F42  DE6ECF     LSR W13, #15, W13
007F44  46868D     ADD W13, W13, W13
007F46  8072AE     MOV LATF, W14
007F48  A1100E     BCLR W14, #1
007F4A  76870E     IOR W13, W14, W14
007F4C  8872AE     MOV W14, LATF
77:                    
78:                    /* ANALOG PINS (1 = analog) */
79:                    ANSELA=ANSELB=ANSELC=ANSELD=ANSELE=ANSELF=ANSELG=0x0000;
007F4E  EF2E6E     CLR ANSELG
007F50  F80E6E     PUSH ANSELG
007F52  F90E5E     POP ANSELF
007F54  F80E5E     PUSH ANSELF
007F56  F90E4E     POP ANSELE
007F58  F80E4E     PUSH ANSELE
007F5A  F90E3E     POP ANSELD
007F5C  F80E3E     PUSH ANSELD
007F5E  F90E2E     POP ANSELC
007F60  F80E2E     PUSH ANSELC
007F62  F90E1E     POP ANSELB
007F64  F80E1E     PUSH ANSELB
007F66  F90E0E     POP ANSELA
80:                    ANSELCbits.ANSC0=1;     //AN6
007F68  A80E2E     BSET ANSELC, #0
81:                    ANSELCbits.ANSC1=1;     //AN7
007F6A  A82E2E     BSET ANSELC, #1
82:                    ANSELCbits.ANSC2=1;     //AN8
007F6C  A84E2E     BSET ANSELC, #2
83:                    ANSELAbits.ANSA12=1;    //AN10 
007F6E  A88E0F     BSET 0xE0F, #4
84:                    ANSELEbits.ANSE8=1;     //AN21
007F70  A80E4F     BSET 0xE4F, #0
85:                    ANSELEbits.ANSE9=1;     //AN20
007F72  A82E4F     BSET 0xE4F, #1
86:                    
87:                    //RP pin config
88:                	__builtin_write_OSCCONL(OSCCON & ~(1<<6));      // Unlock Registers
007F74  803A1D     MOV OSCCON, W13
007F76  A1600D     BCLR W13, #6
007F78  20742E     MOV #0x742, W14
007F7A  784F02     MOV.B W2, [W14]
007F7C  784F03     MOV.B W3, [W14]
007F7E  784F0D     MOV.B W13, [W14]
89:                    //RPINR18bits.U1RXR = 0x37; //U1 rx on RP55
90:                    //RPOR6bits.RP54R=0x1;          //U1 tx on RP54
91:                    RPOR2bits.RP38R = 0x1;
007F80  80342E     MOV RPOR2, W14
007F82  62868E     AND W5, W14, W13
007F84  A0000D     BSET W13, #0
007F86  88342D     MOV W13, RPOR2
92:                    RPINR24bits.CSDIR=0x3D;     //DCI IN on RPI61           
007F88  80368E     MOV RPINR24, W14
007F8A  60868E     AND W1, W14, W13
007F8C  76068D     IOR W12, W13, W13
007F8E  88368D     MOV W13, RPINR24
93:                    RPOR3bits.RP40R=0x0C;       //DCI clock
007F90  80343C     MOV RPOR3, W12
007F92  62828C     AND W5, W12, W5
007F94  B300C5     IOR #0xC, W5
007F96  883435     MOV W5, RPOR3
94:                    RPOR2bits.RP39R=0x0D;       //DCI frame sync
007F98  80342D     MOV RPOR2, W13
007F9A  60028D     AND W0, W13, W5
007F9C  758285     IOR W11, W5, W5
007F9E  883425     MOV W5, RPOR2
95:                    RPOR3bits.RP41R=0x0B;       //DCI output
007FA0  80343E     MOV RPOR3, W14
007FA2  60028E     AND W0, W14, W5
007FA4  750285     IOR W10, W5, W5
007FA6  883435     MOV W5, RPOR3
96:                    RPINR7bits.IC1R=0x5F;       //Capture input on pin 95 re15
007FA8  80357A     MOV RPINR7, W10
007FAA  60828A     AND W1, W10, W5
007FAC  748285     IOR W9, W5, W5
007FAE  883575     MOV W5, RPINR7
97:                    RPOR7bits.RP57R=0x20;       //SCK3 output on pin 84
007FB0  80347B     MOV RPOR7, W11
007FB2  60028B     AND W0, W11, W5
007FB4  A0D005     BSET W5, #13
007FB6  883475     MOV W5, RPOR7
98:                    RPINR29bits.SCK3R=0x39;     //SCK3 input on pin 84
007FB8  8036DC     MOV RPINR29, W12
007FBA  62028C     AND W4, W12, W5
007FBC  740285     IOR W8, W5, W5
007FBE  8836D5     MOV W5, RPINR29
99:                    RPOR8bits.RP70R=0x1F;       //SDO3 on pin 83
007FC0  80348D     MOV RPOR8, W13
007FC2  60028D     AND W0, W13, W5
007FC4  738285     IOR W7, W5, W5
007FC6  883485     MOV W5, RPOR8
100:                   RPOR9bits.RP97R=0x21;       //SS3 on pin 88
007FC8  B60692     AND RPOR9, WREG
007FCA  730000     IOR W6, W0, W0
007FCC  883490     MOV W0, RPOR9
101:                   RPINR29bits.SDI3R=0x4C;     //SDI on pin 79, RPI76
007FCE  8036DE     MOV RPINR29, W14
007FD0  60800E     AND W1, W14, W0
007FD2  2004C5     MOV #0x4C, W5
007FD4  728000     IOR W5, W0, W0
007FD6  8836D0     MOV W0, RPINR29
102:                   RPINR14bits.QEA1R=0x10;     //QEA on pin 22, RPI16
007FD8  8035E6     MOV RPINR14, W6
007FDA  608086     AND W1, W6, W1
007FDC  A04001     BSET W1, #4
007FDE  8835E1     MOV W1, RPINR14
103:                   RPINR14bits.QEB1R=0x1B;     //QEB on pin 21, RPI27
007FE0  8035E7     MOV RPINR14, W7
007FE2  620207     AND W4, W7, W4
007FE4  21B008     MOV #0x1B00, W8
007FE6  740204     IOR W8, W4, W4
007FE8  8835E4     MOV W4, RPINR14
104:               	__builtin_write_OSCCONL(OSCCON | (1<<6));       // Lock Registers    
007FEA  803A10     MOV OSCCON, W0
007FEC  A06000     BSET W0, #6
007FEE  207421     MOV #0x742, W1
007FF0  784882     MOV.B W2, [W1]
007FF2  784883     MOV.B W3, [W1]
007FF4  784880     MOV.B W0, [W1]
105:               }
007FF6  78074F     MOV [--W15], W14
007FF8  BE064F     MOV.D [--W15], W12
007FFA  BE054F     MOV.D [--W15], W10
007FFC  BE044F     MOV.D [--W15], W8
007FFE  B1004F     SUB #0x4, W15
008000  060000     RETURN
106:               
107:               void initUART1(void){
108:                   IFS0bits.U1TXIF = 0;        //clear flag
008002  A98801     BCLR 0x801, #4
109:                   IFS0bits.U1RXIF = 0;        //clear flag
008004  A96801     BCLR 0x801, #3
110:                   U1STA=0x1510;               //enable tx & rx
008006  215100     MOV #0x1510, W0
008008  881110     MOV W0, U1STA
111:                   
112:                   U1BRG=BRGVAL;               //baud rate
00800A  201C10     MOV #0x1C1, W0
00800C  881140     MOV W0, U1BRG
113:                   //U1MODEbits.PDSEL=0;         //8 bit data, even parity
114:                   IPC2bits.U1RXIP = 4;        //interrupt priority 3 (low)
00800E  28FFF0     MOV #0x8FFF, W0
008010  B60844     AND IPC2, WREG
008012  A0E000     BSET W0, #14
008014  884220     MOV W0, IPC2
115:                   IPC3bits.U1TXIP = 4;        //interrupt priority 3 (low)
008016  2FFF80     MOV #0xFFF8, W0
008018  B60846     AND IPC3, WREG
00801A  A02000     BSET W0, #2
00801C  884230     MOV W0, IPC3
116:                   IEC0bits.U1TXIE = 1;        //enable tx interrupt
00801E  A88821     BSET 0x821, #4
117:                   IEC0bits.U1RXIE = 1;        //enable rx interrupt
008020  A86821     BSET 0x821, #3
118:                   U1MODEbits.UARTEN = 1;      //start uart
008022  A8E221     BSET 0x221, #7
119:                   U1STAbits.UTXEN = 1;
008024  A84223     BSET 0x223, #2
120:               }
008026  060000     RETURN
121:               
122:               void initADC1(void){ 
123:               
124:                   /* Assign MUXA inputs */
125:                   AD1CON1 = 0x04E4;               // Enable 12-bit mode, auto-sample and auto-conversion
008028  204E40     MOV #0x4E4, W0
00802A  881900     MOV W0, AD1CON1
126:                   AD1CON2 = 0x0408;               // Sample alternately using channel scanning
00802C  B10DC0     SUB #0xDC, W0
00802E  881910     MOV W0, AD1CON2
127:                   AD1CON2bits.SMPI=(POTS/2)-1;    // Sample 6 channels
008030  2FF830     MOV #0xFF83, W0
008032  B60322     AND AD1CON2, WREG
008034  B30140     IOR #0x14, W0
008036  881910     MOV W0, AD1CON2
128:                   AD1CON3 = 0x0F0F;               // Sample for n*TAD before converting
008038  20F0F0     MOV #0xF0F, W0
00803A  881920     MOV W0, AD1CON3
129:                   AD1CON1bits.FORM=2;             // Signed fractional format 
00803C  2FCFF0     MOV #0xFCFF, W0
00803E  B60320     AND AD1CON1, WREG
008040  A09000     BSET W0, #9
008042  881900     MOV W0, AD1CON1
130:                   AD1CON3bits.ADCS=0x07;
008044  B3C070     MOV.B #0x7, W0
008046  B7E324     MOV.B WREG, AD1CON3
131:                   AD1CON3bits.SAMC=0x1F;
008048  21F000     MOV #0x1F00, W0
00804A  B72324     IOR AD1CON3
132:                   AD1CSSLbits.CSS6=1;             //AN6 in channel scan
00804C  A8C330     BSET AD1CSSL, #6
133:                   AD1CSSLbits.CSS7=1;             //AN7 in channel scan
00804E  A8E330     BSET AD1CSSL, #7
134:                   AD1CSSLbits.CSS8=1;             //AN8 in channel scan
008050  A80331     BSET 0x331, #0
135:                   AD1CSSLbits.CSS10=1;            //AN10 in channel scan
008052  A84331     BSET 0x331, #2
136:                   AD1CSSHbits.CSS20=1;            //AN20 in channel scan
008054  A8832E     BSET AD1CSSH, #4
137:                   AD1CSSHbits.CSS21=1;            //AN21 in channel scan
008056  A8A32E     BSET AD1CSSH, #5
138:                   
139:                   /* Enable ADC module and provide ADC stabilization delay */
140:                   AD1CON1bits.ADON = 1;
008058  A8E321     BSET 0x321, #7
141:                   Delay_us(30);
00805A  2001E0     MOV #0x1E, W0
00805C  07FEAD     RCALL Delay_us
142:               }
00805E  060000     RETURN
143:               
144:               void initPMP(void){
145:                   /*
146:                    Data is clocked on falling edge of E
147:                    *  RS = 44 = PMAO (H = display data, L = display instruction)
148:                    *  E = 81 = PMWR (pulse width 450ns MIN, data triggers from H to L) 
149:                    */
150:                   PMMODEbits.MODE=3;              // Master mode 1 
008060  203000     MOV #0x300, W0
008062  B72602     IOR PMMODE
151:                   PMCONbits.PTWREN = 1;
008064  A82601     BSET 0x601, #1
152:                   PMCONbits.PTRDEN = 1;
008066  A80601     BSET 0x601, #0
153:                   PMCONbits.WRSP=1;               // Write strobe active high
008068  A82600     BSET PMCON, #1
154:                   PMCONbits.RDSP=1;               // Read strobe active high
00806A  A80600     BSET PMCON, #0
155:               
156:                   PMMODEbits.WAITB = 0;
00806C  2FF3F0     MOV #0xFF3F, W0
00806E  B62602     AND PMMODE
157:                   PMMODEbits.WAITM = 0xC;
008070  2FFC30     MOV #0xFFC3, W0
008072  B60602     AND PMMODE, WREG
008074  B30300     IOR #0x30, W0
008076  883010     MOV W0, PMMODE
158:                   PMMODEbits.WAITE = 0;
008078  2FFFC0     MOV #0xFFFC, W0
00807A  B62602     AND PMMODE
159:                   LCD_RS=0;
00807C  A9EE45     BCLR 0xE45, #7
160:                   PMCONbits.PMPEN = 1;
00807E  A8E601     BSET 0x601, #7
161:                   
162:                   /* INIT DEVICE */
163:                   Delay_us(40000);
008080  29C400     MOV #0x9C40, W0
008082  07FE9A     RCALL Delay_us
164:                   lcdInit();
008084  07F938     RCALL lcdInit
165:               }
008086  060000     RETURN
166:               
167:               
168:               //Description: Initializes timer for LED's UART and display
169:               //Prereq: initUART1()
170:               //Frequency: 15Hz
171:               void initT1(void){          //16 bit timer
172:                   TMR1 = 0x0000;          //clear timer 4
008088  EF2100     CLR TMR1
173:                   T1CONbits.TCKPS = 3;    //prescale 1:256
00808A  200300     MOV #0x30, W0
00808C  B72104     IOR T1CON
174:                   T1CONbits.TCS = 0;      //use internal clock
00808E  A92104     BCLR T1CON, #1
175:                   T1CONbits.TGATE = 0;    //gate accumulation disabled
008090  A9C104     BCLR T1CON, #6
176:                   PR1 = Fcy/(256*Fdisp);    //period register
008092  241EB0     MOV #0x41EB, W0
008094  880810     MOV W0, PR1
177:                   //PR1=0x7FFF;
178:               
179:                   T1CONbits.TON = 1;      //start timer
008096  A8E105     BSET 0x105, #7
180:               }
008098  060000     RETURN
181:               
182:               //Description:  Initializes timer handles polling button input
183:               //Prereq: initADC1() 
184:               //Frequency: 512Hz
185:               void initT2(void){          //16/32 bit timer
186:                   TMR2 = 0x0000;          //clear timer 4
00809A  EF2106     CLR TMR2
187:                   T2CONbits.T32 = 0;      //16 bit mode
00809C  A96110     BCLR T2CON, #3
188:                   T2CONbits.TCKPS = 1;    //prescale 1:8
00809E  2FFCF0     MOV #0xFFCF, W0
0080A0  B60110     AND T2CON, WREG
0080A2  A04000     BSET W0, #4
0080A4  880880     MOV W0, T2CON
189:                   T2CONbits.TCS = 0;      //use internal clock
0080A6  A92110     BCLR T2CON, #1
190:                   T2CONbits.TGATE = 0;    //gate accumulation disabled
0080A8  A9C110     BCLR T2CON, #6
191:                   PR2 = Fcy/(8*Fscan);      //period register about 512hz, PR2 = 0x3938 
0080AA  270800     MOV #0x7080, W0
0080AC  880860     MOV W0, PR2
192:               
193:                   T2CONbits.TON = 1;      //start timer
0080AE  A8E111     BSET 0x111, #7
194:               }
0080B0  060000     RETURN
195:               
196:               //Description: Initialize timer handling LCD sending
197:               //Frequency: variable depending on lcd latency values in datasheet
198:               void initT3(void){          //16/32 bit timer
199:                   TMR3 = 0x0000;          //clear timer 3
0080B2  EF210A     CLR TMR3
200:                   T3CONbits.TCKPS = 1;    //prescale 8:1
0080B4  2FFCF0     MOV #0xFFCF, W0
0080B6  B60112     AND T3CON, WREG
0080B8  A04000     BSET W0, #4
0080BA  880890     MOV W0, T3CON
201:                   T3CONbits.TCS = 0;      //use internal clock
0080BC  A92112     BCLR T3CON, #1
202:                   T3CONbits.TGATE = 0;    //gate accumulation disabled
0080BE  A9C112     BCLR T3CON, #6
203:                   //PR3 = Fcy/(256*T3freq);           //period register
204:                   PR3 = 0x01D0;           //45uS initial delay
0080C0  201D00     MOV #0x1D0, W0
0080C2  880870     MOV W0, PR3
205:                   
206:                   T3CONbits.TON = 1;
0080C4  A8E113     BSET 0x113, #7
207:                   
208:               }
0080C6  060000     RETURN
209:               
210:               void initT5() 
211:               {
212:                       TMR5 = 0x0000;
0080C8  EF2118     CLR TMR5
213:                       PR5 = 4999;
0080CA  213870     MOV #0x1387, W0
0080CC  8808E0     MOV W0, PR5
214:                       T5CONbits.TCKPS = 2;    //prescale 8:1
0080CE  2FFCF0     MOV #0xFFCF, W0
0080D0  B60120     AND T5CON, WREG
0080D2  A05000     BSET W0, #5
0080D4  880900     MOV W0, T5CON
215:                       IFS1bits.T5IF = 0;
0080D6  A98803     BCLR 0x803, #4
216:                       IEC1bits.T5IE = 0;
0080D8  A98823     BCLR 0x823, #4
217:               
218:                       //Start Timer 3
219:                       T5CONbits.TON = 1;
0080DA  A8E121     BSET 0x121, #7
220:               
221:               }
0080DC  060000     RETURN
222:               
223:               //Description: Initializes & starts 16 bit DCI I2S DAC
224:               //Prereq: initSPI_ADC(void)
225:               void initDCI_DAC(void){
226:                   DCICON3bits.BCG=(Fcy/(64*Fout)-1);  // Calculate baud rate (WILL TRUNCATE)
0080DE  2F0000     MOV #0xF000, W0
0080E0  B60284     AND DCICON3, WREG
0080E2  B30170     IOR #0x17, W0
0080E4  881420     MOV W0, DCICON3
227:                   DCICON1bits.COFSM=1;                // I2S mode
0080E6  2FFFC0     MOV #0xFFFC, W0
0080E8  B60280     AND DCICON1, WREG
0080EA  A00000     BSET W0, #0
0080EC  881400     MOV W0, DCICON1
228:                   DCICON1bits.CSCKE=1;                // Sample on rising edge
0080EE  A82281     BSET 0x281, #1
229:                   DCICON2bits.WS=0xF;                 // 16 bit data word
0080F0  2000F0     MOV #0xF, W0
0080F2  B72282     IOR DCICON2
230:                   DCICON2bits.COFSG=0;                // Data frame has 1 word (per frame)
0080F4  2FE1F0     MOV #0xFE1F, W0
0080F6  B62282     AND DCICON2
231:                   DCICON1bits.DJST=0;                 // Align data
0080F8  A9A280     BCLR DCICON1, #5
232:                   DCICON2bits.BLEN=3;                 // 4 words buffer btwn interrupts
0080FA  20C000     MOV #0xC00, W0
0080FC  B72282     IOR DCICON2
233:                   
234:                   TSCONbits.TSE0 = 1;                 // Transmit on Time Slot 0     
0080FE  A80288     BSET TSCON, #0
235:                   TSCONbits.TSE1 = 1;                 // Transmit on Time Slot 1   
008100  A82288     BSET TSCON, #1
236:                   TSCONbits.TSE2 = 1;                 // Transmit on Time Slot 2     
008102  A84288     BSET TSCON, #2
237:                   TSCONbits.TSE3 = 1;                 // Transmit on Time Slot 3   
008104  A86288     BSET TSCON, #3
238:                   RSCONbits.RSE0 = 1;                 // Rcv on Time Slot 0     
008106  A8028C     BSET RSCON, #0
239:                   RSCONbits.RSE1 = 1;                 // Rcv on Time Slot 1 
008108  A8228C     BSET RSCON, #1
240:                   RSCONbits.RSE2 = 1;                 // Rcv on Time Slot 2     
00810A  A8428C     BSET RSCON, #2
241:                   RSCONbits.RSE3 = 1;                 // Rcv on Time Slot 3 
00810C  A8628C     BSET RSCON, #3
242:                   
243:                   IPC15bits.DCIIP = 5;                // Interrput priority
00810E  2FFF80     MOV #0xFFF8, W0
008110  B6085E     AND IPC15, WREG
008112  B30050     IOR #0x5, W0
008114  8842F0     MOV W0, IPC15
244:                   IFS3bits.DCIIF=0;
008116  A98807     BCLR 0x807, #4
245:                   IEC3bits.DCIIE=1;                   // =0 if letting dma handle interrupt
008118  A88827     BSET 0x827, #4
246:                   
247:                   TXBUF0=0;                           // Pre-load send registers.
00811A  EF2298     CLR TXBUF0
248:                   TXBUF1=0;   
00811C  EF229A     CLR TXBUF1
249:                   TXBUF2=0;
00811E  EF229C     CLR TXBUF2
250:                   TXBUF3=0;
008120  EF229E     CLR TXBUF3
251:                   DCICON1bits.DCIEN=1;                // ENABLE
008122  A8E281     BSET 0x281, #7
252:                   Delay_us(20);                       // Stabilization delay
008124  200140     MOV #0x14, W0
008126  07FE48     RCALL Delay_us
253:               }
008128  060000     RETURN
254:               
255:               void initDMA(void){
256:                   /* RX */
257:                   IFS0bits.DMA1IF = 0;
00812A  A9C801     BCLR 0x801, #6
258:                   DMA1CONbits.SIZE=1;                             // Byte size
00812C  A8CB11     BSET 0xB11, #6
259:                   DMA1CONbits.DIR=0;                              // Read from flash
00812E  A9AB11     BCLR 0xB11, #5
260:                   DMA1CONbits.MODE=1;                             // One shot, ping pong
008130  2FFFC3     MOV #0xFFFC, W3
008132  805881     MOV DMA1CON, W1
008134  618001     AND W3, W1, W0
008136  A00000     BSET W0, #0
008138  885880     MOV W0, DMA1CON
261:                   //DMA1CONbits.NULLW=1;                          // NULL WRITE (debug))
262:                   DMA1STAL = (unsigned int)(&RxBufferA);
00813A  212000     MOV #0x1200, W0
00813C  8858A0     MOV W0, DMA1STAL
263:                   //DMA1STAH = (unsigned int)(&RxBufferB);
264:                   DMA1PAD = (volatile unsigned int) &SPI3BUF;
00813E  202A82     MOV #0x2A8, W2
008140  8858E2     MOV W2, DMA1PAD
265:                   DMA1CNT = (unsigned int)(FLASH_DMAXFER_BYTES-1);
008142  201FF1     MOV #0x1FF, W1
008144  8858F1     MOV W1, DMA1CNT
266:                   DMA1REQbits.IRQSEL = 0x5B;
008146  B3C5B0     MOV.B #0x5B, W0
008148  B7EB12     MOV.B WREG, DMA1REQ
267:                   
268:                   IFS0bits.DMA1IF = 0;
00814A  A9C801     BCLR 0x801, #6
269:                   IEC0bits.DMA1IE = 1;
00814C  A8C821     BSET 0x821, #6
270:                   IPC3bits.DMA1IP = 6;
00814E  2F8FF5     MOV #0xF8FF, W5
008150  804234     MOV IPC3, W4
008152  628284     AND W5, W4, W5
008154  206004     MOV #0x600, W4
008156  720205     IOR W4, W5, W4
008158  884234     MOV W4, IPC3
271:                   DMA1CONbits.CHEN = 0;
00815A  A9EB11     BCLR 0xB11, #7
272:                   
273:                   
274:                   /* TX */
275:                   IFS0bits.DMA0IF = 0;
00815C  A98800     BCLR IFS0, #4
276:                   DMAPWC = 0;
00815E  EF2BF0     CLR DMAPWC
277:                   DMA0CONbits.SIZE=1;                             // Byte size
008160  A8CB01     BSET 0xB01, #6
278:                   DMA0CONbits.DIR=1;                              // Write to flash
008162  A8AB01     BSET 0xB01, #5
279:                   DMA0CONbits.MODE=1;                             // One shot, ping pong
008164  805804     MOV DMA0CON, W4
008166  618184     AND W3, W4, W3
008168  A00003     BSET W3, #0
00816A  885803     MOV W3, DMA0CON
280:                   DMA0STAL = (unsigned int)(&TxBufferA);
00816C  210003     MOV #0x1000, W3
00816E  885823     MOV W3, DMA0STAL
281:                   //DMA0STAH = (unsigned int)(&TxBufferB);
282:                   DMA0PAD = (volatile unsigned int) &SPI3BUF;
008170  885862     MOV W2, DMA0PAD
283:                   DMA0CNT = FLASH_DMAXFER_BYTES-1;
008172  885871     MOV W1, DMA0CNT
284:                   DMA0REQbits.IRQSEL = 0x5B;
008174  B7EB02     MOV.B WREG, DMA0REQ
285:                   
286:                   IFS0bits.DMA0IF = 0;
008176  A98800     BCLR IFS0, #4
287:                   IEC0bits.DMA0IE = 1;
008178  A88820     BSET IEC0, #4
288:                   IPC1bits.DMA0IP = 6;
00817A  2FFF80     MOV #0xFFF8, W0
00817C  B60842     AND IPC1, WREG
00817E  B30060     IOR #0x6, W0
008180  884210     MOV W0, IPC1
289:                   DMA0CONbits.CHEN = 0;
008182  A9EB01     BCLR 0xB01, #7
290:               }
008184  060000     RETURN
291:               
292:               void initSPI3_MEM(void){
293:                   SS3a=SS3b=FLASHCLK=1;
008186  A82E25     BSET 0xE25, #1
008188  807120     MOV LATC, W0
00818A  DE0049     LSR W0, #9, W0
00818C  DD004F     SL W0, #15, W0
00818E  27FFF1     MOV #0x7FFF, W1
008190  8071A2     MOV LATD, W2
008192  608082     AND W1, W2, W1
008194  700081     IOR W0, W1, W1
008196  8871A1     MOV W1, LATD
008198  8071A0     MOV LATD, W0
00819A  DE004F     LSR W0, #15, W0
00819C  400000     ADD W0, W0, W0
00819E  8072A1     MOV LATF, W1
0081A0  A11001     BCLR W1, #1
0081A2  700081     IOR W0, W1, W1
0081A4  8872A1     MOV W1, LATF
294:                   
295:                   IFS5bits.SPI3IF = 0;        // Clear the Interrupt flag
0081A6  A9680B     BCLR 0x80B, #3
296:                   IEC5bits.SPI3IE = 0;        // Disable the interrupt
0081A8  A9682B     BCLR 0x82B, #3
297:                   SPI3CON1bits.MSTEN=1;       // Master mode
0081AA  A8A2A2     BSET SPI3CON1, #5
298:                   SPI3CON1bits.DISSCK = 0;    // Internal serial clock is enabled
0081AC  A982A3     BCLR 0x2A3, #4
299:                   SPI3CON1bits.MODE16=0;      // 8 bitBufferB
0081AE  A942A3     BCLR 0x2A3, #2
300:                   SPI3CON1bits.DISSDO=0;      // Enable SDO 
0081B0  A962A3     BCLR 0x2A3, #3
301:                   SPI3CON2bits.FRMEN=0;       // No enable framed mode
0081B2  A9E2A5     BCLR 0x2A5, #7
302:                   SPI3CON2bits.SPIBEN=0;      // Enhanced buffer mode
0081B4  A902A4     BCLR SPI3CON2, #0
303:                   
304:                   SPI3CON1bits.SMP=1;         // Data sampled at end of output time
0081B6  A822A3     BSET 0x2A3, #1
305:                   SPI3CON1bits.CKP=1;         // Idle clock is low
0081B8  A8C2A2     BSET SPI3CON1, #6
306:                   SPI3CON1bits.CKE=0;         // Data changes from H to L
0081BA  A902A3     BCLR 0x2A3, #0
307:                   
308:                   SPI3CON1bits.PPRE=3;        // 1:1 primary prescale (3)
0081BC  200030     MOV #0x3, W0
0081BE  B722A2     IOR SPI3CON1
309:                   SPI3CON1bits.SPRE=6;        // 2:1 secondary (6)
0081C0  2FFE30     MOV #0xFFE3, W0
0081C2  B602A2     AND SPI3CON1, WREG
0081C4  B30180     IOR #0x18, W0
0081C6  881510     MOV W0, SPI3CON1
310:                   
311:                   SPI3STATbits.SPIROV = 0;    // Clear SPI1 receive overflow flag if set
0081C8  A9C2A0     BCLR SPI3STAT, #6
312:                   SPI3STATbits.SPIEN = 1;     // Start SPI module
0081CA  A8E2A1     BSET 0x2A1, #7
313:                   //IEC5bits.SPI3IE = 0;      // Enable the Interrupt    
314:               }
0081CC  060000     RETURN
315:               
316:               /* Quadradure Encoder */
317:               void initQEI_ENC(void){
318:                   QEI1CONbits.INTDIV=6;       // 1:64 prescaler
0081CE  2FF8F0     MOV #0xFF8F, W0
0081D0  B601C0     AND QEI1CON, WREG
0081D2  B30600     IOR #0x60, W0
0081D4  880E00     MOV W0, QEI1CON
319:                   QEI1IOCbits.FLTREN=1;       // Enable input filter
0081D6  A8C1C3     BSET 0x1C3, #6
320:                   QEI1CONbits.QEIEN=1;        // Enable Quad encoder inteface
0081D8  A8E1C1     BSET 0x1C1, #7
321:               }
0081DA  060000     RETURN
322:               
---  C:/Users/ryan/Documents/seniorproject/ps-040/audio.c  ----------------------------------------------
1:                 #include "xc.h"
2:                 #include "audio.h"
3:                 #include "common.h"
4:                 #include "sounds.h"
5:                 #include <dsp.h>
6:                 #include "utilities.h"
7:                 #include "flash.h"
8:                 
9:                 extern unsigned char    TxBufferA[FLASH_DMAXFER_BYTES]__attribute__((space(xmemory))), 
10:                                        RxBufferA[FLASH_DMAXFER_BYTES]__attribute__((space(xmemory)));
11:                extern fractional       RxBufferB[STREAMBUF] __attribute__((space(xmemory)));
12:                
13:                extern fractional sintab[SINRES];
14:                static fractional loopbuf[LOOP_BUF_SIZE] __attribute__ ((eds)) = {0};
15:                
16:                
17:                fractional lpf_alpha=Q15(0.5), lpf_inv_alpha=Q15(0.5);
18:                static fractional psvbuf[STREAMBUF]={0};
19:                
20:                extern enum fxStruct fxUnits[NUMFXUNITS];
21:                extern struct clip_psv sine, kick, snare;
22:                extern struct sflags stat;
23:                extern struct ctrlsrfc ctrl;
24:                struct clip_eds history = { .size = LOOP_BUF_SIZE,
25:                                            .blocks=LOOP_BUF_SIZE/STREAMBUF, 
26:                                            .playing=FALSE, .flash=FALSE, 
27:                                            .block_index=0, 
28:                                            .start_ptr=loopbuf, 
29:                                            .end_ptr=&loopbuf[LOOP_BUF_SIZE-1], 
30:                                            .read_ptr=loopbuf};
31:                
32:                
33:                void (*fxFuncPointers[NUMFX])(fractional *, fractional *, fractional, fractional, fractional) = {NULL, runLPF, runTRM, runLOP, runBTC};
34:                
35:                void runBufferLooper(fractional *source){
0083CC  FA0002     LNK #0x2
0083CE  BE9F88     MOV.D W8, [W15++]
0083D2  BE0300     MOV.D W0, W6
0083D4  B02006     ADD #0x200, W6
0083D6  B08007     ADDC #0x0, W7
36:                    volatile fractional sample;
37:                    unsigned int loop_ptr = 0;
0083D8  EB0100     CLR W2
38:                    
39:                    int *readPTR=source;
40:                    
41:                    int counter=0;
42:                    for(; counter<STREAMBUF; counter++){
0083FE  500F86     SUB W0, W6, [W15]
008400  588F87     SUBB W1, W7, [W15]
008402  3AFFEE     BRA NZ, 0x83E0
43:                        sample=*readPTR++; //!rw
0083E0  780290     MOV [W0], W5
0083E2  9FBFD5     MOV W5, [W15-6]
44:                        if(loop_ptr<LOOP_BUF_SIZE)
0083DA  243FF4     MOV #0x43FF, W4
0083E4  510F84     SUB W2, W4, [W15]
0083E6  3E0006     BRA GTU, 0x83F4
45:                            loopbuf[loop_ptr++]=sample;
0083E8  D00282     SL W2, W5
0083EA  428283     ADD W5, W3, W5
0083EC  97BCDF     MOV [W15-6], W9
0083EE  780A89     MOV W9, [W5]
0083F0  E80102     INC W2, W2
0083F2  370003     BRA 0x83FA
46:                        else {
47:                            loop_ptr=0;
48:                            loopbuf[loop_ptr++]=sample;
0083D0  EB0080     CLR W1
0083DC  248003     MOV #0x4800, W3
0083DE  200018     MOV #0x1, W8
0083F4  97B95F     MOV [W15-6], W2
0083F6  780982     MOV W2, [W3]
0083F8  780108     MOV W8, W2
0083FA  400062     ADD W0, #0x2, W0
0083FC  4880E0     ADDC W1, #0x0, W1
49:                        }
50:                    }
51:                }
008404  BE044F     MOV.D [--W15], W8
008406  FA8000     ULNK
008408  060000     RETURN
52:                
53:                void runLPF(fractional *source, fractional *destination, fractional param1, fractional param2, fractional param3){
008374  FA0002     LNK #0x2
008376  F80022     PUSH ACCA
008378  F80024     PUSH ACCAH
00837A  F80026     PUSH ACCAU
008394  BE0302     MOV.D W2, W6
008396  B02006     ADD #0x200, W6
008398  B08007     ADDC #0x0, W7
54:                    volatile register int result asm("A");
55:                    static fractional delayed_sample;
56:                    volatile fractional sample;
57:                    if(param3>=0x3FFF){     //LPF CONTROL
00837C  23FFE3     MOV #0x3FFE, W3
00837E  520F83     SUB W4, W3, [W15]
008380  340020     BRA LE, 0x83C2
58:                        if(param1>=310){                      
008382  201353     MOV #0x135, W3
008384  510F83     SUB W2, W3, [W15]
008386  340004     BRA LE, 0x8390
59:                            lpf_alpha=param1;
008388  88B142     MOV W2, 0x1628
60:                            lpf_inv_alpha=(32767-lpf_alpha); 
00838A  27FFF3     MOV #0x7FFF, W3
00838C  518102     SUB W3, W2, W2
00838E  88B152     MOV W2, 0x162A
008390  B80161     MUL.UU W0, #1, W2
008392  B80861     MUL.UU W1, #1, W0
61:                        }
62:                
63:                
64:                        int *readPTR=source;
65:                        int *rewritePTR=destination;
66:                
67:                
68:                        int counter=0;
69:                        for(; counter<STREAMBUF; counter++){
0083BC  510F86     SUB W2, W6, [W15]
0083BE  598F87     SUBB W3, W7, [W15]
0083C0  3AFFEC     BRA NZ, 0x839A
70:                            sample=*readPTR++; //!rw
00839A  780212     MOV [W2], W4
00839C  9FBFC4     MOV W4, [W15-8]
71:                
72:                            //LPF-EMA//   y(i)= ??x(i)+(1-?)?y(i-1)
73:                            result =__builtin_mpy(sample,lpf_alpha, NULL, NULL, 0, NULL, NULL, 0);
00839E  97BA4F     MOV [W15-8], W4
0083A0  80B145     MOV 0x1628, W5
0083A2  C00113     MPY W4*W5, A
74:                            result =__builtin_mac(result, delayed_sample, lpf_inv_alpha, NULL, NULL, 0, NULL, NULL, 0, 0, result);
0083A4  80B154     MOV 0x162A, W4
0083A6  80B115     MOV delayed_sample, W5
0083A8  C00112     MAC W4*W5, A
75:                            delayed_sample=__builtin_sac(result, 0);
0083AA  CC0004     SAC A, W4
0083AC  88B114     MOV W4, delayed_sample
76:                            sample=delayed_sample;
0083AE  9FBFC4     MOV W4, [W15-8]
77:                
78:                            *rewritePTR++=sample; //rw
0083B0  97BA4F     MOV [W15-8], W4
0083B2  780804     MOV W4, [W0]
0083B4  410162     ADD W2, #0x2, W2
0083B6  4981E0     ADDC W3, #0x0, W3
0083B8  400062     ADD W0, #0x2, W0
0083BA  4880E0     ADDC W1, #0x0, W1
79:                        }
80:                    }
81:                    
82:                }
0083C2  F90026     POP ACCAU
0083C4  F90024     POP ACCAH
0083C6  F90022     POP ACCA
0083C8  FA8000     ULNK
0083CA  060000     RETURN
83:                
84:                void runTRM(fractional *source, fractional *destination, fractional param1, fractional param2, fractional param3){
0081DC  4787E6     ADD W15, #0x6, W15
0081DE  BE9F88     MOV.D W8, [W15++]
0081E0  BE9F8A     MOV.D W10, [W15++]
0081E2  BE9F8C     MOV.D W12, [W15++]
0081E4  781F8E     MOV W14, [W15++]
0081E6  F80022     PUSH ACCA
0081E8  F80024     PUSH ACCAH
0081EA  F80026     PUSH ACCAU
0081EC  F80028     PUSH ACCB
0081EE  F8002A     PUSH ACCBH
0081F0  F8002C     PUSH ACCBU
0081F2  780283     MOV W3, W5
00820C  BE0402     MOV.D W2, W8
00820E  B02008     ADD #0x200, W8
008210  B08009     ADDC #0x0, W9
85:                    volatile register int result1 asm("A");
86:                    volatile register int result2 asm("B");
87:                    volatile fractional sample, trem_mod;
88:                    int *readPTR=source;
89:                    int *rewritePTR=destination;
90:                    int counter=0;
91:                    static unsigned int trem_delay=0, tremelo_ptr=0;
92:                    const int pot_offset = 5;
93:                    
94:                    if(param3>=0x3FFF){     // TREM CONTROL
0081F4  23FFE3     MOV #0x3FFE, W3
0081F6  520F83     SUB W4, W3, [W15]
0081F8  34004A     BRA LE, 0x828E
95:                        result1 =__builtin_mpy(param1,Q15(0.0006), NULL, NULL, 0, NULL, NULL, 0);
0081FA  780202     MOV W2, W4
0081FC  200146     MOV #0x14, W6
0081FE  C10113     MPY W4*W6, A
96:                        param1=__builtin_sac(result1, 0);
008200  CC0006     SAC A, W6
97:                        if(param2<-0x7) param2=0;
008202  428FE7     ADD W5, #0x7, [W15]
008204  3D0001     BRA GE, 0x8208
008206  EB0280     CLR W5
008208  B80961     MUL.UU W1, #1, W2
00820A  EB0080     CLR W1
98:                        
99:                        for(; counter<STREAMBUF; counter++){
008288  510F88     SUB W2, W8, [W15]
00828A  598F89     SUBB W3, W9, [W15]
00828C  3AFFC7     BRA NZ, 0x821C
100:                           sample=*readPTR++; //!rw
00821C  780390     MOV [W0], W7
00821E  9FB797     MOV W7, [W15-30]
101:                                                                          //TREMELO//
102:                           if (trem_delay<=param1+pot_offset){
008212  430365     ADD W6, #0x5, W6
008220  80B104     MOV trem_delay, W4
008222  530F84     SUB W6, W4, [W15]
008224  390013     BRA NC, 0x824C
103:                               trem_delay++;
008226  E80204     INC W4, W4
008228  88B104     MOV W4, trem_delay
104:                               result1 =__builtin_mpy(param2,sintab[tremelo_ptr], NULL, NULL, 0, NULL, NULL, 0);
00822A  80B0F4     MOV tremelo_ptr, W4
00822C  D00204     SL W4, W4
00822E  42020A     ADD W4, W10, W4
008230  780214     MOV [W4], W4
008232  C00113     MPY W4*W5, A
105:                               trem_mod=__builtin_sac(result1, 0);
008234  CC0004     SAC A, W4
008236  9FB7A4     MOV W4, [W15-28]
106:                               trem_mod=0x7FF0-trem_mod;
008238  97B22F     MOV [W15-28], W4
00823A  570204     SUB W14, W4, W4
00823C  9FB7A4     MOV W4, [W15-28]
107:                               result2 =__builtin_mpy(trem_mod,sample, NULL, NULL, 0, NULL, NULL, 0);
00823E  97B69F     MOV [W15-30], W13
008240  97B3AF     MOV [W15-28], W7
008242  78020D     MOV W13, W4
008244  C28113     MPY W4*W7, B
108:                               sample=__builtin_sac(result2, 0);
008246  CC8007     SAC B, W7
008248  9FB797     MOV W7, [W15-30]
00824A  370018     BRA 0x827C
109:                           }
110:                           else{
111:                               trem_delay=0;
008214  EB0580     CLR W11
00824C  88B10B     MOV W11, trem_delay
112:                               if(tremelo_ptr==1024)
008216  20400C     MOV #0x400, W12
00824E  80B0F4     MOV tremelo_ptr, W4
008250  520F8C     SUB W4, W12, [W15]
008252  3A0002     BRA NZ, 0x8258
113:                                   tremelo_ptr=0;
008254  88B0FB     MOV W11, tremelo_ptr
008256  370002     BRA 0x825C
114:                               else tremelo_ptr++;
008258  E80204     INC W4, W4
00825A  88B0F4     MOV W4, tremelo_ptr
115:                               
116:                               result1 =__builtin_mpy(param2,sintab[tremelo_ptr], NULL, NULL, 0, NULL, NULL, 0);
008218  2E376A     MOV #0xE376, W10
00825C  80B0F4     MOV tremelo_ptr, W4
00825E  D00204     SL W4, W4
008260  42020A     ADD W4, W10, W4
008262  780214     MOV [W4], W4
008264  C00113     MPY W4*W5, A
117:                               trem_mod=__builtin_sac(result1, 0);
008266  CC0004     SAC A, W4
008268  9FB7A4     MOV W4, [W15-28]
118:                               trem_mod=0x7FF0-trem_mod;
00821A  27FF0E     MOV #0x7FF0, W14
00826A  97B22F     MOV [W15-28], W4
00826C  570204     SUB W14, W4, W4
00826E  9FB7A4     MOV W4, [W15-28]
119:                               result2 =__builtin_mpy(trem_mod,sample, NULL, NULL, 0, NULL, NULL, 0);
008270  97B69F     MOV [W15-30], W13
008272  97B22F     MOV [W15-28], W4
008274  78038D     MOV W13, W7
008276  C28113     MPY W4*W7, B
120:                               sample=__builtin_sac(result2, 0);
008278  CC8004     SAC B, W4
00827A  9FB794     MOV W4, [W15-30]
121:                           }
122:               
123:                           *rewritePTR++=sample; //rw
00827C  97B39F     MOV [W15-30], W7
00827E  780907     MOV W7, [W2]
008280  410162     ADD W2, #0x2, W2
008282  4981E0     ADDC W3, #0x0, W3
008284  400062     ADD W0, #0x2, W0
008286  4880E0     ADDC W1, #0x0, W1
124:                       }
125:                   }
126:               }
00828E  F9002C     POP ACCBU
008290  F9002A     POP ACCBH
008292  F90028     POP ACCB
008294  F90026     POP ACCAU
008296  F90024     POP ACCAH
008298  F90022     POP ACCA
00829A  78074F     MOV [--W15], W14
00829C  BE064F     MOV.D [--W15], W12
00829E  BE054F     MOV.D [--W15], W10
0082A0  BE044F     MOV.D [--W15], W8
0082A2  B1006F     SUB #0x6, W15
0082A4  060000     RETURN
127:               
128:               void runBTC(fractional *source, fractional *destination, fractional param1, fractional param2, fractional param3){
008326  FA0002     LNK #0x2
008328  BE9F88     MOV.D W8, [W15++]
00832A  BE9F8A     MOV.D W10, [W15++]
00832C  780480     MOV W0, W9
00832E  780501     MOV W1, W10
008330  780082     MOV W2, W1
008332  780404     MOV W4, W8
008342  BE0200     MOV.D W0, W4
008344  B02004     ADD #0x200, W4
008346  B08005     ADDC #0x0, W5
129:                   volatile fractional sample;
130:                   
131:                   int *readPTR=source;
132:                   int *rewritePTR=destination;
133:                   int counter=0;
134:                   int shift = scalePotsCustom(14, param1);
008334  2000E0     MOV #0xE, W0
008336  07FC92     RCALL scalePotsCustom
135:                   fractional sign;
136:                   
137:                   for(; counter<STREAMBUF; counter++){
008366  500F84     SUB W0, W4, [W15]
008368  588F85     SUBB W1, W5, [W15]
00836A  3AFFEF     BRA NZ, 0x834A
138:                       sample=*readPTR++; //!rw
00834A  780310     MOV [W0], W6
00834C  9FBFB6     MOV W6, [W15-10]
139:                       
140:                       if(param3>=0x3FFF){     // BIT CONTROL
008348  23FFE2     MOV #0x3FFE, W2
00834E  540F82     SUB W8, W2, [W15]
008350  340004     BRA LE, 0x835A
141:                           sign = sample&0x8000;
008352  97BB3F     MOV [W15-10], W6
142:                           sample=sample&(-1<<(16-shift));
008338  100070     SUBR W0, #0x10, W0
00833A  EB8180     SETM W3
00833C  DD1980     SL W3, W0, W3
00833E  B84861     MUL.UU W9, #1, W0
008340  EB0580     CLR W11
008354  97BB3F     MOV [W15-10], W6
008356  618306     AND W3, W6, W6
008358  9FBFB6     MOV W6, [W15-10]
143:                       }
144:               
145:                       *rewritePTR++=sample; //rw
00835A  97BB3F     MOV [W15-10], W6
00835C  780D06     MOV W6, [W10]
00835E  400062     ADD W0, #0x2, W0
008360  4880E0     ADDC W1, #0x0, W1
008362  450562     ADD W10, #0x2, W10
008364  4D85E0     ADDC W11, #0x0, W11
146:                   }
147:               }
00836C  BE054F     MOV.D [--W15], W10
00836E  BE044F     MOV.D [--W15], W8
008370  FA8000     ULNK
008372  060000     RETURN
148:               
149:               void runLOP(fractional *source, fractional *destination, fractional param1, fractional param2, fractional param3){
0082A6  F80022     PUSH ACCA
0082A8  F80024     PUSH ACCAH
0082AA  F80026     PUSH ACCAU
150:                   volatile register int result asm("A");
151:                   
152:                   result =__builtin_mpy(param1, POT_LOOP, NULL, NULL, 0, NULL, NULL, 0);
0082AC  780282     MOV W2, W5
0082AE  244006     MOV #0x4400, W6
0082B0  C40113     MPY W5*W6, A
153:                   int loop_lim = __builtin_sac(result, 0);
0082B2  CC0002     SAC A, W2
154:                   
155:                   __eds__ fractional *ptrr = history.start_ptr;
0082B4  8116E6     MOV 0x22DC, W6
0082B6  8116F7     MOV 0x22DE, W7
156:                   ptrr+=loop_lim;
0082B8  DE91CF     ASR W2, #15, W3
0082BA  410102     ADD W2, W2, W2
0082BC  498183     ADDC W3, W3, W3
0082BE  D28F82     RLC W2, [W15]
0082C0  D28183     RLC W3, W3
0082C2  780102     MOV W2, W2
0082C4  A1F002     BCLR W2, #15
0082C6  D00006     SL W6, W0
0082C8  D00282     SL W2, W5
0082CA  400105     ADD W0, W5, W2
0082CC  A82042     BSET SR, #1
0082CE  4B8183     ADDC W7, W3, W3
0082D0  A90042     BCLR SR, #0
0082D2  AE2042     BTSS SR, #1
0082D4  A80042     BSET SR, #0
0082D6  D38102     RRC W2, W2
157:                   
158:                   //Run looper Buffer
159:                   if(history.read_ptr>=(ptrr)) {
0082D8  222E40     MOV #0x22E4, W0
0082DA  900290     MOV [W0+2], W5
0082DC  528F83     SUB W5, W3, [W15]
0082DE  390005     BRA NC, 0x82EA
0082E0  3A0002     BRA NZ, 0x82E6
0082E2  110F90     SUBR W2, [W0], [W15]
0082E4  390002     BRA NC, 0x82EA
160:                       history.read_ptr=history.start_ptr;
0082E6  891726     MOV W6, 0x22E4
0082E8  891737     MOV W7, 0x22E6
161:                   }
162:                   if(param3<0x3FFF){
0082EA  23FFE0     MOV #0x3FFE, W0
0082EC  520F80     SUB W4, W0, [W15]
0082EE  3C0005     BRA GT, 0x82FA
163:                       ClipCopy_toeds(STREAMBUF, history.read_ptr, destination);
0082F0  811722     MOV 0x22E4, W2
0082F2  811733     MOV 0x22E6, W3
0082F4  201000     MOV #0x100, W0
0082F6  07FD49     RCALL ClipCopy_toeds
0082F8  370004     BRA 0x8302
164:                   }
165:                   
166:                   else {
167:                       ClipCopy_eds(STREAMBUF, destination, history.read_ptr);
0082FA  811722     MOV 0x22E4, W2
0082FC  811733     MOV 0x22E6, W3
0082FE  201000     MOV #0x100, W0
008300  07FD2B     RCALL ClipCopy_eds
168:                   }
169:                   history.read_ptr+=STREAMBUF;
008302  222E40     MOV #0x22E4, W0
008304  BE0210     MOV.D [W0], W4
008306  202002     MOV #0x200, W2
008308  200003     MOV #0x0, W3
00830A  D00304     SL W4, W6
00830C  D00082     SL W2, W1
00830E  430101     ADD W6, W1, W2
008310  A82042     BSET SR, #1
008312  4A8183     ADDC W5, W3, W3
008314  A90042     BCLR SR, #0
008316  AE2042     BTSS SR, #1
008318  A80042     BSET SR, #0
00831A  D38102     RRC W2, W2
00831C  BE8802     MOV.D W2, [W0]
170:               }
00831E  F90026     POP ACCAU
008320  F90024     POP ACCAH
008322  F90022     POP ACCA
008324  060000     RETURN
171:               
172:               void processAudio(fractional *source, fractional *destination){
00840A  BE9F88     MOV.D W8, [W15++]
00840C  BE0400     MOV.D W0, W8
173:                   volatile register int result1 asm("A");
174:                   
175:                   
176:                   //Run each FX unit
177:                   if(fxUnits[0]==0); else fxFuncPointers[fxUnits[0]](source, source, ctrl.pots[FX_1], ctrl.pots[FX_2], ctrl.pots[FX_3]);
00840E  80B050     MOV fxUnits, W0
008410  E00000     CP0 W0
008412  32000A     BRA Z, 0x8428
008414  D00000     SL W0, W0
008416  222E81     MOV #0x22E8, W1
008418  400001     ADD W0, W1, W0
00841A  780290     MOV [W0], W5
00841C  80B314     MOV 0x1662, W4
00841E  80B2F3     MOV 0x165E, W3
008420  80B2D2     MOV 0x165A, W2
008422  780088     MOV W8, W1
008424  780008     MOV W8, W0
008426  010005     CALL W5
178:                   if(fxUnits[1]==0); else fxFuncPointers[fxUnits[1]](source, source, ctrl.pots[FX_4], ctrl.pots[FX_5], ctrl.pots[FX_6]);
008428  80B060     MOV 0x160C, W0
00842A  E00000     CP0 W0
00842C  32000A     BRA Z, 0x8442
00842E  D00000     SL W0, W0
008430  222E81     MOV #0x22E8, W1
008432  400001     ADD W0, W1, W0
008434  780290     MOV [W0], W5
008436  80B324     MOV 0x1664, W4
008438  80B303     MOV 0x1660, W3
00843A  80B2E2     MOV 0x165C, W2
00843C  780088     MOV W8, W1
00843E  780008     MOV W8, W0
008440  010005     CALL W5
179:                  
180:                   if(kick.playing==TRUE){
008442  222B80     MOV #0x22B8, W0
008444  EBC080     SETM.B W1
008446  10CF90     SUBR.B W1, [W0], [W15]
008448  3A001F     BRA NZ, 0x8488
181:                       ClipCopy_psv(STREAMBUF, psvbuf, kick.read_ptr);
00844A  811602     MOV 0x22C0, W2
00844C  811613     MOV 0x22C2, W3
00844E  220A41     MOV #0x20A4, W1
008450  201000     MOV #0x100, W0
008452  07FC67     RCALL ClipCopy_psv
182:                          
183:                       //ClipCopy_psv(STREAMBUF, source, sine.read_ptr);
184:                       kick.block_index++;
008454  222BA1     MOV #0x22BA, W1
008456  E80011     INC [W1], W0
008458  780880     MOV W0, [W1]
185:                       if(kick.block_index==kick.blocks) {
00845A  5080E4     SUB W1, #0x4, W1
00845C  500F91     SUB W0, [W1], [W15]
00845E  3A0009     BRA NZ, 0x8472
186:                           kick.read_ptr=kick.start_ptr;
008460  8115E4     MOV 0x22BC, W4
008462  8115F5     MOV 0x22BE, W5
008464  891604     MOV W4, 0x22C0
008466  891615     MOV W5, 0x22C2
187:                           kick.block_index=0;
008468  EB0000     CLR W0
00846A  8915D0     MOV W0, 0x22BA
188:                           kick.playing=FALSE;
00846C  E88081     INC2 W1, W1
00846E  784880     MOV.B W0, [W1]
008470  370006     BRA 0x847E
189:                       }
190:                       else kick.read_ptr+=STREAMBUF;
008472  222C00     MOV #0x22C0, W0
008474  BE0110     MOV.D [W0], W2
008476  BE0202     MOV.D W2, W4
008478  B02004     ADD #0x200, W4
00847A  B08005     ADDC #0x0, W5
00847C  BE8804     MOV.D W4, [W0]
191:                               
192:                       //VectorScale(STREAMBUF, psvbuf, psvbuf, Q15(0.9));
193:                       VectorAdd(STREAMBUF, source, source, psvbuf);
00847E  220A43     MOV #0x20A4, W3
008480  780108     MOV W8, W2
008482  780088     MOV W8, W1
008484  201000     MOV #0x100, W0
008486  07BFF7     RCALL _VectorAdd
194:                               
195:                       //result1 =__builtin_mpy(sample,Q15(0.85), NULL, NULL, 0, NULL, NULL, 0);
196:                       //result1 = __builtin_add(result1,kick[kick_ptr++],0);
197:                       //sample=__builtin_sac(result1, 0);
198:                   }
199:                   /*
200:                   else if (pad[0]==1&&kick_playing==TRUE&&kick_ptr==kick_max){
201:                       kick_playing=FALSE;
202:                       kick_ptr=0;
203:                   }
204:               
205:                   if(snare.playing==TRUE){
206:                       result1 =__builtin_mpy(sample,Q15(0.85), NULL, NULL, 0, NULL, NULL, 0);
207:               
208:                       result1 = __builtin_add(result1,snare[snare_ptr++],0);
209:                       sample=__builtin_sac(result1, 0);
210:               
211:                       snare_playing=FALSE;
212:                   }
213:                   */
214:               
215:                   if (stat.TEST_SIN==TRUE){
008488  223090     MOV #0x2309, W0
00848A  EBC280     SETM.B W5
00848C  12CF90     SUBR.B W5, [W0], [W15]
00848E  3A0018     BRA NZ, 0x84C0
216:                       ClipCopy_psv(STREAMBUF, source, sine.read_ptr);
008490  811582     MOV 0x22B0, W2
008492  811593     MOV 0x22B2, W3
008494  780088     MOV W8, W1
008496  201000     MOV #0x100, W0
008498  07FC44     RCALL ClipCopy_psv
217:                       sine.block_index++;
00849A  222AA1     MOV #0x22AA, W1
00849C  E80011     INC [W1], W0
00849E  780880     MOV W0, [W1]
218:                       if(sine.block_index==sine.blocks) {
0084A0  5080E4     SUB W1, #0x4, W1
0084A2  500F91     SUB W0, [W1], [W15]
0084A4  3A0007     BRA NZ, 0x84B4
219:                           sine.read_ptr=sine.start_ptr;
0084A6  811560     MOV 0x22AC, W0
0084A8  811571     MOV 0x22AE, W1
0084AA  891580     MOV W0, 0x22B0
0084AC  891591     MOV W1, 0x22B2
220:                           sine.block_index=0;
0084AE  222AA0     MOV #0x22AA, W0
0084B0  EB0800     CLR [W0]
0084B2  370006     BRA 0x84C0
221:                       }
222:                       else sine.read_ptr+=STREAMBUF;
0084B4  222B00     MOV #0x22B0, W0
0084B6  BE0110     MOV.D [W0], W2
0084B8  BE0202     MOV.D W2, W4
0084BA  B02004     ADD #0x200, W4
0084BC  B08005     ADDC #0x0, W5
0084BE  BE8804     MOV.D W4, [W0]
223:                   }
224:                       
225:                   VectorCopy(STREAMBUF, destination, source);     //copy from ping to pong buffer
0084C0  780108     MOV W8, W2
0084C2  780089     MOV W9, W1
0084C4  201000     MOV #0x100, W0
0084C6  07BFE9     RCALL _VectorCopy
226:                   
227:                   //VOLUME CONTROL
228:                   //if(pots[POT_VOLUME]<=0x000F); 
229:                   if(ctrl.pots[POT_VOLUME]>=0x7FF7);
0084C8  80B343     MOV 0x1668, W3
0084CA  27FF60     MOV #0x7FF6, W0
0084CC  518F80     SUB W3, W0, [W15]
0084CE  3C0004     BRA GT, 0x84D8
230:                   else{
231:                       VectorScale(STREAMBUF, destination, destination, ctrl.pots[POT_VOLUME]);
0084D0  780109     MOV W9, W2
0084D2  780089     MOV W9, W1
0084D4  201000     MOV #0x100, W0
0084D6  07BFEA     RCALL _VectorScale
232:                   }
233:               }
0084D8  BE044F     MOV.D [--W15], W8
0084DA  060000     RETURN
